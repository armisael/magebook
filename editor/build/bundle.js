(function () {
    'use strict';

    function noop() { }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function self$1(fn) {
        return function (event) {
            // @ts-ignore
            if (event.target === this)
                fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        select.selectedIndex = -1; // no option should be selected
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }
    function update_await_block_branch(info, ctx, dirty) {
        const child_ctx = ctx.slice();
        const { resolved } = info;
        if (info.current === info.then) {
            child_ctx[info.value] = resolved;
        }
        if (info.current === info.catch) {
            child_ctx[info.error] = resolved;
        }
        info.block.p(child_ctx, dirty);
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.3' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var isMergeableObject = function isMergeableObject(value) {
    	return isNonNullObject(value)
    		&& !isSpecial(value)
    };

    function isNonNullObject(value) {
    	return !!value && typeof value === 'object'
    }

    function isSpecial(value) {
    	var stringValue = Object.prototype.toString.call(value);

    	return stringValue === '[object RegExp]'
    		|| stringValue === '[object Date]'
    		|| isReactElement(value)
    }

    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

    function isReactElement(value) {
    	return value.$$typeof === REACT_ELEMENT_TYPE
    }

    function emptyTarget(val) {
    	return Array.isArray(val) ? [] : {}
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
    	return (options.clone !== false && options.isMergeableObject(value))
    		? deepmerge(emptyTarget(value), value, options)
    		: value
    }

    function defaultArrayMerge(target, source, options) {
    	return target.concat(source).map(function(element) {
    		return cloneUnlessOtherwiseSpecified(element, options)
    	})
    }

    function getMergeFunction(key, options) {
    	if (!options.customMerge) {
    		return deepmerge
    	}
    	var customMerge = options.customMerge(key);
    	return typeof customMerge === 'function' ? customMerge : deepmerge
    }

    function getEnumerableOwnPropertySymbols(target) {
    	return Object.getOwnPropertySymbols
    		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    			return target.propertyIsEnumerable(symbol)
    		})
    		: []
    }

    function getKeys(target) {
    	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
    }

    function propertyIsOnObject(object, property) {
    	try {
    		return property in object
    	} catch(_) {
    		return false
    	}
    }

    // Protects from prototype poisoning and unexpected merging up the prototype chain.
    function propertyIsUnsafe(target, key) {
    	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
    		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
    			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
    }

    function mergeObject(target, source, options) {
    	var destination = {};
    	if (options.isMergeableObject(target)) {
    		getKeys(target).forEach(function(key) {
    			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    		});
    	}
    	getKeys(source).forEach(function(key) {
    		if (propertyIsUnsafe(target, key)) {
    			return
    		}

    		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
    			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    		} else {
    			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    		}
    	});
    	return destination
    }

    function deepmerge(target, source, options) {
    	options = options || {};
    	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    	// implementations can use it. The caller may not replace it.
    	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

    	var sourceIsArray = Array.isArray(source);
    	var targetIsArray = Array.isArray(target);
    	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    	if (!sourceAndTargetTypesMatch) {
    		return cloneUnlessOtherwiseSpecified(source, options)
    	} else if (sourceIsArray) {
    		return options.arrayMerge(target, source, options)
    	} else {
    		return mergeObject(target, source, options)
    	}
    }

    deepmerge.all = function deepmergeAll(array, options) {
    	if (!Array.isArray(array)) {
    		throw new Error('first argument should be an array')
    	}

    	return array.reduce(function(prev, next) {
    		return deepmerge(prev, next, options)
    	}, {})
    };

    var deepmerge_1 = deepmerge;

    var cjs = deepmerge_1;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var ErrorKind;
    (function (ErrorKind) {
        /** Argument is unclosed (e.g. `{0`) */
        ErrorKind[ErrorKind["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
        /** Argument is empty (e.g. `{}`). */
        ErrorKind[ErrorKind["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
        /** Argument is malformed (e.g. `{foo!}``) */
        ErrorKind[ErrorKind["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
        /** Expect an argument type (e.g. `{foo,}`) */
        ErrorKind[ErrorKind["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
        /** Unsupported argument type (e.g. `{foo,foo}`) */
        ErrorKind[ErrorKind["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
        /** Expect an argument style (e.g. `{foo, number, }`) */
        ErrorKind[ErrorKind["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
        /** The number skeleton is invalid. */
        ErrorKind[ErrorKind["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
        /** The date time skeleton is invalid. */
        ErrorKind[ErrorKind["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
        /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */
        ErrorKind[ErrorKind["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
        /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */
        ErrorKind[ErrorKind["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
        /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */
        ErrorKind[ErrorKind["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
        /** Missing select argument options (e.g. `{foo, select}`) */
        ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
        /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */
        ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
        /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */
        ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
        /** Expecting a selector in `select` argument (e.g `{foo, select}`) */
        ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
        /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */
        ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
        /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */
        ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
        /**
         * Expecting a message fragment after the `plural` or `selectordinal` selector
         * (e.g. `{foo, plural, one}`)
         */
        ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
        /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */
        ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
        /**
         * Duplicate selectors in `plural` or `selectordinal` argument.
         * (e.g. {foo, plural, one {#} one {#}})
         */
        ErrorKind[ErrorKind["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
        /** Duplicate selectors in `select` argument.
         * (e.g. {foo, select, apple {apple} apple {apple}})
         */
        ErrorKind[ErrorKind["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
        /** Plural or select argument option must have `other` clause. */
        ErrorKind[ErrorKind["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
        /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */
        ErrorKind[ErrorKind["INVALID_TAG"] = 23] = "INVALID_TAG";
        /** The tag name is invalid. (e.g. `<123>foo</123>`) */
        ErrorKind[ErrorKind["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
        /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */
        ErrorKind[ErrorKind["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
        /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */
        ErrorKind[ErrorKind["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
    })(ErrorKind || (ErrorKind = {}));

    var TYPE;
    (function (TYPE) {
        /**
         * Raw text
         */
        TYPE[TYPE["literal"] = 0] = "literal";
        /**
         * Variable w/o any format, e.g `var` in `this is a {var}`
         */
        TYPE[TYPE["argument"] = 1] = "argument";
        /**
         * Variable w/ number format
         */
        TYPE[TYPE["number"] = 2] = "number";
        /**
         * Variable w/ date format
         */
        TYPE[TYPE["date"] = 3] = "date";
        /**
         * Variable w/ time format
         */
        TYPE[TYPE["time"] = 4] = "time";
        /**
         * Variable w/ select format
         */
        TYPE[TYPE["select"] = 5] = "select";
        /**
         * Variable w/ plural format
         */
        TYPE[TYPE["plural"] = 6] = "plural";
        /**
         * Only possible within plural argument.
         * This is the `#` symbol that will be substituted with the count.
         */
        TYPE[TYPE["pound"] = 7] = "pound";
        /**
         * XML-like tag
         */
        TYPE[TYPE["tag"] = 8] = "tag";
    })(TYPE || (TYPE = {}));
    var SKELETON_TYPE;
    (function (SKELETON_TYPE) {
        SKELETON_TYPE[SKELETON_TYPE["number"] = 0] = "number";
        SKELETON_TYPE[SKELETON_TYPE["dateTime"] = 1] = "dateTime";
    })(SKELETON_TYPE || (SKELETON_TYPE = {}));
    /**
     * Type Guards
     */
    function isLiteralElement(el) {
        return el.type === TYPE.literal;
    }
    function isArgumentElement(el) {
        return el.type === TYPE.argument;
    }
    function isNumberElement(el) {
        return el.type === TYPE.number;
    }
    function isDateElement(el) {
        return el.type === TYPE.date;
    }
    function isTimeElement(el) {
        return el.type === TYPE.time;
    }
    function isSelectElement(el) {
        return el.type === TYPE.select;
    }
    function isPluralElement(el) {
        return el.type === TYPE.plural;
    }
    function isPoundElement(el) {
        return el.type === TYPE.pound;
    }
    function isTagElement(el) {
        return el.type === TYPE.tag;
    }
    function isNumberSkeleton(el) {
        return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);
    }
    function isDateTimeSkeleton(el) {
        return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);
    }

    // @generated from regex-gen.ts
    var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

    /**
     * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
     * with some tweaks
     */
    var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
    /**
     * Parse Date time skeleton into Intl.DateTimeFormatOptions
     * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * @public
     * @param skeleton skeleton string
     */
    function parseDateTimeSkeleton(skeleton) {
        var result = {};
        skeleton.replace(DATE_TIME_REGEX, function (match) {
            var len = match.length;
            switch (match[0]) {
                // Era
                case 'G':
                    result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                    break;
                // Year
                case 'y':
                    result.year = len === 2 ? '2-digit' : 'numeric';
                    break;
                case 'Y':
                case 'u':
                case 'U':
                case 'r':
                    throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
                // Quarter
                case 'q':
                case 'Q':
                    throw new RangeError('`q/Q` (quarter) patterns are not supported');
                // Month
                case 'M':
                case 'L':
                    result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
                    break;
                // Week
                case 'w':
                case 'W':
                    throw new RangeError('`w/W` (week) patterns are not supported');
                case 'd':
                    result.day = ['numeric', '2-digit'][len - 1];
                    break;
                case 'D':
                case 'F':
                case 'g':
                    throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
                // Weekday
                case 'E':
                    result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
                    break;
                case 'e':
                    if (len < 4) {
                        throw new RangeError('`e..eee` (weekday) patterns are not supported');
                    }
                    result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                    break;
                case 'c':
                    if (len < 4) {
                        throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                    }
                    result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                    break;
                // Period
                case 'a': // AM, PM
                    result.hour12 = true;
                    break;
                case 'b': // am, pm, noon, midnight
                case 'B': // flexible day periods
                    throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
                // Hour
                case 'h':
                    result.hourCycle = 'h12';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'H':
                    result.hourCycle = 'h23';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'K':
                    result.hourCycle = 'h11';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'k':
                    result.hourCycle = 'h24';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'j':
                case 'J':
                case 'C':
                    throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
                // Minute
                case 'm':
                    result.minute = ['numeric', '2-digit'][len - 1];
                    break;
                // Second
                case 's':
                    result.second = ['numeric', '2-digit'][len - 1];
                    break;
                case 'S':
                case 'A':
                    throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');
                // Zone
                case 'z': // 1..3, 4: specific non-location format
                    result.timeZoneName = len < 4 ? 'short' : 'long';
                    break;
                case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
                case 'O': // 1, 4: miliseconds in day short, long
                case 'v': // 1, 4: generic non-location format
                case 'V': // 1, 2, 3, 4: time zone ID or city
                case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
                case 'x': // 1, 2, 3, 4: The ISO8601 varios formats
                    throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');
            }
            return '';
        });
        return result;
    }

    // @generated from regex-gen.ts
    var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

    function parseNumberSkeletonFromString(skeleton) {
        if (skeleton.length === 0) {
            throw new Error('Number skeleton cannot be empty');
        }
        // Parse the skeleton
        var stringTokens = skeleton
            .split(WHITE_SPACE_REGEX)
            .filter(function (x) { return x.length > 0; });
        var tokens = [];
        for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
            var stringToken = stringTokens_1[_i];
            var stemAndOptions = stringToken.split('/');
            if (stemAndOptions.length === 0) {
                throw new Error('Invalid number skeleton');
            }
            var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
            for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
                var option = options_1[_a];
                if (option.length === 0) {
                    throw new Error('Invalid number skeleton');
                }
            }
            tokens.push({ stem: stem, options: options });
        }
        return tokens;
    }
    function icuUnitToEcma(unit) {
        return unit.replace(/^(.*?)-/, '');
    }
    var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
    var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
    var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
    var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
    function parseSignificantPrecision(str) {
        var result = {};
        if (str[str.length - 1] === 'r') {
            result.roundingPriority = 'morePrecision';
        }
        else if (str[str.length - 1] === 's') {
            result.roundingPriority = 'lessPrecision';
        }
        str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
            // @@@ case
            if (typeof g2 !== 'string') {
                result.minimumSignificantDigits = g1.length;
                result.maximumSignificantDigits = g1.length;
            }
            // @@@+ case
            else if (g2 === '+') {
                result.minimumSignificantDigits = g1.length;
            }
            // .### case
            else if (g1[0] === '#') {
                result.maximumSignificantDigits = g1.length;
            }
            // .@@## or .@@@ case
            else {
                result.minimumSignificantDigits = g1.length;
                result.maximumSignificantDigits =
                    g1.length + (typeof g2 === 'string' ? g2.length : 0);
            }
            return '';
        });
        return result;
    }
    function parseSign(str) {
        switch (str) {
            case 'sign-auto':
                return {
                    signDisplay: 'auto',
                };
            case 'sign-accounting':
            case '()':
                return {
                    currencySign: 'accounting',
                };
            case 'sign-always':
            case '+!':
                return {
                    signDisplay: 'always',
                };
            case 'sign-accounting-always':
            case '()!':
                return {
                    signDisplay: 'always',
                    currencySign: 'accounting',
                };
            case 'sign-except-zero':
            case '+?':
                return {
                    signDisplay: 'exceptZero',
                };
            case 'sign-accounting-except-zero':
            case '()?':
                return {
                    signDisplay: 'exceptZero',
                    currencySign: 'accounting',
                };
            case 'sign-never':
            case '+_':
                return {
                    signDisplay: 'never',
                };
        }
    }
    function parseConciseScientificAndEngineeringStem(stem) {
        // Engineering
        var result;
        if (stem[0] === 'E' && stem[1] === 'E') {
            result = {
                notation: 'engineering',
            };
            stem = stem.slice(2);
        }
        else if (stem[0] === 'E') {
            result = {
                notation: 'scientific',
            };
            stem = stem.slice(1);
        }
        if (result) {
            var signDisplay = stem.slice(0, 2);
            if (signDisplay === '+!') {
                result.signDisplay = 'always';
                stem = stem.slice(2);
            }
            else if (signDisplay === '+?') {
                result.signDisplay = 'exceptZero';
                stem = stem.slice(2);
            }
            if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
                throw new Error('Malformed concise eng/scientific notation');
            }
            result.minimumIntegerDigits = stem.length;
        }
        return result;
    }
    function parseNotationOptions(opt) {
        var result = {};
        var signOpts = parseSign(opt);
        if (signOpts) {
            return signOpts;
        }
        return result;
    }
    /**
     * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
     */
    function parseNumberSkeleton(tokens) {
        var result = {};
        for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
            var token = tokens_1[_i];
            switch (token.stem) {
                case 'percent':
                case '%':
                    result.style = 'percent';
                    continue;
                case '%x100':
                    result.style = 'percent';
                    result.scale = 100;
                    continue;
                case 'currency':
                    result.style = 'currency';
                    result.currency = token.options[0];
                    continue;
                case 'group-off':
                case ',_':
                    result.useGrouping = false;
                    continue;
                case 'precision-integer':
                case '.':
                    result.maximumFractionDigits = 0;
                    continue;
                case 'measure-unit':
                case 'unit':
                    result.style = 'unit';
                    result.unit = icuUnitToEcma(token.options[0]);
                    continue;
                case 'compact-short':
                case 'K':
                    result.notation = 'compact';
                    result.compactDisplay = 'short';
                    continue;
                case 'compact-long':
                case 'KK':
                    result.notation = 'compact';
                    result.compactDisplay = 'long';
                    continue;
                case 'scientific':
                    result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));
                    continue;
                case 'engineering':
                    result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));
                    continue;
                case 'notation-simple':
                    result.notation = 'standard';
                    continue;
                // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
                case 'unit-width-narrow':
                    result.currencyDisplay = 'narrowSymbol';
                    result.unitDisplay = 'narrow';
                    continue;
                case 'unit-width-short':
                    result.currencyDisplay = 'code';
                    result.unitDisplay = 'short';
                    continue;
                case 'unit-width-full-name':
                    result.currencyDisplay = 'name';
                    result.unitDisplay = 'long';
                    continue;
                case 'unit-width-iso-code':
                    result.currencyDisplay = 'symbol';
                    continue;
                case 'scale':
                    result.scale = parseFloat(token.options[0]);
                    continue;
                // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
                case 'integer-width':
                    if (token.options.length > 1) {
                        throw new RangeError('integer-width stems only accept a single optional option');
                    }
                    token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {
                        if (g1) {
                            result.minimumIntegerDigits = g2.length;
                        }
                        else if (g3 && g4) {
                            throw new Error('We currently do not support maximum integer digits');
                        }
                        else if (g5) {
                            throw new Error('We currently do not support exact integer digits');
                        }
                        return '';
                    });
                    continue;
            }
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
            if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
                result.minimumIntegerDigits = token.stem.length;
                continue;
            }
            if (FRACTION_PRECISION_REGEX.test(token.stem)) {
                // Precision
                // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
                // precision-integer case
                if (token.options.length > 1) {
                    throw new RangeError('Fraction-precision stems only accept a single optional option');
                }
                token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {
                    // .000* case (before ICU67 it was .000+)
                    if (g2 === '*') {
                        result.minimumFractionDigits = g1.length;
                    }
                    // .### case
                    else if (g3 && g3[0] === '#') {
                        result.maximumFractionDigits = g3.length;
                    }
                    // .00## case
                    else if (g4 && g5) {
                        result.minimumFractionDigits = g4.length;
                        result.maximumFractionDigits = g4.length + g5.length;
                    }
                    else {
                        result.minimumFractionDigits = g1.length;
                        result.maximumFractionDigits = g1.length;
                    }
                    return '';
                });
                var opt = token.options[0];
                // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display
                if (opt === 'w') {
                    result = __assign(__assign({}, result), { trailingZeroDisplay: 'stripIfInteger' });
                }
                else if (opt) {
                    result = __assign(__assign({}, result), parseSignificantPrecision(opt));
                }
                continue;
            }
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
            if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
                result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));
                continue;
            }
            var signOpts = parseSign(token.stem);
            if (signOpts) {
                result = __assign(__assign({}, result), signOpts);
            }
            var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
            if (conciseScientificAndEngineeringOpts) {
                result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
            }
        }
        return result;
    }

    var _a;
    var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
    var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
    function createLocation(start, end) {
        return { start: start, end: end };
    }
    // #region Ponyfills
    // Consolidate these variables up top for easier toggling during debugging
    var hasNativeStartsWith = !!String.prototype.startsWith;
    var hasNativeFromCodePoint = !!String.fromCodePoint;
    var hasNativeFromEntries = !!Object.fromEntries;
    var hasNativeCodePointAt = !!String.prototype.codePointAt;
    var hasTrimStart = !!String.prototype.trimStart;
    var hasTrimEnd = !!String.prototype.trimEnd;
    var hasNativeIsSafeInteger = !!Number.isSafeInteger;
    var isSafeInteger = hasNativeIsSafeInteger
        ? Number.isSafeInteger
        : function (n) {
            return (typeof n === 'number' &&
                isFinite(n) &&
                Math.floor(n) === n &&
                Math.abs(n) <= 0x1fffffffffffff);
        };
    // IE11 does not support y and u.
    var REGEX_SUPPORTS_U_AND_Y = true;
    try {
        var re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
        /**
         * legacy Edge or Xbox One browser
         * Unicode flag support: supported
         * Pattern_Syntax support: not supported
         * See https://github.com/formatjs/formatjs/issues/2822
         */
        REGEX_SUPPORTS_U_AND_Y = ((_a = re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';
    }
    catch (_) {
        REGEX_SUPPORTS_U_AND_Y = false;
    }
    var startsWith = hasNativeStartsWith
        ? // Native
            function startsWith(s, search, position) {
                return s.startsWith(search, position);
            }
        : // For IE11
            function startsWith(s, search, position) {
                return s.slice(position, position + search.length) === search;
            };
    var fromCodePoint = hasNativeFromCodePoint
        ? String.fromCodePoint
        : // IE11
            function fromCodePoint() {
                var codePoints = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    codePoints[_i] = arguments[_i];
                }
                var elements = '';
                var length = codePoints.length;
                var i = 0;
                var code;
                while (length > i) {
                    code = codePoints[i++];
                    if (code > 0x10ffff)
                        throw RangeError(code + ' is not a valid code point');
                    elements +=
                        code < 0x10000
                            ? String.fromCharCode(code)
                            : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, (code % 0x400) + 0xdc00);
                }
                return elements;
            };
    var fromEntries = 
    // native
    hasNativeFromEntries
        ? Object.fromEntries
        : // Ponyfill
            function fromEntries(entries) {
                var obj = {};
                for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                    var _a = entries_1[_i], k = _a[0], v = _a[1];
                    obj[k] = v;
                }
                return obj;
            };
    var codePointAt = hasNativeCodePointAt
        ? // Native
            function codePointAt(s, index) {
                return s.codePointAt(index);
            }
        : // IE 11
            function codePointAt(s, index) {
                var size = s.length;
                if (index < 0 || index >= size) {
                    return undefined;
                }
                var first = s.charCodeAt(index);
                var second;
                return first < 0xd800 ||
                    first > 0xdbff ||
                    index + 1 === size ||
                    (second = s.charCodeAt(index + 1)) < 0xdc00 ||
                    second > 0xdfff
                    ? first
                    : ((first - 0xd800) << 10) + (second - 0xdc00) + 0x10000;
            };
    var trimStart = hasTrimStart
        ? // Native
            function trimStart(s) {
                return s.trimStart();
            }
        : // Ponyfill
            function trimStart(s) {
                return s.replace(SPACE_SEPARATOR_START_REGEX, '');
            };
    var trimEnd = hasTrimEnd
        ? // Native
            function trimEnd(s) {
                return s.trimEnd();
            }
        : // Ponyfill
            function trimEnd(s) {
                return s.replace(SPACE_SEPARATOR_END_REGEX, '');
            };
    // Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.
    function RE(s, flag) {
        return new RegExp(s, flag);
    }
    // #endregion
    var matchIdentifierAtIndex;
    if (REGEX_SUPPORTS_U_AND_Y) {
        // Native
        var IDENTIFIER_PREFIX_RE_1 = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
        matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
            var _a;
            IDENTIFIER_PREFIX_RE_1.lastIndex = index;
            var match = IDENTIFIER_PREFIX_RE_1.exec(s);
            return (_a = match[1]) !== null && _a !== void 0 ? _a : '';
        };
    }
    else {
        // IE11
        matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
            var match = [];
            while (true) {
                var c = codePointAt(s, index);
                if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {
                    break;
                }
                match.push(c);
                index += c >= 0x10000 ? 2 : 1;
            }
            return fromCodePoint.apply(void 0, match);
        };
    }
    var Parser = /** @class */ (function () {
        function Parser(message, options) {
            if (options === void 0) { options = {}; }
            this.message = message;
            this.position = { offset: 0, line: 1, column: 1 };
            this.ignoreTag = !!options.ignoreTag;
            this.requiresOtherClause = !!options.requiresOtherClause;
            this.shouldParseSkeletons = !!options.shouldParseSkeletons;
        }
        Parser.prototype.parse = function () {
            if (this.offset() !== 0) {
                throw Error('parser can only be used once');
            }
            return this.parseMessage(0, '', false);
        };
        Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {
            var elements = [];
            while (!this.isEOF()) {
                var char = this.char();
                if (char === 123 /* `{` */) {
                    var result = this.parseArgument(nestingLevel, expectingCloseTag);
                    if (result.err) {
                        return result;
                    }
                    elements.push(result.val);
                }
                else if (char === 125 /* `}` */ && nestingLevel > 0) {
                    break;
                }
                else if (char === 35 /* `#` */ &&
                    (parentArgType === 'plural' || parentArgType === 'selectordinal')) {
                    var position = this.clonePosition();
                    this.bump();
                    elements.push({
                        type: TYPE.pound,
                        location: createLocation(position, this.clonePosition()),
                    });
                }
                else if (char === 60 /* `<` */ &&
                    !this.ignoreTag &&
                    this.peek() === 47 // char code for '/'
                ) {
                    if (expectingCloseTag) {
                        break;
                    }
                    else {
                        return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
                    }
                }
                else if (char === 60 /* `<` */ &&
                    !this.ignoreTag &&
                    _isAlpha(this.peek() || 0)) {
                    var result = this.parseTag(nestingLevel, parentArgType);
                    if (result.err) {
                        return result;
                    }
                    elements.push(result.val);
                }
                else {
                    var result = this.parseLiteral(nestingLevel, parentArgType);
                    if (result.err) {
                        return result;
                    }
                    elements.push(result.val);
                }
            }
            return { val: elements, err: null };
        };
        /**
         * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
         * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
         * are accepted:
         *
         * ```
         * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
         * tagName ::= [a-z] (PENChar)*
         * PENChar ::=
         *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
         *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
         *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
         * ```
         *
         * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
         * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
         * since other tag-based engines like React allow it
         */
        Parser.prototype.parseTag = function (nestingLevel, parentArgType) {
            var startPosition = this.clonePosition();
            this.bump(); // `<`
            var tagName = this.parseTagName();
            this.bumpSpace();
            if (this.bumpIf('/>')) {
                // Self closing tag
                return {
                    val: {
                        type: TYPE.literal,
                        value: "<".concat(tagName, "/>"),
                        location: createLocation(startPosition, this.clonePosition()),
                    },
                    err: null,
                };
            }
            else if (this.bumpIf('>')) {
                var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
                if (childrenResult.err) {
                    return childrenResult;
                }
                var children = childrenResult.val;
                // Expecting a close tag
                var endTagStartPosition = this.clonePosition();
                if (this.bumpIf('</')) {
                    if (this.isEOF() || !_isAlpha(this.char())) {
                        return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                    }
                    var closingTagNameStartPosition = this.clonePosition();
                    var closingTagName = this.parseTagName();
                    if (tagName !== closingTagName) {
                        return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
                    }
                    this.bumpSpace();
                    if (!this.bumpIf('>')) {
                        return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
                    }
                    return {
                        val: {
                            type: TYPE.tag,
                            value: tagName,
                            children: children,
                            location: createLocation(startPosition, this.clonePosition()),
                        },
                        err: null,
                    };
                }
                else {
                    return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
                }
            }
            else {
                return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
            }
        };
        /**
         * This method assumes that the caller has peeked ahead for the first tag character.
         */
        Parser.prototype.parseTagName = function () {
            var startOffset = this.offset();
            this.bump(); // the first tag name character
            while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
                this.bump();
            }
            return this.message.slice(startOffset, this.offset());
        };
        Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {
            var start = this.clonePosition();
            var value = '';
            while (true) {
                var parseQuoteResult = this.tryParseQuote(parentArgType);
                if (parseQuoteResult) {
                    value += parseQuoteResult;
                    continue;
                }
                var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
                if (parseUnquotedResult) {
                    value += parseUnquotedResult;
                    continue;
                }
                var parseLeftAngleResult = this.tryParseLeftAngleBracket();
                if (parseLeftAngleResult) {
                    value += parseLeftAngleResult;
                    continue;
                }
                break;
            }
            var location = createLocation(start, this.clonePosition());
            return {
                val: { type: TYPE.literal, value: value, location: location },
                err: null,
            };
        };
        Parser.prototype.tryParseLeftAngleBracket = function () {
            if (!this.isEOF() &&
                this.char() === 60 /* `<` */ &&
                (this.ignoreTag ||
                    // If at the opening tag or closing tag position, bail.
                    !_isAlphaOrSlash(this.peek() || 0))) {
                this.bump(); // `<`
                return '<';
            }
            return null;
        };
        /**
         * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
         * a character that requires quoting (that is, "only where needed"), and works the same in
         * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
         */
        Parser.prototype.tryParseQuote = function (parentArgType) {
            if (this.isEOF() || this.char() !== 39 /* `'` */) {
                return null;
            }
            // Parse escaped char following the apostrophe, or early return if there is no escaped char.
            // Check if is valid escaped character
            switch (this.peek()) {
                case 39 /* `'` */:
                    // double quote, should return as a single quote.
                    this.bump();
                    this.bump();
                    return "'";
                // '{', '<', '>', '}'
                case 123:
                case 60:
                case 62:
                case 125:
                    break;
                case 35: // '#'
                    if (parentArgType === 'plural' || parentArgType === 'selectordinal') {
                        break;
                    }
                    return null;
                default:
                    return null;
            }
            this.bump(); // apostrophe
            var codePoints = [this.char()]; // escaped char
            this.bump();
            // read chars until the optional closing apostrophe is found
            while (!this.isEOF()) {
                var ch = this.char();
                if (ch === 39 /* `'` */) {
                    if (this.peek() === 39 /* `'` */) {
                        codePoints.push(39);
                        // Bump one more time because we need to skip 2 characters.
                        this.bump();
                    }
                    else {
                        // Optional closing apostrophe.
                        this.bump();
                        break;
                    }
                }
                else {
                    codePoints.push(ch);
                }
                this.bump();
            }
            return fromCodePoint.apply(void 0, codePoints);
        };
        Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {
            if (this.isEOF()) {
                return null;
            }
            var ch = this.char();
            if (ch === 60 /* `<` */ ||
                ch === 123 /* `{` */ ||
                (ch === 35 /* `#` */ &&
                    (parentArgType === 'plural' || parentArgType === 'selectordinal')) ||
                (ch === 125 /* `}` */ && nestingLevel > 0)) {
                return null;
            }
            else {
                this.bump();
                return fromCodePoint(ch);
            }
        };
        Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {
            var openingBracePosition = this.clonePosition();
            this.bump(); // `{`
            this.bumpSpace();
            if (this.isEOF()) {
                return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            if (this.char() === 125 /* `}` */) {
                this.bump();
                return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
            }
            // argument name
            var value = this.parseIdentifierIfPossible().value;
            if (!value) {
                return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
            }
            this.bumpSpace();
            if (this.isEOF()) {
                return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            switch (this.char()) {
                // Simple argument: `{name}`
                case 125 /* `}` */: {
                    this.bump(); // `}`
                    return {
                        val: {
                            type: TYPE.argument,
                            // value does not include the opening and closing braces.
                            value: value,
                            location: createLocation(openingBracePosition, this.clonePosition()),
                        },
                        err: null,
                    };
                }
                // Argument with options: `{name, format, ...}`
                case 44 /* `,` */: {
                    this.bump(); // `,`
                    this.bumpSpace();
                    if (this.isEOF()) {
                        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
                    }
                    return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
                }
                default:
                    return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
            }
        };
        /**
         * Advance the parser until the end of the identifier, if it is currently on
         * an identifier character. Return an empty string otherwise.
         */
        Parser.prototype.parseIdentifierIfPossible = function () {
            var startingPosition = this.clonePosition();
            var startOffset = this.offset();
            var value = matchIdentifierAtIndex(this.message, startOffset);
            var endOffset = startOffset + value.length;
            this.bumpTo(endOffset);
            var endPosition = this.clonePosition();
            var location = createLocation(startingPosition, endPosition);
            return { value: value, location: location };
        };
        Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {
            var _a;
            // Parse this range:
            // {name, type, style}
            //        ^---^
            var typeStartPosition = this.clonePosition();
            var argType = this.parseIdentifierIfPossible().value;
            var typeEndPosition = this.clonePosition();
            switch (argType) {
                case '':
                    // Expecting a style string number, date, time, plural, selectordinal, or select.
                    return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
                case 'number':
                case 'date':
                case 'time': {
                    // Parse this range:
                    // {name, number, style}
                    //              ^-------^
                    this.bumpSpace();
                    var styleAndLocation = null;
                    if (this.bumpIf(',')) {
                        this.bumpSpace();
                        var styleStartPosition = this.clonePosition();
                        var result = this.parseSimpleArgStyleIfPossible();
                        if (result.err) {
                            return result;
                        }
                        var style = trimEnd(result.val);
                        if (style.length === 0) {
                            return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
                        }
                        var styleLocation = createLocation(styleStartPosition, this.clonePosition());
                        styleAndLocation = { style: style, styleLocation: styleLocation };
                    }
                    var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                    if (argCloseResult.err) {
                        return argCloseResult;
                    }
                    var location_1 = createLocation(openingBracePosition, this.clonePosition());
                    // Extract style or skeleton
                    if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {
                        // Skeleton starts with `::`.
                        var skeleton = trimStart(styleAndLocation.style.slice(2));
                        if (argType === 'number') {
                            var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
                            if (result.err) {
                                return result;
                            }
                            return {
                                val: { type: TYPE.number, value: value, location: location_1, style: result.val },
                                err: null,
                            };
                        }
                        else {
                            if (skeleton.length === 0) {
                                return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
                            }
                            var style = {
                                type: SKELETON_TYPE.dateTime,
                                pattern: skeleton,
                                location: styleAndLocation.styleLocation,
                                parsedOptions: this.shouldParseSkeletons
                                    ? parseDateTimeSkeleton(skeleton)
                                    : {},
                            };
                            var type = argType === 'date' ? TYPE.date : TYPE.time;
                            return {
                                val: { type: type, value: value, location: location_1, style: style },
                                err: null,
                            };
                        }
                    }
                    // Regular style or no style.
                    return {
                        val: {
                            type: argType === 'number'
                                ? TYPE.number
                                : argType === 'date'
                                    ? TYPE.date
                                    : TYPE.time,
                            value: value,
                            location: location_1,
                            style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null,
                        },
                        err: null,
                    };
                }
                case 'plural':
                case 'selectordinal':
                case 'select': {
                    // Parse this range:
                    // {name, plural, options}
                    //              ^---------^
                    var typeEndPosition_1 = this.clonePosition();
                    this.bumpSpace();
                    if (!this.bumpIf(',')) {
                        return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
                    }
                    this.bumpSpace();
                    // Parse offset:
                    // {name, plural, offset:1, options}
                    //                ^-----^
                    //
                    // or the first option:
                    //
                    // {name, plural, one {...} other {...}}
                    //                ^--^
                    var identifierAndLocation = this.parseIdentifierIfPossible();
                    var pluralOffset = 0;
                    if (argType !== 'select' && identifierAndLocation.value === 'offset') {
                        if (!this.bumpIf(':')) {
                            return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
                        }
                        this.bumpSpace();
                        var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
                        if (result.err) {
                            return result;
                        }
                        // Parse another identifier for option parsing
                        this.bumpSpace();
                        identifierAndLocation = this.parseIdentifierIfPossible();
                        pluralOffset = result.val;
                    }
                    var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
                    if (optionsResult.err) {
                        return optionsResult;
                    }
                    var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                    if (argCloseResult.err) {
                        return argCloseResult;
                    }
                    var location_2 = createLocation(openingBracePosition, this.clonePosition());
                    if (argType === 'select') {
                        return {
                            val: {
                                type: TYPE.select,
                                value: value,
                                options: fromEntries(optionsResult.val),
                                location: location_2,
                            },
                            err: null,
                        };
                    }
                    else {
                        return {
                            val: {
                                type: TYPE.plural,
                                value: value,
                                options: fromEntries(optionsResult.val),
                                offset: pluralOffset,
                                pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                                location: location_2,
                            },
                            err: null,
                        };
                    }
                }
                default:
                    return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
            }
        };
        Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {
            // Parse: {value, number, ::currency/GBP }
            //
            if (this.isEOF() || this.char() !== 125 /* `}` */) {
                return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
            }
            this.bump(); // `}`
            return { val: true, err: null };
        };
        /**
         * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
         */
        Parser.prototype.parseSimpleArgStyleIfPossible = function () {
            var nestedBraces = 0;
            var startPosition = this.clonePosition();
            while (!this.isEOF()) {
                var ch = this.char();
                switch (ch) {
                    case 39 /* `'` */: {
                        // Treat apostrophe as quoting but include it in the style part.
                        // Find the end of the quoted literal text.
                        this.bump();
                        var apostrophePosition = this.clonePosition();
                        if (!this.bumpUntil("'")) {
                            return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
                        }
                        this.bump();
                        break;
                    }
                    case 123 /* `{` */: {
                        nestedBraces += 1;
                        this.bump();
                        break;
                    }
                    case 125 /* `}` */: {
                        if (nestedBraces > 0) {
                            nestedBraces -= 1;
                        }
                        else {
                            return {
                                val: this.message.slice(startPosition.offset, this.offset()),
                                err: null,
                            };
                        }
                        break;
                    }
                    default:
                        this.bump();
                        break;
                }
            }
            return {
                val: this.message.slice(startPosition.offset, this.offset()),
                err: null,
            };
        };
        Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {
            var tokens = [];
            try {
                tokens = parseNumberSkeletonFromString(skeleton);
            }
            catch (e) {
                return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);
            }
            return {
                val: {
                    type: SKELETON_TYPE.number,
                    tokens: tokens,
                    location: location,
                    parsedOptions: this.shouldParseSkeletons
                        ? parseNumberSkeleton(tokens)
                        : {},
                },
                err: null,
            };
        };
        /**
         * @param nesting_level The current nesting level of messages.
         *     This can be positive when parsing message fragment in select or plural argument options.
         * @param parent_arg_type The parent argument's type.
         * @param parsed_first_identifier If provided, this is the first identifier-like selector of
         *     the argument. It is a by-product of a previous parsing attempt.
         * @param expecting_close_tag If true, this message is directly or indirectly nested inside
         *     between a pair of opening and closing tags. The nested message will not parse beyond
         *     the closing tag boundary.
         */
        Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
            var _a;
            var hasOtherClause = false;
            var options = [];
            var parsedSelectors = new Set();
            var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
            // Parse:
            // one {one apple}
            // ^--^
            while (true) {
                if (selector.length === 0) {
                    var startPosition = this.clonePosition();
                    if (parentArgType !== 'select' && this.bumpIf('=')) {
                        // Try parse `={number}` selector
                        var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
                        if (result.err) {
                            return result;
                        }
                        selectorLocation = createLocation(startPosition, this.clonePosition());
                        selector = this.message.slice(startPosition.offset, this.offset());
                    }
                    else {
                        break;
                    }
                }
                // Duplicate selector clauses
                if (parsedSelectors.has(selector)) {
                    return this.error(parentArgType === 'select'
                        ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR
                        : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
                }
                if (selector === 'other') {
                    hasOtherClause = true;
                }
                // Parse:
                // one {one apple}
                //     ^----------^
                this.bumpSpace();
                var openingBracePosition = this.clonePosition();
                if (!this.bumpIf('{')) {
                    return this.error(parentArgType === 'select'
                        ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT
                        : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
                }
                var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
                if (fragmentResult.err) {
                    return fragmentResult;
                }
                var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
                if (argCloseResult.err) {
                    return argCloseResult;
                }
                options.push([
                    selector,
                    {
                        value: fragmentResult.val,
                        location: createLocation(openingBracePosition, this.clonePosition()),
                    },
                ]);
                // Keep track of the existing selectors
                parsedSelectors.add(selector);
                // Prep next selector clause.
                this.bumpSpace();
                (_a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location);
            }
            if (options.length === 0) {
                return this.error(parentArgType === 'select'
                    ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR
                    : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
            }
            if (this.requiresOtherClause && !hasOtherClause) {
                return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
            }
            return { val: options, err: null };
        };
        Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {
            var sign = 1;
            var startingPosition = this.clonePosition();
            if (this.bumpIf('+')) ;
            else if (this.bumpIf('-')) {
                sign = -1;
            }
            var hasDigits = false;
            var decimal = 0;
            while (!this.isEOF()) {
                var ch = this.char();
                if (ch >= 48 /* `0` */ && ch <= 57 /* `9` */) {
                    hasDigits = true;
                    decimal = decimal * 10 + (ch - 48);
                    this.bump();
                }
                else {
                    break;
                }
            }
            var location = createLocation(startingPosition, this.clonePosition());
            if (!hasDigits) {
                return this.error(expectNumberError, location);
            }
            decimal *= sign;
            if (!isSafeInteger(decimal)) {
                return this.error(invalidNumberError, location);
            }
            return { val: decimal, err: null };
        };
        Parser.prototype.offset = function () {
            return this.position.offset;
        };
        Parser.prototype.isEOF = function () {
            return this.offset() === this.message.length;
        };
        Parser.prototype.clonePosition = function () {
            // This is much faster than `Object.assign` or spread.
            return {
                offset: this.position.offset,
                line: this.position.line,
                column: this.position.column,
            };
        };
        /**
         * Return the code point at the current position of the parser.
         * Throws if the index is out of bound.
         */
        Parser.prototype.char = function () {
            var offset = this.position.offset;
            if (offset >= this.message.length) {
                throw Error('out of bound');
            }
            var code = codePointAt(this.message, offset);
            if (code === undefined) {
                throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
            }
            return code;
        };
        Parser.prototype.error = function (kind, location) {
            return {
                val: null,
                err: {
                    kind: kind,
                    message: this.message,
                    location: location,
                },
            };
        };
        /** Bump the parser to the next UTF-16 code unit. */
        Parser.prototype.bump = function () {
            if (this.isEOF()) {
                return;
            }
            var code = this.char();
            if (code === 10 /* '\n' */) {
                this.position.line += 1;
                this.position.column = 1;
                this.position.offset += 1;
            }
            else {
                this.position.column += 1;
                // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.
                this.position.offset += code < 0x10000 ? 1 : 2;
            }
        };
        /**
         * If the substring starting at the current position of the parser has
         * the given prefix, then bump the parser to the character immediately
         * following the prefix and return true. Otherwise, don't bump the parser
         * and return false.
         */
        Parser.prototype.bumpIf = function (prefix) {
            if (startsWith(this.message, prefix, this.offset())) {
                for (var i = 0; i < prefix.length; i++) {
                    this.bump();
                }
                return true;
            }
            return false;
        };
        /**
         * Bump the parser until the pattern character is found and return `true`.
         * Otherwise bump to the end of the file and return `false`.
         */
        Parser.prototype.bumpUntil = function (pattern) {
            var currentOffset = this.offset();
            var index = this.message.indexOf(pattern, currentOffset);
            if (index >= 0) {
                this.bumpTo(index);
                return true;
            }
            else {
                this.bumpTo(this.message.length);
                return false;
            }
        };
        /**
         * Bump the parser to the target offset.
         * If target offset is beyond the end of the input, bump the parser to the end of the input.
         */
        Parser.prototype.bumpTo = function (targetOffset) {
            if (this.offset() > targetOffset) {
                throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
            }
            targetOffset = Math.min(targetOffset, this.message.length);
            while (true) {
                var offset = this.offset();
                if (offset === targetOffset) {
                    break;
                }
                if (offset > targetOffset) {
                    throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
                }
                this.bump();
                if (this.isEOF()) {
                    break;
                }
            }
        };
        /** advance the parser through all whitespace to the next non-whitespace code unit. */
        Parser.prototype.bumpSpace = function () {
            while (!this.isEOF() && _isWhiteSpace(this.char())) {
                this.bump();
            }
        };
        /**
         * Peek at the *next* Unicode codepoint in the input without advancing the parser.
         * If the input has been exhausted, then this returns null.
         */
        Parser.prototype.peek = function () {
            if (this.isEOF()) {
                return null;
            }
            var code = this.char();
            var offset = this.offset();
            var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));
            return nextCode !== null && nextCode !== void 0 ? nextCode : null;
        };
        return Parser;
    }());
    /**
     * This check if codepoint is alphabet (lower & uppercase)
     * @param codepoint
     * @returns
     */
    function _isAlpha(codepoint) {
        return ((codepoint >= 97 && codepoint <= 122) ||
            (codepoint >= 65 && codepoint <= 90));
    }
    function _isAlphaOrSlash(codepoint) {
        return _isAlpha(codepoint) || codepoint === 47; /* '/' */
    }
    /** See `parseTag` function docs. */
    function _isPotentialElementNameChar(c) {
        return (c === 45 /* '-' */ ||
            c === 46 /* '.' */ ||
            (c >= 48 && c <= 57) /* 0..9 */ ||
            c === 95 /* '_' */ ||
            (c >= 97 && c <= 122) /** a..z */ ||
            (c >= 65 && c <= 90) /* A..Z */ ||
            c == 0xb7 ||
            (c >= 0xc0 && c <= 0xd6) ||
            (c >= 0xd8 && c <= 0xf6) ||
            (c >= 0xf8 && c <= 0x37d) ||
            (c >= 0x37f && c <= 0x1fff) ||
            (c >= 0x200c && c <= 0x200d) ||
            (c >= 0x203f && c <= 0x2040) ||
            (c >= 0x2070 && c <= 0x218f) ||
            (c >= 0x2c00 && c <= 0x2fef) ||
            (c >= 0x3001 && c <= 0xd7ff) ||
            (c >= 0xf900 && c <= 0xfdcf) ||
            (c >= 0xfdf0 && c <= 0xfffd) ||
            (c >= 0x10000 && c <= 0xeffff));
    }
    /**
     * Code point equivalent of regex `\p{White_Space}`.
     * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
     */
    function _isWhiteSpace(c) {
        return ((c >= 0x0009 && c <= 0x000d) ||
            c === 0x0020 ||
            c === 0x0085 ||
            (c >= 0x200e && c <= 0x200f) ||
            c === 0x2028 ||
            c === 0x2029);
    }
    /**
     * Code point equivalent of regex `\p{Pattern_Syntax}`.
     * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
     */
    function _isPatternSyntax(c) {
        return ((c >= 0x0021 && c <= 0x0023) ||
            c === 0x0024 ||
            (c >= 0x0025 && c <= 0x0027) ||
            c === 0x0028 ||
            c === 0x0029 ||
            c === 0x002a ||
            c === 0x002b ||
            c === 0x002c ||
            c === 0x002d ||
            (c >= 0x002e && c <= 0x002f) ||
            (c >= 0x003a && c <= 0x003b) ||
            (c >= 0x003c && c <= 0x003e) ||
            (c >= 0x003f && c <= 0x0040) ||
            c === 0x005b ||
            c === 0x005c ||
            c === 0x005d ||
            c === 0x005e ||
            c === 0x0060 ||
            c === 0x007b ||
            c === 0x007c ||
            c === 0x007d ||
            c === 0x007e ||
            c === 0x00a1 ||
            (c >= 0x00a2 && c <= 0x00a5) ||
            c === 0x00a6 ||
            c === 0x00a7 ||
            c === 0x00a9 ||
            c === 0x00ab ||
            c === 0x00ac ||
            c === 0x00ae ||
            c === 0x00b0 ||
            c === 0x00b1 ||
            c === 0x00b6 ||
            c === 0x00bb ||
            c === 0x00bf ||
            c === 0x00d7 ||
            c === 0x00f7 ||
            (c >= 0x2010 && c <= 0x2015) ||
            (c >= 0x2016 && c <= 0x2017) ||
            c === 0x2018 ||
            c === 0x2019 ||
            c === 0x201a ||
            (c >= 0x201b && c <= 0x201c) ||
            c === 0x201d ||
            c === 0x201e ||
            c === 0x201f ||
            (c >= 0x2020 && c <= 0x2027) ||
            (c >= 0x2030 && c <= 0x2038) ||
            c === 0x2039 ||
            c === 0x203a ||
            (c >= 0x203b && c <= 0x203e) ||
            (c >= 0x2041 && c <= 0x2043) ||
            c === 0x2044 ||
            c === 0x2045 ||
            c === 0x2046 ||
            (c >= 0x2047 && c <= 0x2051) ||
            c === 0x2052 ||
            c === 0x2053 ||
            (c >= 0x2055 && c <= 0x205e) ||
            (c >= 0x2190 && c <= 0x2194) ||
            (c >= 0x2195 && c <= 0x2199) ||
            (c >= 0x219a && c <= 0x219b) ||
            (c >= 0x219c && c <= 0x219f) ||
            c === 0x21a0 ||
            (c >= 0x21a1 && c <= 0x21a2) ||
            c === 0x21a3 ||
            (c >= 0x21a4 && c <= 0x21a5) ||
            c === 0x21a6 ||
            (c >= 0x21a7 && c <= 0x21ad) ||
            c === 0x21ae ||
            (c >= 0x21af && c <= 0x21cd) ||
            (c >= 0x21ce && c <= 0x21cf) ||
            (c >= 0x21d0 && c <= 0x21d1) ||
            c === 0x21d2 ||
            c === 0x21d3 ||
            c === 0x21d4 ||
            (c >= 0x21d5 && c <= 0x21f3) ||
            (c >= 0x21f4 && c <= 0x22ff) ||
            (c >= 0x2300 && c <= 0x2307) ||
            c === 0x2308 ||
            c === 0x2309 ||
            c === 0x230a ||
            c === 0x230b ||
            (c >= 0x230c && c <= 0x231f) ||
            (c >= 0x2320 && c <= 0x2321) ||
            (c >= 0x2322 && c <= 0x2328) ||
            c === 0x2329 ||
            c === 0x232a ||
            (c >= 0x232b && c <= 0x237b) ||
            c === 0x237c ||
            (c >= 0x237d && c <= 0x239a) ||
            (c >= 0x239b && c <= 0x23b3) ||
            (c >= 0x23b4 && c <= 0x23db) ||
            (c >= 0x23dc && c <= 0x23e1) ||
            (c >= 0x23e2 && c <= 0x2426) ||
            (c >= 0x2427 && c <= 0x243f) ||
            (c >= 0x2440 && c <= 0x244a) ||
            (c >= 0x244b && c <= 0x245f) ||
            (c >= 0x2500 && c <= 0x25b6) ||
            c === 0x25b7 ||
            (c >= 0x25b8 && c <= 0x25c0) ||
            c === 0x25c1 ||
            (c >= 0x25c2 && c <= 0x25f7) ||
            (c >= 0x25f8 && c <= 0x25ff) ||
            (c >= 0x2600 && c <= 0x266e) ||
            c === 0x266f ||
            (c >= 0x2670 && c <= 0x2767) ||
            c === 0x2768 ||
            c === 0x2769 ||
            c === 0x276a ||
            c === 0x276b ||
            c === 0x276c ||
            c === 0x276d ||
            c === 0x276e ||
            c === 0x276f ||
            c === 0x2770 ||
            c === 0x2771 ||
            c === 0x2772 ||
            c === 0x2773 ||
            c === 0x2774 ||
            c === 0x2775 ||
            (c >= 0x2794 && c <= 0x27bf) ||
            (c >= 0x27c0 && c <= 0x27c4) ||
            c === 0x27c5 ||
            c === 0x27c6 ||
            (c >= 0x27c7 && c <= 0x27e5) ||
            c === 0x27e6 ||
            c === 0x27e7 ||
            c === 0x27e8 ||
            c === 0x27e9 ||
            c === 0x27ea ||
            c === 0x27eb ||
            c === 0x27ec ||
            c === 0x27ed ||
            c === 0x27ee ||
            c === 0x27ef ||
            (c >= 0x27f0 && c <= 0x27ff) ||
            (c >= 0x2800 && c <= 0x28ff) ||
            (c >= 0x2900 && c <= 0x2982) ||
            c === 0x2983 ||
            c === 0x2984 ||
            c === 0x2985 ||
            c === 0x2986 ||
            c === 0x2987 ||
            c === 0x2988 ||
            c === 0x2989 ||
            c === 0x298a ||
            c === 0x298b ||
            c === 0x298c ||
            c === 0x298d ||
            c === 0x298e ||
            c === 0x298f ||
            c === 0x2990 ||
            c === 0x2991 ||
            c === 0x2992 ||
            c === 0x2993 ||
            c === 0x2994 ||
            c === 0x2995 ||
            c === 0x2996 ||
            c === 0x2997 ||
            c === 0x2998 ||
            (c >= 0x2999 && c <= 0x29d7) ||
            c === 0x29d8 ||
            c === 0x29d9 ||
            c === 0x29da ||
            c === 0x29db ||
            (c >= 0x29dc && c <= 0x29fb) ||
            c === 0x29fc ||
            c === 0x29fd ||
            (c >= 0x29fe && c <= 0x2aff) ||
            (c >= 0x2b00 && c <= 0x2b2f) ||
            (c >= 0x2b30 && c <= 0x2b44) ||
            (c >= 0x2b45 && c <= 0x2b46) ||
            (c >= 0x2b47 && c <= 0x2b4c) ||
            (c >= 0x2b4d && c <= 0x2b73) ||
            (c >= 0x2b74 && c <= 0x2b75) ||
            (c >= 0x2b76 && c <= 0x2b95) ||
            c === 0x2b96 ||
            (c >= 0x2b97 && c <= 0x2bff) ||
            (c >= 0x2e00 && c <= 0x2e01) ||
            c === 0x2e02 ||
            c === 0x2e03 ||
            c === 0x2e04 ||
            c === 0x2e05 ||
            (c >= 0x2e06 && c <= 0x2e08) ||
            c === 0x2e09 ||
            c === 0x2e0a ||
            c === 0x2e0b ||
            c === 0x2e0c ||
            c === 0x2e0d ||
            (c >= 0x2e0e && c <= 0x2e16) ||
            c === 0x2e17 ||
            (c >= 0x2e18 && c <= 0x2e19) ||
            c === 0x2e1a ||
            c === 0x2e1b ||
            c === 0x2e1c ||
            c === 0x2e1d ||
            (c >= 0x2e1e && c <= 0x2e1f) ||
            c === 0x2e20 ||
            c === 0x2e21 ||
            c === 0x2e22 ||
            c === 0x2e23 ||
            c === 0x2e24 ||
            c === 0x2e25 ||
            c === 0x2e26 ||
            c === 0x2e27 ||
            c === 0x2e28 ||
            c === 0x2e29 ||
            (c >= 0x2e2a && c <= 0x2e2e) ||
            c === 0x2e2f ||
            (c >= 0x2e30 && c <= 0x2e39) ||
            (c >= 0x2e3a && c <= 0x2e3b) ||
            (c >= 0x2e3c && c <= 0x2e3f) ||
            c === 0x2e40 ||
            c === 0x2e41 ||
            c === 0x2e42 ||
            (c >= 0x2e43 && c <= 0x2e4f) ||
            (c >= 0x2e50 && c <= 0x2e51) ||
            c === 0x2e52 ||
            (c >= 0x2e53 && c <= 0x2e7f) ||
            (c >= 0x3001 && c <= 0x3003) ||
            c === 0x3008 ||
            c === 0x3009 ||
            c === 0x300a ||
            c === 0x300b ||
            c === 0x300c ||
            c === 0x300d ||
            c === 0x300e ||
            c === 0x300f ||
            c === 0x3010 ||
            c === 0x3011 ||
            (c >= 0x3012 && c <= 0x3013) ||
            c === 0x3014 ||
            c === 0x3015 ||
            c === 0x3016 ||
            c === 0x3017 ||
            c === 0x3018 ||
            c === 0x3019 ||
            c === 0x301a ||
            c === 0x301b ||
            c === 0x301c ||
            c === 0x301d ||
            (c >= 0x301e && c <= 0x301f) ||
            c === 0x3020 ||
            c === 0x3030 ||
            c === 0xfd3e ||
            c === 0xfd3f ||
            (c >= 0xfe45 && c <= 0xfe46));
    }

    function pruneLocation(els) {
        els.forEach(function (el) {
            delete el.location;
            if (isSelectElement(el) || isPluralElement(el)) {
                for (var k in el.options) {
                    delete el.options[k].location;
                    pruneLocation(el.options[k].value);
                }
            }
            else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
                delete el.style.location;
            }
            else if ((isDateElement(el) || isTimeElement(el)) &&
                isDateTimeSkeleton(el.style)) {
                delete el.style.location;
            }
            else if (isTagElement(el)) {
                pruneLocation(el.children);
            }
        });
    }
    function parse(message, opts) {
        if (opts === void 0) { opts = {}; }
        opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
        var result = new Parser(message, opts).parse();
        if (result.err) {
            var error = SyntaxError(ErrorKind[result.err.kind]);
            // @ts-expect-error Assign to error object
            error.location = result.err.location;
            // @ts-expect-error Assign to error object
            error.originalMessage = result.err.message;
            throw error;
        }
        if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
            pruneLocation(result.val);
        }
        return result.val;
    }

    //
    // Main
    //
    function memoize(fn, options) {
        var cache = options && options.cache ? options.cache : cacheDefault;
        var serializer = options && options.serializer ? options.serializer : serializerDefault;
        var strategy = options && options.strategy ? options.strategy : strategyDefault;
        return strategy(fn, {
            cache: cache,
            serializer: serializer,
        });
    }
    //
    // Strategy
    //
    function isPrimitive(value) {
        return (value == null || typeof value === 'number' || typeof value === 'boolean'); // || typeof value === "string" 'unsafe' primitive for our needs
    }
    function monadic(fn, cache, serializer, arg) {
        var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === 'undefined') {
            computedValue = fn.call(this, arg);
            cache.set(cacheKey, computedValue);
        }
        return computedValue;
    }
    function variadic(fn, cache, serializer) {
        var args = Array.prototype.slice.call(arguments, 3);
        var cacheKey = serializer(args);
        var computedValue = cache.get(cacheKey);
        if (typeof computedValue === 'undefined') {
            computedValue = fn.apply(this, args);
            cache.set(cacheKey, computedValue);
        }
        return computedValue;
    }
    function assemble(fn, context, strategy, cache, serialize) {
        return strategy.bind(context, fn, cache, serialize);
    }
    function strategyDefault(fn, options) {
        var strategy = fn.length === 1 ? monadic : variadic;
        return assemble(fn, this, strategy, options.cache.create(), options.serializer);
    }
    function strategyVariadic(fn, options) {
        return assemble(fn, this, variadic, options.cache.create(), options.serializer);
    }
    function strategyMonadic(fn, options) {
        return assemble(fn, this, monadic, options.cache.create(), options.serializer);
    }
    //
    // Serializer
    //
    var serializerDefault = function () {
        return JSON.stringify(arguments);
    };
    //
    // Cache
    //
    function ObjectWithoutPrototypeCache() {
        this.cache = Object.create(null);
    }
    ObjectWithoutPrototypeCache.prototype.get = function (key) {
        return this.cache[key];
    };
    ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
        this.cache[key] = value;
    };
    var cacheDefault = {
        create: function create() {
            // @ts-ignore
            return new ObjectWithoutPrototypeCache();
        },
    };
    var strategies = {
        variadic: strategyVariadic,
        monadic: strategyMonadic,
    };

    var ErrorCode;
    (function (ErrorCode) {
        // When we have a placeholder but no value to format
        ErrorCode["MISSING_VALUE"] = "MISSING_VALUE";
        // When value supplied is invalid
        ErrorCode["INVALID_VALUE"] = "INVALID_VALUE";
        // When we need specific Intl API but it's not available
        ErrorCode["MISSING_INTL_API"] = "MISSING_INTL_API";
    })(ErrorCode || (ErrorCode = {}));
    var FormatError = /** @class */ (function (_super) {
        __extends(FormatError, _super);
        function FormatError(msg, code, originalMessage) {
            var _this = _super.call(this, msg) || this;
            _this.code = code;
            _this.originalMessage = originalMessage;
            return _this;
        }
        FormatError.prototype.toString = function () {
            return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
        };
        return FormatError;
    }(Error));
    var InvalidValueError = /** @class */ (function (_super) {
        __extends(InvalidValueError, _super);
        function InvalidValueError(variableId, value, options, originalMessage) {
            return _super.call(this, "Invalid values for \"".concat(variableId, "\": \"").concat(value, "\". Options are \"").concat(Object.keys(options).join('", "'), "\""), ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueError;
    }(FormatError));
    var InvalidValueTypeError = /** @class */ (function (_super) {
        __extends(InvalidValueTypeError, _super);
        function InvalidValueTypeError(value, type, originalMessage) {
            return _super.call(this, "Value for \"".concat(value, "\" must be of type ").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueTypeError;
    }(FormatError));
    var MissingValueError = /** @class */ (function (_super) {
        __extends(MissingValueError, _super);
        function MissingValueError(variableId, originalMessage) {
            return _super.call(this, "The intl string context variable \"".concat(variableId, "\" was not provided to the string \"").concat(originalMessage, "\""), ErrorCode.MISSING_VALUE, originalMessage) || this;
        }
        return MissingValueError;
    }(FormatError));

    var PART_TYPE;
    (function (PART_TYPE) {
        PART_TYPE[PART_TYPE["literal"] = 0] = "literal";
        PART_TYPE[PART_TYPE["object"] = 1] = "object";
    })(PART_TYPE || (PART_TYPE = {}));
    function mergeLiteral(parts) {
        if (parts.length < 2) {
            return parts;
        }
        return parts.reduce(function (all, part) {
            var lastPart = all[all.length - 1];
            if (!lastPart ||
                lastPart.type !== PART_TYPE.literal ||
                part.type !== PART_TYPE.literal) {
                all.push(part);
            }
            else {
                lastPart.value += part.value;
            }
            return all;
        }, []);
    }
    function isFormatXMLElementFn(el) {
        return typeof el === 'function';
    }
    // TODO(skeleton): add skeleton support
    function formatToParts(els, locales, formatters, formats, values, currentPluralValue, 
    // For debugging
    originalMessage) {
        // Hot path for straight simple msg translations
        if (els.length === 1 && isLiteralElement(els[0])) {
            return [
                {
                    type: PART_TYPE.literal,
                    value: els[0].value,
                },
            ];
        }
        var result = [];
        for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
            var el = els_1[_i];
            // Exit early for string parts.
            if (isLiteralElement(el)) {
                result.push({
                    type: PART_TYPE.literal,
                    value: el.value,
                });
                continue;
            }
            // TODO: should this part be literal type?
            // Replace `#` in plural rules with the actual numeric value.
            if (isPoundElement(el)) {
                if (typeof currentPluralValue === 'number') {
                    result.push({
                        type: PART_TYPE.literal,
                        value: formatters.getNumberFormat(locales).format(currentPluralValue),
                    });
                }
                continue;
            }
            var varName = el.value;
            // Enforce that all required values are provided by the caller.
            if (!(values && varName in values)) {
                throw new MissingValueError(varName, originalMessage);
            }
            var value = values[varName];
            if (isArgumentElement(el)) {
                if (!value || typeof value === 'string' || typeof value === 'number') {
                    value =
                        typeof value === 'string' || typeof value === 'number'
                            ? String(value)
                            : '';
                }
                result.push({
                    type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                    value: value,
                });
                continue;
            }
            // Recursively format plural and select parts' option — which can be a
            // nested pattern structure. The choosing of the option to use is
            // abstracted-by and delegated-to the part helper object.
            if (isDateElement(el)) {
                var style = typeof el.style === 'string'
                    ? formats.date[el.style]
                    : isDateTimeSkeleton(el.style)
                        ? el.style.parsedOptions
                        : undefined;
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters
                        .getDateTimeFormat(locales, style)
                        .format(value),
                });
                continue;
            }
            if (isTimeElement(el)) {
                var style = typeof el.style === 'string'
                    ? formats.time[el.style]
                    : isDateTimeSkeleton(el.style)
                        ? el.style.parsedOptions
                        : undefined;
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters
                        .getDateTimeFormat(locales, style)
                        .format(value),
                });
                continue;
            }
            if (isNumberElement(el)) {
                var style = typeof el.style === 'string'
                    ? formats.number[el.style]
                    : isNumberSkeleton(el.style)
                        ? el.style.parsedOptions
                        : undefined;
                if (style && style.scale) {
                    value =
                        value *
                            (style.scale || 1);
                }
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters
                        .getNumberFormat(locales, style)
                        .format(value),
                });
                continue;
            }
            if (isTagElement(el)) {
                var children = el.children, value_1 = el.value;
                var formatFn = values[value_1];
                if (!isFormatXMLElementFn(formatFn)) {
                    throw new InvalidValueTypeError(value_1, 'function', originalMessage);
                }
                var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
                var chunks = formatFn(parts.map(function (p) { return p.value; }));
                if (!Array.isArray(chunks)) {
                    chunks = [chunks];
                }
                result.push.apply(result, chunks.map(function (c) {
                    return {
                        type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                        value: c,
                    };
                }));
            }
            if (isSelectElement(el)) {
                var opt = el.options[value] || el.options.other;
                if (!opt) {
                    throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
                }
                result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
                continue;
            }
            if (isPluralElement(el)) {
                var opt = el.options["=".concat(value)];
                if (!opt) {
                    if (!Intl.PluralRules) {
                        throw new FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n", ErrorCode.MISSING_INTL_API, originalMessage);
                    }
                    var rule = formatters
                        .getPluralRules(locales, { type: el.pluralType })
                        .select(value - (el.offset || 0));
                    opt = el.options[rule] || el.options.other;
                }
                if (!opt) {
                    throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
                }
                result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
                continue;
            }
        }
        return mergeLiteral(result);
    }

    /*
    Copyright (c) 2014, Yahoo! Inc. All rights reserved.
    Copyrights licensed under the New BSD License.
    See the accompanying LICENSE file for terms.
    */
    // -- MessageFormat --------------------------------------------------------
    function mergeConfig(c1, c2) {
        if (!c2) {
            return c1;
        }
        return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {
            all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));
            return all;
        }, {}));
    }
    function mergeConfigs(defaultConfig, configs) {
        if (!configs) {
            return defaultConfig;
        }
        return Object.keys(defaultConfig).reduce(function (all, k) {
            all[k] = mergeConfig(defaultConfig[k], configs[k]);
            return all;
        }, __assign({}, defaultConfig));
    }
    function createFastMemoizeCache(store) {
        return {
            create: function () {
                return {
                    get: function (key) {
                        return store[key];
                    },
                    set: function (key, value) {
                        store[key] = value;
                    },
                };
            },
        };
    }
    function createDefaultFormatters(cache) {
        if (cache === void 0) { cache = {
            number: {},
            dateTime: {},
            pluralRules: {},
        }; }
        return {
            getNumberFormat: memoize(function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();
            }, {
                cache: createFastMemoizeCache(cache.number),
                strategy: strategies.variadic,
            }),
            getDateTimeFormat: memoize(function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();
            }, {
                cache: createFastMemoizeCache(cache.dateTime),
                strategy: strategies.variadic,
            }),
            getPluralRules: memoize(function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();
            }, {
                cache: createFastMemoizeCache(cache.pluralRules),
                strategy: strategies.variadic,
            }),
        };
    }
    var IntlMessageFormat = /** @class */ (function () {
        function IntlMessageFormat(message, locales, overrideFormats, opts) {
            var _this = this;
            if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }
            this.formatterCache = {
                number: {},
                dateTime: {},
                pluralRules: {},
            };
            this.format = function (values) {
                var parts = _this.formatToParts(values);
                // Hot path for straight simple msg translations
                if (parts.length === 1) {
                    return parts[0].value;
                }
                var result = parts.reduce(function (all, part) {
                    if (!all.length ||
                        part.type !== PART_TYPE.literal ||
                        typeof all[all.length - 1] !== 'string') {
                        all.push(part.value);
                    }
                    else {
                        all[all.length - 1] += part.value;
                    }
                    return all;
                }, []);
                if (result.length <= 1) {
                    return result[0] || '';
                }
                return result;
            };
            this.formatToParts = function (values) {
                return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
            };
            this.resolvedOptions = function () { return ({
                locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],
            }); };
            this.getAst = function () { return _this.ast; };
            if (typeof message === 'string') {
                this.message = message;
                if (!IntlMessageFormat.__parse) {
                    throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
                }
                // Parse string messages into an AST.
                this.ast = IntlMessageFormat.__parse(message, {
                    ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
                });
            }
            else {
                this.ast = message;
            }
            if (!Array.isArray(this.ast)) {
                throw new TypeError('A message must be provided as a String or AST.');
            }
            // Creates a new object with the specified `formats` merged with the default
            // formats.
            this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);
            // Defined first because it's used to build the format pattern.
            this.locales = locales;
            this.formatters =
                (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);
        }
        Object.defineProperty(IntlMessageFormat, "defaultLocale", {
            get: function () {
                if (!IntlMessageFormat.memoizedDefaultLocale) {
                    IntlMessageFormat.memoizedDefaultLocale =
                        new Intl.NumberFormat().resolvedOptions().locale;
                }
                return IntlMessageFormat.memoizedDefaultLocale;
            },
            enumerable: false,
            configurable: true
        });
        IntlMessageFormat.memoizedDefaultLocale = null;
        IntlMessageFormat.__parse = parse;
        // Default format options used as the prototype of the `formats` provided to the
        // constructor. These are used when constructing the internal Intl.NumberFormat
        // and Intl.DateTimeFormat instances.
        IntlMessageFormat.formats = {
            number: {
                integer: {
                    maximumFractionDigits: 0,
                },
                currency: {
                    style: 'currency',
                },
                percent: {
                    style: 'percent',
                },
            },
            date: {
                short: {
                    month: 'numeric',
                    day: 'numeric',
                    year: '2-digit',
                },
                medium: {
                    month: 'short',
                    day: 'numeric',
                    year: 'numeric',
                },
                long: {
                    month: 'long',
                    day: 'numeric',
                    year: 'numeric',
                },
                full: {
                    weekday: 'long',
                    month: 'long',
                    day: 'numeric',
                    year: 'numeric',
                },
            },
            time: {
                short: {
                    hour: 'numeric',
                    minute: 'numeric',
                },
                medium: {
                    hour: 'numeric',
                    minute: 'numeric',
                    second: 'numeric',
                },
                long: {
                    hour: 'numeric',
                    minute: 'numeric',
                    second: 'numeric',
                    timeZoneName: 'short',
                },
                full: {
                    hour: 'numeric',
                    minute: 'numeric',
                    second: 'numeric',
                    timeZoneName: 'short',
                },
            },
        };
        return IntlMessageFormat;
    }());

    /*
    Copyright (c) 2014, Yahoo! Inc. All rights reserved.
    Copyrights licensed under the New BSD License.
    See the accompanying LICENSE file for terms.
    */
    var o = IntlMessageFormat;

    const r$1={},i=(e,n,t)=>t?(n in r$1||(r$1[n]={}),e in r$1[n]||(r$1[n][e]=t),t):t,l=(e,n)=>{if(null==n)return;if(n in r$1&&e in r$1[n])return r$1[n][e];const t=E(n);for(let o=0;o<t.length;o++){const r=c(t[o],e);if(r)return i(e,n,r)}};let a$1;const s=writable({});function u(e){return e in a$1}function c(e,n){if(!u(e))return null;return function(e,n){if(null==n)return;if(n in e)return e[n];const t=n.split(".");let o=e;for(let e=0;e<t.length;e++)if("object"==typeof o){if(e>0){const n=t.slice(e,t.length).join(".");if(n in o){o=o[n];break}}o=o[t[e]];}else o=void 0;return o}(function(e){return a$1[e]||null}(e),n)}function m(e,...n){delete r$1[e],s.update((o=>(o[e]=cjs.all([o[e]||{},...n]),o)));}derived([s],(([e])=>Object.keys(e)));s.subscribe((e=>a$1=e));const d={};function g(e){return d[e]}function w(e){return null!=e&&E(e).some((e=>{var n;return null===(n=g(e))||void 0===n?void 0:n.size}))}function h(e,n){return Promise.all(n.map((n=>(function(e,n){d[e].delete(n),0===d[e].size&&delete d[e];}(e,n),n().then((e=>e.default||e)))))).then((n=>m(e,...n)))}const p={};function b(e){if(!w(e))return e in p?p[e]:Promise.resolve();const n=function(e){return E(e).map((e=>{const n=g(e);return [e,n?[...n]:[]]})).filter((([,e])=>e.length>0))}(e);return p[e]=Promise.all(n.map((([e,n])=>h(e,n)))).then((()=>{if(w(e))return b(e);delete p[e];})),p[e]}/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function v(e,n){var t={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&n.indexOf(o)<0&&(t[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)n.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(t[o[r]]=e[o[r]]);}return t}const O={fallbackLocale:null,loadingDelay:200,formats:{number:{scientific:{notation:"scientific"},engineering:{notation:"engineering"},compactLong:{notation:"compact",compactDisplay:"long"},compactShort:{notation:"compact",compactDisplay:"short"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},warnOnMissingMessages:!0,ignoreTag:!0};function j(){return O}function $(e){const{formats:n}=e,t=v(e,["formats"]),o=e.initialLocale||e.fallbackLocale;return Object.assign(O,t,{initialLocale:o}),n&&("number"in n&&Object.assign(O.formats.number,n.number),"date"in n&&Object.assign(O.formats.date,n.date),"time"in n&&Object.assign(O.formats.time,n.time)),M.set(o)}const k=writable(!1);let L;const T=writable(null);function x(e){return e.split("-").map(((e,n,t)=>t.slice(0,n+1).join("-"))).reverse()}function E(e,n=j().fallbackLocale){const t=x(e);return n?[...new Set([...t,...x(n)])]:t}function D(){return null!=L?L:void 0}T.subscribe((e=>{L=null!=e?e:void 0,"undefined"!=typeof window&&null!=e&&document.documentElement.setAttribute("lang",e);}));const M=Object.assign(Object.assign({},T),{set:e=>{if(e&&function(e){if(null==e)return;const n=E(e);for(let e=0;e<n.length;e++){const t=n[e];if(u(t))return t}}(e)&&w(e)){const{loadingDelay:n}=j();let t;return "undefined"!=typeof window&&null!=D()&&n?t=window.setTimeout((()=>k.set(!0)),n):k.set(!0),b(e).then((()=>{T.set(e);})).finally((()=>{clearTimeout(t),k.set(!1);}))}return T.set(e)}}),I=()=>"undefined"==typeof window?null:window.navigator.language||window.navigator.languages[0],Z=e=>{const n=Object.create(null);return t=>{const o=JSON.stringify(t);return o in n?n[o]:n[o]=e(t)}},C=(e,n)=>{const{formats:t}=j();if(e in t&&n in t[e])return t[e][n];throw new Error(`[svelte-i18n] Unknown "${n}" ${e} format.`)},G=Z((e=>{var{locale:n,format:t}=e,o=v(e,["locale","format"]);if(null==n)throw new Error('[svelte-i18n] A "locale" must be set to format numbers');return t&&(o=C("number",t)),new Intl.NumberFormat(n,o)})),J=Z((e=>{var{locale:n,format:t}=e,o=v(e,["locale","format"]);if(null==n)throw new Error('[svelte-i18n] A "locale" must be set to format dates');return t?o=C("date",t):0===Object.keys(o).length&&(o=C("date","short")),new Intl.DateTimeFormat(n,o)})),U=Z((e=>{var{locale:n,format:t}=e,o=v(e,["locale","format"]);if(null==n)throw new Error('[svelte-i18n] A "locale" must be set to format time values');return t?o=C("time",t):0===Object.keys(o).length&&(o=C("time","short")),new Intl.DateTimeFormat(n,o)})),_=(e={})=>{var{locale:n=D()}=e,t=v(e,["locale"]);return G(Object.assign({locale:n},t))},q=(e={})=>{var{locale:n=D()}=e,t=v(e,["locale"]);return J(Object.assign({locale:n},t))},B=(e={})=>{var{locale:n=D()}=e,t=v(e,["locale"]);return U(Object.assign({locale:n},t))},H=Z(((e,n=D())=>new o(e,n,j().formats,{ignoreTag:j().ignoreTag}))),K=(e,n={})=>{let t=n;"object"==typeof e&&(t=e,e=t.id);const{values:o,locale:r=D(),default:i}=t;if(null==r)throw new Error("[svelte-i18n] Cannot format a message without first setting the initial locale.");let a=l(e,r);if(a){if("string"!=typeof a)return console.warn(`[svelte-i18n] Message with id "${e}" must be of type "string", found: "${typeof a}". Gettin its value through the "$format" method is deprecated; use the "json" method instead.`),a}else j().warnOnMissingMessages&&console.warn(`[svelte-i18n] The message "${e}" was not found in "${E(r).join('", "')}".${w(D())?"\n\nNote: there are at least one loader still registered to this locale that wasn't executed.":""}`),a=null!=i?i:e;if(!o)return a;let s=a;try{s=H(a,r).format(o);}catch(n){console.warn(`[svelte-i18n] Message "${e}" has syntax error:`,n.message);}return s},Q=(e,n)=>B(n).format(e),R=(e,n)=>q(n).format(e),V=(e,n)=>_(n).format(e),W=(e,n=D())=>l(e,n),X=derived([M,s],(()=>K));derived([M],(()=>Q));derived([M],(()=>R));derived([M],(()=>V));derived([M,s],(()=>W));

    /* src/components/Dialogs.svelte generated by Svelte v3.44.3 */
    const file$e = "src/components/Dialogs.svelte";

    // (46:0) {#if lock}
    function create_if_block_1$5(ctx) {
    	let div0;
    	let t0;
    	let div2;
    	let div1;
    	let h3;
    	let t1_value = /*$_*/ ctx[5]('dialogs.lock.title') + "";
    	let t1;
    	let t2;
    	let p;
    	let raw_value = /*$_*/ ctx[5]('dialogs.lock.text') + "";
    	let t3;
    	let button0;
    	let t4_value = /*$_*/ ctx[5]('dialogs.lock.new') + "";
    	let t4;
    	let t5;
    	let button1;
    	let t6_value = /*$_*/ ctx[5]('dialogs.lock.overwrite') + "";
    	let t6;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			h3 = element("h3");
    			t1 = text(t1_value);
    			t2 = space();
    			p = element("p");
    			t3 = space();
    			button0 = element("button");
    			t4 = text(t4_value);
    			t5 = space();
    			button1 = element("button");
    			t6 = text(t6_value);
    			attr_dev(div0, "class", "dialog-mask");
    			add_location(div0, file$e, 46, 2, 969);
    			add_location(h3, file$e, 49, 6, 1065);
    			add_location(p, file$e, 50, 6, 1107);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$e, 51, 6, 1152);
    			attr_dev(button1, "class", "error");
    			add_location(button1, file$e, 52, 6, 1248);
    			attr_dev(div1, "class", "dialog lock svelte-1gmluk2");
    			add_location(div1, file$e, 48, 4, 1033);
    			attr_dev(div2, "class", "dialog-container");
    			add_location(div2, file$e, 47, 2, 998);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, h3);
    			append_dev(h3, t1);
    			append_dev(div1, t2);
    			append_dev(div1, p);
    			p.innerHTML = raw_value;
    			append_dev(div1, t3);
    			append_dev(div1, button0);
    			append_dev(button0, t4);
    			append_dev(div1, t5);
    			append_dev(div1, button1);
    			append_dev(button1, t6);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[6], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$_*/ 32 && t1_value !== (t1_value = /*$_*/ ctx[5]('dialogs.lock.title') + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*$_*/ 32 && raw_value !== (raw_value = /*$_*/ ctx[5]('dialogs.lock.text') + "")) p.innerHTML = raw_value;			if (dirty & /*$_*/ 32 && t4_value !== (t4_value = /*$_*/ ctx[5]('dialogs.lock.new') + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*$_*/ 32 && t6_value !== (t6_value = /*$_*/ ctx[5]('dialogs.lock.overwrite') + "")) set_data_dev(t6, t6_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(46:0) {#if lock}",
    		ctx
    	});

    	return block;
    }

    // (58:0) {#if component}
    function create_if_block$6(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*component*/ ctx[2];

    	function switch_props(ctx) {
    		return {
    			props: {
    				params: /*params*/ ctx[4],
    				callback: /*callback*/ ctx[3]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div0, "class", "dialog-mask");
    			add_location(div0, file$e, 58, 2, 1387);
    			attr_dev(div1, "class", "dialog-container");
    			add_location(div1, file$e, 59, 2, 1454);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", self$1(/*click_handler_2*/ ctx[8]), false, false, false),
    					listen_dev(div1, "click", self$1(/*click_handler_3*/ ctx[9]), false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty & /*params*/ 16) switch_instance_changes.params = /*params*/ ctx[4];
    			if (dirty & /*callback*/ 8) switch_instance_changes.callback = /*callback*/ ctx[3];

    			if (switch_value !== (switch_value = /*component*/ ctx[2])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div1, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(58:0) {#if component}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let t;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*lock*/ ctx[0] && create_if_block_1$5(ctx);
    	let if_block1 = /*component*/ ctx[2] && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*lock*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$5(ctx);
    					if_block0.c();
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*component*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*component*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$6(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const dialogStore = writable({});
    const lockStore = writable(false);

    const dialog = (component, ...params) => new Promise(resolve => dialogStore.set({
    		component,
    		callback(...args) {
    			dialogStore.set({});
    			resolve(...args);
    		},
    		params: writable(params)
    	}));

    function instance$e($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(5, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Dialogs', slots, []);
    	let lock = false, session, component, callback, params;
    	lockStore.subscribe(data => $$invalidate(0, { lock, session } = data, lock, $$invalidate(1, session)));

    	dialogStore.subscribe(async data => {

    		$$invalidate(2, { component, callback, params } = data, component, $$invalidate(3, callback), $$invalidate(4, params));
    		await tick();
    		const button = document.querySelector('button.ok');
    		if (button) button.focus();
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Dialogs> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => session.duplicate();
    	const click_handler_1 = () => session.lock();
    	const click_handler_2 = () => callback(false);
    	const click_handler_3 = () => callback(false);

    	$$self.$capture_state = () => ({
    		writable,
    		dialogStore,
    		lockStore,
    		dialog,
    		_: X,
    		tick,
    		lock,
    		session,
    		component,
    		callback,
    		params,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ('lock' in $$props) $$invalidate(0, lock = $$props.lock);
    		if ('session' in $$props) $$invalidate(1, session = $$props.session);
    		if ('component' in $$props) $$invalidate(2, component = $$props.component);
    		if ('callback' in $$props) $$invalidate(3, callback = $$props.callback);
    		if ('params' in $$props) $$invalidate(4, params = $$props.params);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		lock,
    		session,
    		component,
    		callback,
    		params,
    		$_,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3
    	];
    }

    class Dialogs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dialogs",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    const shortcutsList = {
      'O': () => console.log('ciao')
    };

    const ctrlShortcuts = (shortcuts) => Object.assign(shortcutsList, shortcuts);

    const handleShortcuts = function(e) {
      if (e.ctrlKey){
        const key = String.fromCharCode(e.keyCode).toUpperCase();
        if(key in shortcutsList){
          shortcutsList[key]();
          e.stopPropagation();
          e.stopImmediatePropagation();
          e.preventDefault();
        }
      }
    };

    const mimetype$2 = 'text/markdown';

    const decode$3 = (file) => {
      let result = {
        properties: {},
        chapters: {},
      };

      let key = '';

      const sanitizeLastChapter = () => {
        try{
        result.chapters[key].text = result.chapters[key]?.text?.replace(/[\n\s]+$/, "") || "";
        }catch(e){}
      };

      file.split('\n').forEach( (oLine, i) => { 
        const line = oLine.trim();
      
        // Parsing dell'header
        if(key === '' && !line.startsWith('### ')) {
          if(line.startsWith('# ')) {
            result.properties['title'] = line.replace(/\#/g, '').trim();
            return
          }
          const semicolon = line.indexOf(':');
          if(semicolon !== -1){
            result.properties[line.substr(0, semicolon)] = line.substr(semicolon + 1);
          }
          return
        }
      
        // Parsing del testo
        if(line.startsWith('### ')){
          // crea nuova entità
          if(key !== '') sanitizeLastChapter();
          key = line.substr(4).trim();
          let title = '';
          const index = key.indexOf('{#');
          if(index != -1){
            title = key.substr(0, index - 1).trim();
            key = key.substr(index + 2,  key.lastIndexOf('}') - 2 - index).trim();
          }
          result.chapters[key] = {
            title,
            text: '',
            group: '',
            flags: []
          };
          return
        }
      
        if(line.includes('![flag-') || line.includes('![][flag-')){
    ['final', 'fixed', 'death'].forEach( (flag) => {
            if(line.includes(`![flag-${flag}]`) || line.includes(`![][flag-${flag}]`)) result.chapters[key].flags.push(flag);
          });
          return
        }
        const groupIndex = line.indexOf('[group]:<> ("');
        if(groupIndex != -1){
          result.chapters[key].group = line.substr(groupIndex + 13, line.lastIndexOf('")') - groupIndex - 13);
          if(line.replaceAll(/\[group\]:<>[ ]*\([ ]*"[^"]*"[ ]*\)/g, '').trim() == '') return
        }
        result.chapters[key].text += oLine + '\n';
      });
      sanitizeLastChapter();

      result.key = String(result.properties['last_edited'] || Object.keys(result.chapters)[0]).trim();
      return result
    };





    var md = {mimetype: mimetype$2, decode: decode$3 };

    /***
     * Collection of utility functions used by Magebook but not strictly related to it.
     */
    /** Generate random string of given lenght.
    Default alphabet includes digits, upper and lower case chars. */
    const randomString = (length, characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') => {
        let result = '';
        const charactersLength = characters.length;
        for (let i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    };
    /** Shuffle array in-place. Taken from https://javascript.info/task/shuffle */
    const shuffleArray = (array) => {
        for (let i = array.length - 1; i > 0; i--) {
            let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i
            // swap elements array[i] and array[j]
            [array[i], array[j]] = [array[j], array[i]];
        }
    };
    /** Check if n is natural number */
    const isNatNumber$1 = (n) => (n > 0 || String(n) === "0") && Math.floor(n) === +n;
    /** Completely absorb and prevent click propagation */
    const preventClickPropagation = (node) => {
        // Helper function 
        const absorbEvent_ = (event) => {
            var e = event || window.event;
            e.stopPropagation && e.stopPropagation();
            e.cancelBubble = true;
        };
        node.ontouchstart = absorbEvent_;
        node.ontouchmove = absorbEvent_;
        node.ontouchend = absorbEvent_;
        node.ontouchcancel = absorbEvent_;
    };

    const generateChapterFullText = ({ key, title = '', flags = [], group = '', text = '', beforeSpaceLines = 2, afterSpaceLines = 0 }) => {
        let r = '\n'.repeat(beforeSpaceLines);
        r += (title) ? `### ${title} {#${key}}` : `### ${key}`;
        if (flags && flags.length > 0)
            r += "\n" + flags.map(flag => `![][flag-${flag}]`).join(' ');
        if (group)
            r += `\n[group]:<> ("${group}")`;
        if (text)
            r += `\n${text}`;
        return r + '\n'.repeat(afterSpaceLines);
    };
    const indexBook = (bookText) => {
        const result = {
            properties: {},
            chapters: new Map(),
            linksToChapter: new Map(),
            groups: new Set(),
        };
        let key = '';
        let chapter;
        let lastLineHadContent = false;
        let lastContentLinePlusOne = 1;
        const lines = bookText.split('\n');
        lines.forEach((oLine, zeroIndexlineNumber) => {
            const i = zeroIndexlineNumber; // We keep zero indexed as reference
            const line = oLine.trim();
            if (lastLineHadContent)
                lastContentLinePlusOne = i;
            lastLineHadContent = (line !== '');
            // Parsing dell'header
            if (key === '' && !line.startsWith('### ')) {
                if (line.startsWith('# ')) {
                    result.properties['title'] = line.replace(/\#/g, '').trim();
                    return;
                }
                const semicolon = line.indexOf(':');
                if (semicolon !== -1) {
                    result.properties[line.substr(0, semicolon)] = line.substr(semicolon + 1);
                }
                return;
            }
            // Parsing del testo
            if (line.startsWith('### ')) {
                if (key !== '') {
                    chapter.contentEnd = lastContentLinePlusOne - 1;
                    chapter.end = i - 1;
                    result.chapters.set(key, chapter);
                }
                // crea nuova entità
                key = line.substr(4).trim();
                let title = '';
                const index = key.indexOf('{#');
                if (index != -1) {
                    title = key.substr(0, index - 1).trim();
                    key = key.substr(index + 2, key.lastIndexOf('}') - 2 - index).trim();
                }
                chapter = {
                    title,
                    group: '',
                    start: lastContentLinePlusOne,
                    contentStart: i,
                    contentEnd: i,
                    end: i,
                    flags: [],
                    links: new Set(),
                };
                return;
            }
            if (line.includes('![flag-') || line.includes('![][flag-')) {
                ['final', 'fixed', 'death'].forEach((flag) => {
                    if (line.includes(`![flag-${flag}]`) || line.includes(`![][flag-${flag}]`))
                        chapter.flags.push(flag);
                });
                return;
            }
            const groupIndex = line.indexOf('[group]:<> ("');
            if (groupIndex != -1) {
                chapter.group = line.substr(groupIndex + 13, line.lastIndexOf('")') - groupIndex - 13);
                result.groups.add(chapter.group);
                return;
            }
            let myRegexp = new RegExp(`\\[([^\\[]*)\\]\\(\\s*\\#([^\\)]+)\\s*\\)`, "g");
            let match = myRegexp.exec(oLine);
            while (match != null) {
                const linkTarget = match[2].trim();
                chapter.links.add(linkTarget);
                if (!result.linksToChapter.has(linkTarget))
                    result.linksToChapter.set(linkTarget, new Set());
                result.linksToChapter.get(linkTarget).add(key);
                match = myRegexp.exec(oLine);
            }
        });
        if (key !== '') {
            chapter.end = lines.length - 1;
            chapter.contentEnd = lastLineHadContent ? chapter.end : lastContentLinePlusOne - 1;
            result.chapters.set(key, chapter);
        }
        return result;
    };
    const extractIndexedBook = (bookText) => {
        const result = Object.assign({ properties: {}, chapters: new Map(), linksToChapter: new Map(), groups: new Set() }, indexBook(bookText));
        const lines = bookText.split('\n');
        // Add titlePage text, the one before chapters
        result.titlePage = lines.slice(0, result.chapters.size > 0 ? result.chapters.values().next().value.contentStart : lines.length - 1).join('\n');
        // Add text of every chapter
        for (const [key, { contentStart, contentEnd }] of result.chapters) {
            const text = lines.slice(contentStart + 1, contentEnd + 1).filter(line => {
                const trimmedLine = line.trim();
                return !(trimmedLine.startsWith('###') || trimmedLine.includes('[group]:') || trimmedLine.includes('![][flag-') || trimmedLine.includes('![flag-'));
            }).join('\n');
            const fullText = lines.slice(contentStart, contentEnd + 1).join('\n');
            Object.assign(result.chapters.get(key), { text, fullText });
        }
        return result;
    };
    const remapBook = (indexedBook, chapterMap) => {
        // Create an object mapping old chapters' keys to new keys
        const inverseMap = new Map();
        for (const [key, val] of chapterMap)
            inverseMap.set(val, key);
        // Array of new keys
        const mapKeys = [...chapterMap.keys()];
        let result = indexedBook.titlePage;
        let insertingKeyAtIndex = 0;
        for (const [key, oldChapter] of indexedBook.chapters) {
            // If this chapter has been remapped, insert a new key here
            let newKey = inverseMap.has(key) ? mapKeys[insertingKeyAtIndex++] : key;
            // If key has been remapped, pick the remapped, otherwise keep the old one
            const { title, flags, group, text } = inverseMap.has(key) ? indexedBook.chapters.get(chapterMap.get(newKey)) : oldChapter;
            result += generateChapterFullText({
                key: newKey,
                title,
                flags,
                group,
                text,
                beforeSpaceLines: 1,
                afterSpaceLines: 2
            });
        }
        return result.replace(/\[([^\[]*)\](\(\s*#(\w+)\s*\))/g, (...all) => `[${all[1]}](#${inverseMap.has(all[3]) ? inverseMap.get(all[3]) : all[3]})`);
    };
    const shuffleBook = (bookText, { selectedFlags = [], groupsFilter = [], onlyNumbers = true } = {}) => {
        const indexedBook = extractIndexedBook(bookText);
        const toShuffle = [];
        /* Find key that should be shuffled */
        for (const [key, { group, flags }] of indexedBook.chapters) {
            // Skip key if is not numeric and onlyNumbers = true
            if (onlyNumbers && !isNatNumber$1(key))
                continue;
            // Skip key if groupsFilter and group is not whitelisted
            if (groupsFilter.length > 0 && !groupsFilter.includes(group))
                continue;
            // Skip key if chapter has a flag in selectedFlags
            if (flags.some(flag => selectedFlags.includes(flag)))
                continue;
            toShuffle.push(key);
        }
        // Shuffle keys
        const shuffledKeys = JSON.parse(JSON.stringify(toShuffle)); // Obj copy
        shuffleArray(shuffledKeys);
        return remapBook(indexedBook, new Map(toShuffle.map((key, i) => [String(key), String(shuffledKeys[i])])));
    };
    const compactBook = (bookText) => {
        const indexedBook = extractIndexedBook(bookText);
        const toCompact = [];
        const numbers = [];
        let i = 0;
        for (const [key,] of indexedBook.chapters) {
            if (isNatNumber$1(key)) {
                toCompact.push(key);
                numbers.push(++i);
            }
        }
        return remapBook(indexedBook, new Map(toCompact.map((key, i) => [String(numbers[i]), String(key)])));
    };
    const sortBook = (bookText) => {
        const indexedBook = extractIndexedBook(bookText);
        const toSort = [];
        for (const [key,] of indexedBook.chapters) {
            if (isNatNumber$1(key))
                toSort.push(Number(key));
        }
        toSort.sort();
        return remapBook(indexedBook, new Map(toSort.map(key => [String(key), String(key)])));
    };

    const hpccWasm = window["@hpcc-js/wasm"];


    const sanitizeLabel = (text) => text.replace(/\//g, "\\").replace(/\"/g, '\"');

    const generateGraph = (book) => {

      const indexedBook = indexBook(book);
      console.log(indexedBook);

      let s = `digraph{
    graph [fontname="arial", fontsize=10]; 
    node  [fontname="arial", fontsize=12, style="rounded,filled", shape=box];
    edge  [fontname="arial", fontsize=12];
  `;
      
      const groups = Object.fromEntries([...indexedBook.groups].map(group => [group, []]));


      for(let [key, {title, group, links}] of indexedBook.chapters){
        s += `
      ${key} [label="${sanitizeLabel(title ? `${key} - ${title}` : key)}"]`;

        for(const link of links){
          s += `
        ${key} -> ${link}`;
        }
        if(group) groups[group].push(key);
      }



      let clusterNumber = 0;
      for(let group of indexedBook.groups){
        s+= `
    
    subgraph cluster${clusterNumber++}{
      graph [fontname="arial", fontsize=10]; 
      node  [fontname="arial", fontsize=12, style="rounded,filled", shape=box];
      edge  [fontname="arial", fontsize=12];
      style=filled
      fillcolor="#EEEEEE"
      color=black
      label = "${sanitizeLabel(group)}"
      labelfontsize=14
      labelfontname=arial

      ${groups[group].join('; ')}
    }`;
      }
      s +='\n}';
      console.log(s);
      return s
    };


    // Return the src attribute of an img tag
    const graphToImg = (book) => {
      console.log("generating graph..");
      return hpccWasm.graphviz.layout(generateGraph(book), "svg", "dot")
    };

    var marked = {};

    /**
     * marked - a markdown parser
     * Copyright (c) 2011-2021, Christopher Jeffrey. (MIT Licensed)
     * https://github.com/markedjs/marked
     */

    (function (exports) {

    Object.defineProperty(exports, '__esModule', { value: true });

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      return Constructor;
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

      return arr2;
    }

    function _createForOfIteratorHelperLoose(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (it) return (it = it.call(o)).next.bind(it);

      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function getDefaults() {
      return {
        baseUrl: null,
        breaks: false,
        extensions: null,
        gfm: true,
        headerIds: true,
        headerPrefix: '',
        highlight: null,
        langPrefix: 'language-',
        mangle: true,
        pedantic: false,
        renderer: null,
        sanitize: false,
        sanitizer: null,
        silent: false,
        smartLists: false,
        smartypants: false,
        tokenizer: null,
        walkTokens: null,
        xhtml: false
      };
    }
    exports.defaults = getDefaults();
    function changeDefaults(newDefaults) {
      exports.defaults = newDefaults;
    }

    /**
     * Helpers
     */
    var escapeTest = /[&<>"']/;
    var escapeReplace = /[&<>"']/g;
    var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
    var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
    var escapeReplacements = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    var getEscapeReplacement = function getEscapeReplacement(ch) {
      return escapeReplacements[ch];
    };

    function escape(html, encode) {
      if (encode) {
        if (escapeTest.test(html)) {
          return html.replace(escapeReplace, getEscapeReplacement);
        }
      } else {
        if (escapeTestNoEncode.test(html)) {
          return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
        }
      }

      return html;
    }
    var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
    function unescape(html) {
      // explicitly match decimal, hex, and named HTML entities
      return html.replace(unescapeTest, function (_, n) {
        n = n.toLowerCase();
        if (n === 'colon') return ':';

        if (n.charAt(0) === '#') {
          return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
        }

        return '';
      });
    }
    var caret = /(^|[^\[])\^/g;
    function edit(regex, opt) {
      regex = regex.source || regex;
      opt = opt || '';
      var obj = {
        replace: function replace(name, val) {
          val = val.source || val;
          val = val.replace(caret, '$1');
          regex = regex.replace(name, val);
          return obj;
        },
        getRegex: function getRegex() {
          return new RegExp(regex, opt);
        }
      };
      return obj;
    }
    var nonWordAndColonTest = /[^\w:]/g;
    var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
    function cleanUrl(sanitize, base, href) {
      if (sanitize) {
        var prot;

        try {
          prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();
        } catch (e) {
          return null;
        }

        if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
          return null;
        }
      }

      if (base && !originIndependentUrl.test(href)) {
        href = resolveUrl(base, href);
      }

      try {
        href = encodeURI(href).replace(/%25/g, '%');
      } catch (e) {
        return null;
      }

      return href;
    }
    var baseUrls = {};
    var justDomain = /^[^:]+:\/*[^/]*$/;
    var protocol = /^([^:]+:)[\s\S]*$/;
    var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
    function resolveUrl(base, href) {
      if (!baseUrls[' ' + base]) {
        // we can ignore everything in base after the last slash of its path component,
        // but we might need to add _that_
        // https://tools.ietf.org/html/rfc3986#section-3
        if (justDomain.test(base)) {
          baseUrls[' ' + base] = base + '/';
        } else {
          baseUrls[' ' + base] = rtrim(base, '/', true);
        }
      }

      base = baseUrls[' ' + base];
      var relativeBase = base.indexOf(':') === -1;

      if (href.substring(0, 2) === '//') {
        if (relativeBase) {
          return href;
        }

        return base.replace(protocol, '$1') + href;
      } else if (href.charAt(0) === '/') {
        if (relativeBase) {
          return href;
        }

        return base.replace(domain, '$1') + href;
      } else {
        return base + href;
      }
    }
    var noopTest = {
      exec: function noopTest() {}
    };
    function merge(obj) {
      var i = 1,
          target,
          key;

      for (; i < arguments.length; i++) {
        target = arguments[i];

        for (key in target) {
          if (Object.prototype.hasOwnProperty.call(target, key)) {
            obj[key] = target[key];
          }
        }
      }

      return obj;
    }
    function splitCells(tableRow, count) {
      // ensure that every cell-delimiting pipe has a space
      // before it to distinguish it from an escaped pipe
      var row = tableRow.replace(/\|/g, function (match, offset, str) {
        var escaped = false,
            curr = offset;

        while (--curr >= 0 && str[curr] === '\\') {
          escaped = !escaped;
        }

        if (escaped) {
          // odd number of slashes means | is escaped
          // so we leave it alone
          return '|';
        } else {
          // add space before unescaped |
          return ' |';
        }
      }),
          cells = row.split(/ \|/);
      var i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe

      if (!cells[0].trim()) {
        cells.shift();
      }

      if (!cells[cells.length - 1].trim()) {
        cells.pop();
      }

      if (cells.length > count) {
        cells.splice(count);
      } else {
        while (cells.length < count) {
          cells.push('');
        }
      }

      for (; i < cells.length; i++) {
        // leading or trailing whitespace is ignored per the gfm spec
        cells[i] = cells[i].trim().replace(/\\\|/g, '|');
      }

      return cells;
    } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
    // /c*$/ is vulnerable to REDOS.
    // invert: Remove suffix of non-c chars instead. Default falsey.

    function rtrim(str, c, invert) {
      var l = str.length;

      if (l === 0) {
        return '';
      } // Length of suffix matching the invert condition.


      var suffLen = 0; // Step left until we fail to match the invert condition.

      while (suffLen < l) {
        var currChar = str.charAt(l - suffLen - 1);

        if (currChar === c && !invert) {
          suffLen++;
        } else if (currChar !== c && invert) {
          suffLen++;
        } else {
          break;
        }
      }

      return str.substr(0, l - suffLen);
    }
    function findClosingBracket(str, b) {
      if (str.indexOf(b[1]) === -1) {
        return -1;
      }

      var l = str.length;
      var level = 0,
          i = 0;

      for (; i < l; i++) {
        if (str[i] === '\\') {
          i++;
        } else if (str[i] === b[0]) {
          level++;
        } else if (str[i] === b[1]) {
          level--;

          if (level < 0) {
            return i;
          }
        }
      }

      return -1;
    }
    function checkSanitizeDeprecation(opt) {
      if (opt && opt.sanitize && !opt.silent) {
        console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
      }
    } // copied from https://stackoverflow.com/a/5450113/806777

    function repeatString(pattern, count) {
      if (count < 1) {
        return '';
      }

      var result = '';

      while (count > 1) {
        if (count & 1) {
          result += pattern;
        }

        count >>= 1;
        pattern += pattern;
      }

      return result + pattern;
    }

    function outputLink(cap, link, raw, lexer) {
      var href = link.href;
      var title = link.title ? escape(link.title) : null;
      var text = cap[1].replace(/\\([\[\]])/g, '$1');

      if (cap[0].charAt(0) !== '!') {
        lexer.state.inLink = true;
        var token = {
          type: 'link',
          raw: raw,
          href: href,
          title: title,
          text: text,
          tokens: lexer.inlineTokens(text, [])
        };
        lexer.state.inLink = false;
        return token;
      } else {
        return {
          type: 'image',
          raw: raw,
          href: href,
          title: title,
          text: escape(text)
        };
      }
    }

    function indentCodeCompensation(raw, text) {
      var matchIndentToCode = raw.match(/^(\s+)(?:```)/);

      if (matchIndentToCode === null) {
        return text;
      }

      var indentToCode = matchIndentToCode[1];
      return text.split('\n').map(function (node) {
        var matchIndentInNode = node.match(/^\s+/);

        if (matchIndentInNode === null) {
          return node;
        }

        var indentInNode = matchIndentInNode[0];

        if (indentInNode.length >= indentToCode.length) {
          return node.slice(indentToCode.length);
        }

        return node;
      }).join('\n');
    }
    /**
     * Tokenizer
     */


    var Tokenizer = /*#__PURE__*/function () {
      function Tokenizer(options) {
        this.options = options || exports.defaults;
      }

      var _proto = Tokenizer.prototype;

      _proto.space = function space(src) {
        var cap = this.rules.block.newline.exec(src);

        if (cap) {
          if (cap[0].length > 1) {
            return {
              type: 'space',
              raw: cap[0]
            };
          }

          return {
            raw: '\n'
          };
        }
      };

      _proto.code = function code(src) {
        var cap = this.rules.block.code.exec(src);

        if (cap) {
          var text = cap[0].replace(/^ {1,4}/gm, '');
          return {
            type: 'code',
            raw: cap[0],
            codeBlockStyle: 'indented',
            text: !this.options.pedantic ? rtrim(text, '\n') : text
          };
        }
      };

      _proto.fences = function fences(src) {
        var cap = this.rules.block.fences.exec(src);

        if (cap) {
          var raw = cap[0];
          var text = indentCodeCompensation(raw, cap[3] || '');
          return {
            type: 'code',
            raw: raw,
            lang: cap[2] ? cap[2].trim() : cap[2],
            text: text
          };
        }
      };

      _proto.heading = function heading(src) {
        var cap = this.rules.block.heading.exec(src);

        if (cap) {
          var text = cap[2].trim(); // remove trailing #s

          if (/#$/.test(text)) {
            var trimmed = rtrim(text, '#');

            if (this.options.pedantic) {
              text = trimmed.trim();
            } else if (!trimmed || / $/.test(trimmed)) {
              // CommonMark requires space before trailing #s
              text = trimmed.trim();
            }
          }

          var token = {
            type: 'heading',
            raw: cap[0],
            depth: cap[1].length,
            text: text,
            tokens: []
          };
          this.lexer.inline(token.text, token.tokens);
          return token;
        }
      };

      _proto.hr = function hr(src) {
        var cap = this.rules.block.hr.exec(src);

        if (cap) {
          return {
            type: 'hr',
            raw: cap[0]
          };
        }
      };

      _proto.blockquote = function blockquote(src) {
        var cap = this.rules.block.blockquote.exec(src);

        if (cap) {
          var text = cap[0].replace(/^ *> ?/gm, '');
          return {
            type: 'blockquote',
            raw: cap[0],
            tokens: this.lexer.blockTokens(text, []),
            text: text
          };
        }
      };

      _proto.list = function list(src) {
        var cap = this.rules.block.list.exec(src);

        if (cap) {
          var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;
          var bull = cap[1].trim();
          var isordered = bull.length > 1;
          var list = {
            type: 'list',
            raw: '',
            ordered: isordered,
            start: isordered ? +bull.slice(0, -1) : '',
            loose: false,
            items: []
          };
          bull = isordered ? "\\d{1,9}\\" + bull.slice(-1) : "\\" + bull;

          if (this.options.pedantic) {
            bull = isordered ? bull : '[*+-]';
          } // Get next list item


          var itemRegex = new RegExp("^( {0,3}" + bull + ")((?: [^\\n]*)?(?:\\n|$))"); // Check if current bullet point can start a new List Item

          while (src) {
            endEarly = false;

            if (!(cap = itemRegex.exec(src))) {
              break;
            }

            if (this.rules.block.hr.test(src)) {
              // End list if bullet was actually HR (possibly move into itemRegex?)
              break;
            }

            raw = cap[0];
            src = src.substring(raw.length);
            line = cap[2].split('\n', 1)[0];
            nextLine = src.split('\n', 1)[0];

            if (this.options.pedantic) {
              indent = 2;
              itemContents = line.trimLeft();
            } else {
              indent = cap[2].search(/[^ ]/); // Find first non-space char

              indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent

              itemContents = line.slice(indent);
              indent += cap[1].length;
            }

            blankLine = false;

            if (!line && /^ *$/.test(nextLine)) {
              // Items begin with at most one blank line
              raw += nextLine + '\n';
              src = src.substring(nextLine.length + 1);
              endEarly = true;
            }

            if (!endEarly) {
              var nextBulletRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}(?:[*+-]|\\d{1,9}[.)])"); // Check if following lines should be included in List Item

              while (src) {
                rawLine = src.split('\n', 1)[0];
                line = rawLine; // Re-align to follow commonmark nesting rules

                if (this.options.pedantic) {
                  line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');
                } // End list item if found start of new bullet


                if (nextBulletRegex.test(line)) {
                  break;
                }

                if (line.search(/[^ ]/) >= indent || !line.trim()) {
                  // Dedent if possible
                  itemContents += '\n' + line.slice(indent);
                } else if (!blankLine) {
                  // Until blank line, item doesn't need indentation
                  itemContents += '\n' + line;
                } else {
                  // Otherwise, improper indentation ends this item
                  break;
                }

                if (!blankLine && !line.trim()) {
                  // Check if current line is blank
                  blankLine = true;
                }

                raw += rawLine + '\n';
                src = src.substring(rawLine.length + 1);
              }
            }

            if (!list.loose) {
              // If the previous item ended with a blank line, the list is loose
              if (endsWithBlankLine) {
                list.loose = true;
              } else if (/\n *\n *$/.test(raw)) {
                endsWithBlankLine = true;
              }
            } // Check for task list items


            if (this.options.gfm) {
              istask = /^\[[ xX]\] /.exec(itemContents);

              if (istask) {
                ischecked = istask[0] !== '[ ] ';
                itemContents = itemContents.replace(/^\[[ xX]\] +/, '');
              }
            }

            list.items.push({
              type: 'list_item',
              raw: raw,
              task: !!istask,
              checked: ischecked,
              loose: false,
              text: itemContents
            });
            list.raw += raw;
          } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic


          list.items[list.items.length - 1].raw = raw.trimRight();
          list.items[list.items.length - 1].text = itemContents.trimRight();
          list.raw = list.raw.trimRight();
          var l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first

          for (i = 0; i < l; i++) {
            this.lexer.state.top = false;
            list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);

            if (!list.loose && list.items[i].tokens.some(function (t) {
              return t.type === 'space';
            })) {
              list.loose = true;
              list.items[i].loose = true;
            }
          }

          return list;
        }
      };

      _proto.html = function html(src) {
        var cap = this.rules.block.html.exec(src);

        if (cap) {
          var token = {
            type: 'html',
            raw: cap[0],
            pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
            text: cap[0]
          };

          if (this.options.sanitize) {
            token.type = 'paragraph';
            token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);
            token.tokens = [];
            this.lexer.inline(token.text, token.tokens);
          }

          return token;
        }
      };

      _proto.def = function def(src) {
        var cap = this.rules.block.def.exec(src);

        if (cap) {
          if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
          var tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
          return {
            type: 'def',
            tag: tag,
            raw: cap[0],
            href: cap[2],
            title: cap[3]
          };
        }
      };

      _proto.table = function table(src) {
        var cap = this.rules.block.table.exec(src);

        if (cap) {
          var item = {
            type: 'table',
            header: splitCells(cap[1]).map(function (c) {
              return {
                text: c
              };
            }),
            align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
            rows: cap[3] ? cap[3].replace(/\n[ \t]*$/, '').split('\n') : []
          };

          if (item.header.length === item.align.length) {
            item.raw = cap[0];
            var l = item.align.length;
            var i, j, k, row;

            for (i = 0; i < l; i++) {
              if (/^ *-+: *$/.test(item.align[i])) {
                item.align[i] = 'right';
              } else if (/^ *:-+: *$/.test(item.align[i])) {
                item.align[i] = 'center';
              } else if (/^ *:-+ *$/.test(item.align[i])) {
                item.align[i] = 'left';
              } else {
                item.align[i] = null;
              }
            }

            l = item.rows.length;

            for (i = 0; i < l; i++) {
              item.rows[i] = splitCells(item.rows[i], item.header.length).map(function (c) {
                return {
                  text: c
                };
              });
            } // parse child tokens inside headers and cells
            // header child tokens


            l = item.header.length;

            for (j = 0; j < l; j++) {
              item.header[j].tokens = [];
              this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);
            } // cell child tokens


            l = item.rows.length;

            for (j = 0; j < l; j++) {
              row = item.rows[j];

              for (k = 0; k < row.length; k++) {
                row[k].tokens = [];
                this.lexer.inlineTokens(row[k].text, row[k].tokens);
              }
            }

            return item;
          }
        }
      };

      _proto.lheading = function lheading(src) {
        var cap = this.rules.block.lheading.exec(src);

        if (cap) {
          var token = {
            type: 'heading',
            raw: cap[0],
            depth: cap[2].charAt(0) === '=' ? 1 : 2,
            text: cap[1],
            tokens: []
          };
          this.lexer.inline(token.text, token.tokens);
          return token;
        }
      };

      _proto.paragraph = function paragraph(src) {
        var cap = this.rules.block.paragraph.exec(src);

        if (cap) {
          var token = {
            type: 'paragraph',
            raw: cap[0],
            text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1],
            tokens: []
          };
          this.lexer.inline(token.text, token.tokens);
          return token;
        }
      };

      _proto.text = function text(src) {
        var cap = this.rules.block.text.exec(src);

        if (cap) {
          var token = {
            type: 'text',
            raw: cap[0],
            text: cap[0],
            tokens: []
          };
          this.lexer.inline(token.text, token.tokens);
          return token;
        }
      };

      _proto.escape = function escape$1(src) {
        var cap = this.rules.inline.escape.exec(src);

        if (cap) {
          return {
            type: 'escape',
            raw: cap[0],
            text: escape(cap[1])
          };
        }
      };

      _proto.tag = function tag(src) {
        var cap = this.rules.inline.tag.exec(src);

        if (cap) {
          if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
            this.lexer.state.inLink = true;
          } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
            this.lexer.state.inLink = false;
          }

          if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
            this.lexer.state.inRawBlock = true;
          } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
            this.lexer.state.inRawBlock = false;
          }

          return {
            type: this.options.sanitize ? 'text' : 'html',
            raw: cap[0],
            inLink: this.lexer.state.inLink,
            inRawBlock: this.lexer.state.inRawBlock,
            text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]
          };
        }
      };

      _proto.link = function link(src) {
        var cap = this.rules.inline.link.exec(src);

        if (cap) {
          var trimmedUrl = cap[2].trim();

          if (!this.options.pedantic && /^</.test(trimmedUrl)) {
            // commonmark requires matching angle brackets
            if (!/>$/.test(trimmedUrl)) {
              return;
            } // ending angle bracket cannot be escaped


            var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\');

            if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
              return;
            }
          } else {
            // find closing parenthesis
            var lastParenIndex = findClosingBracket(cap[2], '()');

            if (lastParenIndex > -1) {
              var start = cap[0].indexOf('!') === 0 ? 5 : 4;
              var linkLen = start + cap[1].length + lastParenIndex;
              cap[2] = cap[2].substring(0, lastParenIndex);
              cap[0] = cap[0].substring(0, linkLen).trim();
              cap[3] = '';
            }
          }

          var href = cap[2];
          var title = '';

          if (this.options.pedantic) {
            // split pedantic href and title
            var link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

            if (link) {
              href = link[1];
              title = link[3];
            }
          } else {
            title = cap[3] ? cap[3].slice(1, -1) : '';
          }

          href = href.trim();

          if (/^</.test(href)) {
            if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
              // pedantic allows starting angle bracket without ending angle bracket
              href = href.slice(1);
            } else {
              href = href.slice(1, -1);
            }
          }

          return outputLink(cap, {
            href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
            title: title ? title.replace(this.rules.inline._escapes, '$1') : title
          }, cap[0], this.lexer);
        }
      };

      _proto.reflink = function reflink(src, links) {
        var cap;

        if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
          var link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
          link = links[link.toLowerCase()];

          if (!link || !link.href) {
            var text = cap[0].charAt(0);
            return {
              type: 'text',
              raw: text,
              text: text
            };
          }

          return outputLink(cap, link, cap[0], this.lexer);
        }
      };

      _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {
        if (prevChar === void 0) {
          prevChar = '';
        }

        var match = this.rules.inline.emStrong.lDelim.exec(src);
        if (!match) return; // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well

        if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDF70-\uDF81\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE70-\uDEBE\uDEC0-\uDEC9\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/)) return;
        var nextChar = match[1] || match[2] || '';

        if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {
          var lLength = match[0].length - 1;
          var rDelim,
              rLength,
              delimTotal = lLength,
              midDelimTotal = 0;
          var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
          endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)

          maskedSrc = maskedSrc.slice(-1 * src.length + lLength);

          while ((match = endReg.exec(maskedSrc)) != null) {
            rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
            if (!rDelim) continue; // skip single * in __abc*abc__

            rLength = rDelim.length;

            if (match[3] || match[4]) {
              // found another Left Delim
              delimTotal += rLength;
              continue;
            } else if (match[5] || match[6]) {
              // either Left or Right Delim
              if (lLength % 3 && !((lLength + rLength) % 3)) {
                midDelimTotal += rLength;
                continue; // CommonMark Emphasis Rules 9-10
              }
            }

            delimTotal -= rLength;
            if (delimTotal > 0) continue; // Haven't found enough closing delimiters
            // Remove extra characters. *a*** -> *a*

            rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal); // Create `em` if smallest delimiter has odd char count. *a***

            if (Math.min(lLength, rLength) % 2) {
              var _text = src.slice(1, lLength + match.index + rLength);

              return {
                type: 'em',
                raw: src.slice(0, lLength + match.index + rLength + 1),
                text: _text,
                tokens: this.lexer.inlineTokens(_text, [])
              };
            } // Create 'strong' if smallest delimiter has even char count. **a***


            var text = src.slice(2, lLength + match.index + rLength - 1);
            return {
              type: 'strong',
              raw: src.slice(0, lLength + match.index + rLength + 1),
              text: text,
              tokens: this.lexer.inlineTokens(text, [])
            };
          }
        }
      };

      _proto.codespan = function codespan(src) {
        var cap = this.rules.inline.code.exec(src);

        if (cap) {
          var text = cap[2].replace(/\n/g, ' ');
          var hasNonSpaceChars = /[^ ]/.test(text);
          var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);

          if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
            text = text.substring(1, text.length - 1);
          }

          text = escape(text, true);
          return {
            type: 'codespan',
            raw: cap[0],
            text: text
          };
        }
      };

      _proto.br = function br(src) {
        var cap = this.rules.inline.br.exec(src);

        if (cap) {
          return {
            type: 'br',
            raw: cap[0]
          };
        }
      };

      _proto.del = function del(src) {
        var cap = this.rules.inline.del.exec(src);

        if (cap) {
          return {
            type: 'del',
            raw: cap[0],
            text: cap[2],
            tokens: this.lexer.inlineTokens(cap[2], [])
          };
        }
      };

      _proto.autolink = function autolink(src, mangle) {
        var cap = this.rules.inline.autolink.exec(src);

        if (cap) {
          var text, href;

          if (cap[2] === '@') {
            text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);
            href = 'mailto:' + text;
          } else {
            text = escape(cap[1]);
            href = text;
          }

          return {
            type: 'link',
            raw: cap[0],
            text: text,
            href: href,
            tokens: [{
              type: 'text',
              raw: text,
              text: text
            }]
          };
        }
      };

      _proto.url = function url(src, mangle) {
        var cap;

        if (cap = this.rules.inline.url.exec(src)) {
          var text, href;

          if (cap[2] === '@') {
            text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);
            href = 'mailto:' + text;
          } else {
            // do extended autolink path validation
            var prevCapZero;

            do {
              prevCapZero = cap[0];
              cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
            } while (prevCapZero !== cap[0]);

            text = escape(cap[0]);

            if (cap[1] === 'www.') {
              href = 'http://' + text;
            } else {
              href = text;
            }
          }

          return {
            type: 'link',
            raw: cap[0],
            text: text,
            href: href,
            tokens: [{
              type: 'text',
              raw: text,
              text: text
            }]
          };
        }
      };

      _proto.inlineText = function inlineText(src, smartypants) {
        var cap = this.rules.inline.text.exec(src);

        if (cap) {
          var text;

          if (this.lexer.state.inRawBlock) {
            text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
          } else {
            text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
          }

          return {
            type: 'text',
            raw: cap[0],
            text: text
          };
        }
      };

      return Tokenizer;
    }();

    /**
     * Block-Level Grammar
     */

    var block = {
      newline: /^(?: *(?:\n|$))+/,
      code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
      fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
      hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
      heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
      blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
      list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
      html: '^ {0,3}(?:' // optional indentation
      + '<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
      + '|comment[^\\n]*(\\n+|$)' // (2)
      + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' // (3)
      + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' // (4)
      + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' // (5)
      + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (6)
      + '|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) open tag
      + '|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) closing tag
      + ')',
      def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
      table: noopTest,
      lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
      // regex template, placeholders will be replaced according to different paragraph
      // interruption rules of commonmark and the original markdown spec:
      _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
      text: /^[^\n]+/
    };
    block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
    block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
    block.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();
    block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
    block.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();
    block.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block.def.source + ')').getRegex();
    block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';
    block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
    block.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
    block.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
    .replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
    .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
    .getRegex();
    block.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();
    /**
     * Normal Block Grammar
     */

    block.normal = merge({}, block);
    /**
     * GFM Block Grammar
     */

    block.gfm = merge({}, block.normal, {
      table: '^ *([^\\n ].*\\|.*)\\n' // Header
      + ' {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?' // Align
      + '(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)' // Cells

    });
    block.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
    .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
    .getRegex();
    block.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
    .replace('table', block.gfm.table) // interrupt paragraphs with table
    .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
    .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
    .getRegex();
    /**
     * Pedantic grammar (original John Gruber's loose markdown specification)
     */

    block.pedantic = merge({}, block.normal, {
      html: edit('^ *(?:comment *(?:\\n|\\s*$)' + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
      + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b').getRegex(),
      def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
      heading: /^(#{1,6})(.*)(?:\n+|$)/,
      fences: noopTest,
      // fences not supported
      paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()
    });
    /**
     * Inline-Level Grammar
     */

    var inline = {
      escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
      autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
      url: noopTest,
      tag: '^comment' + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
      + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
      + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
      + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
      + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>',
      // CDATA section
      link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
      reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
      nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
      reflinkSearch: 'reflink|nolink(?!\\()',
      emStrong: {
        lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
        //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
        //        () Skip orphan delim inside strong    (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
        rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
        rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/ // ^- Not allowed for _

      },
      code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
      br: /^( {2,}|\\)\n(?!\s*$)/,
      del: noopTest,
      text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
      punctuation: /^([\spunctuation])/
    }; // list of punctuation marks from CommonMark spec
    // without * and _ to handle the different emphasis markers * and _

    inline._punctuation = '!"#$%&\'()+\\-.,/:;<=>?@\\[\\]`^{|}~';
    inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>

    inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
    inline.escapedEmSt = /\\\*|\\_/g;
    inline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();
    inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
    inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();
    inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();
    inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
    inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
    inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
    inline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();
    inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
    inline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();
    inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
    inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
    inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
    inline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();
    inline.reflink = edit(inline.reflink).replace('label', inline._label).getRegex();
    inline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();
    /**
     * Normal Inline Grammar
     */

    inline.normal = merge({}, inline);
    /**
     * Pedantic Inline Grammar
     */

    inline.pedantic = merge({}, inline.normal, {
      strong: {
        start: /^__|\*\*/,
        middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
        endAst: /\*\*(?!\*)/g,
        endUnd: /__(?!_)/g
      },
      em: {
        start: /^_|\*/,
        middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
        endAst: /\*(?!\*)/g,
        endUnd: /_(?!_)/g
      },
      link: edit(/^!?\[(label)\]\((.*?)\)/).replace('label', inline._label).getRegex(),
      reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', inline._label).getRegex()
    });
    /**
     * GFM Inline Grammar
     */

    inline.gfm = merge({}, inline.normal, {
      escape: edit(inline.escape).replace('])', '~|])').getRegex(),
      _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
      url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
      _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
      del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
      text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
    });
    inline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();
    /**
     * GFM + Line Breaks Inline Grammar
     */

    inline.breaks = merge({}, inline.gfm, {
      br: edit(inline.br).replace('{2,}', '*').getRegex(),
      text: edit(inline.gfm.text).replace('\\b_', '\\b_| {2,}\\n').replace(/\{2,\}/g, '*').getRegex()
    });

    /**
     * smartypants text replacement
     */

    function smartypants(text) {
      return text // em-dashes
      .replace(/---/g, "\u2014") // en-dashes
      .replace(/--/g, "\u2013") // opening singles
      .replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018") // closing singles & apostrophes
      .replace(/'/g, "\u2019") // opening doubles
      .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C") // closing doubles
      .replace(/"/g, "\u201D") // ellipses
      .replace(/\.{3}/g, "\u2026");
    }
    /**
     * mangle email addresses
     */


    function mangle(text) {
      var out = '',
          i,
          ch;
      var l = text.length;

      for (i = 0; i < l; i++) {
        ch = text.charCodeAt(i);

        if (Math.random() > 0.5) {
          ch = 'x' + ch.toString(16);
        }

        out += '&#' + ch + ';';
      }

      return out;
    }
    /**
     * Block Lexer
     */


    var Lexer = /*#__PURE__*/function () {
      function Lexer(options) {
        this.tokens = [];
        this.tokens.links = Object.create(null);
        this.options = options || exports.defaults;
        this.options.tokenizer = this.options.tokenizer || new Tokenizer();
        this.tokenizer = this.options.tokenizer;
        this.tokenizer.options = this.options;
        this.tokenizer.lexer = this;
        this.inlineQueue = [];
        this.state = {
          inLink: false,
          inRawBlock: false,
          top: true
        };
        var rules = {
          block: block.normal,
          inline: inline.normal
        };

        if (this.options.pedantic) {
          rules.block = block.pedantic;
          rules.inline = inline.pedantic;
        } else if (this.options.gfm) {
          rules.block = block.gfm;

          if (this.options.breaks) {
            rules.inline = inline.breaks;
          } else {
            rules.inline = inline.gfm;
          }
        }

        this.tokenizer.rules = rules;
      }
      /**
       * Expose Rules
       */


      /**
       * Static Lex Method
       */
      Lexer.lex = function lex(src, options) {
        var lexer = new Lexer(options);
        return lexer.lex(src);
      }
      /**
       * Static Lex Inline Method
       */
      ;

      Lexer.lexInline = function lexInline(src, options) {
        var lexer = new Lexer(options);
        return lexer.inlineTokens(src);
      }
      /**
       * Preprocessing
       */
      ;

      var _proto = Lexer.prototype;

      _proto.lex = function lex(src) {
        src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ');
        this.blockTokens(src, this.tokens);
        var next;

        while (next = this.inlineQueue.shift()) {
          this.inlineTokens(next.src, next.tokens);
        }

        return this.tokens;
      }
      /**
       * Lexing
       */
      ;

      _proto.blockTokens = function blockTokens(src, tokens) {
        var _this = this;

        if (tokens === void 0) {
          tokens = [];
        }

        if (this.options.pedantic) {
          src = src.replace(/^ +$/gm, '');
        }

        var token, lastToken, cutSrc, lastParagraphClipped;

        while (src) {
          if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function (extTokenizer) {
            if (token = extTokenizer.call({
              lexer: _this
            }, src, tokens)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              return true;
            }

            return false;
          })) {
            continue;
          } // newline


          if (token = this.tokenizer.space(src)) {
            src = src.substring(token.raw.length);

            if (token.type) {
              tokens.push(token);
            }

            continue;
          } // code


          if (token = this.tokenizer.code(src)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.

            if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
              lastToken.raw += '\n' + token.raw;
              lastToken.text += '\n' + token.text;
              this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
            } else {
              tokens.push(token);
            }

            continue;
          } // fences


          if (token = this.tokenizer.fences(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // heading


          if (token = this.tokenizer.heading(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // hr


          if (token = this.tokenizer.hr(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // blockquote


          if (token = this.tokenizer.blockquote(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // list


          if (token = this.tokenizer.list(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // html


          if (token = this.tokenizer.html(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // def


          if (token = this.tokenizer.def(src)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1];

            if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
              lastToken.raw += '\n' + token.raw;
              lastToken.text += '\n' + token.raw;
              this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
            } else if (!this.tokens.links[token.tag]) {
              this.tokens.links[token.tag] = {
                href: token.href,
                title: token.title
              };
            }

            continue;
          } // table (gfm)


          if (token = this.tokenizer.table(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // lheading


          if (token = this.tokenizer.lheading(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // top-level paragraph
          // prevent paragraph consuming extensions by clipping 'src' to extension start


          cutSrc = src;

          if (this.options.extensions && this.options.extensions.startBlock) {
            (function () {
              var startIndex = Infinity;
              var tempSrc = src.slice(1);
              var tempStart = void 0;

              _this.options.extensions.startBlock.forEach(function (getStartIndex) {
                tempStart = getStartIndex.call({
                  lexer: this
                }, tempSrc);

                if (typeof tempStart === 'number' && tempStart >= 0) {
                  startIndex = Math.min(startIndex, tempStart);
                }
              });

              if (startIndex < Infinity && startIndex >= 0) {
                cutSrc = src.substring(0, startIndex + 1);
              }
            })();
          }

          if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
            lastToken = tokens[tokens.length - 1];

            if (lastParagraphClipped && lastToken.type === 'paragraph') {
              lastToken.raw += '\n' + token.raw;
              lastToken.text += '\n' + token.text;
              this.inlineQueue.pop();
              this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
            } else {
              tokens.push(token);
            }

            lastParagraphClipped = cutSrc.length !== src.length;
            src = src.substring(token.raw.length);
            continue;
          } // text


          if (token = this.tokenizer.text(src)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1];

            if (lastToken && lastToken.type === 'text') {
              lastToken.raw += '\n' + token.raw;
              lastToken.text += '\n' + token.text;
              this.inlineQueue.pop();
              this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
            } else {
              tokens.push(token);
            }

            continue;
          }

          if (src) {
            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

            if (this.options.silent) {
              console.error(errMsg);
              break;
            } else {
              throw new Error(errMsg);
            }
          }
        }

        this.state.top = true;
        return tokens;
      };

      _proto.inline = function inline(src, tokens) {
        this.inlineQueue.push({
          src: src,
          tokens: tokens
        });
      }
      /**
       * Lexing/Compiling
       */
      ;

      _proto.inlineTokens = function inlineTokens(src, tokens) {
        var _this2 = this;

        if (tokens === void 0) {
          tokens = [];
        }

        var token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong

        var maskedSrc = src;
        var match;
        var keepPrevChar, prevChar; // Mask out reflinks

        if (this.tokens.links) {
          var links = Object.keys(this.tokens.links);

          if (links.length > 0) {
            while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
              if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
                maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
              }
            }
          }
        } // Mask out other blocks


        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
          maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
        } // Mask out escaped em & strong delimiters


        while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
          maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
        }

        while (src) {
          if (!keepPrevChar) {
            prevChar = '';
          }

          keepPrevChar = false; // extensions

          if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function (extTokenizer) {
            if (token = extTokenizer.call({
              lexer: _this2
            }, src, tokens)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              return true;
            }

            return false;
          })) {
            continue;
          } // escape


          if (token = this.tokenizer.escape(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // tag


          if (token = this.tokenizer.tag(src)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1];

            if (lastToken && token.type === 'text' && lastToken.type === 'text') {
              lastToken.raw += token.raw;
              lastToken.text += token.text;
            } else {
              tokens.push(token);
            }

            continue;
          } // link


          if (token = this.tokenizer.link(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // reflink, nolink


          if (token = this.tokenizer.reflink(src, this.tokens.links)) {
            src = src.substring(token.raw.length);
            lastToken = tokens[tokens.length - 1];

            if (lastToken && token.type === 'text' && lastToken.type === 'text') {
              lastToken.raw += token.raw;
              lastToken.text += token.text;
            } else {
              tokens.push(token);
            }

            continue;
          } // em & strong


          if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // code


          if (token = this.tokenizer.codespan(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // br


          if (token = this.tokenizer.br(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // del (gfm)


          if (token = this.tokenizer.del(src)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // autolink


          if (token = this.tokenizer.autolink(src, mangle)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // url (gfm)


          if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            continue;
          } // text
          // prevent inlineText consuming extensions by clipping 'src' to extension start


          cutSrc = src;

          if (this.options.extensions && this.options.extensions.startInline) {
            (function () {
              var startIndex = Infinity;
              var tempSrc = src.slice(1);
              var tempStart = void 0;

              _this2.options.extensions.startInline.forEach(function (getStartIndex) {
                tempStart = getStartIndex.call({
                  lexer: this
                }, tempSrc);

                if (typeof tempStart === 'number' && tempStart >= 0) {
                  startIndex = Math.min(startIndex, tempStart);
                }
              });

              if (startIndex < Infinity && startIndex >= 0) {
                cutSrc = src.substring(0, startIndex + 1);
              }
            })();
          }

          if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
            src = src.substring(token.raw.length);

            if (token.raw.slice(-1) !== '_') {
              // Track prevChar before string of ____ started
              prevChar = token.raw.slice(-1);
            }

            keepPrevChar = true;
            lastToken = tokens[tokens.length - 1];

            if (lastToken && lastToken.type === 'text') {
              lastToken.raw += token.raw;
              lastToken.text += token.text;
            } else {
              tokens.push(token);
            }

            continue;
          }

          if (src) {
            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

            if (this.options.silent) {
              console.error(errMsg);
              break;
            } else {
              throw new Error(errMsg);
            }
          }
        }

        return tokens;
      };

      _createClass(Lexer, null, [{
        key: "rules",
        get: function get() {
          return {
            block: block,
            inline: inline
          };
        }
      }]);

      return Lexer;
    }();

    /**
     * Renderer
     */

    var Renderer = /*#__PURE__*/function () {
      function Renderer(options) {
        this.options = options || exports.defaults;
      }

      var _proto = Renderer.prototype;

      _proto.code = function code(_code, infostring, escaped) {
        var lang = (infostring || '').match(/\S*/)[0];

        if (this.options.highlight) {
          var out = this.options.highlight(_code, lang);

          if (out != null && out !== _code) {
            escaped = true;
            _code = out;
          }
        }

        _code = _code.replace(/\n$/, '') + '\n';

        if (!lang) {
          return '<pre><code>' + (escaped ? _code : escape(_code, true)) + '</code></pre>\n';
        }

        return '<pre><code class="' + this.options.langPrefix + escape(lang, true) + '">' + (escaped ? _code : escape(_code, true)) + '</code></pre>\n';
      };

      _proto.blockquote = function blockquote(quote) {
        return '<blockquote>\n' + quote + '</blockquote>\n';
      };

      _proto.html = function html(_html) {
        return _html;
      };

      _proto.heading = function heading(text, level, raw, slugger) {
        if (this.options.headerIds) {
          return '<h' + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + '</h' + level + '>\n';
        } // ignore IDs


        return '<h' + level + '>' + text + '</h' + level + '>\n';
      };

      _proto.hr = function hr() {
        return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
      };

      _proto.list = function list(body, ordered, start) {
        var type = ordered ? 'ol' : 'ul',
            startatt = ordered && start !== 1 ? ' start="' + start + '"' : '';
        return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
      };

      _proto.listitem = function listitem(text) {
        return '<li>' + text + '</li>\n';
      };

      _proto.checkbox = function checkbox(checked) {
        return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox"' + (this.options.xhtml ? ' /' : '') + '> ';
      };

      _proto.paragraph = function paragraph(text) {
        return '<p>' + text + '</p>\n';
      };

      _proto.table = function table(header, body) {
        if (body) body = '<tbody>' + body + '</tbody>';
        return '<table>\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
      };

      _proto.tablerow = function tablerow(content) {
        return '<tr>\n' + content + '</tr>\n';
      };

      _proto.tablecell = function tablecell(content, flags) {
        var type = flags.header ? 'th' : 'td';
        var tag = flags.align ? '<' + type + ' align="' + flags.align + '">' : '<' + type + '>';
        return tag + content + '</' + type + '>\n';
      } // span level renderer
      ;

      _proto.strong = function strong(text) {
        return '<strong>' + text + '</strong>';
      };

      _proto.em = function em(text) {
        return '<em>' + text + '</em>';
      };

      _proto.codespan = function codespan(text) {
        return '<code>' + text + '</code>';
      };

      _proto.br = function br() {
        return this.options.xhtml ? '<br/>' : '<br>';
      };

      _proto.del = function del(text) {
        return '<del>' + text + '</del>';
      };

      _proto.link = function link(href, title, text) {
        href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);

        if (href === null) {
          return text;
        }

        var out = '<a href="' + escape(href) + '"';

        if (title) {
          out += ' title="' + title + '"';
        }

        out += '>' + text + '</a>';
        return out;
      };

      _proto.image = function image(href, title, text) {
        href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);

        if (href === null) {
          return text;
        }

        var out = '<img src="' + href + '" alt="' + text + '"';

        if (title) {
          out += ' title="' + title + '"';
        }

        out += this.options.xhtml ? '/>' : '>';
        return out;
      };

      _proto.text = function text(_text) {
        return _text;
      };

      return Renderer;
    }();

    /**
     * TextRenderer
     * returns only the textual part of the token
     */
    var TextRenderer = /*#__PURE__*/function () {
      function TextRenderer() {}

      var _proto = TextRenderer.prototype;

      // no need for block level renderers
      _proto.strong = function strong(text) {
        return text;
      };

      _proto.em = function em(text) {
        return text;
      };

      _proto.codespan = function codespan(text) {
        return text;
      };

      _proto.del = function del(text) {
        return text;
      };

      _proto.html = function html(text) {
        return text;
      };

      _proto.text = function text(_text) {
        return _text;
      };

      _proto.link = function link(href, title, text) {
        return '' + text;
      };

      _proto.image = function image(href, title, text) {
        return '' + text;
      };

      _proto.br = function br() {
        return '';
      };

      return TextRenderer;
    }();

    /**
     * Slugger generates header id
     */
    var Slugger = /*#__PURE__*/function () {
      function Slugger() {
        this.seen = {};
      }

      var _proto = Slugger.prototype;

      _proto.serialize = function serialize(value) {
        return value.toLowerCase().trim() // remove html tags
        .replace(/<[!\/a-z].*?>/ig, '') // remove unwanted chars
        .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '').replace(/\s/g, '-');
      }
      /**
       * Finds the next safe (unique) slug to use
       */
      ;

      _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {
        var slug = originalSlug;
        var occurenceAccumulator = 0;

        if (this.seen.hasOwnProperty(slug)) {
          occurenceAccumulator = this.seen[originalSlug];

          do {
            occurenceAccumulator++;
            slug = originalSlug + '-' + occurenceAccumulator;
          } while (this.seen.hasOwnProperty(slug));
        }

        if (!isDryRun) {
          this.seen[originalSlug] = occurenceAccumulator;
          this.seen[slug] = 0;
        }

        return slug;
      }
      /**
       * Convert string to unique id
       * @param {object} options
       * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.
       */
      ;

      _proto.slug = function slug(value, options) {
        if (options === void 0) {
          options = {};
        }

        var slug = this.serialize(value);
        return this.getNextSafeSlug(slug, options.dryrun);
      };

      return Slugger;
    }();

    /**
     * Parsing & Compiling
     */

    var Parser = /*#__PURE__*/function () {
      function Parser(options) {
        this.options = options || exports.defaults;
        this.options.renderer = this.options.renderer || new Renderer();
        this.renderer = this.options.renderer;
        this.renderer.options = this.options;
        this.textRenderer = new TextRenderer();
        this.slugger = new Slugger();
      }
      /**
       * Static Parse Method
       */


      Parser.parse = function parse(tokens, options) {
        var parser = new Parser(options);
        return parser.parse(tokens);
      }
      /**
       * Static Parse Inline Method
       */
      ;

      Parser.parseInline = function parseInline(tokens, options) {
        var parser = new Parser(options);
        return parser.parseInline(tokens);
      }
      /**
       * Parse Loop
       */
      ;

      var _proto = Parser.prototype;

      _proto.parse = function parse(tokens, top) {
        if (top === void 0) {
          top = true;
        }

        var out = '',
            i,
            j,
            k,
            l2,
            l3,
            row,
            cell,
            header,
            body,
            token,
            ordered,
            start,
            loose,
            itemBody,
            item,
            checked,
            task,
            checkbox,
            ret;
        var l = tokens.length;

        for (i = 0; i < l; i++) {
          token = tokens[i]; // Run any renderer extensions

          if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
            ret = this.options.extensions.renderers[token.type].call({
              parser: this
            }, token);

            if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {
              out += ret || '';
              continue;
            }
          }

          switch (token.type) {
            case 'space':
              {
                continue;
              }

            case 'hr':
              {
                out += this.renderer.hr();
                continue;
              }

            case 'heading':
              {
                out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
                continue;
              }

            case 'code':
              {
                out += this.renderer.code(token.text, token.lang, token.escaped);
                continue;
              }

            case 'table':
              {
                header = ''; // header

                cell = '';
                l2 = token.header.length;

                for (j = 0; j < l2; j++) {
                  cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {
                    header: true,
                    align: token.align[j]
                  });
                }

                header += this.renderer.tablerow(cell);
                body = '';
                l2 = token.rows.length;

                for (j = 0; j < l2; j++) {
                  row = token.rows[j];
                  cell = '';
                  l3 = row.length;

                  for (k = 0; k < l3; k++) {
                    cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {
                      header: false,
                      align: token.align[k]
                    });
                  }

                  body += this.renderer.tablerow(cell);
                }

                out += this.renderer.table(header, body);
                continue;
              }

            case 'blockquote':
              {
                body = this.parse(token.tokens);
                out += this.renderer.blockquote(body);
                continue;
              }

            case 'list':
              {
                ordered = token.ordered;
                start = token.start;
                loose = token.loose;
                l2 = token.items.length;
                body = '';

                for (j = 0; j < l2; j++) {
                  item = token.items[j];
                  checked = item.checked;
                  task = item.task;
                  itemBody = '';

                  if (item.task) {
                    checkbox = this.renderer.checkbox(checked);

                    if (loose) {
                      if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {
                        item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;

                        if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
                          item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
                        }
                      } else {
                        item.tokens.unshift({
                          type: 'text',
                          text: checkbox
                        });
                      }
                    } else {
                      itemBody += checkbox;
                    }
                  }

                  itemBody += this.parse(item.tokens, loose);
                  body += this.renderer.listitem(itemBody, task, checked);
                }

                out += this.renderer.list(body, ordered, start);
                continue;
              }

            case 'html':
              {
                // TODO parse inline content if parameter markdown=1
                out += this.renderer.html(token.text);
                continue;
              }

            case 'paragraph':
              {
                out += this.renderer.paragraph(this.parseInline(token.tokens));
                continue;
              }

            case 'text':
              {
                body = token.tokens ? this.parseInline(token.tokens) : token.text;

                while (i + 1 < l && tokens[i + 1].type === 'text') {
                  token = tokens[++i];
                  body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
                }

                out += top ? this.renderer.paragraph(body) : body;
                continue;
              }

            default:
              {
                var errMsg = 'Token with "' + token.type + '" type was not found.';

                if (this.options.silent) {
                  console.error(errMsg);
                  return;
                } else {
                  throw new Error(errMsg);
                }
              }
          }
        }

        return out;
      }
      /**
       * Parse Inline Tokens
       */
      ;

      _proto.parseInline = function parseInline(tokens, renderer) {
        renderer = renderer || this.renderer;
        var out = '',
            i,
            token,
            ret;
        var l = tokens.length;

        for (i = 0; i < l; i++) {
          token = tokens[i]; // Run any renderer extensions

          if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
            ret = this.options.extensions.renderers[token.type].call({
              parser: this
            }, token);

            if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {
              out += ret || '';
              continue;
            }
          }

          switch (token.type) {
            case 'escape':
              {
                out += renderer.text(token.text);
                break;
              }

            case 'html':
              {
                out += renderer.html(token.text);
                break;
              }

            case 'link':
              {
                out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
                break;
              }

            case 'image':
              {
                out += renderer.image(token.href, token.title, token.text);
                break;
              }

            case 'strong':
              {
                out += renderer.strong(this.parseInline(token.tokens, renderer));
                break;
              }

            case 'em':
              {
                out += renderer.em(this.parseInline(token.tokens, renderer));
                break;
              }

            case 'codespan':
              {
                out += renderer.codespan(token.text);
                break;
              }

            case 'br':
              {
                out += renderer.br();
                break;
              }

            case 'del':
              {
                out += renderer.del(this.parseInline(token.tokens, renderer));
                break;
              }

            case 'text':
              {
                out += renderer.text(token.text);
                break;
              }

            default:
              {
                var errMsg = 'Token with "' + token.type + '" type was not found.';

                if (this.options.silent) {
                  console.error(errMsg);
                  return;
                } else {
                  throw new Error(errMsg);
                }
              }
          }
        }

        return out;
      };

      return Parser;
    }();

    /**
     * Marked
     */

    function marked(src, opt, callback) {
      // throw error in case of non string input
      if (typeof src === 'undefined' || src === null) {
        throw new Error('marked(): input parameter is undefined or null');
      }

      if (typeof src !== 'string') {
        throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
      }

      if (typeof opt === 'function') {
        callback = opt;
        opt = null;
      }

      opt = merge({}, marked.defaults, opt || {});
      checkSanitizeDeprecation(opt);

      if (callback) {
        var highlight = opt.highlight;
        var tokens;

        try {
          tokens = Lexer.lex(src, opt);
        } catch (e) {
          return callback(e);
        }

        var done = function done(err) {
          var out;

          if (!err) {
            try {
              if (opt.walkTokens) {
                marked.walkTokens(tokens, opt.walkTokens);
              }

              out = Parser.parse(tokens, opt);
            } catch (e) {
              err = e;
            }
          }

          opt.highlight = highlight;
          return err ? callback(err) : callback(null, out);
        };

        if (!highlight || highlight.length < 3) {
          return done();
        }

        delete opt.highlight;
        if (!tokens.length) return done();
        var pending = 0;
        marked.walkTokens(tokens, function (token) {
          if (token.type === 'code') {
            pending++;
            setTimeout(function () {
              highlight(token.text, token.lang, function (err, code) {
                if (err) {
                  return done(err);
                }

                if (code != null && code !== token.text) {
                  token.text = code;
                  token.escaped = true;
                }

                pending--;

                if (pending === 0) {
                  done();
                }
              });
            }, 0);
          }
        });

        if (pending === 0) {
          done();
        }

        return;
      }

      try {
        var _tokens = Lexer.lex(src, opt);

        if (opt.walkTokens) {
          marked.walkTokens(_tokens, opt.walkTokens);
        }

        return Parser.parse(_tokens, opt);
      } catch (e) {
        e.message += '\nPlease report this to https://github.com/markedjs/marked.';

        if (opt.silent) {
          return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';
        }

        throw e;
      }
    }
    /**
     * Options
     */

    marked.options = marked.setOptions = function (opt) {
      merge(marked.defaults, opt);
      changeDefaults(marked.defaults);
      return marked;
    };

    marked.getDefaults = getDefaults;
    marked.defaults = exports.defaults;
    /**
     * Use Extension
     */

    marked.use = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var opts = merge.apply(void 0, [{}].concat(args));
      var extensions = marked.defaults.extensions || {
        renderers: {},
        childTokens: {}
      };
      var hasExtensions;
      args.forEach(function (pack) {
        // ==-- Parse "addon" extensions --== //
        if (pack.extensions) {
          hasExtensions = true;
          pack.extensions.forEach(function (ext) {
            if (!ext.name) {
              throw new Error('extension name required');
            }

            if (ext.renderer) {
              // Renderer extensions
              var prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;

              if (prevRenderer) {
                // Replace extension with func to run new extension but fall back if false
                extensions.renderers[ext.name] = function () {
                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                  }

                  var ret = ext.renderer.apply(this, args);

                  if (ret === false) {
                    ret = prevRenderer.apply(this, args);
                  }

                  return ret;
                };
              } else {
                extensions.renderers[ext.name] = ext.renderer;
              }
            }

            if (ext.tokenizer) {
              // Tokenizer Extensions
              if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {
                throw new Error("extension level must be 'block' or 'inline'");
              }

              if (extensions[ext.level]) {
                extensions[ext.level].unshift(ext.tokenizer);
              } else {
                extensions[ext.level] = [ext.tokenizer];
              }

              if (ext.start) {
                // Function to check for start of token
                if (ext.level === 'block') {
                  if (extensions.startBlock) {
                    extensions.startBlock.push(ext.start);
                  } else {
                    extensions.startBlock = [ext.start];
                  }
                } else if (ext.level === 'inline') {
                  if (extensions.startInline) {
                    extensions.startInline.push(ext.start);
                  } else {
                    extensions.startInline = [ext.start];
                  }
                }
              }
            }

            if (ext.childTokens) {
              // Child tokens to be visited by walkTokens
              extensions.childTokens[ext.name] = ext.childTokens;
            }
          });
        } // ==-- Parse "overwrite" extensions --== //


        if (pack.renderer) {
          (function () {
            var renderer = marked.defaults.renderer || new Renderer();

            var _loop = function _loop(prop) {
              var prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false

              renderer[prop] = function () {
                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                var ret = pack.renderer[prop].apply(renderer, args);

                if (ret === false) {
                  ret = prevRenderer.apply(renderer, args);
                }

                return ret;
              };
            };

            for (var prop in pack.renderer) {
              _loop(prop);
            }

            opts.renderer = renderer;
          })();
        }

        if (pack.tokenizer) {
          (function () {
            var tokenizer = marked.defaults.tokenizer || new Tokenizer();

            var _loop2 = function _loop2(prop) {
              var prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false

              tokenizer[prop] = function () {
                for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                  args[_key4] = arguments[_key4];
                }

                var ret = pack.tokenizer[prop].apply(tokenizer, args);

                if (ret === false) {
                  ret = prevTokenizer.apply(tokenizer, args);
                }

                return ret;
              };
            };

            for (var prop in pack.tokenizer) {
              _loop2(prop);
            }

            opts.tokenizer = tokenizer;
          })();
        } // ==-- Parse WalkTokens extensions --== //


        if (pack.walkTokens) {
          var _walkTokens = marked.defaults.walkTokens;

          opts.walkTokens = function (token) {
            pack.walkTokens.call(this, token);

            if (_walkTokens) {
              _walkTokens.call(this, token);
            }
          };
        }

        if (hasExtensions) {
          opts.extensions = extensions;
        }

        marked.setOptions(opts);
      });
    };
    /**
     * Run callback for every token
     */


    marked.walkTokens = function (tokens, callback) {
      var _loop3 = function _loop3() {
        var token = _step.value;
        callback.call(marked, token);

        switch (token.type) {
          case 'table':
            {
              for (var _iterator2 = _createForOfIteratorHelperLoose(token.header), _step2; !(_step2 = _iterator2()).done;) {
                var cell = _step2.value;
                marked.walkTokens(cell.tokens, callback);
              }

              for (var _iterator3 = _createForOfIteratorHelperLoose(token.rows), _step3; !(_step3 = _iterator3()).done;) {
                var row = _step3.value;

                for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {
                  var _cell = _step4.value;
                  marked.walkTokens(_cell.tokens, callback);
                }
              }

              break;
            }

          case 'list':
            {
              marked.walkTokens(token.items, callback);
              break;
            }

          default:
            {
              if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
                // Walk any extensions
                marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {
                  marked.walkTokens(token[childTokens], callback);
                });
              } else if (token.tokens) {
                marked.walkTokens(token.tokens, callback);
              }
            }
        }
      };

      for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {
        _loop3();
      }
    };
    /**
     * Parse Inline
     */


    marked.parseInline = function (src, opt) {
      // throw error in case of non string input
      if (typeof src === 'undefined' || src === null) {
        throw new Error('marked.parseInline(): input parameter is undefined or null');
      }

      if (typeof src !== 'string') {
        throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
      }

      opt = merge({}, marked.defaults, opt || {});
      checkSanitizeDeprecation(opt);

      try {
        var tokens = Lexer.lexInline(src, opt);

        if (opt.walkTokens) {
          marked.walkTokens(tokens, opt.walkTokens);
        }

        return Parser.parseInline(tokens, opt);
      } catch (e) {
        e.message += '\nPlease report this to https://github.com/markedjs/marked.';

        if (opt.silent) {
          return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';
        }

        throw e;
      }
    };
    /**
     * Expose
     */


    marked.Parser = Parser;
    marked.parser = Parser.parse;
    marked.Renderer = Renderer;
    marked.TextRenderer = TextRenderer;
    marked.Lexer = Lexer;
    marked.lexer = Lexer.lex;
    marked.Tokenizer = Tokenizer;
    marked.Slugger = Slugger;
    marked.parse = marked;
    var options = marked.options;
    var setOptions = marked.setOptions;
    var use = marked.use;
    var walkTokens = marked.walkTokens;
    var parseInline = marked.parseInline;
    var parse = marked;
    var parser = Parser.parse;
    var lexer = Lexer.lex;

    exports.Lexer = Lexer;
    exports.Parser = Parser;
    exports.Renderer = Renderer;
    exports.Slugger = Slugger;
    exports.TextRenderer = TextRenderer;
    exports.Tokenizer = Tokenizer;
    exports.getDefaults = getDefaults;
    exports.lexer = lexer;
    exports.marked = marked;
    exports.options = options;
    exports.parse = parse;
    exports.parseInline = parseInline;
    exports.parser = parser;
    exports.setOptions = setOptions;
    exports.use = use;
    exports.walkTokens = walkTokens;
    }(marked));

    if(typeof DOMParser === 'undefined'){
      const JSDOM = global.JSDOM || require("jsdom").JSDOM;
      global.DOMParser = new JSDOM().window.DOMParser;
      global.document = new JSDOM().window.document;
    }

    const a = document.createElement('p');
    const raw    = t => (a.innerHTML = t, a.textContent);
    const mangle = t => (a.textContent = t, a.innerHTML);


    const tokenizer = {
      heading(src){},
      nptable(src){},
      hr(src){},
      blockquote(src){},
      code(src){},
      list(src){},
      def(src){},
      table(src){},
      lheading(src){},

    };

    marked.marked.use({ tokenizer });


    const defaultHTMLRenderer = {
      html:      text => mangle(text),
      paragraph: text => `${text}<br>`,
      strong:    text => `<b>${text}</b>`,
      em:        text => `<i>${text}</i>`,
      codespan:  text => raw(text),
      code:      text => '',
    };

    const encodeToHTML = (text, renderer = defaultHTMLRenderer) => {  
      marked.marked.use({renderer: new marked.marked.Renderer()});
      marked.marked.use({ 
        renderer:{
          ...renderer,
          code: (text, ...all) => renderer.code(text.replace(/\n\n/g, '\n').replace('\n', ''), ...all)
        } 
      });
      return marked.marked(text.replace(/\n/g, '\n\n'))
    };

    const isNumber = isNatNumber$1;

    const mimetype$1 = 'application/xml';


    const sortedKeys = (chapters) => Object.keys(chapters).sort( (a, b) => {
      const aIsNumber = isNumber(a);
      const bIsNumber = isNumber(b);

      if(!aIsNumber && bIsNumber) return -1
      if(aIsNumber && !bIsNumber) return +1
      if(!aIsNumber && !bIsNumber) return a.localeCompare(b)
      if(aIsNumber && bIsNumber) return  parseInt(a, 10) - parseInt(b, 10)
    });


    const decode$2 = xlgc => {
      const properties = {}, chapters = {};

      const attributesWhitelist = [
        'lgc_version',
        'title',
        'author',
        'version',
        'revision',
        'table_of_contents',
        'editing_action',
        'editing_chapter',
      ];
      // Usa un DOMParser per interpretare il file xml
      const xmlDoc = new DOMParser().parseFromString(xlgc, 'text/xml')
      ;[...(xmlDoc.documentElement.children ||xmlDoc.documentElement.childNodes) ].forEach(entity => {
        const id = entity.getAttribute('name');
        const type = entity.getAttribute('type');
        const group = entity.getAttribute('group');

        // L'entità game è quella contenente i metadati come autore, revisioni, ...
        // Queste informazioni vengono memorizzate all'interno di info con la stessa chiave
        if (type === 'entity' && id === 'game') {
    [...entity.children].forEach(node => {
            const nodeName = node.getAttribute('name');
            const nodeValue = node.innerHTML.substring(9, node.innerHTML.length - 3);
            if(nodeName == 'editing_chapter') ; else if (attributesWhitelist.includes(nodeName)){
              properties[nodeName] = nodeValue;
            }
          });
          return // Termina qui, non aggiunge questa entità a section
        }

        if (type === 'entity' && id === 'map_data') {
    [...entity.children].forEach(node => {
            const nodeName = node.getAttribute('name');
            const nodeValue = node.innerHTML.substring(9, node.innerHTML.length - 3);
            if (nodeName === 'map_file') properties.map = nodeValue;
          });
          return // Termina qui, non aggiunge questa entità a section
        }

        let chapter = {
          title: '',
          text: '',
          flags: []
        };
        if (group) chapter.group = group
          // Itera i nodi figli dell'entity alla ricerca di flag, titolo e contenuto
        ;[...entity.children].forEach(node => {
          const nodeName = node.getAttribute('name');
          const nodeValue = node.innerHTML.substring(9, node.innerHTML.length - 3);
          if (nodeName === 'chapter_title' && nodeValue) chapter.title = nodeValue;
          if (nodeName === 'description') chapter.text = nodeValue;
          if (nodeName === 'map_position') chapter.map = nodeValue;
          if (nodeName.startsWith('flag_') && nodeValue === 'true') {
            chapter.flags.push(nodeName.substring(5)); // Aggiunge la flag
          }
        });
        // Inserisce nel jlgc l'oggetto section appena creato
        chapter.text =  raw(chapter.text.replace(/\<\/\p\>/g,'\n').replace(/\<\p\>/g,'')
          .replace(/\<i\>/g, '&lt;i&gt;').replace(/\<\/i\>/g, '&lt;/i&gt;')
          .replace(/\<b\>/g, '&lt;b&gt;').replace(/\<\/b\>/g, '&lt;/b&gt;')
          .replace(/\<u\>/g, '&lt;b&gt;').replace(/\<\/u\>/g, '&lt;/b&gt;')
          .replace(/{link (\w+):([^\}\{]+)}/g, (...all) =>`[${all[2].trim() == '@T' ? '': all[2]}](#${all[1]})`  )
          .replace(/[\n\s]+$/, ""));
        chapters[id] = chapter;
      });


        let s = `# ${properties.title}\n`;
        Object.entries(properties).forEach(([key, value]) => {
          if(key !== 'title')  s+=`${key}: ${value.trim()}\n`;
        });
        s+='\n\n\n';
      
        sortedKeys(chapters).forEach( key => {
          const chapter = chapters[key];
          s+= chapter.title ? `### ${chapter.title} {#${key}}\n` : `### ${key}\n`;
          if(chapter.flags && chapter.flags.length){
            const flags = {
              'death': '![][flag-death]',
              'final': '![][flag-final]',
              'fixed': '![][flag-fixed]',
            };
            s+= chapter.flags.map( key => flags[key]).join(' ') + '\n';
          }
          if(chapter.group){
            s+=`[group]:<> ("${chapter.group}")\n`;
          }
          s+= chapter.text.replace(/\n+$/, "") + '\n\n\n';
        });
      
      return s
        
    };




    const whitelist$1 = ['<b>', '</b>', '<i>', '</i>', '<u>', '</u>'];

    /* ENCODING */
    const renderer$2 = {
      html:      text => whitelist$1.includes(text.trim().toLowerCase()) ? text.trim().toLowerCase() : mangle(text),
      paragraph: text => `<p>${text}</p>`,
      strong:    text => `<b>${text}</b>`,
      em:        text => `<i>${text}</i>`,
      codespan:  text => '`' + text + '`',
      code: (code, lang) => '<p>```' + lang + mangle(code).replace(/\n/g, '</p><p>') + '```</p>',
      link: (href,i, text) => `{link ${href.replace('#', '')}:${text || '@T'}}`
    };

    // Crea la sezione "game" con i metadati in info
    const encodeProperties = (properties, key) =>
      `<entity group="setup" name="game" type="entity">` +
        `<attribute name="description" type="string"><![CDATA[<p></p>]]></attribute>` +
        `<attribute name="chapter_title" type="string"/>` +
        `<attribute name="lgc_version" type="string"><![CDATA[${properties.lgc_version || ''}]]></attribute>` +
        `<attribute name="title" type="string"><![CDATA[${properties.title     || ''}]]></attribute>` +
        `<attribute name="author" type="string"><![CDATA[${properties.author   || ''}]]></attribute>` +
        `<attribute name="version" type="string"><![CDATA[${properties.version || ''}]]></attribute>` +
        `<attribute name="revision" type="integer"><![CDATA[${properties.revision || '1'}]]></attribute>` +
        `<attribute name="editing_action" type="string"><![CDATA[${properties.editing_action ||  'WRITING'}]]></attribute>` +
        `<attribute name="table_of_contents" type="string"><![CDATA[${properties.table_of_contents || 'P(ALL)'}]]></attribute>` +
        `<attribute name="editing_chapter" type="string"><![CDATA[${key || '1'}]]></attribute>` +
      `</entity>`;

    const encodeMap = properties => !properties.map ? '' : 
      `<entity group="setup" name="map_data" type="entity">` +
        `<attribute name="description" type="string"><![CDATA[<p></p>]]></attribute>` +
        `<attribute name="chapter_title" type="string"/>` +
        `<attribute name="map_file" type="string"><![CDATA[${properties.map}]]></attribute>` +
      `</entity>`;

    // Crea una sezione/paragrafo
    const encodeEntity = (key, entity) =>
      `<entity group="${entity.group || ''}" name="${key}" type="${isNumber(key) ? 'chapter' : 'section'}">` +
      `<attribute name="description" type="string"><![CDATA[${encodeToHTML(entity.text,renderer$2) || '<p></p>'}]]></attribute>` +
      `<attribute name="chapter_title" type="string"><![CDATA[${entity.title ||  ''}]]></attribute>` +
      `${ entity.type && entity.type !== 'chapter'  ? '' : 
    `<attribute name="flag_final" type="boolean"><![CDATA[${ entity.flags && entity.flags.includes('final') ? 'true' : 'false'}]]></attribute>` +
    `<attribute name="flag_fixed" type="boolean"><![CDATA[${ entity.flags && entity.flags.includes('fixed') ? 'true' : 'false'}]]></attribute>` +
    `<attribute name="flag_death" type="boolean"><![CDATA[${ entity.flags && entity.flags.includes('death') ? 'true' : 'false'}]]></attribute>`
  }` + (!entity.map ? '' : 
        `<attribute name="map_position" type="string"><![CDATA[${entity.map || ''}]]></attribute>`) +
      `</entity>`;

    // Codifica il libro
    const encode$2 = book => {

      const indexedBook = extractIndexedBook(book);

      const { chapters, properties} = indexedBook;
      let r =`<?xml version="1.0" encoding="UTF-8"?><entities>${
      encodeProperties(properties) +
      encodeMap(properties)}`;

      for( const [key, chapter] of chapters){
        r += encodeEntity(key, chapter);
      }

      return r + `</entities>`
    };


    var xlgc = { decode: decode$2, encode: encode$2, mimetype: mimetype$1 };

    const customStyles = `
  <style:style style:name="right" style:family="paragraph" style:parent-style-name="Standard">
    <style:paragraph-properties fo:text-align="end" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="justify" style:family="paragraph" style:parent-style-name="Standard">
    <style:paragraph-properties fo:text-align="justify" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="break" style:family="paragraph" style:parent-style-name="Standard">
    <style:paragraph-properties fo:break-after="page"/>
  </style:style>
  <style:style style:name="bold" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="underline" style:family="text">
    <style:text-properties style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color"/>
  </style:style>
  <style:style style:name="italic" style:family="text">
    <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>`;

    const template =  (content) =>
`<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:css3t="http://www.w3.org/TR/css3-text/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ooo="http://openoffice.org/2004/office" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:rpt="http://openoffice.org/2005/report" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><meta:creation-date>2017-01-01T14:28:30.863048091</meta:creation-date><meta:generator>LibreOffice/6.4.1.2$Linux_X86_64 LibreOffice_project/e1ad903d8acbc5f5b474f1d8ec3defef24b8c46b</meta:generator><meta:editing-cycles>0</meta:editing-cycles><meta:editing-duration>P0D</meta:editing-duration><meta:document-statistic meta:table-count="0" meta:image-count="0" meta:object-count="0" meta:page-count="2" meta:paragraph-count="14" meta:word-count="48" meta:character-count="272" meta:non-whitespace-character-count="237"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">7895</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">33413</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">15162</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">16095</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">7869</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">7895</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">33412</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">23056</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">140</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">true</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">1031266</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedOnlyUsedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">false</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveThumbnail" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="EmbedComplexScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DisableOffPagePositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedAsianScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">1168269</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedLatinScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ContinuousEndnotes" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmptyDbFieldHidesPara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="FreeSans1" svg:font-family="FreeSans" style:font-family-generic="swiss"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Times New Roman" svg:font-family="&apos;Times New Roman&apos;" style:font-adornments="Normale" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="FreeSans" svg:font-family="FreeSans" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans CJK SC Regular" svg:font-family="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.3cm" draw:shadow-offset-y="0.3cm" draw:start-line-spacing-horizontal="0.283cm" draw:start-line-spacing-vertical="0.283cm" draw:end-line-spacing-horizontal="0.283cm" draw:end-line-spacing-vertical="0.283cm" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:orphans="2" fo:widows="2" fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="1.251cm" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2" loext:hyphenation-no-caps="false"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text">
   <style:paragraph-properties fo:line-height="115%" style:page-number="auto"/>
   <style:text-properties style:font-name="Times New Roman" fo:font-family="&apos;Times New Roman&apos;" style:font-style-name="Normale" style:font-family-generic="roman" style:font-pitch="variable" fo:language="zxx" fo:country="none"/>
  </style:style>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Noto Sans CJK SC Regular" style:font-family-asian="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="FreeSans" style:font-family-complex="FreeSans" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Heading_3" style:family="paragraph" style:display-name="Heading 3" style:parent-style-name="Heading" style:next-style-name="Standard" style:default-outline-level="3" style:class="text">
    <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
    <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
    <style:paragraph-properties fo:line-height="115%" style:page-number="auto"/>
    <style:text-properties style:font-name="Times New Roman" fo:font-family="&apos;Times New Roman&apos;" style:font-style-name="Normale" style:font-family-generic="roman" fo:font-size="12pt" style:font-pitch="variable" fo:language="zxx" fo:country="none"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.247cm" loext:contextual-spacing="false" fo:line-height="120%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.212cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Visited_20_Internet_20_Link" style:display-name="Visited Internet Link" style:family="text">
   <style:text-properties fo:color="#800000" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.499cm" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>${customStyles}
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="14.801cm" fo:page-height="21.001cm" style:num-format="1" style:print-orientation="portrait" fo:margin-top="2.499cm" fo:margin-bottom="2cm" fo:margin-left="2cm" fo:margin-right="2cm" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.706cm" style:layout-grid-ruby-height="0.353cm" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0cm">
    <style:footnote-sep style:width="0.018cm" style:distance-before-sep="0.101cm" style:distance-after-sep="0.101cm" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <office:forms form:automatic-focus="false" form:apply-design-mode="false"/>
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Figure"/>
   </text:sequence-decls>${content}
  </office:text>
 </office:body>
</office:document>`;

    const mimetype = 'application/vnd.oasis.opendocument.text';

    const whitemap = {
      '<b>': `<text:span text:style-name="bold">`, 
      '</b>': `</text:span>`,  
      '<i>': `<text:span text:style-name="italic">`, 
      '</i>': `</text:span>`,
      '<u>': `<text:span text:style-name="underline">`, 
      '</u>': `</text:span>`,
    };


    const sanitize = (text) => {
      const opened = (text.match(/\<text\:span/g) || []).length;
      const closed = (text.match(/\<\/text\:span\>/g) || []).length;
      if(opened < closed) return '<text:span>'.repeat(closed - opened) + text 
      if(opened > closed) return text + '</text:span>'.repeat(opened - closed)
      return text
    };


    const renderer$1 = (chapters) => ({
      html:      text => whitemap[text.trim().toLowerCase()] ? whitemap[text.trim().toLowerCase()] : mangle(text),
      paragraph: text => `<text:p text:style-name="Standard">${sanitize(text)}</text:p>`,
      strong:    text => `<text:span text:style-name="bold">${text}</text:span>`,
      em:        text => `<text:span text:style-name="italic">${text}</text:span>`,
      codespan:  () => '',
      code:      () => '',
      link: (fullKey, i, text) => {
        const key = fullKey.replace('#', '');

        return `<text:a xlink:type="simple" xlink:href="#mage${key}" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">${
      text.trim() || (chapters.has(key) ? (chapters.get(key).title.trim() || key) : key)
    }</text:a>`
      },
    });

    const bookmark = (key, text) =>
`<text:span text:style-name="bold"><text:bookmark-start text:name="mage${key}"/>${text}<text:bookmark-end text:name="mage${key}"/></text:span>`;




    const encode$1 = (bookText) => {
      const indexedBook = extractIndexedBook(bookText);

      let result = '';
      for(const [key, {title, text}] of indexedBook.chapters){ 
        // Add chapter heading
        result+= `<text:p text:style-name="Heading_3" text:outline-level="3">${bookmark(key, title.trim() || key)}</text:p>`;
        
        // Add chapter text (or blank line if chapter is empty)
        result+= encodeToHTML(text, renderer$1(indexedBook.chapters)).trim() || `<text:p text:style-name="justify"> </text:p>`;

        // Add blank line after chapter
        result +=  `<text:p text:style-name="${'Standard'}"/>`;
      }

      return template(result).split('\n').map( line  => line.trim()).join('')
    };

    var fodt = { encode: encode$1, mimetype };

    var build = {exports: {}};

    /*! For license information please see index.js.LICENSE.txt */

    (function (module, exports) {
    !function(t,e){module.exports=e();}(commonjsGlobal,(function(){return (()=>{var t={742:(t,e)=>{e.byteLength=function(t){var e=c(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,i=c(t),o=i[0],a=i[1],u=new s(function(t,e,r){return 3*(e+r)/4-r}(0,o,a)),l=0,h=a>0?o-4:o;for(r=0;r<h;r+=4)e=n[t.charCodeAt(r)]<<18|n[t.charCodeAt(r+1)]<<12|n[t.charCodeAt(r+2)]<<6|n[t.charCodeAt(r+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;return 2===a&&(e=n[t.charCodeAt(r)]<<2|n[t.charCodeAt(r+1)]>>4,u[l++]=255&e),1===a&&(e=n[t.charCodeAt(r)]<<10|n[t.charCodeAt(r+1)]<<4|n[t.charCodeAt(r+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e),u},e.fromByteArray=function(t){for(var e,n=t.length,s=n%3,i=[],o=16383,a=0,c=n-s;a<c;a+=o)i.push(u(t,a,a+o>c?c:a+o));return 1===s?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===s&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"=")),i.join("")};for(var r=[],n=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,a=i.length;o<a;++o)r[o]=i[o],n[i.charCodeAt(o)]=o;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return -1===r&&(r=e),[r,r===e?0:4-r%4]}function u(t,e,n){for(var s,i,o=[],a=e;a<n;a+=3)s=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(r[(i=s)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return o.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63;},764:(t,e,r)=>{const n=r(742),s=r(645),i="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=c,e.SlowBuffer=function(t){return +t!=t&&(t=0),c.alloc(+t)},e.INSPECT_MAX_BYTES=50;const o=2147483647;function a(t){if(t>o)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,c.prototype),e}function c(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return h(t)}return u(t,e,r)}function u(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!c.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const r=0|m(t,e);let n=a(r);const s=n.write(t,e);return s!==r&&(n=n.slice(0,s)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(q(t,Uint8Array)){const e=new Uint8Array(t);return d(e.buffer,e.byteOffset,e.byteLength)}return p(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(q(t,ArrayBuffer)||t&&q(t.buffer,ArrayBuffer))return d(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(q(t,SharedArrayBuffer)||t&&q(t.buffer,SharedArrayBuffer)))return d(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return c.from(n,e,r);const s=function(t){if(c.isBuffer(t)){const e=0|f(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||Z(t.length)?a(0):p(t):"Buffer"===t.type&&Array.isArray(t.data)?p(t.data):void 0}(t);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return c.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function h(t){return l(t),a(t<0?0:0|f(t))}function p(t){const e=t.length<0?0:0|f(t.length),r=a(e);for(let n=0;n<e;n+=1)r[n]=255&t[n];return r}function d(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,c.prototype),n}function f(t){if(t>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|t}function m(t,e){if(c.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||q(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let s=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return V(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return $(t).length;default:if(s)return n?-1:V(t).length;e=(""+e).toLowerCase(),s=!0;}}function w(t,e,r){let n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return "";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return "";if((r>>>=0)<=(e>>>=0))return "";for(t||(t="utf8");;)switch(t){case"hex":return O(this,e,r);case"utf8":case"utf-8":return S(this,e,r);case"ascii":return I(this,e,r);case"latin1":case"binary":return N(this,e,r);case"base64":return A(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0;}}function g(t,e,r){const n=t[e];t[e]=t[r],t[r]=n;}function y(t,e,r,n,s){if(0===t.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),Z(r=+r)&&(r=s?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(s)return -1;r=t.length-1;}else if(r<0){if(!s)return -1;r=0;}if("string"==typeof e&&(e=c.from(e,n)),c.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,s);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):b(t,[e],r,n,s);throw new TypeError("val must be string, number or Buffer")}function b(t,e,r,n,s){let i,o=1,a=t.length,c=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return -1;o=2,a/=2,c/=2,r/=2;}function u(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(s){let n=-1;for(i=r;i<a;i++)if(u(t,i)===u(e,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===c)return n*o}else -1!==n&&(i-=i-n),n=-1;}else for(r+c>a&&(r=a-c),i=r;i>=0;i--){let r=!0;for(let n=0;n<c;n++)if(u(t,i+n)!==u(e,n)){r=!1;break}if(r)return i}return -1}function v(t,e,r,n){r=Number(r)||0;const s=t.length-r;n?(n=Number(n))>s&&(n=s):n=s;const i=e.length;let o;for(n>i/2&&(n=i/2),o=0;o<n;++o){const n=parseInt(e.substr(2*o,2),16);if(Z(n))return o;t[r+o]=n;}return o}function _(t,e,r,n){return X(V(e,t.length-r),t,r,n)}function x(t,e,r,n){return X(function(t){const e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function E(t,e,r,n){return X($(e),t,r,n)}function T(t,e,r,n){return X(function(t,e){let r,n,s;const i=[];for(let o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),n=r>>8,s=r%256,i.push(s),i.push(n);return i}(e,t.length-r),t,r,n)}function A(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function S(t,e,r){r=Math.min(t.length,r);const n=[];let s=e;for(;s<r;){const e=t[s];let i=null,o=e>239?4:e>223?3:e>191?2:1;if(s+o<=r){let r,n,a,c;switch(o){case 1:e<128&&(i=e);break;case 2:r=t[s+1],128==(192&r)&&(c=(31&e)<<6|63&r,c>127&&(i=c));break;case 3:r=t[s+1],n=t[s+2],128==(192&r)&&128==(192&n)&&(c=(15&e)<<12|(63&r)<<6|63&n,c>2047&&(c<55296||c>57343)&&(i=c));break;case 4:r=t[s+1],n=t[s+2],a=t[s+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(c=(15&e)<<18|(63&r)<<12|(63&n)<<6|63&a,c>65535&&c<1114112&&(i=c));}}null===i?(i=65533,o=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),s+=o;}return function(t){const e=t.length;if(e<=R)return String.fromCharCode.apply(String,t);let r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=R));return r}(n)}e.kMaxLength=o,c.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return !1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(t,e,r){return u(t,e,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(t,e,r){return function(t,e,r){return l(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},c.allocUnsafe=function(t){return h(t)},c.allocUnsafeSlow=function(t){return h(t)},c.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==c.prototype},c.compare=function(t,e){if(q(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),q(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,n=e.length;for(let s=0,i=Math.min(r,n);s<i;++s)if(t[s]!==e[s]){r=t[s],n=e[s];break}return r<n?-1:n<r?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},c.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);let r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;const n=c.allocUnsafe(e);let s=0;for(r=0;r<t.length;++r){let e=t[r];if(q(e,Uint8Array))s+e.length>n.length?(c.isBuffer(e)||(e=c.from(e)),e.copy(n,s)):Uint8Array.prototype.set.call(n,e,s);else {if(!c.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(n,s);}s+=e.length;}return n},c.byteLength=m,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)g(this,e,e+1);return this},c.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},c.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},c.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?S(this,0,t):w.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){let t="";const r=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},i&&(c.prototype[i]=c.prototype.inspect),c.prototype.compare=function(t,e,r,n,s){if(q(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===s&&(s=this.length),e<0||r>t.length||n<0||s>this.length)throw new RangeError("out of range index");if(n>=s&&e>=r)return 0;if(n>=s)return -1;if(e>=r)return 1;if(this===t)return 0;let i=(s>>>=0)-(n>>>=0),o=(r>>>=0)-(e>>>=0);const a=Math.min(i,o),u=this.slice(n,s),l=t.slice(e,r);for(let t=0;t<a;++t)if(u[t]!==l[t]){i=u[t],o=l[t];break}return i<o?-1:o<i?1:0},c.prototype.includes=function(t,e,r){return -1!==this.indexOf(t,e,r)},c.prototype.indexOf=function(t,e,r){return y(this,t,e,r,!0)},c.prototype.lastIndexOf=function(t,e,r){return y(this,t,e,r,!1)},c.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else {if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0);}const s=this.length-e;if((void 0===r||r>s)&&(r=s),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let i=!1;for(;;)switch(n){case"hex":return v(this,t,e,r);case"utf8":case"utf-8":return _(this,t,e,r);case"ascii":case"latin1":case"binary":return x(this,t,e,r);case"base64":return E(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,t,e,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0;}},c.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const R=4096;function I(t,e,r){let n="";r=Math.min(t.length,r);for(let s=e;s<r;++s)n+=String.fromCharCode(127&t[s]);return n}function N(t,e,r){let n="";r=Math.min(t.length,r);for(let s=e;s<r;++s)n+=String.fromCharCode(t[s]);return n}function O(t,e,r){const n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);let s="";for(let n=e;n<r;++n)s+=Y[t[n]];return s}function C(t,e,r){const n=t.slice(e,r);let s="";for(let t=0;t<n.length-1;t+=2)s+=String.fromCharCode(n[t]+256*n[t+1]);return s}function k(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function D(t,e,r,n,s,i){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>s||e<i)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function L(t,e,r,n,s){j(e,n,s,t,r,7);let i=Number(e&BigInt(4294967295));t[r++]=i,i>>=8,t[r++]=i,i>>=8,t[r++]=i,i>>=8,t[r++]=i;let o=Number(e>>BigInt(32)&BigInt(4294967295));return t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,r}function P(t,e,r,n,s){j(e,n,s,t,r,7);let i=Number(e&BigInt(4294967295));t[r+7]=i,i>>=8,t[r+6]=i,i>>=8,t[r+5]=i,i>>=8,t[r+4]=i;let o=Number(e>>BigInt(32)&BigInt(4294967295));return t[r+3]=o,o>>=8,t[r+2]=o,o>>=8,t[r+1]=o,o>>=8,t[r]=o,r+8}function F(t,e,r,n,s,i){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function B(t,e,r,n,i){return e=+e,r>>>=0,i||F(t,0,r,4),s.write(t,e,r,n,23,4),r+4}function M(t,e,r,n,i){return e=+e,r>>>=0,i||F(t,0,r,8),s.write(t,e,r,n,52,8),r+8}c.prototype.slice=function(t,e){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);const n=this.subarray(t,e);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||k(t,e,this.length);let n=this[t],s=1,i=0;for(;++i<e&&(s*=256);)n+=this[t+i]*s;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||k(t,e,this.length);let n=this[t+--e],s=1;for(;e>0&&(s*=256);)n+=this[t+--e]*s;return n},c.prototype.readUint8=c.prototype.readUInt8=function(t,e){return t>>>=0,e||k(t,1,this.length),this[t]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(t,e){return t>>>=0,e||k(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(t,e){return t>>>=0,e||k(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(t,e){return t>>>=0,e||k(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(t,e){return t>>>=0,e||k(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readBigUInt64LE=Q((function(t){K(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||G(t,this.length-8);const n=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,s=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(n)+(BigInt(s)<<BigInt(32))})),c.prototype.readBigUInt64BE=Q((function(t){K(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||G(t,this.length-8);const n=e*2**24+65536*this[++t]+256*this[++t]+this[++t],s=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return (BigInt(n)<<BigInt(32))+BigInt(s)})),c.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||k(t,e,this.length);let n=this[t],s=1,i=0;for(;++i<e&&(s*=256);)n+=this[t+i]*s;return s*=128,n>=s&&(n-=Math.pow(2,8*e)),n},c.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||k(t,e,this.length);let n=e,s=1,i=this[t+--n];for(;n>0&&(s*=256);)i+=this[t+--n]*s;return s*=128,i>=s&&(i-=Math.pow(2,8*e)),i},c.prototype.readInt8=function(t,e){return t>>>=0,e||k(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){t>>>=0,e||k(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(t,e){t>>>=0,e||k(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(t,e){return t>>>=0,e||k(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return t>>>=0,e||k(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readBigInt64LE=Q((function(t){K(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||G(t,this.length-8);const n=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return (BigInt(n)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),c.prototype.readBigInt64BE=Q((function(t){K(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||G(t,this.length-8);const n=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return (BigInt(n)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),c.prototype.readFloatLE=function(t,e){return t>>>=0,e||k(t,4,this.length),s.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return t>>>=0,e||k(t,4,this.length),s.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return t>>>=0,e||k(t,8,this.length),s.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return t>>>=0,e||k(t,8,this.length),s.read(this,t,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||D(this,t,e,r,Math.pow(2,8*r)-1,0);let s=1,i=0;for(this[e]=255&t;++i<r&&(s*=256);)this[e+i]=t/s&255;return e+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||D(this,t,e,r,Math.pow(2,8*r)-1,0);let s=r-1,i=1;for(this[e+s]=255&t;--s>=0&&(i*=256);)this[e+s]=t/i&255;return e+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,1,255,0),this[e]=255&t,e+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigUInt64LE=Q((function(t,e=0){return L(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=Q((function(t,e=0){return P(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);D(this,t,e,r,n-1,-n);}let s=0,i=1,o=0;for(this[e]=255&t;++s<r&&(i*=256);)t<0&&0===o&&0!==this[e+s-1]&&(o=1),this[e+s]=(t/i>>0)-o&255;return e+r},c.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);D(this,t,e,r,n-1,-n);}let s=r-1,i=1,o=0;for(this[e+s]=255&t;--s>=0&&(i*=256);)t<0&&0===o&&0!==this[e+s+1]&&(o=1),this[e+s]=(t/i>>0)-o&255;return e+r},c.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},c.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},c.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},c.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||D(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},c.prototype.writeBigInt64LE=Q((function(t,e=0){return L(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=Q((function(t,e=0){return P(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(t,e,r){return B(this,t,e,!0,r)},c.prototype.writeFloatBE=function(t,e,r){return B(this,t,e,!1,r)},c.prototype.writeDoubleLE=function(t,e,r){return M(this,t,e,!0,r)},c.prototype.writeDoubleBE=function(t,e,r){return M(this,t,e,!1,r)},c.prototype.copy=function(t,e,r,n){if(!c.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);const s=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),s},c.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){const e=t.charCodeAt(0);("utf8"===n&&e<128||"latin1"===n)&&(t=e);}}else "number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;let s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else {const i=c.isBuffer(t)?t:c.from(t,n),o=i.length;if(0===o)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(s=0;s<r-e;++s)this[s+e]=i[s%o];}return this};const U={};function z(t,e,r){U[t]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name;}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0});}toString(){return `${this.name} [${t}]: ${this.message}`}};}function H(t){let e="",r=t.length;const n="-"===t[0]?1:0;for(;r>=n+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return `${t.slice(0,r)}${e}`}function j(t,e,r,n,s,i){if(t>r||t<e){const n="bigint"==typeof e?"n":"";let s;throw s=i>3?0===e||e===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(i+1)}${n}`:`>= -(2${n} ** ${8*(i+1)-1}${n}) and < 2 ** ${8*(i+1)-1}${n}`:`>= ${e}${n} and <= ${r}${n}`,new U.ERR_OUT_OF_RANGE("value",s,t)}!function(t,e,r){K(e,"offset"),void 0!==t[e]&&void 0!==t[e+r]||G(e,t.length-(r+1));}(n,s,i);}function K(t,e){if("number"!=typeof t)throw new U.ERR_INVALID_ARG_TYPE(e,"number",t)}function G(t,e,r){if(Math.floor(t)!==t)throw K(t,r),new U.ERR_OUT_OF_RANGE(r||"offset","an integer",t);if(e<0)throw new U.ERR_BUFFER_OUT_OF_BOUNDS;throw new U.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${e}`,t)}z("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),z("ERR_INVALID_ARG_TYPE",(function(t,e){return `The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),z("ERR_OUT_OF_RANGE",(function(t,e,r){let n=`The value of "${t}" is out of range.`,s=r;return Number.isInteger(r)&&Math.abs(r)>2**32?s=H(String(r)):"bigint"==typeof r&&(s=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(s=H(s)),s+="n"),n+=` It must be ${e}. Received ${s}`,n}),RangeError);const W=/[^+/0-9A-Za-z-_]/g;function V(t,e){let r;e=e||1/0;const n=t.length;let s=null;const i=[];for(let o=0;o<n;++o){if(r=t.charCodeAt(o),r>55295&&r<57344){if(!s){if(r>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(o+1===n){(e-=3)>-1&&i.push(239,191,189);continue}s=r;continue}if(r<56320){(e-=3)>-1&&i.push(239,191,189),s=r;continue}r=65536+(s-55296<<10|r-56320);}else s&&(e-=3)>-1&&i.push(239,191,189);if(s=null,r<128){if((e-=1)<0)break;i.push(r);}else if(r<2048){if((e-=2)<0)break;i.push(r>>6|192,63&r|128);}else if(r<65536){if((e-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128);}else {if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return i}function $(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(W,"")).length<2)return "";for(;t.length%4!=0;)t+="=";return t}(t))}function X(t,e,r,n){let s;for(s=0;s<n&&!(s+r>=e.length||s>=t.length);++s)e[s+r]=t[s];return s}function q(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function Z(t){return t!=t}const Y=function(){const t="0123456789abcdef",e=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let s=0;s<16;++s)e[n+s]=t[r]+t[s];}return e}();function Q(t){return "undefined"==typeof BigInt?J:t}function J(){throw new Error("BigInt not supported")}},187:t=>{var e,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};e=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var s=Number.isNaN||function(t){return t!=t};function i(){i.init.call(this);}t.exports=i,t.exports.once=function(t,e){return new Promise((function(r,n){function s(r){t.removeListener(e,i),n(r);}function i(){"function"==typeof t.removeListener&&t.removeListener("error",s),r([].slice.call(arguments));}m(t,e,i,{once:!0}),"error"!==e&&function(t,e,r){"function"==typeof t.on&&m(t,"error",e,{once:!0});}(t,s);}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function c(t){return void 0===t._maxListeners?i.defaultMaxListeners:t._maxListeners}function u(t,e,r,n){var s,i,o,u;if(a(r),void 0===(i=t._events)?(i=t._events=Object.create(null),t._eventsCount=0):(void 0!==i.newListener&&(t.emit("newListener",e,r.listener?r.listener:r),i=t._events),o=i[e]),void 0===o)o=i[e]=r,++t._eventsCount;else if("function"==typeof o?o=i[e]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(s=c(t))>0&&o.length>s&&!o.warned){o.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=o.length,u=l,console&&console.warn&&console.warn(u);}return t}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(t,e,r){var n={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},s=l.bind(n);return s.listener=r,n.wrapFn=s,s}function p(t,e,r){var n=t._events;if(void 0===n)return [];var s=n[e];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(t){for(var e=new Array(t.length),r=0;r<e.length;++r)e[r]=t[r].listener||t[r];return e}(s):f(s,s.length)}function d(t){var e=this._events;if(void 0!==e){var r=e[t];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(t,e){for(var r=new Array(e),n=0;n<e;++n)r[n]=t[n];return r}function m(t,e,r,n){if("function"==typeof t.on)n.once?t.once(e,r):t.on(e,r);else {if("function"!=typeof t.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof t);t.addEventListener(e,(function s(i){n.once&&t.removeEventListener(e,s),r(i);}));}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");o=t;}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0;},i.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},i.prototype.getMaxListeners=function(){return c(this)},i.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var s="error"===t,i=this._events;if(void 0!==i)s=s&&void 0===i.error;else if(!s)return !1;if(s){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var c=i[t];if(void 0===c)return !1;if("function"==typeof c)n(c,this,e);else {var u=c.length,l=f(c,u);for(r=0;r<u;++r)n(l[r],this,e);}return !0},i.prototype.addListener=function(t,e){return u(this,t,e,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(t,e){return u(this,t,e,!0)},i.prototype.once=function(t,e){return a(e),this.on(t,h(this,t,e)),this},i.prototype.prependOnceListener=function(t,e){return a(e),this.prependListener(t,h(this,t,e)),this},i.prototype.removeListener=function(t,e){var r,n,s,i,o;if(a(e),void 0===(n=this._events))return this;if(void 0===(r=n[t]))return this;if(r===e||r.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete n[t],n.removeListener&&this.emit("removeListener",t,r.listener||e));else if("function"!=typeof r){for(s=-1,i=r.length-1;i>=0;i--)if(r[i]===e||r[i].listener===e){o=r[i].listener,s=i;break}if(s<0)return this;0===s?r.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop();}(r,s),1===r.length&&(n[t]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",t,o||e);}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(t){var e,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[t]),this;if(0===arguments.length){var s,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(s=i[n])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=r[t]))this.removeListener(t,e);else if(void 0!==e)for(n=e.length-1;n>=0;n--)this.removeListener(t,e[n]);return this},i.prototype.listeners=function(t){return p(this,t,!0)},i.prototype.rawListeners=function(t){return p(this,t,!1)},i.listenerCount=function(t,e){return "function"==typeof t.listenerCount?t.listenerCount(e):d.call(t,e)},i.prototype.listenerCount=d,i.prototype.eventNames=function(){return this._eventsCount>0?e(this._events):[]};},645:(t,e)=>{e.read=function(t,e,r,n,s){var i,o,a=8*s-n-1,c=(1<<a)-1,u=c>>1,l=-7,h=r?s-1:0,p=r?-1:1,d=t[e+h];for(h+=p,i=d&(1<<-l)-1,d>>=-l,l+=a;l>0;i=256*i+t[e+h],h+=p,l-=8);for(o=i&(1<<-l)-1,i>>=-l,l+=n;l>0;o=256*o+t[e+h],h+=p,l-=8);if(0===i)i=1-u;else {if(i===c)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,n),i-=u;}return (d?-1:1)*o*Math.pow(2,i-n)},e.write=function(t,e,r,n,s,i){var o,a,c,u=8*i-s-1,l=(1<<u)-1,h=l>>1,p=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:i-1,f=n?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=l):(o=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-o))<1&&(o--,c*=2),(e+=o+h>=1?p/c:p*Math.pow(2,1-h))*c>=2&&(o++,c/=2),o+h>=l?(a=0,o=l):o+h>=1?(a=(e*c-1)*Math.pow(2,s),o+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,s),o=0));s>=8;t[r+d]=255&a,d+=f,a/=256,s-=8);for(o=o<<s|a,u+=s;u>0;t[r+d]=255&o,d+=f,o/=256,u-=8);t[r+d-f]|=128*m;};},717:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}));}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t;}};},733:(t,e,r)=>{t.exports=function t(e,r,n){function s(o,a){if(!r[o]){if(!e[o]){if(i)return i(o,!0);var c=new Error("Cannot find module '"+o+"'");throw c.code="MODULE_NOT_FOUND",c}var u=r[o]={exports:{}};e[o][0].call(u.exports,(function(t){return s(e[o][1][t]||t)}),u,u.exports,t,e,r,n);}return r[o].exports}for(var i=void 0,o=0;o<n.length;o++)s(n[o]);return s}({1:[function(t,e,r){var n=t("./utils"),s=t("./support"),i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(t){for(var e,r,s,o,a,c,u,l=[],h=0,p=t.length,d=p,f="string"!==n.getTypeOf(t);h<t.length;)d=p-h,s=f?(e=t[h++],r=h<p?t[h++]:0,h<p?t[h++]:0):(e=t.charCodeAt(h++),r=h<p?t.charCodeAt(h++):0,h<p?t.charCodeAt(h++):0),o=e>>2,a=(3&e)<<4|r>>4,c=1<d?(15&r)<<2|s>>6:64,u=2<d?63&s:64,l.push(i.charAt(o)+i.charAt(a)+i.charAt(c)+i.charAt(u));return l.join("")},r.decode=function(t){var e,r,n,o,a,c,u=0,l=0,h="data:";if(t.substr(0,h.length)===h)throw new Error("Invalid base64 input, it looks like a data url.");var p,d=3*(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(t.charAt(t.length-1)===i.charAt(64)&&d--,t.charAt(t.length-2)===i.charAt(64)&&d--,d%1!=0)throw new Error("Invalid base64 input, bad content length.");for(p=s.uint8array?new Uint8Array(0|d):new Array(0|d);u<t.length;)e=i.indexOf(t.charAt(u++))<<2|(o=i.indexOf(t.charAt(u++)))>>4,r=(15&o)<<4|(a=i.indexOf(t.charAt(u++)))>>2,n=(3&a)<<6|(c=i.indexOf(t.charAt(u++))),p[l++]=e,64!==a&&(p[l++]=r),64!==c&&(p[l++]=n);return p};},{"./support":30,"./utils":32}],2:[function(t,e,r){var n=t("./external"),s=t("./stream/DataWorker"),i=t("./stream/Crc32Probe"),o=t("./stream/DataLengthProbe");function a(t,e,r,n,s){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=n,this.compressedContent=s;}a.prototype={getContentWorker:function(){var t=new s(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),e=this;return t.on("end",(function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),t},getCompressedWorker:function(){return new s(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},a.createWorkerFrom=function(t,e,r){return t.pipe(new i).pipe(new o("uncompressedSize")).pipe(e.compressWorker(r)).pipe(new o("compressedSize")).withStreamInfo("compression",e)},e.exports=a;},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(t,e,r){var n=t("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(t){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=t("./flate");},{"./flate":7,"./stream/GenericWorker":28}],4:[function(t,e,r){var n=t("./utils"),s=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t;}return e}();e.exports=function(t,e){return void 0!==t&&t.length?"string"!==n.getTypeOf(t)?function(t,e,r,n){var i=s,o=0+r;t^=-1;for(var a=0;a<o;a++)t=t>>>8^i[255&(t^e[a])];return -1^t}(0|e,t,t.length):function(t,e,r,n){var i=s,o=0+r;t^=-1;for(var a=0;a<o;a++)t=t>>>8^i[255&(t^e.charCodeAt(a))];return -1^t}(0|e,t,t.length):0};},{"./utils":32}],5:[function(t,e,r){r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null;},{}],6:[function(t,e,r){var n;n="undefined"!=typeof Promise?Promise:t("lie"),e.exports={Promise:n};},{lie:37}],7:[function(t,e,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,s=t("pako"),i=t("./utils"),o=t("./stream/GenericWorker"),a=n?"uint8array":"array";function c(t,e){o.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={};}r.magic="\b\0",i.inherits(c,o),c.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(i.transformTo(a,t.data),!1);},c.prototype.flush=function(){o.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0);},c.prototype.cleanUp=function(){o.prototype.cleanUp.call(this),this._pako=null;},c.prototype._createPako=function(){this._pako=new s[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta});};},r.compressWorker=function(t){return new c("Deflate",t)},r.uncompressWorker=function(){return new c("Inflate",{})};},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(t,e,r){function n(t,e){var r,n="";for(r=0;r<e;r++)n+=String.fromCharCode(255&t),t>>>=8;return n}function s(t,e,r,s,o,l){var h,p,d=t.file,f=t.compression,m=l!==a.utf8encode,w=i.transformTo("string",l(d.name)),g=i.transformTo("string",a.utf8encode(d.name)),y=d.comment,b=i.transformTo("string",l(y)),v=i.transformTo("string",a.utf8encode(y)),_=g.length!==d.name.length,x=v.length!==y.length,E="",T="",A="",S=d.dir,R=d.date,I={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(I.crc32=t.crc32,I.compressedSize=t.compressedSize,I.uncompressedSize=t.uncompressedSize);var N=0;e&&(N|=8),m||!_&&!x||(N|=2048);var O=0,C=0;S&&(O|=16),"UNIX"===o?(C=798,O|=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16}(d.unixPermissions,S)):(C=20,O|=function(t){return 63&(t||0)}(d.dosPermissions)),h=R.getUTCHours(),h<<=6,h|=R.getUTCMinutes(),h<<=5,h|=R.getUTCSeconds()/2,p=R.getUTCFullYear()-1980,p<<=4,p|=R.getUTCMonth()+1,p<<=5,p|=R.getUTCDate(),_&&(T=n(1,1)+n(c(w),4)+g,E+="up"+n(T.length,2)+T),x&&(A=n(1,1)+n(c(b),4)+v,E+="uc"+n(A.length,2)+A);var k="";return k+="\n\0",k+=n(N,2),k+=f.magic,k+=n(h,2),k+=n(p,2),k+=n(I.crc32,4),k+=n(I.compressedSize,4),k+=n(I.uncompressedSize,4),k+=n(w.length,2),k+=n(E.length,2),{fileRecord:u.LOCAL_FILE_HEADER+k+w+E,dirRecord:u.CENTRAL_FILE_HEADER+n(C,2)+k+n(b.length,2)+"\0\0\0\0"+n(O,4)+n(s,4)+w+E+b}}var i=t("../utils"),o=t("../stream/GenericWorker"),a=t("../utf8"),c=t("../crc32"),u=t("../signature");function l(t,e,r,n){o.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[];}i.inherits(l,o),l.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,o.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-n-1))/r:100}}));},l.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=s(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}});}else this.accumulate=!0;},l.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=s(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:function(t){return u.DATA_DESCRIPTOR+n(t.crc32,4)+n(t.compressedSize,4)+n(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null;},l.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,s=function(t,e,r,s,o){var a=i.transformTo("string",o(s));return u.CENTRAL_DIRECTORY_END+"\0\0\0\0"+n(t,2)+n(t,2)+n(e,4)+n(r,4)+n(a.length,2)+a}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:s,meta:{percent:100}});},l.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume();},l.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",(function(t){e.processChunk(t);})),t.on("end",(function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end();})),t.on("error",(function(t){e.error(t);})),this},l.prototype.resume=function(){return !!o.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},l.prototype.error=function(t){var e=this._sources;if(!o.prototype.error.call(this,t))return !1;for(var r=0;r<e.length;r++)try{e[r].error(t);}catch(t){}return !0},l.prototype.lock=function(){o.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock();},e.exports=l;},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(t,e,r){var n=t("../compressions"),s=t("./ZipFileWorker");r.generateWorker=function(t,e,r){var i=new s(e.streamFiles,r,e.platform,e.encodeFileName),o=0;try{t.forEach((function(t,r){o++;var s=function(t,e){var r=t||e,s=n[r];if(!s)throw new Error(r+" is not a valid compression method !");return s}(r.options.compression,e.compression),a=r.options.compressionOptions||e.compressionOptions||{},c=r.dir,u=r.date;r._compressWorker(s,a).withStreamInfo("file",{name:t,dir:c,date:u,comment:r.comment||"",unixPermissions:r.unixPermissions,dosPermissions:r.dosPermissions}).pipe(i);})),i.entriesCount=o;}catch(t){i.error(t);}return i};},{"../compressions":3,"./ZipFileWorker":8}],10:[function(t,e,r){function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var t=new n;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t};}(n.prototype=t("./object")).loadAsync=t("./load"),n.support=t("./support"),n.defaults=t("./defaults"),n.version="3.7.1",n.loadAsync=function(t,e){return (new n).loadAsync(t,e)},n.external=t("./external"),e.exports=n;},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(t,e,r){var n=t("./utils"),s=t("./external"),i=t("./utf8"),o=t("./zipEntries"),a=t("./stream/Crc32Probe"),c=t("./nodejsUtils");function u(t){return new s.Promise((function(e,r){var n=t.decompressed.getContentWorker().pipe(new a);n.on("error",(function(t){r(t);})).on("end",(function(){n.streamInfo.crc32!==t.decompressed.crc32?r(new Error("Corrupted zip : CRC32 mismatch")):e();})).resume();}))}e.exports=function(t,e){var r=this;return e=n.extend(e||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:i.utf8decode}),c.isNode&&c.isStream(t)?s.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",t,!0,e.optimizedBinaryString,e.base64).then((function(t){var r=new o(e);return r.load(t),r})).then((function(t){var r=[s.Promise.resolve(t)],n=t.files;if(e.checkCRC32)for(var i=0;i<n.length;i++)r.push(u(n[i]));return s.Promise.all(r)})).then((function(t){for(var n=t.shift(),s=n.files,i=0;i<s.length;i++){var o=s[i];r.file(o.fileNameStr,o.decompressed,{binary:!0,optimizedBinaryString:!0,date:o.date,dir:o.dir,comment:o.fileCommentStr.length?o.fileCommentStr:null,unixPermissions:o.unixPermissions,dosPermissions:o.dosPermissions,createFolders:e.createFolders});}return n.zipComment.length&&(r.comment=n.zipComment),r}))};},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(t,e,r){var n=t("../utils"),s=t("../stream/GenericWorker");function i(t,e){s.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e);}n.inherits(i,s),i.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on("data",(function(t){e.push({data:t,meta:{percent:0}});})).on("error",(function(t){e.isPaused?this.generatedError=t:e.error(t);})).on("end",(function(){e.isPaused?e._upstreamEnded=!0:e.end();}));},i.prototype.pause=function(){return !!s.prototype.pause.call(this)&&(this._stream.pause(),!0)},i.prototype.resume=function(){return !!s.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=i;},{"../stream/GenericWorker":28,"../utils":32}],13:[function(t,e,r){var n=t("readable-stream").Readable;function s(t,e,r){n.call(this,e),this._helper=t;var s=this;t.on("data",(function(t,e){s.push(t)||s._helper.pause(),r&&r(e);})).on("error",(function(t){s.emit("error",t);})).on("end",(function(){s.push(null);}));}t("../utils").inherits(s,n),s.prototype._read=function(){this._helper.resume();},e.exports=s;},{"../utils":32,"readable-stream":16}],14:[function(t,e,r){e.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if("number"==typeof t)throw new Error('The "data" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}};},{}],15:[function(t,e,r){function n(t,e,r){var n,s=i.getTypeOf(e),a=i.extend(r||{},c);a.date=a.date||new Date,null!==a.compression&&(a.compression=a.compression.toUpperCase()),"string"==typeof a.unixPermissions&&(a.unixPermissions=parseInt(a.unixPermissions,8)),a.unixPermissions&&16384&a.unixPermissions&&(a.dir=!0),a.dosPermissions&&16&a.dosPermissions&&(a.dir=!0),a.dir&&(t=m(t)),a.createFolders&&(n=f(t))&&w.call(this,n,!0);var h="string"===s&&!1===a.binary&&!1===a.base64;r&&void 0!==r.binary||(a.binary=!h),(e instanceof u&&0===e.uncompressedSize||a.dir||!e||0===e.length)&&(a.base64=!1,a.binary=!0,e="",a.compression="STORE",s="string");var g;g=e instanceof u||e instanceof o?e:p.isNode&&p.isStream(e)?new d(t,e):i.prepareContent(t,e,a.binary,a.optimizedBinaryString,a.base64);var y=new l(t,g,a);this.files[t]=y;}var s=t("./utf8"),i=t("./utils"),o=t("./stream/GenericWorker"),a=t("./stream/StreamHelper"),c=t("./defaults"),u=t("./compressedObject"),l=t("./zipObject"),h=t("./generate"),p=t("./nodejsUtils"),d=t("./nodejs/NodejsStreamInputAdapter"),f=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return 0<e?t.substring(0,e):""},m=function(t){return "/"!==t.slice(-1)&&(t+="/"),t},w=function(t,e){return e=void 0!==e?e:c.createFolders,t=m(t),this.files[t]||n.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function g(t){return "[object RegExp]"===Object.prototype.toString.call(t)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,r,n;for(e in this.files)n=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,n);},filter:function(t){var e=[];return this.forEach((function(r,n){t(r,n)&&e.push(n);})),e},file:function(t,e,r){if(1!==arguments.length)return t=this.root+t,n.call(this,t,e,r),this;if(g(t)){var s=t;return this.filter((function(t,e){return !e.dir&&s.test(t)}))}var i=this.files[this.root+t];return i&&!i.dir?i:null},folder:function(t){if(!t)return this;if(g(t))return this.filter((function(e,r){return r.dir&&t.test(e)}));var e=this.root+t,r=w.call(this,e),n=this.clone();return n.root=r.name,n},remove:function(t){t=this.root+t;var e=this.files[t];if(e||("/"!==t.slice(-1)&&(t+="/"),e=this.files[t]),e&&!e.dir)delete this.files[t];else for(var r=this.filter((function(e,r){return r.name.slice(0,t.length)===t})),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,r={};try{if((r=i.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:s.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");i.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";e=h.generateWorker(this,r,n);}catch(t){(e=new o("error")).error(t);}return new a(e,r.type||"string",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return (t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=y;},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(t,e,r){e.exports=t("stream");},{stream:void 0}],17:[function(t,e,r){var n=t("./DataReader");function s(t){n.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e];}t("../utils").inherits(s,n),s.prototype.byteAt=function(t){return this.data[this.zero+t]},s.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),n=t.charCodeAt(2),s=t.charCodeAt(3),i=this.length-4;0<=i;--i)if(this.data[i]===e&&this.data[i+1]===r&&this.data[i+2]===n&&this.data[i+3]===s)return i-this.zero;return -1},s.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),n=t.charCodeAt(2),s=t.charCodeAt(3),i=this.readData(4);return e===i[0]&&r===i[1]&&n===i[2]&&s===i[3]},s.prototype.readData=function(t){if(this.checkOffset(t),0===t)return [];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=s;},{"../utils":32,"./DataReader":18}],18:[function(t,e,r){var n=t("../utils");function s(t){this.data=t,this.length=t.length,this.index=0,this.zero=0;}s.prototype={checkOffset:function(t){this.checkIndex(this.index+t);},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t;},skip:function(t){this.setIndex(this.index+t);},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return n.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=s;},{"../utils":32}],19:[function(t,e,r){var n=t("./Uint8ArrayReader");function s(t){n.call(this,t);}t("../utils").inherits(s,n),s.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=s;},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(t,e,r){var n=t("./DataReader");function s(t){n.call(this,t);}t("../utils").inherits(s,n),s.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},s.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},s.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},s.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=s;},{"../utils":32,"./DataReader":18}],21:[function(t,e,r){var n=t("./ArrayReader");function s(t){n.call(this,t);}t("../utils").inherits(s,n),s.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=s;},{"../utils":32,"./ArrayReader":17}],22:[function(t,e,r){var n=t("../utils"),s=t("../support"),i=t("./ArrayReader"),o=t("./StringReader"),a=t("./NodeBufferReader"),c=t("./Uint8ArrayReader");e.exports=function(t){var e=n.getTypeOf(t);return n.checkSupport(e),"string"!==e||s.uint8array?"nodebuffer"===e?new a(t):s.uint8array?new c(n.transformTo("uint8array",t)):new i(n.transformTo("array",t)):new o(t)};},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(t,e,r){r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b";},{}],24:[function(t,e,r){var n=t("./GenericWorker"),s=t("../utils");function i(t){n.call(this,"ConvertWorker to "+t),this.destType=t;}s.inherits(i,n),i.prototype.processChunk=function(t){this.push({data:s.transformTo(this.destType,t.data),meta:t.meta});},e.exports=i;},{"../utils":32,"./GenericWorker":28}],25:[function(t,e,r){var n=t("./GenericWorker"),s=t("../crc32");function i(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0);}t("../utils").inherits(i,n),i.prototype.processChunk=function(t){this.streamInfo.crc32=s(t.data,this.streamInfo.crc32||0),this.push(t);},e.exports=i;},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(t,e,r){var n=t("../utils"),s=t("./GenericWorker");function i(t){s.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0);}n.inherits(i,s),i.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length;}s.prototype.processChunk.call(this,t);},e.exports=i;},{"../utils":32,"./GenericWorker":28}],27:[function(t,e,r){var n=t("../utils"),s=t("./GenericWorker");function i(t){s.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then((function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=n.getTypeOf(t),e.isPaused||e._tickAndRepeat();}),(function(t){e.error(t);}));}n.inherits(i,s),i.prototype.cleanUp=function(){s.prototype.cleanUp.call(this),this.data=null;},i.prototype.resume=function(){return !!s.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},i.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0));},i.prototype._tick=function(){if(this.isPaused||this.isFinished)return !1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e);}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=i;},{"../utils":32,"./GenericWorker":28}],28:[function(t,e,r){function n(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null;}n.prototype={push:function(t){this.emit("data",t);},end:function(){if(this.isFinished)return !1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0;}catch(t){this.emit("error",t);}return !0},error:function(t){return !this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[];},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e);},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",(function(t){e.processChunk(t);})),t.on("end",(function(){e.end();})),t.on("error",(function(t){e.error(t);})),this},pause:function(){return !this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return !1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t);},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t]);},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock();},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},e.exports=n;},{}],29:[function(t,e,r){var n=t("../utils"),s=t("./ConvertWorker"),i=t("./GenericWorker"),o=t("../base64"),a=t("../support"),c=t("../external"),u=null;if(a.nodestream)try{u=t("../nodejs/NodejsStreamOutputAdapter");}catch(t){}function l(t,e,r){var o=e;switch(e){case"blob":case"arraybuffer":o="uint8array";break;case"base64":o="string";}try{this._internalType=o,this._outputType=e,this._mimeType=r,n.checkSupport(o),this._worker=t.pipe(new s(o)),t.lock();}catch(t){this._worker=new i("error"),this._worker.error(t);}}l.prototype={accumulate:function(t){return function(t,e){return new c.Promise((function(r,s){var i=[],a=t._internalType,c=t._outputType,u=t._mimeType;t.on("data",(function(t,r){i.push(t),e&&e(r);})).on("error",(function(t){i=[],s(t);})).on("end",(function(){try{var t=function(t,e,r){switch(t){case"blob":return n.newBlob(n.transformTo("arraybuffer",e),r);case"base64":return o.encode(e);default:return n.transformTo(t,e)}}(c,function(t,e){var r,n=0,s=null,i=0;for(r=0;r<e.length;r++)i+=e[r].length;switch(t){case"string":return e.join("");case"array":return Array.prototype.concat.apply([],e);case"uint8array":for(s=new Uint8Array(i),r=0;r<e.length;r++)s.set(e[r],n),n+=e[r].length;return s;case"nodebuffer":return Buffer.concat(e);default:throw new Error("concat : unsupported type '"+t+"'")}}(a,i),u);r(t);}catch(t){s(t);}i=[];})).resume();}))}(this,t)},on:function(t,e){var r=this;return "data"===t?this._worker.on(t,(function(t){e.call(r,t.data,t.meta);})):this._worker.on(t,(function(){n.delay(e,arguments,r);})),this},resume:function(){return n.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(n.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new u(this,{objectMode:"nodebuffer"!==this._outputType},t)}},e.exports=l;},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(t,e,r){if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else {var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size;}catch(t){try{var s=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);s.append(n),r.blob=0===s.getBlob("application/zip").size;}catch(t){r.blob=!1;}}}try{r.nodestream=!!t("readable-stream").Readable;}catch(t){r.nodestream=!1;}},{"readable-stream":16}],31:[function(t,e,r){for(var n=t("./utils"),s=t("./support"),i=t("./nodejsUtils"),o=t("./stream/GenericWorker"),a=new Array(256),c=0;c<256;c++)a[c]=252<=c?6:248<=c?5:240<=c?4:224<=c?3:192<=c?2:1;function u(){o.call(this,"utf-8 decode"),this.leftOver=null;}function l(){o.call(this,"utf-8 encode");}a[254]=a[254]=1,r.utf8encode=function(t){return s.nodebuffer?i.newBufferFrom(t,"utf-8"):function(t){var e,r,n,i,o,a=t.length,c=0;for(i=0;i<a;i++)55296==(64512&(r=t.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=t.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),c+=r<128?1:r<2048?2:r<65536?3:4;for(e=s.uint8array?new Uint8Array(c):new Array(c),i=o=0;o<c;i++)55296==(64512&(r=t.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=t.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?e[o++]=r:(r<2048?e[o++]=192|r>>>6:(r<65536?e[o++]=224|r>>>12:(e[o++]=240|r>>>18,e[o++]=128|r>>>12&63),e[o++]=128|r>>>6&63),e[o++]=128|63&r);return e}(t)},r.utf8decode=function(t){return s.nodebuffer?n.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,r,s,i,o=t.length,c=new Array(2*o);for(e=r=0;e<o;)if((s=t[e++])<128)c[r++]=s;else if(4<(i=a[s]))c[r++]=65533,e+=i-1;else {for(s&=2===i?31:3===i?15:7;1<i&&e<o;)s=s<<6|63&t[e++],i--;1<i?c[r++]=65533:s<65536?c[r++]=s:(s-=65536,c[r++]=55296|s>>10&1023,c[r++]=56320|1023&s);}return c.length!==r&&(c.subarray?c=c.subarray(0,r):c.length=r),n.applyFromCharCode(c)}(t=n.transformTo(s.uint8array?"uint8array":"array",t))},n.inherits(u,o),u.prototype.processChunk=function(t){var e=n.transformTo(s.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(s.uint8array){var i=e;(e=new Uint8Array(i.length+this.leftOver.length)).set(this.leftOver,0),e.set(i,this.leftOver.length);}else e=this.leftOver.concat(e);this.leftOver=null;}var o=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0||0===r?e:r+a[t[r]]>e?r:e}(e),c=e;o!==e.length&&(s.uint8array?(c=e.subarray(0,o),this.leftOver=e.subarray(o,e.length)):(c=e.slice(0,o),this.leftOver=e.slice(o,e.length))),this.push({data:r.utf8decode(c),meta:t.meta});},u.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:r.utf8decode(this.leftOver),meta:{}}),this.leftOver=null);},r.Utf8DecodeWorker=u,n.inherits(l,o),l.prototype.processChunk=function(t){this.push({data:r.utf8encode(t.data),meta:t.meta});},r.Utf8EncodeWorker=l;},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(t,e,r){var n=t("./support"),s=t("./base64"),i=t("./nodejsUtils"),o=t("set-immediate-shim"),a=t("./external");function c(t){return t}function u(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}r.newBlob=function(t,e){r.checkSupport("blob");try{return new Blob([t],{type:e})}catch(r){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(e)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var l={stringifyByChunk:function(t,e,r){var n=[],s=0,i=t.length;if(i<=r)return String.fromCharCode.apply(null,t);for(;s<i;)"array"===e||"nodebuffer"===e?n.push(String.fromCharCode.apply(null,t.slice(s,Math.min(s+r,i)))):n.push(String.fromCharCode.apply(null,t.subarray(s,Math.min(s+r,i)))),s+=r;return n.join("")},stringifyByChar:function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return n.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return !1}}(),nodebuffer:function(){try{return n.nodebuffer&&1===String.fromCharCode.apply(null,i.allocBuffer(1)).length}catch(t){return !1}}()}};function h(t){var e=65536,n=r.getTypeOf(t),s=!0;if("uint8array"===n?s=l.applyCanBeUsed.uint8array:"nodebuffer"===n&&(s=l.applyCanBeUsed.nodebuffer),s)for(;1<e;)try{return l.stringifyByChunk(t,n,e)}catch(t){e=Math.floor(e/2);}return l.stringifyByChar(t)}function p(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}r.applyFromCharCode=h;var d={};d.string={string:c,array:function(t){return u(t,new Array(t.length))},arraybuffer:function(t){return d.string.uint8array(t).buffer},uint8array:function(t){return u(t,new Uint8Array(t.length))},nodebuffer:function(t){return u(t,i.allocBuffer(t.length))}},d.array={string:h,array:c,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return i.newBufferFrom(t)}},d.arraybuffer={string:function(t){return h(new Uint8Array(t))},array:function(t){return p(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:c,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return i.newBufferFrom(new Uint8Array(t))}},d.uint8array={string:h,array:function(t){return p(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:c,nodebuffer:function(t){return i.newBufferFrom(t)}},d.nodebuffer={string:h,array:function(t){return p(t,new Array(t.length))},arraybuffer:function(t){return d.nodebuffer.uint8array(t).buffer},uint8array:function(t){return p(t,new Uint8Array(t.length))},nodebuffer:c},r.transformTo=function(t,e){if(e=e||"",!t)return e;r.checkSupport(t);var n=r.getTypeOf(e);return d[n][t](e)},r.getTypeOf=function(t){return "string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":n.nodebuffer&&i.isBuffer(t)?"nodebuffer":n.uint8array&&t instanceof Uint8Array?"uint8array":n.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},r.checkSupport=function(t){if(!n[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},r.MAX_VALUE_16BITS=65535,r.MAX_VALUE_32BITS=-1,r.pretty=function(t){var e,r,n="";for(r=0;r<(t||"").length;r++)n+="\\x"+((e=t.charCodeAt(r))<16?"0":"")+e.toString(16).toUpperCase();return n},r.delay=function(t,e,r){o((function(){t.apply(r||null,e||[]);}));},r.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r;},r.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},r.prepareContent=function(t,e,i,o,c){return a.Promise.resolve(e).then((function(t){return n.blob&&(t instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(t)))&&"undefined"!=typeof FileReader?new a.Promise((function(e,r){var n=new FileReader;n.onload=function(t){e(t.target.result);},n.onerror=function(t){r(t.target.error);},n.readAsArrayBuffer(t);})):t})).then((function(e){var l=r.getTypeOf(e);return l?("arraybuffer"===l?e=r.transformTo("uint8array",e):"string"===l&&(c?e=s.decode(e):i&&!0!==o&&(e=function(t){return u(t,n.uint8array?new Uint8Array(t.length):new Array(t.length))}(e))),e):a.Promise.reject(new Error("Can't read the data of '"+t+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))};},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(t,e,r){var n=t("./reader/readerFor"),s=t("./utils"),i=t("./signature"),o=t("./zipEntry"),a=(t("./utf8"),t("./support"));function c(t){this.files=[],this.loadOptions=t;}c.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+s.pretty(e)+", expected "+s.pretty(t)+")")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var n=this.reader.readString(4)===e;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=a.uint8array?"uint8array":"array",r=s.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r);},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,n=this.zip64EndOfCentralSize-44;0<n;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r};},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(i.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes();},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(i.CENTRAL_FILE_HEADER);)(t=new o({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(i.CENTRAL_DIRECTORY_END);if(t<0)throw this.isSignature(0,i.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(t);var e=t;if(this.checkSignature(i.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===s.MAX_VALUE_16BITS||this.diskWithCentralDirStart===s.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===s.MAX_VALUE_16BITS||this.centralDirRecords===s.MAX_VALUE_16BITS||this.centralDirSize===s.MAX_VALUE_32BITS||this.centralDirOffset===s.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,i.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(i.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(i.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral();}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=e-r;if(0<n)this.isSignature(e,i.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(t){this.reader=n(t);},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles();}},e.exports=c;},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(t,e,r){var n=t("./reader/readerFor"),s=t("./utils"),i=t("./compressedObject"),o=t("./crc32"),a=t("./utf8"),c=t("./compressions"),u=t("./support");function l(t,e){this.options=t,this.loadOptions=e;}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in c)if(c.hasOwnProperty(e)&&c[e].magic===t)return c[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize));},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength);},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0);},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4));}},readExtraFields:function(t){var e,r,n,s=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<s;)e=t.readInt(2),r=t.readInt(2),n=t.readData(r),this.extraFields[e]={id:e,length:r,value:n};t.setIndex(s);},handleUTF8:function(){var t=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=a.utf8decode(this.fileName),this.fileCommentStr=a.utf8decode(this.fileComment);else {var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else {var r=s.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r);}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else {var i=s.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i);}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=n(t.value);return 1!==e.readInt(1)||o(this.fileName)!==e.readInt(4)?null:a.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=n(t.value);return 1!==e.readInt(1)||o(this.fileComment)!==e.readInt(4)?null:a.utf8decode(e.readData(t.length-5))}return null}},e.exports=l;},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(t,e,r){function n(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions};}var s=t("./stream/StreamHelper"),i=t("./stream/DataWorker"),o=t("./utf8"),a=t("./compressedObject"),c=t("./stream/GenericWorker");n.prototype={internalStream:function(t){var e=null,r="string";try{if(!t)throw new Error("No output type specified.");var n="string"===(r=t.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),e=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(e=e.pipe(new o.Utf8EncodeWorker)),!i&&n&&(e=e.pipe(new o.Utf8DecodeWorker));}catch(t){(e=new c("error")).error(t);}return new s(e,r,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof a&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new o.Utf8EncodeWorker)),a.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof a?this._data.getContentWorker():this._data instanceof c?this._data:new i(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},h=0;h<u.length;h++)n.prototype[u[h]]=l;e.exports=n;},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(t,e,n){(function(t){var r,n,s=t.MutationObserver||t.WebKitMutationObserver;if(s){var i=0,o=new s(l),a=t.document.createTextNode("");o.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2;};}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){l(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null;},t.document.documentElement.appendChild(e);}:function(){setTimeout(l,0);};else {var c=new t.MessageChannel;c.port1.onmessage=l,r=function(){c.port2.postMessage(0);};}var u=[];function l(){var t,e;n=!0;for(var r=u.length;r;){for(e=u,u=[],t=-1;++t<r;)e[t]();r=u.length;}n=!1;}e.exports=function(t){1!==u.push(t)||n||r();};}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],37:[function(t,e,r){var n=t("immediate");function s(){}var i={},o=["REJECTED"],a=["FULFILLED"],c=["PENDING"];function u(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=c,this.queue=[],this.outcome=void 0,t!==s&&d(this,t);}function l(t,e,r){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected);}function h(t,e,r){n((function(){var n;try{n=e(r);}catch(n){return i.reject(t,n)}n===t?i.reject(t,new TypeError("Cannot resolve promise with itself")):i.resolve(t,n);}));}function p(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments);}}function d(t,e){var r=!1;function n(e){r||(r=!0,i.reject(t,e));}function s(e){r||(r=!0,i.resolve(t,e));}var o=f((function(){e(s,n);}));"error"===o.status&&n(o.value);}function f(t,e){var r={};try{r.value=t(e),r.status="success";}catch(t){r.status="error",r.value=t;}return r}(e.exports=u).prototype.finally=function(t){if("function"!=typeof t)return this;var e=this.constructor;return this.then((function(r){return e.resolve(t()).then((function(){return r}))}),(function(r){return e.resolve(t()).then((function(){throw r}))}))},u.prototype.catch=function(t){return this.then(null,t)},u.prototype.then=function(t,e){if("function"!=typeof t&&this.state===a||"function"!=typeof e&&this.state===o)return this;var r=new this.constructor(s);return this.state!==c?h(r,this.state===a?t:e,this.outcome):this.queue.push(new l(r,t,e)),r},l.prototype.callFulfilled=function(t){i.resolve(this.promise,t);},l.prototype.otherCallFulfilled=function(t){h(this.promise,this.onFulfilled,t);},l.prototype.callRejected=function(t){i.reject(this.promise,t);},l.prototype.otherCallRejected=function(t){h(this.promise,this.onRejected,t);},i.resolve=function(t,e){var r=f(p,e);if("error"===r.status)return i.reject(t,r.value);var n=r.value;if(n)d(t,n);else {t.state=a,t.outcome=e;for(var s=-1,o=t.queue.length;++s<o;)t.queue[s].callFulfilled(e);}return t},i.reject=function(t,e){t.state=o,t.outcome=e;for(var r=-1,n=t.queue.length;++r<n;)t.queue[r].callRejected(e);return t},u.resolve=function(t){return t instanceof this?t:i.resolve(new this(s),t)},u.reject=function(t){var e=new this(s);return i.reject(e,t)},u.all=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var r=t.length,n=!1;if(!r)return this.resolve([]);for(var o=new Array(r),a=0,c=-1,u=new this(s);++c<r;)l(t[c],c);return u;function l(t,s){e.resolve(t).then((function(t){o[s]=t,++a!==r||n||(n=!0,i.resolve(u,o));}),(function(t){n||(n=!0,i.reject(u,t));}));}},u.race=function(t){if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var e=t.length,r=!1;if(!e)return this.resolve([]);for(var n,o=-1,a=new this(s);++o<e;)n=t[o],this.resolve(n).then((function(t){r||(r=!0,i.resolve(a,t));}),(function(t){r||(r=!0,i.reject(a,t));}));return a};},{immediate:36}],38:[function(t,e,r){var n={};(0, t("./lib/utils/common").assign)(n,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=n;},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(t,e,r){var n=t("./zlib/deflate"),s=t("./utils/common"),i=t("./utils/strings"),o=t("./zlib/messages"),a=t("./zlib/zstream"),c=Object.prototype.toString;function u(t){if(!(this instanceof u))return new u(t);this.options=s.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new a,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(0!==r)throw new Error(o[r]);if(e.header&&n.deflateSetHeader(this.strm,e.header),e.dictionary){var l;if(l="string"==typeof e.dictionary?i.string2buf(e.dictionary):"[object ArrayBuffer]"===c.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,0!==(r=n.deflateSetDictionary(this.strm,l)))throw new Error(o[r]);this._dict_set=!0;}}function l(t,e){var r=new u(e);if(r.push(t,!0),r.err)throw r.msg||o[r.err];return r.result}u.prototype.push=function(t,e){var r,o,a=this.strm,u=this.options.chunkSize;if(this.ended)return !1;o=e===~~e?e:!0===e?4:0,"string"==typeof t?a.input=i.string2buf(t):"[object ArrayBuffer]"===c.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;do{if(0===a.avail_out&&(a.output=new s.Buf8(u),a.next_out=0,a.avail_out=u),1!==(r=n.deflate(a,o))&&0!==r)return this.onEnd(r),!(this.ended=!0);0!==a.avail_out&&(0!==a.avail_in||4!==o&&2!==o)||("string"===this.options.to?this.onData(i.buf2binstring(s.shrinkBuf(a.output,a.next_out))):this.onData(s.shrinkBuf(a.output,a.next_out)));}while((0<a.avail_in||0===a.avail_out)&&1!==r);return 4===o?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,0===r):2!==o||(this.onEnd(0),!(a.avail_out=0))},u.prototype.onData=function(t){this.chunks.push(t);},u.prototype.onEnd=function(t){0===t&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg;},r.Deflate=u,r.deflate=l,r.deflateRaw=function(t,e){return (e=e||{}).raw=!0,l(t,e)},r.gzip=function(t,e){return (e=e||{}).gzip=!0,l(t,e)};},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(t,e,r){var n=t("./zlib/inflate"),s=t("./utils/common"),i=t("./utils/strings"),o=t("./zlib/constants"),a=t("./zlib/messages"),c=t("./zlib/zstream"),u=t("./zlib/gzheader"),l=Object.prototype.toString;function h(t){if(!(this instanceof h))return new h(t);this.options=s.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new c,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,e.windowBits);if(r!==o.Z_OK)throw new Error(a[r]);this.header=new u,n.inflateGetHeader(this.strm,this.header);}function p(t,e){var r=new h(e);if(r.push(t,!0),r.err)throw r.msg||a[r.err];return r.result}h.prototype.push=function(t,e){var r,a,c,u,h,p,d=this.strm,f=this.options.chunkSize,m=this.options.dictionary,w=!1;if(this.ended)return !1;a=e===~~e?e:!0===e?o.Z_FINISH:o.Z_NO_FLUSH,"string"==typeof t?d.input=i.binstring2buf(t):"[object ArrayBuffer]"===l.call(t)?d.input=new Uint8Array(t):d.input=t,d.next_in=0,d.avail_in=d.input.length;do{if(0===d.avail_out&&(d.output=new s.Buf8(f),d.next_out=0,d.avail_out=f),(r=n.inflate(d,o.Z_NO_FLUSH))===o.Z_NEED_DICT&&m&&(p="string"==typeof m?i.string2buf(m):"[object ArrayBuffer]"===l.call(m)?new Uint8Array(m):m,r=n.inflateSetDictionary(this.strm,p)),r===o.Z_BUF_ERROR&&!0===w&&(r=o.Z_OK,w=!1),r!==o.Z_STREAM_END&&r!==o.Z_OK)return this.onEnd(r),!(this.ended=!0);d.next_out&&(0!==d.avail_out&&r!==o.Z_STREAM_END&&(0!==d.avail_in||a!==o.Z_FINISH&&a!==o.Z_SYNC_FLUSH)||("string"===this.options.to?(c=i.utf8border(d.output,d.next_out),u=d.next_out-c,h=i.buf2string(d.output,c),d.next_out=u,d.avail_out=f-u,u&&s.arraySet(d.output,d.output,c,u,0),this.onData(h)):this.onData(s.shrinkBuf(d.output,d.next_out)))),0===d.avail_in&&0===d.avail_out&&(w=!0);}while((0<d.avail_in||0===d.avail_out)&&r!==o.Z_STREAM_END);return r===o.Z_STREAM_END&&(a=o.Z_FINISH),a===o.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===o.Z_OK):a!==o.Z_SYNC_FLUSH||(this.onEnd(o.Z_OK),!(d.avail_out=0))},h.prototype.onData=function(t){this.chunks.push(t);},h.prototype.onEnd=function(t){t===o.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=s.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg;},r.Inflate=h,r.inflate=p,r.inflateRaw=function(t,e){return (e=e||{}).raw=!0,p(t,e)},r.ungzip=p;},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(t,e,r){var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n]);}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var s={arraySet:function(t,e,r,n,s){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+n),s);else for(var i=0;i<n;i++)t[s+i]=e[r+i];},flattenChunks:function(t){var e,r,n,s,i,o;for(e=n=0,r=t.length;e<r;e++)n+=t[e].length;for(o=new Uint8Array(n),e=s=0,r=t.length;e<r;e++)i=t[e],o.set(i,s),s+=i.length;return o}},i={arraySet:function(t,e,r,n,s){for(var i=0;i<n;i++)t[s+i]=e[r+i];},flattenChunks:function(t){return [].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,s)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,i));},r.setTyped(n);},{}],42:[function(t,e,r){var n=t("./common"),s=!0,i=!0;try{String.fromCharCode.apply(null,[0]);}catch(t){s=!1;}try{String.fromCharCode.apply(null,new Uint8Array(1));}catch(t){i=!1;}for(var o=new n.Buf8(256),a=0;a<256;a++)o[a]=252<=a?6:248<=a?5:240<=a?4:224<=a?3:192<=a?2:1;function c(t,e){if(e<65537&&(t.subarray&&i||!t.subarray&&s))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var r="",o=0;o<e;o++)r+=String.fromCharCode(t[o]);return r}o[254]=o[254]=1,r.string2buf=function(t){var e,r,s,i,o,a=t.length,c=0;for(i=0;i<a;i++)55296==(64512&(r=t.charCodeAt(i)))&&i+1<a&&56320==(64512&(s=t.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(s-56320),i++),c+=r<128?1:r<2048?2:r<65536?3:4;for(e=new n.Buf8(c),i=o=0;o<c;i++)55296==(64512&(r=t.charCodeAt(i)))&&i+1<a&&56320==(64512&(s=t.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(s-56320),i++),r<128?e[o++]=r:(r<2048?e[o++]=192|r>>>6:(r<65536?e[o++]=224|r>>>12:(e[o++]=240|r>>>18,e[o++]=128|r>>>12&63),e[o++]=128|r>>>6&63),e[o++]=128|63&r);return e},r.buf2binstring=function(t){return c(t,t.length)},r.binstring2buf=function(t){for(var e=new n.Buf8(t.length),r=0,s=e.length;r<s;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,n,s,i,a=e||t.length,u=new Array(2*a);for(r=n=0;r<a;)if((s=t[r++])<128)u[n++]=s;else if(4<(i=o[s]))u[n++]=65533,r+=i-1;else {for(s&=2===i?31:3===i?15:7;1<i&&r<a;)s=s<<6|63&t[r++],i--;1<i?u[n++]=65533:s<65536?u[n++]=s:(s-=65536,u[n++]=55296|s>>10&1023,u[n++]=56320|1023&s);}return c(u,n)},r.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0||0===r?e:r+o[t[r]]>e?r:e};},{"./common":41}],43:[function(t,e,r){e.exports=function(t,e,r,n){for(var s=65535&t|0,i=t>>>16&65535|0,o=0;0!==r;){for(r-=o=2e3<r?2e3:r;i=i+(s=s+e[n++]|0)|0,--o;);s%=65521,i%=65521;}return s|i<<16|0};},{}],44:[function(t,e,r){e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};},{}],45:[function(t,e,r){var n=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t;}return e}();e.exports=function(t,e,r,s){var i=n,o=s+r;t^=-1;for(var a=s;a<o;a++)t=t>>>8^i[255&(t^e[a])];return -1^t};},{}],46:[function(t,e,r){var n,s=t("../utils/common"),i=t("./trees"),o=t("./adler32"),a=t("./crc32"),c=t("./messages"),u=-2,l=258,h=262,p=113;function d(t,e){return t.msg=c[e],e}function f(t){return (t<<1)-(4<t?9:0)}function m(t){for(var e=t.length;0<=--e;)t[e]=0;}function w(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(s.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0));}function g(t,e){i._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,w(t.strm);}function y(t,e){t.pending_buf[t.pending++]=e;}function b(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e;}function v(t,e){var r,n,s=t.max_chain_length,i=t.strstart,o=t.prev_length,a=t.nice_match,c=t.strstart>t.w_size-h?t.strstart-(t.w_size-h):0,u=t.window,p=t.w_mask,d=t.prev,f=t.strstart+l,m=u[i+o-1],w=u[i+o];t.prev_length>=t.good_match&&(s>>=2),a>t.lookahead&&(a=t.lookahead);do{if(u[(r=e)+o]===w&&u[r+o-1]===m&&u[r]===u[i]&&u[++r]===u[i+1]){i+=2,r++;do{}while(u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&u[++i]===u[++r]&&i<f);if(n=l-(f-i),i=f-l,o<n){if(t.match_start=e,a<=(o=n))break;m=u[i+o-1],w=u[i+o];}}}while((e=d[e&p])>c&&0!=--s);return o<=t.lookahead?o:t.lookahead}function _(t){var e,r,n,i,c,u,l,p,d,f,m=t.w_size;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=m+(m-h)){for(s.arraySet(t.window,t.window,m,m,0),t.match_start-=m,t.strstart-=m,t.block_start-=m,e=r=t.hash_size;n=t.head[--e],t.head[e]=m<=n?n-m:0,--r;);for(e=r=m;n=t.prev[--e],t.prev[e]=m<=n?n-m:0,--r;);i+=m;}if(0===t.strm.avail_in)break;if(u=t.strm,l=t.window,p=t.strstart+t.lookahead,f=void 0,(d=i)<(f=u.avail_in)&&(f=d),r=0===f?0:(u.avail_in-=f,s.arraySet(l,u.input,u.next_in,f,p),1===u.state.wrap?u.adler=o(u.adler,l,f,p):2===u.state.wrap&&(u.adler=a(u.adler,l,f,p)),u.next_in+=f,u.total_in+=f,f),t.lookahead+=r,t.lookahead+t.insert>=3)for(c=t.strstart-t.insert,t.ins_h=t.window[c],t.ins_h=(t.ins_h<<t.hash_shift^t.window[c+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[c+3-1])&t.hash_mask,t.prev[c&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=c,c++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<h&&0!==t.strm.avail_in)}function x(t,e){for(var r,n;;){if(t.lookahead<h){if(_(t),t.lookahead<h&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-h&&(t.match_length=v(t,r)),t.match_length>=3)if(n=i._tr_tally(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++;}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else n=i._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(g(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,4===e?(g(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(g(t,!1),0===t.strm.avail_out)?1:2}function E(t,e){for(var r,n,s;;){if(t.lookahead<h){if(_(t),t.lookahead<h&&0===e)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-h&&(t.match_length=v(t,r),t.match_length<=5&&(1===t.strategy||3===t.match_length&&4096<t.strstart-t.match_start)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){for(s=t.strstart+t.lookahead-3,n=i._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=s&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+3-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=2,t.strstart++,n&&(g(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if((n=i._tr_tally(t,0,t.window[t.strstart-1]))&&g(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--;}return t.match_available&&(n=i._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,4===e?(g(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(g(t,!1),0===t.strm.avail_out)?1:2}function T(t,e,r,n,s){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=s;}function A(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new s.Buf16(1146),this.dyn_dtree=new s.Buf16(122),this.bl_tree=new s.Buf16(78),m(this.dyn_ltree),m(this.dyn_dtree),m(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new s.Buf16(16),this.heap=new s.Buf16(573),m(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new s.Buf16(573),m(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0;}function S(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=2,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:p,t.adler=2===e.wrap?0:1,e.last_flush=0,i._tr_init(e),0):d(t,u)}function R(t){var e=S(t);return 0===e&&function(t){t.window_size=2*t.w_size,m(t.head),t.max_lazy_match=n[t.level].max_lazy,t.good_match=n[t.level].good_length,t.nice_match=n[t.level].nice_length,t.max_chain_length=n[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=2,t.match_available=0,t.ins_h=0;}(t.state),e}function I(t,e,r,n,i,o){if(!t)return u;var a=1;if(-1===e&&(e=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||9<i||8!==r||n<8||15<n||e<0||9<e||o<0||4<o)return d(t,u);8===n&&(n=9);var c=new A;return (t.state=c).strm=t,c.wrap=a,c.gzhead=null,c.w_bits=n,c.w_size=1<<c.w_bits,c.w_mask=c.w_size-1,c.hash_bits=i+7,c.hash_size=1<<c.hash_bits,c.hash_mask=c.hash_size-1,c.hash_shift=~~((c.hash_bits+3-1)/3),c.window=new s.Buf8(2*c.w_size),c.head=new s.Buf16(c.hash_size),c.prev=new s.Buf16(c.w_size),c.lit_bufsize=1<<i+6,c.pending_buf_size=4*c.lit_bufsize,c.pending_buf=new s.Buf8(c.pending_buf_size),c.d_buf=1*c.lit_bufsize,c.l_buf=3*c.lit_bufsize,c.level=e,c.strategy=o,c.method=r,R(t)}n=[new T(0,0,0,0,(function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(_(t),0===t.lookahead&&0===e)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,g(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-h&&(g(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(g(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(g(t,!1),t.strm.avail_out),1)})),new T(4,4,8,4,x),new T(4,5,16,8,x),new T(4,6,32,32,x),new T(4,4,16,16,E),new T(8,16,32,32,E),new T(8,16,128,128,E),new T(8,32,128,256,E),new T(32,128,258,1024,E),new T(32,258,258,4096,E)],r.deflateInit=function(t,e){return I(t,e,8,15,8,0)},r.deflateInit2=I,r.deflateReset=R,r.deflateResetKeep=S,r.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?u:(t.state.gzhead=e,0):u},r.deflate=function(t,e){var r,s,o,c;if(!t||!t.state||5<e||e<0)return t?d(t,u):u;if(s=t.state,!t.output||!t.input&&0!==t.avail_in||666===s.status&&4!==e)return d(t,0===t.avail_out?-5:u);if(s.strm=t,r=s.last_flush,s.last_flush=e,42===s.status)if(2===s.wrap)t.adler=0,y(s,31),y(s,139),y(s,8),s.gzhead?(y(s,(s.gzhead.text?1:0)+(s.gzhead.hcrc?2:0)+(s.gzhead.extra?4:0)+(s.gzhead.name?8:0)+(s.gzhead.comment?16:0)),y(s,255&s.gzhead.time),y(s,s.gzhead.time>>8&255),y(s,s.gzhead.time>>16&255),y(s,s.gzhead.time>>24&255),y(s,9===s.level?2:2<=s.strategy||s.level<2?4:0),y(s,255&s.gzhead.os),s.gzhead.extra&&s.gzhead.extra.length&&(y(s,255&s.gzhead.extra.length),y(s,s.gzhead.extra.length>>8&255)),s.gzhead.hcrc&&(t.adler=a(t.adler,s.pending_buf,s.pending,0)),s.gzindex=0,s.status=69):(y(s,0),y(s,0),y(s,0),y(s,0),y(s,0),y(s,9===s.level?2:2<=s.strategy||s.level<2?4:0),y(s,3),s.status=p);else {var h=8+(s.w_bits-8<<4)<<8;h|=(2<=s.strategy||s.level<2?0:s.level<6?1:6===s.level?2:3)<<6,0!==s.strstart&&(h|=32),h+=31-h%31,s.status=p,b(s,h),0!==s.strstart&&(b(s,t.adler>>>16),b(s,65535&t.adler)),t.adler=1;}if(69===s.status)if(s.gzhead.extra){for(o=s.pending;s.gzindex<(65535&s.gzhead.extra.length)&&(s.pending!==s.pending_buf_size||(s.gzhead.hcrc&&s.pending>o&&(t.adler=a(t.adler,s.pending_buf,s.pending-o,o)),w(t),o=s.pending,s.pending!==s.pending_buf_size));)y(s,255&s.gzhead.extra[s.gzindex]),s.gzindex++;s.gzhead.hcrc&&s.pending>o&&(t.adler=a(t.adler,s.pending_buf,s.pending-o,o)),s.gzindex===s.gzhead.extra.length&&(s.gzindex=0,s.status=73);}else s.status=73;if(73===s.status)if(s.gzhead.name){o=s.pending;do{if(s.pending===s.pending_buf_size&&(s.gzhead.hcrc&&s.pending>o&&(t.adler=a(t.adler,s.pending_buf,s.pending-o,o)),w(t),o=s.pending,s.pending===s.pending_buf_size)){c=1;break}c=s.gzindex<s.gzhead.name.length?255&s.gzhead.name.charCodeAt(s.gzindex++):0,y(s,c);}while(0!==c);s.gzhead.hcrc&&s.pending>o&&(t.adler=a(t.adler,s.pending_buf,s.pending-o,o)),0===c&&(s.gzindex=0,s.status=91);}else s.status=91;if(91===s.status)if(s.gzhead.comment){o=s.pending;do{if(s.pending===s.pending_buf_size&&(s.gzhead.hcrc&&s.pending>o&&(t.adler=a(t.adler,s.pending_buf,s.pending-o,o)),w(t),o=s.pending,s.pending===s.pending_buf_size)){c=1;break}c=s.gzindex<s.gzhead.comment.length?255&s.gzhead.comment.charCodeAt(s.gzindex++):0,y(s,c);}while(0!==c);s.gzhead.hcrc&&s.pending>o&&(t.adler=a(t.adler,s.pending_buf,s.pending-o,o)),0===c&&(s.status=103);}else s.status=103;if(103===s.status&&(s.gzhead.hcrc?(s.pending+2>s.pending_buf_size&&w(t),s.pending+2<=s.pending_buf_size&&(y(s,255&t.adler),y(s,t.adler>>8&255),t.adler=0,s.status=p)):s.status=p),0!==s.pending){if(w(t),0===t.avail_out)return s.last_flush=-1,0}else if(0===t.avail_in&&f(e)<=f(r)&&4!==e)return d(t,-5);if(666===s.status&&0!==t.avail_in)return d(t,-5);if(0!==t.avail_in||0!==s.lookahead||0!==e&&666!==s.status){var v=2===s.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(_(t),0===t.lookahead)){if(0===e)return 1;break}if(t.match_length=0,r=i._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(g(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(g(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(g(t,!1),0===t.strm.avail_out)?1:2}(s,e):3===s.strategy?function(t,e){for(var r,n,s,o,a=t.window;;){if(t.lookahead<=l){if(_(t),t.lookahead<=l&&0===e)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&0<t.strstart&&(n=a[s=t.strstart-1])===a[++s]&&n===a[++s]&&n===a[++s]){o=t.strstart+l;do{}while(n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&n===a[++s]&&s<o);t.match_length=l-(o-s),t.match_length>t.lookahead&&(t.match_length=t.lookahead);}if(t.match_length>=3?(r=i._tr_tally(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=i._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(g(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,4===e?(g(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(g(t,!1),0===t.strm.avail_out)?1:2}(s,e):n[s.level].func(s,e);if(3!==v&&4!==v||(s.status=666),1===v||3===v)return 0===t.avail_out&&(s.last_flush=-1),0;if(2===v&&(1===e?i._tr_align(s):5!==e&&(i._tr_stored_block(s,0,0,!1),3===e&&(m(s.head),0===s.lookahead&&(s.strstart=0,s.block_start=0,s.insert=0))),w(t),0===t.avail_out))return s.last_flush=-1,0}return 4!==e?0:s.wrap<=0?1:(2===s.wrap?(y(s,255&t.adler),y(s,t.adler>>8&255),y(s,t.adler>>16&255),y(s,t.adler>>24&255),y(s,255&t.total_in),y(s,t.total_in>>8&255),y(s,t.total_in>>16&255),y(s,t.total_in>>24&255)):(b(s,t.adler>>>16),b(s,65535&t.adler)),w(t),0<s.wrap&&(s.wrap=-s.wrap),0!==s.pending?0:1)},r.deflateEnd=function(t){var e;return t&&t.state?42!==(e=t.state.status)&&69!==e&&73!==e&&91!==e&&103!==e&&e!==p&&666!==e?d(t,u):(t.state=null,e===p?d(t,-3):0):u},r.deflateSetDictionary=function(t,e){var r,n,i,a,c,l,h,p,d=e.length;if(!t||!t.state)return u;if(2===(a=(r=t.state).wrap)||1===a&&42!==r.status||r.lookahead)return u;for(1===a&&(t.adler=o(t.adler,e,d,0)),r.wrap=0,d>=r.w_size&&(0===a&&(m(r.head),r.strstart=0,r.block_start=0,r.insert=0),p=new s.Buf8(r.w_size),s.arraySet(p,e,d-r.w_size,r.w_size,0),e=p,d=r.w_size),c=t.avail_in,l=t.next_in,h=t.input,t.avail_in=d,t.next_in=0,t.input=e,_(r);r.lookahead>=3;){for(n=r.strstart,i=r.lookahead-2;r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+3-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=2,_(r);}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=2,r.match_available=0,t.next_in=l,t.input=h,t.avail_in=c,r.wrap=a,0},r.deflateInfo="pako deflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(t,e,r){e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1;};},{}],48:[function(t,e,r){e.exports=function(t,e){var r,n,s,i,o,a,c,u,l,h,p,d,f,m,w,g,y,b,v,_,x,E,T,A,S;r=t.state,n=t.next_in,A=t.input,s=n+(t.avail_in-5),i=t.next_out,S=t.output,o=i-(e-t.avail_out),a=i+(t.avail_out-257),c=r.dmax,u=r.wsize,l=r.whave,h=r.wnext,p=r.window,d=r.hold,f=r.bits,m=r.lencode,w=r.distcode,g=(1<<r.lenbits)-1,y=(1<<r.distbits)-1;t:do{f<15&&(d+=A[n++]<<f,f+=8,d+=A[n++]<<f,f+=8),b=m[d&g];e:for(;;){if(d>>>=v=b>>>24,f-=v,0==(v=b>>>16&255))S[i++]=65535&b;else {if(!(16&v)){if(0==(64&v)){b=m[(65535&b)+(d&(1<<v)-1)];continue e}if(32&v){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}_=65535&b,(v&=15)&&(f<v&&(d+=A[n++]<<f,f+=8),_+=d&(1<<v)-1,d>>>=v,f-=v),f<15&&(d+=A[n++]<<f,f+=8,d+=A[n++]<<f,f+=8),b=w[d&y];r:for(;;){if(d>>>=v=b>>>24,f-=v,!(16&(v=b>>>16&255))){if(0==(64&v)){b=w[(65535&b)+(d&(1<<v)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(x=65535&b,f<(v&=15)&&(d+=A[n++]<<f,(f+=8)<v&&(d+=A[n++]<<f,f+=8)),c<(x+=d&(1<<v)-1)){t.msg="invalid distance too far back",r.mode=30;break t}if(d>>>=v,f-=v,(v=i-o)<x){if(l<(v=x-v)&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(T=p,(E=0)===h){if(E+=u-v,v<_){for(_-=v;S[i++]=p[E++],--v;);E=i-x,T=S;}}else if(h<v){if(E+=u+h-v,(v-=h)<_){for(_-=v;S[i++]=p[E++],--v;);if(E=0,h<_){for(_-=v=h;S[i++]=p[E++],--v;);E=i-x,T=S;}}}else if(E+=h-v,v<_){for(_-=v;S[i++]=p[E++],--v;);E=i-x,T=S;}for(;2<_;)S[i++]=T[E++],S[i++]=T[E++],S[i++]=T[E++],_-=3;_&&(S[i++]=T[E++],1<_&&(S[i++]=T[E++]));}else {for(E=i-x;S[i++]=S[E++],S[i++]=S[E++],S[i++]=S[E++],2<(_-=3););_&&(S[i++]=S[E++],1<_&&(S[i++]=S[E++]));}break}}break}}while(n<s&&i<a);n-=_=f>>3,d&=(1<<(f-=_<<3))-1,t.next_in=n,t.next_out=i,t.avail_in=n<s?s-n+5:5-(n-s),t.avail_out=i<a?a-i+257:257-(i-a),r.hold=d,r.bits=f;};},{}],49:[function(t,e,r){var n=t("../utils/common"),s=t("./adler32"),i=t("./crc32"),o=t("./inffast"),a=t("./inftrees"),c=-2;function u(t){return (t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function l(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0;}function h(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new n.Buf32(852),e.distcode=e.distdyn=new n.Buf32(592),e.sane=1,e.back=-1,0):c}function p(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,h(t)):c}function d(t,e){var r,n;return t&&t.state?(n=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?c:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,p(t))):c}function f(t,e){var r,n;return t?(n=new l,(t.state=n).window=null,0!==(r=d(t,e))&&(t.state=null),r):c}var m,w,g=!0;function y(t){if(g){var e;for(m=new n.Buf32(512),w=new n.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(a(1,t.lens,0,288,m,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;a(2,t.lens,0,32,w,0,t.work,{bits:5}),g=!1;}t.lencode=m,t.lenbits=9,t.distcode=w,t.distbits=5;}function b(t,e,r,s){var i,o=t.state;return null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new n.Buf8(o.wsize)),s>=o.wsize?(n.arraySet(o.window,e,r-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):(s<(i=o.wsize-o.wnext)&&(i=s),n.arraySet(o.window,e,r-s,i,o.wnext),(s-=i)?(n.arraySet(o.window,e,r-s,s,0),o.wnext=s,o.whave=o.wsize):(o.wnext+=i,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=i))),0}r.inflateReset=p,r.inflateReset2=d,r.inflateResetKeep=h,r.inflateInit=function(t){return f(t,15)},r.inflateInit2=f,r.inflate=function(t,e){var r,l,h,p,d,f,m,w,g,v,_,x,E,T,A,S,R,I,N,O,C,k,D,L,P=0,F=new n.Buf8(4),B=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return c;12===(r=t.state).mode&&(r.mode=13),d=t.next_out,h=t.output,m=t.avail_out,p=t.next_in,l=t.input,f=t.avail_in,w=r.hold,g=r.bits,v=f,_=m,k=0;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;g<16;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if(2&r.wrap&&35615===w){F[r.check=0]=255&w,F[1]=w>>>8&255,r.check=i(r.check,F,2,0),g=w=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&w)<<8)+(w>>8))%31){t.msg="incorrect header check",r.mode=30;break}if(8!=(15&w)){t.msg="unknown compression method",r.mode=30;break}if(g-=4,C=8+(15&(w>>>=4)),0===r.wbits)r.wbits=C;else if(C>r.wbits){t.msg="invalid window size",r.mode=30;break}r.dmax=1<<C,t.adler=r.check=1,r.mode=512&w?10:12,g=w=0;break;case 2:for(;g<16;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if(r.flags=w,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=w>>8&1),512&r.flags&&(F[0]=255&w,F[1]=w>>>8&255,r.check=i(r.check,F,2,0)),g=w=0,r.mode=3;case 3:for(;g<32;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}r.head&&(r.head.time=w),512&r.flags&&(F[0]=255&w,F[1]=w>>>8&255,F[2]=w>>>16&255,F[3]=w>>>24&255,r.check=i(r.check,F,4,0)),g=w=0,r.mode=4;case 4:for(;g<16;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}r.head&&(r.head.xflags=255&w,r.head.os=w>>8),512&r.flags&&(F[0]=255&w,F[1]=w>>>8&255,r.check=i(r.check,F,2,0)),g=w=0,r.mode=5;case 5:if(1024&r.flags){for(;g<16;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}r.length=w,r.head&&(r.head.extra_len=w),512&r.flags&&(F[0]=255&w,F[1]=w>>>8&255,r.check=i(r.check,F,2,0)),g=w=0;}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(f<(x=r.length)&&(x=f),x&&(r.head&&(C=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,l,p,x,C)),512&r.flags&&(r.check=i(r.check,l,x,p)),f-=x,p+=x,r.length-=x),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===f)break t;for(x=0;C=l[p+x++],r.head&&C&&r.length<65536&&(r.head.name+=String.fromCharCode(C)),C&&x<f;);if(512&r.flags&&(r.check=i(r.check,l,x,p)),f-=x,p+=x,C)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===f)break t;for(x=0;C=l[p+x++],r.head&&C&&r.length<65536&&(r.head.comment+=String.fromCharCode(C)),C&&x<f;);if(512&r.flags&&(r.check=i(r.check,l,x,p)),f-=x,p+=x,C)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;g<16;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if(w!==(65535&r.check)){t.msg="header crc mismatch",r.mode=30;break}g=w=0;}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;g<32;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}t.adler=r.check=u(w),g=w=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=d,t.avail_out=m,t.next_in=p,t.avail_in=f,r.hold=w,r.bits=g,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){w>>>=7&g,g-=7&g,r.mode=27;break}for(;g<3;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}switch(r.last=1&w,g-=1,3&(w>>>=1)){case 0:r.mode=14;break;case 1:if(y(r),r.mode=20,6!==e)break;w>>>=2,g-=2;break t;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=30;}w>>>=2,g-=2;break;case 14:for(w>>>=7&g,g-=7&g;g<32;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if((65535&w)!=(w>>>16^65535)){t.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&w,g=w=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(x=r.length){if(f<x&&(x=f),m<x&&(x=m),0===x)break t;n.arraySet(h,l,p,x,d),f-=x,p+=x,m-=x,d+=x,r.length-=x;break}r.mode=12;break;case 17:for(;g<14;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if(r.nlen=257+(31&w),w>>>=5,g-=5,r.ndist=1+(31&w),w>>>=5,g-=5,r.ncode=4+(15&w),w>>>=4,g-=4,286<r.nlen||30<r.ndist){t.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;g<3;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}r.lens[B[r.have++]]=7&w,w>>>=3,g-=3;}for(;r.have<19;)r.lens[B[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,D={bits:r.lenbits},k=a(0,r.lens,0,19,r.lencode,0,r.work,D),r.lenbits=D.bits,k){t.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;S=(P=r.lencode[w&(1<<r.lenbits)-1])>>>16&255,R=65535&P,!((A=P>>>24)<=g);){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if(R<16)w>>>=A,g-=A,r.lens[r.have++]=R;else {if(16===R){for(L=A+2;g<L;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if(w>>>=A,g-=A,0===r.have){t.msg="invalid bit length repeat",r.mode=30;break}C=r.lens[r.have-1],x=3+(3&w),w>>>=2,g-=2;}else if(17===R){for(L=A+3;g<L;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}g-=A,C=0,x=3+(7&(w>>>=A)),w>>>=3,g-=3;}else {for(L=A+7;g<L;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}g-=A,C=0,x=11+(127&(w>>>=A)),w>>>=7,g-=7;}if(r.have+x>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=30;break}for(;x--;)r.lens[r.have++]=C;}}if(30===r.mode)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,D={bits:r.lenbits},k=a(1,r.lens,0,r.nlen,r.lencode,0,r.work,D),r.lenbits=D.bits,k){t.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,D={bits:r.distbits},k=a(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,D),r.distbits=D.bits,k){t.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(6<=f&&258<=m){t.next_out=d,t.avail_out=m,t.next_in=p,t.avail_in=f,r.hold=w,r.bits=g,o(t,_),d=t.next_out,h=t.output,m=t.avail_out,p=t.next_in,l=t.input,f=t.avail_in,w=r.hold,g=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;S=(P=r.lencode[w&(1<<r.lenbits)-1])>>>16&255,R=65535&P,!((A=P>>>24)<=g);){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if(S&&0==(240&S)){for(I=A,N=S,O=R;S=(P=r.lencode[O+((w&(1<<I+N)-1)>>I)])>>>16&255,R=65535&P,!(I+(A=P>>>24)<=g);){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}w>>>=I,g-=I,r.back+=I;}if(w>>>=A,g-=A,r.back+=A,r.length=R,0===S){r.mode=26;break}if(32&S){r.back=-1,r.mode=12;break}if(64&S){t.msg="invalid literal/length code",r.mode=30;break}r.extra=15&S,r.mode=22;case 22:if(r.extra){for(L=r.extra;g<L;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}r.length+=w&(1<<r.extra)-1,w>>>=r.extra,g-=r.extra,r.back+=r.extra;}r.was=r.length,r.mode=23;case 23:for(;S=(P=r.distcode[w&(1<<r.distbits)-1])>>>16&255,R=65535&P,!((A=P>>>24)<=g);){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if(0==(240&S)){for(I=A,N=S,O=R;S=(P=r.distcode[O+((w&(1<<I+N)-1)>>I)])>>>16&255,R=65535&P,!(I+(A=P>>>24)<=g);){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}w>>>=I,g-=I,r.back+=I;}if(w>>>=A,g-=A,r.back+=A,64&S){t.msg="invalid distance code",r.mode=30;break}r.offset=R,r.extra=15&S,r.mode=24;case 24:if(r.extra){for(L=r.extra;g<L;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}r.offset+=w&(1<<r.extra)-1,w>>>=r.extra,g-=r.extra,r.back+=r.extra;}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===m)break t;if(x=_-m,r.offset>x){if((x=r.offset-x)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=30;break}E=x>r.wnext?(x-=r.wnext,r.wsize-x):r.wnext-x,x>r.length&&(x=r.length),T=r.window;}else T=h,E=d-r.offset,x=r.length;for(m<x&&(x=m),m-=x,r.length-=x;h[d++]=T[E++],--x;);0===r.length&&(r.mode=21);break;case 26:if(0===m)break t;h[d++]=r.length,m--,r.mode=21;break;case 27:if(r.wrap){for(;g<32;){if(0===f)break t;f--,w|=l[p++]<<g,g+=8;}if(_-=m,t.total_out+=_,r.total+=_,_&&(t.adler=r.check=r.flags?i(r.check,h,_,d-_):s(r.check,h,_,d-_)),_=m,(r.flags?w:u(w))!==r.check){t.msg="incorrect data check",r.mode=30;break}g=w=0;}r.mode=28;case 28:if(r.wrap&&r.flags){for(;g<32;){if(0===f)break t;f--,w+=l[p++]<<g,g+=8;}if(w!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=30;break}g=w=0;}r.mode=29;case 29:k=1;break t;case 30:k=-3;break t;case 31:return -4;default:return c}return t.next_out=d,t.avail_out=m,t.next_in=p,t.avail_in=f,r.hold=w,r.bits=g,(r.wsize||_!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&b(t,t.output,t.next_out,_-t.avail_out)?(r.mode=31,-4):(v-=t.avail_in,_-=t.avail_out,t.total_in+=v,t.total_out+=_,r.total+=_,r.wrap&&_&&(t.adler=r.check=r.flags?i(r.check,h,_,t.next_out-_):s(r.check,h,_,t.next_out-_)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==v&&0===_||4===e)&&0===k&&(k=-5),k)},r.inflateEnd=function(t){if(!t||!t.state)return c;var e=t.state;return e.window&&(e.window=null),t.state=null,0},r.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?c:((r.head=e).done=!1,0):c},r.inflateSetDictionary=function(t,e){var r,n=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?c:11===r.mode&&s(1,e,n,0)!==r.check?-3:b(t,e,n,n)?(r.mode=31,-4):(r.havedict=1,0):c},r.inflateInfo="pako inflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(t,e,r){var n=t("../utils/common"),s=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],i=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],a=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,r,c,u,l,h,p){var d,f,m,w,g,y,b,v,_,x=p.bits,E=0,T=0,A=0,S=0,R=0,I=0,N=0,O=0,C=0,k=0,D=null,L=0,P=new n.Buf16(16),F=new n.Buf16(16),B=null,M=0;for(E=0;E<=15;E++)P[E]=0;for(T=0;T<c;T++)P[e[r+T]]++;for(R=x,S=15;1<=S&&0===P[S];S--);if(S<R&&(R=S),0===S)return u[l++]=20971520,u[l++]=20971520,p.bits=1,0;for(A=1;A<S&&0===P[A];A++);for(R<A&&(R=A),E=O=1;E<=15;E++)if(O<<=1,(O-=P[E])<0)return -1;if(0<O&&(0===t||1!==S))return -1;for(F[1]=0,E=1;E<15;E++)F[E+1]=F[E]+P[E];for(T=0;T<c;T++)0!==e[r+T]&&(h[F[e[r+T]]++]=T);if(y=0===t?(D=B=h,19):1===t?(D=s,L-=257,B=i,M-=257,256):(D=o,B=a,-1),E=A,g=l,N=T=k=0,m=-1,w=(C=1<<(I=R))-1,1===t&&852<C||2===t&&592<C)return 1;for(;;){for(b=E-N,_=h[T]<y?(v=0,h[T]):h[T]>y?(v=B[M+h[T]],D[L+h[T]]):(v=96,0),d=1<<E-N,A=f=1<<I;u[g+(k>>N)+(f-=d)]=b<<24|v<<16|_|0,0!==f;);for(d=1<<E-1;k&d;)d>>=1;if(0!==d?(k&=d-1,k+=d):k=0,T++,0==--P[E]){if(E===S)break;E=e[r+h[T]];}if(R<E&&(k&w)!==m){for(0===N&&(N=R),g+=A,O=1<<(I=E-N);I+N<S&&!((O-=P[I+N])<=0);)I++,O<<=1;if(C+=1<<I,1===t&&852<C||2===t&&592<C)return 1;u[m=k&w]=R<<24|I<<16|g-l|0;}}return 0!==k&&(u[g+k]=E-N<<24|64<<16|0),p.bits=R,0};},{"../utils/common":41}],51:[function(t,e,r){e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};},{}],52:[function(t,e,r){var n=t("../utils/common");function s(t){for(var e=t.length;0<=--e;)t[e]=0;}var i=256,o=286,a=30,c=15,u=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],h=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],p=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],d=new Array(576);s(d);var f=new Array(60);s(f);var m=new Array(512);s(m);var w=new Array(256);s(w);var g=new Array(29);s(g);var y,b,v,_=new Array(a);function x(t,e,r,n,s){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=s,this.has_stree=t&&t.length;}function E(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e;}function T(t){return t<256?m[t]:m[256+(t>>>7)]}function A(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255;}function S(t,e,r){t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,A(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r);}function R(t,e,r){S(t,r[2*e],r[2*e+1]);}function I(t,e){for(var r=0;r|=1&t,t>>>=1,r<<=1,0<--e;);return r>>>1}function N(t,e,r){var n,s,i=new Array(16),o=0;for(n=1;n<=c;n++)i[n]=o=o+r[n-1]<<1;for(s=0;s<=e;s++){var a=t[2*s+1];0!==a&&(t[2*s]=I(i[a]++,a));}}function O(t){var e;for(e=0;e<o;e++)t.dyn_ltree[2*e]=0;for(e=0;e<a;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0;}function C(t){8<t.bi_valid?A(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0;}function k(t,e,r,n){var s=2*e,i=2*r;return t[s]<t[i]||t[s]===t[i]&&n[e]<=n[r]}function D(t,e,r){for(var n=t.heap[r],s=r<<1;s<=t.heap_len&&(s<t.heap_len&&k(e,t.heap[s+1],t.heap[s],t.depth)&&s++,!k(e,n,t.heap[s],t.depth));)t.heap[r]=t.heap[s],r=s,s<<=1;t.heap[r]=n;}function L(t,e,r){var n,s,o,a,c=0;if(0!==t.last_lit)for(;n=t.pending_buf[t.d_buf+2*c]<<8|t.pending_buf[t.d_buf+2*c+1],s=t.pending_buf[t.l_buf+c],c++,0===n?R(t,s,e):(R(t,(o=w[s])+i+1,e),0!==(a=u[o])&&S(t,s-=g[o],a),R(t,o=T(--n),r),0!==(a=l[o])&&S(t,n-=_[o],a)),c<t.last_lit;);R(t,256,e);}function P(t,e){var r,n,s,i=e.dyn_tree,o=e.stat_desc.static_tree,a=e.stat_desc.has_stree,u=e.stat_desc.elems,l=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<u;r++)0!==i[2*r]?(t.heap[++t.heap_len]=l=r,t.depth[r]=0):i[2*r+1]=0;for(;t.heap_len<2;)i[2*(s=t.heap[++t.heap_len]=l<2?++l:0)]=1,t.depth[s]=0,t.opt_len--,a&&(t.static_len-=o[2*s+1]);for(e.max_code=l,r=t.heap_len>>1;1<=r;r--)D(t,i,r);for(s=u;r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],D(t,i,1),n=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=n,i[2*s]=i[2*r]+i[2*n],t.depth[s]=(t.depth[r]>=t.depth[n]?t.depth[r]:t.depth[n])+1,i[2*r+1]=i[2*n+1]=s,t.heap[1]=s++,D(t,i,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,n,s,i,o,a,u=e.dyn_tree,l=e.max_code,h=e.stat_desc.static_tree,p=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,f=e.stat_desc.extra_base,m=e.stat_desc.max_length,w=0;for(i=0;i<=c;i++)t.bl_count[i]=0;for(u[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<573;r++)m<(i=u[2*u[2*(n=t.heap[r])+1]+1]+1)&&(i=m,w++),u[2*n+1]=i,l<n||(t.bl_count[i]++,o=0,f<=n&&(o=d[n-f]),a=u[2*n],t.opt_len+=a*(i+o),p&&(t.static_len+=a*(h[2*n+1]+o)));if(0!==w){do{for(i=m-1;0===t.bl_count[i];)i--;t.bl_count[i]--,t.bl_count[i+1]+=2,t.bl_count[m]--,w-=2;}while(0<w);for(i=m;0!==i;i--)for(n=t.bl_count[i];0!==n;)l<(s=t.heap[--r])||(u[2*s+1]!==i&&(t.opt_len+=(i-u[2*s+1])*u[2*s],u[2*s+1]=i),n--);}}(t,e),N(i,l,t.bl_count);}function F(t,e,r){var n,s,i=-1,o=e[1],a=0,c=7,u=4;for(0===o&&(c=138,u=3),e[2*(r+1)+1]=65535,n=0;n<=r;n++)s=o,o=e[2*(n+1)+1],++a<c&&s===o||(a<u?t.bl_tree[2*s]+=a:0!==s?(s!==i&&t.bl_tree[2*s]++,t.bl_tree[32]++):a<=10?t.bl_tree[34]++:t.bl_tree[36]++,i=s,u=(a=0)===o?(c=138,3):s===o?(c=6,3):(c=7,4));}function B(t,e,r){var n,s,i=-1,o=e[1],a=0,c=7,u=4;for(0===o&&(c=138,u=3),n=0;n<=r;n++)if(s=o,o=e[2*(n+1)+1],!(++a<c&&s===o)){if(a<u)for(;R(t,s,t.bl_tree),0!=--a;);else 0!==s?(s!==i&&(R(t,s,t.bl_tree),a--),R(t,16,t.bl_tree),S(t,a-3,2)):a<=10?(R(t,17,t.bl_tree),S(t,a-3,3)):(R(t,18,t.bl_tree),S(t,a-11,7));i=s,u=(a=0)===o?(c=138,3):s===o?(c=6,3):(c=7,4);}}s(_);var M=!1;function U(t,e,r,s){S(t,0+(s?1:0),3),function(t,e,r,s){C(t),A(t,r),A(t,~r),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r;}(t,e,r);}r._tr_init=function(t){M||(function(){var t,e,r,n,s,i=new Array(16);for(n=r=0;n<28;n++)for(g[n]=r,t=0;t<1<<u[n];t++)w[r++]=n;for(w[r-1]=n,n=s=0;n<16;n++)for(_[n]=s,t=0;t<1<<l[n];t++)m[s++]=n;for(s>>=7;n<a;n++)for(_[n]=s<<7,t=0;t<1<<l[n]-7;t++)m[256+s++]=n;for(e=0;e<=c;e++)i[e]=0;for(t=0;t<=143;)d[2*t+1]=8,t++,i[8]++;for(;t<=255;)d[2*t+1]=9,t++,i[9]++;for(;t<=279;)d[2*t+1]=7,t++,i[7]++;for(;t<=287;)d[2*t+1]=8,t++,i[8]++;for(N(d,287,i),t=0;t<a;t++)f[2*t+1]=5,f[2*t]=I(t,5);y=new x(d,u,257,o,c),b=new x(f,l,0,a,c),v=new x(new Array(0),h,0,19,7);}(),M=!0),t.l_desc=new E(t.dyn_ltree,y),t.d_desc=new E(t.dyn_dtree,b),t.bl_desc=new E(t.bl_tree,v),t.bi_buf=0,t.bi_valid=0,O(t);},r._tr_stored_block=U,r._tr_flush_block=function(t,e,r,n){var s,o,a=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<i;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0}(t)),P(t,t.l_desc),P(t,t.d_desc),a=function(t){var e;for(F(t,t.dyn_ltree,t.l_desc.max_code),F(t,t.dyn_dtree,t.d_desc.max_code),P(t,t.bl_desc),e=18;3<=e&&0===t.bl_tree[2*p[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),s=t.opt_len+3+7>>>3,(o=t.static_len+3+7>>>3)<=s&&(s=o)):s=o=r+5,r+4<=s&&-1!==e?U(t,e,r,n):4===t.strategy||o===s?(S(t,2+(n?1:0),3),L(t,d,f)):(S(t,4+(n?1:0),3),function(t,e,r,n){var s;for(S(t,e-257,5),S(t,r-1,5),S(t,n-4,4),s=0;s<n;s++)S(t,t.bl_tree[2*p[s]+1],3);B(t,t.dyn_ltree,e-1),B(t,t.dyn_dtree,r-1);}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),L(t,t.dyn_ltree,t.dyn_dtree)),O(t),n&&C(t);},r._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(w[r]+i+1)]++,t.dyn_dtree[2*T(e)]++),t.last_lit===t.lit_bufsize-1},r._tr_align=function(t){S(t,2,3),R(t,256,d),function(t){16===t.bi_valid?(A(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8);}(t);};},{"../utils/common":41}],53:[function(t,e,r){e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0;};},{}],54:[function(t,e,r){e.exports="function"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t);};},{}]},{},[10])(10);},155:t=>{var e,r,n=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function o(t){if(e===setTimeout)return setTimeout(t,0);if((e===s||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(r){try{return e.call(null,t,0)}catch(r){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:s;}catch(t){e=s;}try{r="function"==typeof clearTimeout?clearTimeout:i;}catch(t){r=i;}}();var a,c=[],u=!1,l=-1;function h(){u&&a&&(u=!1,a.length?c=a.concat(c):l=-1,c.length&&p());}function p(){if(!u){var t=o(h);u=!0;for(var e=c.length;e;){for(a=c,c=[];++l<e;)a&&a[l].run();l=-1,e=c.length;}a=null,u=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t);}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t);}}function d(t,e){this.fun=t,this.array=e;}function f(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new d(t,e)),1!==c.length||u||o(p);},d.prototype.run=function(){this.fun.apply(null,this.array);},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=f,n.addListener=f,n.once=f,n.off=f,n.removeListener=f,n.removeAllListeners=f,n.emit=f,n.prependListener=f,n.prependOnceListener=f,n.listeners=function(t){return []},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return "/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0};},509:(t,e,r)=>{var n=r(764),s=n.Buffer;function i(t,e){for(var r in t)e[r]=t[r];}function o(t,e,r){return s(t,e,r)}s.from&&s.alloc&&s.allocUnsafe&&s.allocUnsafeSlow?t.exports=n:(i(n,e),e.Buffer=o),i(s,o),o.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return s(t,e,r)},o.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=s(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},o.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return s(t)},o.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)};},99:(t,e,r)=>{!function(t){t.parser=function(t,e){return new s(t,e)},t.SAXParser=s,t.SAXStream=o,t.createStream=function(t,e){return new o(t,e)},t.MAX_BUFFER_LENGTH=65536;var e,n=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function s(e,r){if(!(this instanceof s))return new s(e,r);var i=this;!function(t){for(var e=0,r=n.length;e<r;e++)t[n[e]]="";}(i),i.q=i.c="",i.bufferCheckPosition=t.MAX_BUFFER_LENGTH,i.opt=r||{},i.opt.lowercase=i.opt.lowercase||i.opt.lowercasetags,i.looseCase=i.opt.lowercase?"toLowerCase":"toUpperCase",i.tags=[],i.closed=i.closedRoot=i.sawRoot=!1,i.tag=i.error=null,i.strict=!!e,i.noscript=!(!e&&!i.opt.noscript),i.state=x.BEGIN,i.strictEntities=i.opt.strictEntities,i.ENTITIES=i.strictEntities?Object.create(t.XML_ENTITIES):Object.create(t.ENTITIES),i.attribList=[],i.opt.xmlns&&(i.ns=Object.create(u)),i.trackPosition=!1!==i.opt.position,i.trackPosition&&(i.position=i.line=i.column=0),T(i,"onready");}t.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(t){function e(){}return e.prototype=t,new e}),Object.keys||(Object.keys=function(t){var e=[];for(var r in t)t.hasOwnProperty(r)&&e.push(r);return e}),s.prototype={end:function(){N(this);},write:function(e){var r=this;if(this.error)throw this.error;if(r.closed)return I(r,"Cannot write after close. Assign an onready handler.");if(null===e)return N(r);"object"==typeof e&&(e=e.toString());for(var s=0,i="";i=M(e,s++),r.c=i,i;)switch(r.trackPosition&&(r.position++,"\n"===i?(r.line++,r.column=0):r.column++),r.state){case x.BEGIN:if(r.state=x.BEGIN_WHITESPACE,"\ufeff"===i)continue;B(r,i);continue;case x.BEGIN_WHITESPACE:B(r,i);continue;case x.TEXT:if(r.sawRoot&&!r.closedRoot){for(var o=s-1;i&&"<"!==i&&"&"!==i;)(i=M(e,s++))&&r.trackPosition&&(r.position++,"\n"===i?(r.line++,r.column=0):r.column++);r.textNode+=e.substring(o,s-1);}"<"!==i||r.sawRoot&&r.closedRoot&&!r.strict?(f(i)||r.sawRoot&&!r.closedRoot||O(r,"Text data outside of root node."),"&"===i?r.state=x.TEXT_ENTITY:r.textNode+=i):(r.state=x.OPEN_WAKA,r.startTagPosition=r.position);continue;case x.SCRIPT:"<"===i?r.state=x.SCRIPT_ENDING:r.script+=i;continue;case x.SCRIPT_ENDING:"/"===i?r.state=x.CLOSE_TAG:(r.script+="<"+i,r.state=x.SCRIPT);continue;case x.OPEN_WAKA:if("!"===i)r.state=x.SGML_DECL,r.sgmlDecl="";else if(f(i));else if(g(l,i))r.state=x.OPEN_TAG,r.tagName=i;else if("/"===i)r.state=x.CLOSE_TAG,r.tagName="";else if("?"===i)r.state=x.PROC_INST,r.procInstName=r.procInstBody="";else {if(O(r,"Unencoded <"),r.startTagPosition+1<r.position){var a=r.position-r.startTagPosition;i=new Array(a).join(" ")+i;}r.textNode+="<"+i,r.state=x.TEXT;}continue;case x.SGML_DECL:"[CDATA["===(r.sgmlDecl+i).toUpperCase()?(A(r,"onopencdata"),r.state=x.CDATA,r.sgmlDecl="",r.cdata=""):r.sgmlDecl+i==="--"?(r.state=x.COMMENT,r.comment="",r.sgmlDecl=""):"DOCTYPE"===(r.sgmlDecl+i).toUpperCase()?(r.state=x.DOCTYPE,(r.doctype||r.sawRoot)&&O(r,"Inappropriately located doctype declaration"),r.doctype="",r.sgmlDecl=""):">"===i?(A(r,"onsgmldeclaration",r.sgmlDecl),r.sgmlDecl="",r.state=x.TEXT):m(i)?(r.state=x.SGML_DECL_QUOTED,r.sgmlDecl+=i):r.sgmlDecl+=i;continue;case x.SGML_DECL_QUOTED:i===r.q&&(r.state=x.SGML_DECL,r.q=""),r.sgmlDecl+=i;continue;case x.DOCTYPE:">"===i?(r.state=x.TEXT,A(r,"ondoctype",r.doctype),r.doctype=!0):(r.doctype+=i,"["===i?r.state=x.DOCTYPE_DTD:m(i)&&(r.state=x.DOCTYPE_QUOTED,r.q=i));continue;case x.DOCTYPE_QUOTED:r.doctype+=i,i===r.q&&(r.q="",r.state=x.DOCTYPE);continue;case x.DOCTYPE_DTD:r.doctype+=i,"]"===i?r.state=x.DOCTYPE:m(i)&&(r.state=x.DOCTYPE_DTD_QUOTED,r.q=i);continue;case x.DOCTYPE_DTD_QUOTED:r.doctype+=i,i===r.q&&(r.state=x.DOCTYPE_DTD,r.q="");continue;case x.COMMENT:"-"===i?r.state=x.COMMENT_ENDING:r.comment+=i;continue;case x.COMMENT_ENDING:"-"===i?(r.state=x.COMMENT_ENDED,r.comment=R(r.opt,r.comment),r.comment&&A(r,"oncomment",r.comment),r.comment=""):(r.comment+="-"+i,r.state=x.COMMENT);continue;case x.COMMENT_ENDED:">"!==i?(O(r,"Malformed comment"),r.comment+="--"+i,r.state=x.COMMENT):r.state=x.TEXT;continue;case x.CDATA:"]"===i?r.state=x.CDATA_ENDING:r.cdata+=i;continue;case x.CDATA_ENDING:"]"===i?r.state=x.CDATA_ENDING_2:(r.cdata+="]"+i,r.state=x.CDATA);continue;case x.CDATA_ENDING_2:">"===i?(r.cdata&&A(r,"oncdata",r.cdata),A(r,"onclosecdata"),r.cdata="",r.state=x.TEXT):"]"===i?r.cdata+="]":(r.cdata+="]]"+i,r.state=x.CDATA);continue;case x.PROC_INST:"?"===i?r.state=x.PROC_INST_ENDING:f(i)?r.state=x.PROC_INST_BODY:r.procInstName+=i;continue;case x.PROC_INST_BODY:if(!r.procInstBody&&f(i))continue;"?"===i?r.state=x.PROC_INST_ENDING:r.procInstBody+=i;continue;case x.PROC_INST_ENDING:">"===i?(A(r,"onprocessinginstruction",{name:r.procInstName,body:r.procInstBody}),r.procInstName=r.procInstBody="",r.state=x.TEXT):(r.procInstBody+="?"+i,r.state=x.PROC_INST_BODY);continue;case x.OPEN_TAG:g(h,i)?r.tagName+=i:(C(r),">"===i?L(r):"/"===i?r.state=x.OPEN_TAG_SLASH:(f(i)||O(r,"Invalid character in tag name"),r.state=x.ATTRIB));continue;case x.OPEN_TAG_SLASH:">"===i?(L(r,!0),P(r)):(O(r,"Forward-slash in opening tag not followed by >"),r.state=x.ATTRIB);continue;case x.ATTRIB:if(f(i))continue;">"===i?L(r):"/"===i?r.state=x.OPEN_TAG_SLASH:g(l,i)?(r.attribName=i,r.attribValue="",r.state=x.ATTRIB_NAME):O(r,"Invalid attribute name");continue;case x.ATTRIB_NAME:"="===i?r.state=x.ATTRIB_VALUE:">"===i?(O(r,"Attribute without value"),r.attribValue=r.attribName,D(r),L(r)):f(i)?r.state=x.ATTRIB_NAME_SAW_WHITE:g(h,i)?r.attribName+=i:O(r,"Invalid attribute name");continue;case x.ATTRIB_NAME_SAW_WHITE:if("="===i)r.state=x.ATTRIB_VALUE;else {if(f(i))continue;O(r,"Attribute without value"),r.tag.attributes[r.attribName]="",r.attribValue="",A(r,"onattribute",{name:r.attribName,value:""}),r.attribName="",">"===i?L(r):g(l,i)?(r.attribName=i,r.state=x.ATTRIB_NAME):(O(r,"Invalid attribute name"),r.state=x.ATTRIB);}continue;case x.ATTRIB_VALUE:if(f(i))continue;m(i)?(r.q=i,r.state=x.ATTRIB_VALUE_QUOTED):(O(r,"Unquoted attribute value"),r.state=x.ATTRIB_VALUE_UNQUOTED,r.attribValue=i);continue;case x.ATTRIB_VALUE_QUOTED:if(i!==r.q){"&"===i?r.state=x.ATTRIB_VALUE_ENTITY_Q:r.attribValue+=i;continue}D(r),r.q="",r.state=x.ATTRIB_VALUE_CLOSED;continue;case x.ATTRIB_VALUE_CLOSED:f(i)?r.state=x.ATTRIB:">"===i?L(r):"/"===i?r.state=x.OPEN_TAG_SLASH:g(l,i)?(O(r,"No whitespace between attributes"),r.attribName=i,r.attribValue="",r.state=x.ATTRIB_NAME):O(r,"Invalid attribute name");continue;case x.ATTRIB_VALUE_UNQUOTED:if(!w(i)){"&"===i?r.state=x.ATTRIB_VALUE_ENTITY_U:r.attribValue+=i;continue}D(r),">"===i?L(r):r.state=x.ATTRIB;continue;case x.CLOSE_TAG:if(r.tagName)">"===i?P(r):g(h,i)?r.tagName+=i:r.script?(r.script+="</"+r.tagName,r.tagName="",r.state=x.SCRIPT):(f(i)||O(r,"Invalid tagname in closing tag"),r.state=x.CLOSE_TAG_SAW_WHITE);else {if(f(i))continue;y(l,i)?r.script?(r.script+="</"+i,r.state=x.SCRIPT):O(r,"Invalid tagname in closing tag."):r.tagName=i;}continue;case x.CLOSE_TAG_SAW_WHITE:if(f(i))continue;">"===i?P(r):O(r,"Invalid characters in closing tag");continue;case x.TEXT_ENTITY:case x.ATTRIB_VALUE_ENTITY_Q:case x.ATTRIB_VALUE_ENTITY_U:var c,u;switch(r.state){case x.TEXT_ENTITY:c=x.TEXT,u="textNode";break;case x.ATTRIB_VALUE_ENTITY_Q:c=x.ATTRIB_VALUE_QUOTED,u="attribValue";break;case x.ATTRIB_VALUE_ENTITY_U:c=x.ATTRIB_VALUE_UNQUOTED,u="attribValue";}";"===i?(r[u]+=F(r),r.entity="",r.state=c):g(r.entity.length?d:p,i)?r.entity+=i:(O(r,"Invalid character in entity name"),r[u]+="&"+r.entity+i,r.entity="",r.state=c);continue;default:throw new Error(r,"Unknown state: "+r.state)}return r.position>=r.bufferCheckPosition&&function(e){for(var r=Math.max(t.MAX_BUFFER_LENGTH,10),s=0,i=0,o=n.length;i<o;i++){var a=e[n[i]].length;if(a>r)switch(n[i]){case"textNode":S(e);break;case"cdata":A(e,"oncdata",e.cdata),e.cdata="";break;case"script":A(e,"onscript",e.script),e.script="";break;default:I(e,"Max buffer length exceeded: "+n[i]);}s=Math.max(s,a);}var c=t.MAX_BUFFER_LENGTH-s;e.bufferCheckPosition=c+e.position;}(r),r},resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var t;S(t=this),""!==t.cdata&&(A(t,"oncdata",t.cdata),t.cdata=""),""!==t.script&&(A(t,"onscript",t.script),t.script="");}};try{e=r(830).Stream;}catch(t){e=function(){};}var i=t.EVENTS.filter((function(t){return "error"!==t&&"end"!==t}));function o(t,r){if(!(this instanceof o))return new o(t,r);e.apply(this),this._parser=new s(t,r),this.writable=!0,this.readable=!0;var n=this;this._parser.onend=function(){n.emit("end");},this._parser.onerror=function(t){n.emit("error",t),n._parser.error=null;},this._decoder=null,i.forEach((function(t){Object.defineProperty(n,"on"+t,{get:function(){return n._parser["on"+t]},set:function(e){if(!e)return n.removeAllListeners(t),n._parser["on"+t]=e,e;n.on(t,e);},enumerable:!0,configurable:!1});}));}o.prototype=Object.create(e.prototype,{constructor:{value:o}}),o.prototype.write=function(t){if("function"==typeof Buffer&&"function"==typeof Buffer.isBuffer&&Buffer.isBuffer(t)){if(!this._decoder){var e=r(553).s;this._decoder=new e("utf8");}t=this._decoder.write(t);}return this._parser.write(t.toString()),this.emit("data",t),!0},o.prototype.end=function(t){return t&&t.length&&this.write(t),this._parser.end(),!0},o.prototype.on=function(t,r){var n=this;return n._parser["on"+t]||-1===i.indexOf(t)||(n._parser["on"+t]=function(){var e=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);e.splice(0,0,t),n.emit.apply(n,e);}),e.prototype.on.call(n,t,r)};var a="http://www.w3.org/XML/1998/namespace",c="http://www.w3.org/2000/xmlns/",u={xml:a,xmlns:c},l=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,p=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,d=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function f(t){return " "===t||"\n"===t||"\r"===t||"\t"===t}function m(t){return '"'===t||"'"===t}function w(t){return ">"===t||f(t)}function g(t,e){return t.test(e)}function y(t,e){return !g(t,e)}var b,v,_,x=0;for(var E in t.STATE={BEGIN:x++,BEGIN_WHITESPACE:x++,TEXT:x++,TEXT_ENTITY:x++,OPEN_WAKA:x++,SGML_DECL:x++,SGML_DECL_QUOTED:x++,DOCTYPE:x++,DOCTYPE_QUOTED:x++,DOCTYPE_DTD:x++,DOCTYPE_DTD_QUOTED:x++,COMMENT_STARTING:x++,COMMENT:x++,COMMENT_ENDING:x++,COMMENT_ENDED:x++,CDATA:x++,CDATA_ENDING:x++,CDATA_ENDING_2:x++,PROC_INST:x++,PROC_INST_BODY:x++,PROC_INST_ENDING:x++,OPEN_TAG:x++,OPEN_TAG_SLASH:x++,ATTRIB:x++,ATTRIB_NAME:x++,ATTRIB_NAME_SAW_WHITE:x++,ATTRIB_VALUE:x++,ATTRIB_VALUE_QUOTED:x++,ATTRIB_VALUE_CLOSED:x++,ATTRIB_VALUE_UNQUOTED:x++,ATTRIB_VALUE_ENTITY_Q:x++,ATTRIB_VALUE_ENTITY_U:x++,CLOSE_TAG:x++,CLOSE_TAG_SAW_WHITE:x++,SCRIPT:x++,SCRIPT_ENDING:x++},t.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},t.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(t.ENTITIES).forEach((function(e){var r=t.ENTITIES[e],n="number"==typeof r?String.fromCharCode(r):r;t.ENTITIES[e]=n;})),t.STATE)t.STATE[t.STATE[E]]=E;function T(t,e,r){t[e]&&t[e](r);}function A(t,e,r){t.textNode&&S(t),T(t,e,r);}function S(t){t.textNode=R(t.opt,t.textNode),t.textNode&&T(t,"ontext",t.textNode),t.textNode="";}function R(t,e){return t.trim&&(e=e.trim()),t.normalize&&(e=e.replace(/\s+/g," ")),e}function I(t,e){return S(t),t.trackPosition&&(e+="\nLine: "+t.line+"\nColumn: "+t.column+"\nChar: "+t.c),e=new Error(e),t.error=e,T(t,"onerror",e),t}function N(t){return t.sawRoot&&!t.closedRoot&&O(t,"Unclosed root tag"),t.state!==x.BEGIN&&t.state!==x.BEGIN_WHITESPACE&&t.state!==x.TEXT&&I(t,"Unexpected end"),S(t),t.c="",t.closed=!0,T(t,"onend"),s.call(t,t.strict,t.opt),t}function O(t,e){if("object"!=typeof t||!(t instanceof s))throw new Error("bad call to strictFail");t.strict&&I(t,e);}function C(t){t.strict||(t.tagName=t.tagName[t.looseCase]());var e=t.tags[t.tags.length-1]||t,r=t.tag={name:t.tagName,attributes:{}};t.opt.xmlns&&(r.ns=e.ns),t.attribList.length=0,A(t,"onopentagstart",r);}function k(t,e){var r=t.indexOf(":")<0?["",t]:t.split(":"),n=r[0],s=r[1];return e&&"xmlns"===t&&(n="xmlns",s=""),{prefix:n,local:s}}function D(t){if(t.strict||(t.attribName=t.attribName[t.looseCase]()),-1!==t.attribList.indexOf(t.attribName)||t.tag.attributes.hasOwnProperty(t.attribName))t.attribName=t.attribValue="";else {if(t.opt.xmlns){var e=k(t.attribName,!0),r=e.prefix,n=e.local;if("xmlns"===r)if("xml"===n&&t.attribValue!==a)O(t,"xml: prefix must be bound to "+a+"\nActual: "+t.attribValue);else if("xmlns"===n&&t.attribValue!==c)O(t,"xmlns: prefix must be bound to "+c+"\nActual: "+t.attribValue);else {var s=t.tag,i=t.tags[t.tags.length-1]||t;s.ns===i.ns&&(s.ns=Object.create(i.ns)),s.ns[n]=t.attribValue;}t.attribList.push([t.attribName,t.attribValue]);}else t.tag.attributes[t.attribName]=t.attribValue,A(t,"onattribute",{name:t.attribName,value:t.attribValue});t.attribName=t.attribValue="";}}function L(t,e){if(t.opt.xmlns){var r=t.tag,n=k(t.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(O(t,"Unbound namespace prefix: "+JSON.stringify(t.tagName)),r.uri=n.prefix);var s=t.tags[t.tags.length-1]||t;r.ns&&s.ns!==r.ns&&Object.keys(r.ns).forEach((function(e){A(t,"onopennamespace",{prefix:e,uri:r.ns[e]});}));for(var i=0,o=t.attribList.length;i<o;i++){var a=t.attribList[i],c=a[0],u=a[1],l=k(c,!0),h=l.prefix,p=l.local,d=""===h?"":r.ns[h]||"",f={name:c,value:u,prefix:h,local:p,uri:d};h&&"xmlns"!==h&&!d&&(O(t,"Unbound namespace prefix: "+JSON.stringify(h)),f.uri=h),t.tag.attributes[c]=f,A(t,"onattribute",f);}t.attribList.length=0;}t.tag.isSelfClosing=!!e,t.sawRoot=!0,t.tags.push(t.tag),A(t,"onopentag",t.tag),e||(t.noscript||"script"!==t.tagName.toLowerCase()?t.state=x.TEXT:t.state=x.SCRIPT,t.tag=null,t.tagName=""),t.attribName=t.attribValue="",t.attribList.length=0;}function P(t){if(!t.tagName)return O(t,"Weird empty close tag."),t.textNode+="</>",void(t.state=x.TEXT);if(t.script){if("script"!==t.tagName)return t.script+="</"+t.tagName+">",t.tagName="",void(t.state=x.SCRIPT);A(t,"onscript",t.script),t.script="";}var e=t.tags.length,r=t.tagName;t.strict||(r=r[t.looseCase]());for(var n=r;e--&&t.tags[e].name!==n;)O(t,"Unexpected close tag");if(e<0)return O(t,"Unmatched closing tag: "+t.tagName),t.textNode+="</"+t.tagName+">",void(t.state=x.TEXT);t.tagName=r;for(var s=t.tags.length;s-- >e;){var i=t.tag=t.tags.pop();t.tagName=t.tag.name,A(t,"onclosetag",t.tagName);var o={};for(var a in i.ns)o[a]=i.ns[a];var c=t.tags[t.tags.length-1]||t;t.opt.xmlns&&i.ns!==c.ns&&Object.keys(i.ns).forEach((function(e){var r=i.ns[e];A(t,"onclosenamespace",{prefix:e,uri:r});}));}0===e&&(t.closedRoot=!0),t.tagName=t.attribValue=t.attribName="",t.attribList.length=0,t.state=x.TEXT;}function F(t){var e,r=t.entity,n=r.toLowerCase(),s="";return t.ENTITIES[r]?t.ENTITIES[r]:t.ENTITIES[n]?t.ENTITIES[n]:("#"===(r=n).charAt(0)&&("x"===r.charAt(1)?(r=r.slice(2),s=(e=parseInt(r,16)).toString(16)):(r=r.slice(1),s=(e=parseInt(r,10)).toString(10))),r=r.replace(/^0+/,""),isNaN(e)||s.toLowerCase()!==r?(O(t,"Invalid character entity"),"&"+t.entity+";"):String.fromCodePoint(e))}function B(t,e){"<"===e?(t.state=x.OPEN_WAKA,t.startTagPosition=t.position):f(e)||(O(t,"Non-whitespace before first tag."),t.textNode=e,t.state=x.TEXT);}function M(t,e){var r="";return e<t.length&&(r=t.charAt(e)),r}x=t.STATE,String.fromCodePoint||(b=String.fromCharCode,v=Math.floor,_=function(){var t,e,r=16384,n=[],s=-1,i=arguments.length;if(!i)return "";for(var o="";++s<i;){var a=Number(arguments[s]);if(!isFinite(a)||a<0||a>1114111||v(a)!==a)throw RangeError("Invalid code point: "+a);a<=65535?n.push(a):(t=55296+((a-=65536)>>10),e=a%1024+56320,n.push(t,e)),(s+1===i||n.length>r)&&(o+=b.apply(null,n),n.length=0);}return o},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:_,configurable:!0,writable:!0}):String.fromCodePoint=_);}(e);},830:(t,e,r)=>{t.exports=s;var n=r(187).EventEmitter;function s(){n.call(this);}r(717)(s,n),s.Readable=r(577),s.Writable=r(323),s.Duplex=r(656),s.Transform=r(473),s.PassThrough=r(366),s.finished=r(86),s.pipeline=r(472),s.Stream=s,s.prototype.pipe=function(t,e){var r=this;function s(e){t.writable&&!1===t.write(e)&&r.pause&&r.pause();}function i(){r.readable&&r.resume&&r.resume();}r.on("data",s),t.on("drain",i),t._isStdio||e&&!1===e.end||(r.on("end",a),r.on("close",c));var o=!1;function a(){o||(o=!0,t.end());}function c(){o||(o=!0,"function"==typeof t.destroy&&t.destroy());}function u(t){if(l(),0===n.listenerCount(this,"error"))throw t}function l(){r.removeListener("data",s),t.removeListener("drain",i),r.removeListener("end",a),r.removeListener("close",c),r.removeListener("error",u),t.removeListener("error",u),r.removeListener("end",l),r.removeListener("close",l),t.removeListener("close",l);}return r.on("error",u),t.on("error",u),r.on("end",l),r.on("close",l),t.on("close",l),t.emit("pipe",r),t};},106:t=>{var e={};function r(t,r,n){n||(n=Error);var s=function(t){var e,n;function s(e,n,s){return t.call(this,function(t,e,n){return "string"==typeof r?r:r(t,e,n)}(e,n,s))||this}return n=t,(e=s).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n,s}(n);s.prototype.name=n.name,s.prototype.code=t,e[t]=s;}function n(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return "of ".concat(e," ").concat(String(t))}r("ERR_INVALID_OPT_VALUE",(function(t,e){return 'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(t,e,r){var s,i,o,a,c;if("string"==typeof e&&(i="not ",e.substr(0,i.length)===i)?(s="must not be",e=e.replace(/^not /,"")):s="must be",function(t,e,r){return (void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}(t," argument"))o="The ".concat(t," ").concat(s," ").concat(n(e,"type"));else {var u=("number"!=typeof c&&(c=0),c+".".length>(a=t).length||-1===a.indexOf(".",c)?"argument":"property");o='The "'.concat(t,'" ').concat(u," ").concat(s," ").concat(n(e,"type"));}return o+". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return "The "+t+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(t){return "Cannot call "+t+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(t){return "Unknown encoding: "+t}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),t.exports.q=e;},656:(t,e,r)=>{var n=r(155),s=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e};t.exports=l;var i=r(577),o=r(323);r(717)(l,i);for(var a=s(o.prototype),c=0;c<a.length;c++){var u=a[c];l.prototype[u]||(l.prototype[u]=o.prototype[u]);}function l(t){if(!(this instanceof l))return new l(t);i.call(this,t),o.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",h)));}function h(){this._writableState.ended||n.nextTick(p,this);}function p(t){t.end();}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t);}});},366:(t,e,r)=>{t.exports=s;var n=r(473);function s(t){if(!(this instanceof s))return new s(t);n.call(this,t);}r(717)(s,n),s.prototype._transform=function(t,e,r){r(null,t);};},577:(t,e,r)=>{var n,s=r(155);t.exports=A,A.ReadableState=T,r(187).EventEmitter;var i,o=function(t,e){return t.listeners(e).length},a=r(194),c=r(764).Buffer,u=r.g.Uint8Array||function(){},l=r(964);i=l&&l.debuglog?l.debuglog("stream"):function(){};var h,p,d,f=r(686),m=r(29),w=r(94).getHighWaterMark,g=r(106).q,y=g.ERR_INVALID_ARG_TYPE,b=g.ERR_STREAM_PUSH_AFTER_EOF,v=g.ERR_METHOD_NOT_IMPLEMENTED,_=g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(717)(A,a);var x=m.errorOrDestroy,E=["error","close","destroy","pause","resume"];function T(t,e,s){n=n||r(656),t=t||{},"boolean"!=typeof s&&(s=e instanceof n),this.objectMode=!!t.objectMode,s&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=w(this,t,"readableHighWaterMark",s),this.buffer=new f,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(h||(h=r(553).s),this.decoder=new h(t.encoding),this.encoding=t.encoding);}function A(t){if(n=n||r(656),!(this instanceof A))return new A(t);var e=this instanceof n;this._readableState=new T(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),a.call(this);}function S(t,e,r,n,s){i("readableAddChunk",e);var o,a=t._readableState;if(null===e)a.reading=!1,function(t,e){if(i("onEofChunk"),!e.ended){if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length);}e.ended=!0,e.sync?O(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,C(t)));}}(t,a);else if(s||(o=function(t,e){var r,n;return n=e,c.isBuffer(n)||n instanceof u||"string"==typeof e||void 0===e||t.objectMode||(r=new y("chunk",["string","Buffer","Uint8Array"],e)),r}(a,e)),o)x(t,o);else if(a.objectMode||e&&e.length>0)if("string"==typeof e||a.objectMode||Object.getPrototypeOf(e)===c.prototype||(e=function(t){return c.from(t)}(e)),n)a.endEmitted?x(t,new _):R(t,a,e,!0);else if(a.ended)x(t,new b);else {if(a.destroyed)return !1;a.reading=!1,a.decoder&&!r?(e=a.decoder.write(e),a.objectMode||0!==e.length?R(t,a,e,!1):k(t,a)):R(t,a,e,!1);}else n||(a.reading=!1,k(t,a));return !a.ended&&(a.length<a.highWaterMark||0===a.length)}function R(t,e,r,n){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",r)):(e.length+=e.objectMode?1:r.length,n?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&O(t)),k(t,e);}Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t);}}),A.prototype.destroy=m.destroy,A.prototype._undestroy=m.undestroy,A.prototype._destroy=function(t,e){e(t);},A.prototype.push=function(t,e){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof t&&((e=e||n.defaultEncoding)!==n.encoding&&(t=c.from(t,e),e=""),r=!0),S(this,t,e,!1,r)},A.prototype.unshift=function(t){return S(this,t,null,!0,!1)},A.prototype.isPaused=function(){return !1===this._readableState.flowing},A.prototype.setEncoding=function(t){h||(h=r(553).s);var e=new h(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,s="";null!==n;)s+=e.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==s&&this._readableState.buffer.push(s),this._readableState.length=s.length,this};var I=1073741824;function N(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=I?t=I:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function O(t){var e=t._readableState;i("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(i("emitReadable",e.flowing),e.emittedReadable=!0,s.nextTick(C,t));}function C(t){var e=t._readableState;i("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,B(t);}function k(t,e){e.readingMore||(e.readingMore=!0,s.nextTick(D,t,e));}function D(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var r=e.length;if(i("maybeReadMore read 0"),t.read(0),r===e.length)break}e.readingMore=!1;}function L(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume();}function P(t){i("readable nexttick read 0"),t.read(0);}function F(t,e){i("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),B(t),e.flowing&&!e.reading&&t.read(0);}function B(t){var e=t._readableState;for(i("flow",e.flowing);e.flowing&&null!==t.read(););}function M(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):r=e.buffer.consume(t,e.decoder),r);var r;}function U(t){var e=t._readableState;i("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,s.nextTick(z,e,t));}function z(t,e){if(i("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var r=e._writableState;(!r||r.autoDestroy&&r.finished)&&e.destroy();}}function H(t,e){for(var r=0,n=t.length;r<n;r++)if(t[r]===e)return r;return -1}A.prototype.read=function(t){i("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return i("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?U(this):O(this),null;if(0===(t=N(t,e))&&e.ended)return 0===e.length&&U(this),null;var n,s=e.needReadable;return i("need readable",s),(0===e.length||e.length-t<e.highWaterMark)&&i("length less than watermark",s=!0),e.ended||e.reading?i("reading or ended",s=!1):s&&(i("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=N(r,e))),null===(n=t>0?M(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&U(this)),null!==n&&this.emit("data",n),n},A.prototype._read=function(t){x(this,new v("_read()"));},A.prototype.pipe=function(t,e){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=t;break;case 1:n.pipes=[n.pipes,t];break;default:n.pipes.push(t);}n.pipesCount+=1,i("pipe count=%d opts=%j",n.pipesCount,e);var a=e&&!1===e.end||t===s.stdout||t===s.stderr?m:c;function c(){i("onend"),t.end();}n.endEmitted?s.nextTick(a):r.once("end",a),t.on("unpipe",(function e(s,o){i("onunpipe"),s===r&&o&&!1===o.hasUnpiped&&(o.hasUnpiped=!0,i("cleanup"),t.removeListener("close",d),t.removeListener("finish",f),t.removeListener("drain",u),t.removeListener("error",p),t.removeListener("unpipe",e),r.removeListener("end",c),r.removeListener("end",m),r.removeListener("data",h),l=!0,!n.awaitDrain||t._writableState&&!t._writableState.needDrain||u());}));var u=function(t){return function(){var e=t._readableState;i("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&o(t,"data")&&(e.flowing=!0,B(t));}}(r);t.on("drain",u);var l=!1;function h(e){i("ondata");var s=t.write(e);i("dest.write",s),!1===s&&((1===n.pipesCount&&n.pipes===t||n.pipesCount>1&&-1!==H(n.pipes,t))&&!l&&(i("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause());}function p(e){i("onerror",e),m(),t.removeListener("error",p),0===o(t,"error")&&x(t,e);}function d(){t.removeListener("finish",f),m();}function f(){i("onfinish"),t.removeListener("close",d),m();}function m(){i("unpipe"),r.unpipe(t);}return r.on("data",h),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events.error?Array.isArray(t._events.error)?t._events.error.unshift(r):t._events.error=[r,t._events.error]:t.on(e,r);}(t,"error",p),t.once("close",d),t.once("finish",f),t.emit("pipe",r),n.flowing||(i("pipe resume"),r.resume()),t},A.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var n=e.pipes,s=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var i=0;i<s;i++)n[i].emit("unpipe",this,{hasUnpiped:!1});return this}var o=H(e.pipes,t);return -1===o||(e.pipes.splice(o,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},A.prototype.on=function(t,e){var r=a.prototype.on.call(this,t,e),n=this._readableState;return "data"===t?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===t&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,i("on readable",n.length,n.reading),n.length?O(this):n.reading||s.nextTick(P,this))),r},A.prototype.addListener=A.prototype.on,A.prototype.removeListener=function(t,e){var r=a.prototype.removeListener.call(this,t,e);return "readable"===t&&s.nextTick(L,this),r},A.prototype.removeAllListeners=function(t){var e=a.prototype.removeAllListeners.apply(this,arguments);return "readable"!==t&&void 0!==t||s.nextTick(L,this),e},A.prototype.resume=function(){var t=this._readableState;return t.flowing||(i("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,s.nextTick(F,t,e));}(this,t)),t.paused=!1,this},A.prototype.pause=function(){return i("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(i("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},A.prototype.wrap=function(t){var e=this,r=this._readableState,n=!1;for(var s in t.on("end",(function(){if(i("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t);}e.push(null);})),t.on("data",(function(s){i("wrapped data"),r.decoder&&(s=r.decoder.write(s)),r.objectMode&&null==s||(r.objectMode||s&&s.length)&&(e.push(s)||(n=!0,t.pause()));})),t)void 0===this[s]&&"function"==typeof t[s]&&(this[s]=function(e){return function(){return t[e].apply(t,arguments)}}(s));for(var o=0;o<E.length;o++)t.on(E[o],this.emit.bind(this,E[o]));return this._read=function(e){i("wrapped _read",e),n&&(n=!1,t.resume());},this},"function"==typeof Symbol&&(A.prototype[Symbol.asyncIterator]=function(){return void 0===p&&(p=r(828)),p(this)}),Object.defineProperty(A.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(A.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(A.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t);}}),A._fromList=M,Object.defineProperty(A.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(A.from=function(t,e){return void 0===d&&(d=r(265)),d(A,t,e)});},473:(t,e,r)=>{t.exports=l;var n=r(106).q,s=n.ERR_METHOD_NOT_IMPLEMENTED,i=n.ERR_MULTIPLE_CALLBACK,o=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,a=n.ERR_TRANSFORM_WITH_LENGTH_0,c=r(656);function u(t,e){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new i);r.writechunk=null,r.writecb=null,null!=e&&this.push(e),n(t);var s=this._readableState;s.reading=!1,(s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark);}function l(t){if(!(this instanceof l))return new l(t);c.call(this,t),this._transformState={afterTransform:u.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",h);}function h(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?p(this,null,null):this._flush((function(e,r){p(t,e,r);}));}function p(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new a;if(t._transformState.transforming)throw new o;return t.push(null)}r(717)(l,c),l.prototype.push=function(t,e){return this._transformState.needTransform=!1,c.prototype.push.call(this,t,e)},l.prototype._transform=function(t,e,r){r(new s("_transform()"));},l.prototype._write=function(t,e,r){var n=this._transformState;if(n.writecb=r,n.writechunk=t,n.writeencoding=e,!n.transforming){var s=this._readableState;(n.needTransform||s.needReadable||s.length<s.highWaterMark)&&this._read(s.highWaterMark);}},l.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform));},l.prototype._destroy=function(t,e){c.prototype._destroy.call(this,t,(function(t){e(t);}));};},323:(t,e,r)=>{var n,s=r(155);function i(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var n=t.entry;for(t.entry=null;n;){var s=n.callback;e.pendingcb--,s(undefined),n=n.next;}e.corkedRequestsFree.next=t;}(e,t);};}t.exports=A,A.WritableState=T;var o,a={deprecate:r(927)},c=r(194),u=r(764).Buffer,l=r.g.Uint8Array||function(){},h=r(29),p=r(94).getHighWaterMark,d=r(106).q,f=d.ERR_INVALID_ARG_TYPE,m=d.ERR_METHOD_NOT_IMPLEMENTED,w=d.ERR_MULTIPLE_CALLBACK,g=d.ERR_STREAM_CANNOT_PIPE,y=d.ERR_STREAM_DESTROYED,b=d.ERR_STREAM_NULL_VALUES,v=d.ERR_STREAM_WRITE_AFTER_END,_=d.ERR_UNKNOWN_ENCODING,x=h.errorOrDestroy;function E(){}function T(t,e,o){n=n||r(656),t=t||{},"boolean"!=typeof o&&(o=e instanceof n),this.objectMode=!!t.objectMode,o&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=p(this,t,"writableHighWaterMark",o),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===t.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,n=r.sync,i=r.writecb;if("function"!=typeof i)throw new w;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0;}(r),e)!function(t,e,r,n,i){--e.pendingcb,r?(s.nextTick(i,n),s.nextTick(C,t,e),t._writableState.errorEmitted=!0,x(t,n)):(i(n),t._writableState.errorEmitted=!0,x(t,n),C(t,e));}(t,r,n,e,i);else {var o=N(r)||t.destroyed;o||r.corked||r.bufferProcessing||!r.bufferedRequest||I(t,r),n?s.nextTick(R,t,r,o,i):R(t,r,o,i);}}(e,t);},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this);}function A(t){var e=this instanceof(n=n||r(656));if(!e&&!o.call(A,this))return new A(t);this._writableState=new T(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),c.call(this);}function S(t,e,r,n,s,i,o){e.writelen=n,e.writecb=o,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new y("write")):r?t._writev(s,e.onwrite):t._write(s,i,e.onwrite),e.sync=!1;}function R(t,e,r,n){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"));}(t,e),e.pendingcb--,n(),C(t,e);}function I(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var n=e.bufferedRequestCount,s=new Array(n),o=e.corkedRequestsFree;o.entry=r;for(var a=0,c=!0;r;)s[a]=r,r.isBuf||(c=!1),r=r.next,a+=1;s.allBuffers=c,S(t,e,!0,e.length,s,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new i(e),e.bufferedRequestCount=0;}else {for(;r;){var u=r.chunk,l=r.encoding,h=r.callback;if(S(t,e,!1,e.objectMode?1:u.length,u,l,h),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null);}e.bufferedRequest=r,e.bufferProcessing=!1;}function N(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function O(t,e){t._final((function(r){e.pendingcb--,r&&x(t,r),e.prefinished=!0,t.emit("prefinish"),C(t,e);}));}function C(t,e){var r=N(e);if(r&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,s.nextTick(O,t,e)));}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var n=t._readableState;(!n||n.autoDestroy&&n.endEmitted)&&t.destroy();}return r}r(717)(A,c),T.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(T.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")});}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(o=Function.prototype[Symbol.hasInstance],Object.defineProperty(A,Symbol.hasInstance,{value:function(t){return !!o.call(this,t)||this===A&&t&&t._writableState instanceof T}})):o=function(t){return t instanceof this},A.prototype.pipe=function(){x(this,new g);},A.prototype.write=function(t,e,r){var n,i=this._writableState,o=!1,a=!i.objectMode&&(n=t,u.isBuffer(n)||n instanceof l);return a&&!u.isBuffer(t)&&(t=function(t){return u.from(t)}(t)),"function"==typeof e&&(r=e,e=null),a?e="buffer":e||(e=i.defaultEncoding),"function"!=typeof r&&(r=E),i.ending?function(t,e){var r=new v;x(t,r),s.nextTick(e,r);}(this,r):(a||function(t,e,r,n){var i;return null===r?i=new b:"string"==typeof r||e.objectMode||(i=new f("chunk",["string","Buffer"],r)),!i||(x(t,i),s.nextTick(n,i),!1)}(this,i,t,r))&&(i.pendingcb++,o=function(t,e,r,n,s,i){if(!r){var o=function(t,e,r){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=u.from(e,r)),e}(e,n,s);n!==o&&(r=!0,s="buffer",n=o);}var a=e.objectMode?1:n.length;e.length+=a;var c=e.length<e.highWaterMark;if(c||(e.needDrain=!0),e.writing||e.corked){var l=e.lastBufferedRequest;e.lastBufferedRequest={chunk:n,encoding:s,isBuf:r,callback:i,next:null},l?l.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1;}else S(t,e,!1,a,n,s,i);return c}(this,i,a,t,e,r)),o},A.prototype.cork=function(){this._writableState.corked++;},A.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||I(this,t));},A.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new _(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(A.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(A.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),A.prototype._write=function(t,e,r){r(new m("_write()"));},A.prototype._writev=null,A.prototype.end=function(t,e,r){var n=this._writableState;return "function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),n.corked&&(n.corked=1,this.uncork()),n.ending||function(t,e,r){e.ending=!0,C(t,e),r&&(e.finished?s.nextTick(r):t.once("finish",r)),e.ended=!0,t.writable=!1;}(this,n,r),this},Object.defineProperty(A.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(A.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t);}}),A.prototype.destroy=h.destroy,A.prototype._undestroy=h.undestroy,A.prototype._destroy=function(t,e){e(t);};},828:(t,e,r)=>{var n,s=r(155);function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var o=r(86),a=Symbol("lastResolve"),c=Symbol("lastReject"),u=Symbol("error"),l=Symbol("ended"),h=Symbol("lastPromise"),p=Symbol("handlePromise"),d=Symbol("stream");function f(t,e){return {value:t,done:e}}function m(t){var e=t[a];if(null!==e){var r=t[d].read();null!==r&&(t[h]=null,t[a]=null,t[c]=null,e(f(r,!1)));}}function w(t){s.nextTick(m,t);}var g=Object.getPrototypeOf((function(){})),y=Object.setPrototypeOf((i(n={get stream(){return this[d]},next:function(){var t=this,e=this[u];if(null!==e)return Promise.reject(e);if(this[l])return Promise.resolve(f(void 0,!0));if(this[d].destroyed)return new Promise((function(e,r){s.nextTick((function(){t[u]?r(t[u]):e(f(void 0,!0));}));}));var r,n=this[h];if(n)r=new Promise(function(t,e){return function(r,n){t.then((function(){e[l]?r(f(void 0,!0)):e[p](r,n);}),n);}}(n,this));else {var i=this[d].read();if(null!==i)return Promise.resolve(f(i,!1));r=new Promise(this[p]);}return this[h]=r,r}},Symbol.asyncIterator,(function(){return this})),i(n,"return",(function(){var t=this;return new Promise((function(e,r){t[d].destroy(null,(function(t){t?r(t):e(f(void 0,!0));}));}))})),n),g);t.exports=function(t){var e,r=Object.create(y,(i(e={},d,{value:t,writable:!0}),i(e,a,{value:null,writable:!0}),i(e,c,{value:null,writable:!0}),i(e,u,{value:null,writable:!0}),i(e,l,{value:t._readableState.endEmitted,writable:!0}),i(e,p,{value:function(t,e){var n=r[d].read();n?(r[h]=null,r[a]=null,r[c]=null,t(f(n,!1))):(r[a]=t,r[c]=e);},writable:!0}),e));return r[h]=null,o(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=r[c];return null!==e&&(r[h]=null,r[a]=null,r[c]=null,e(t)),void(r[u]=t)}var n=r[a];null!==n&&(r[h]=null,r[a]=null,r[c]=null,n(f(void 0,!0))),r[l]=!0;})),t.on("readable",w.bind(null,r)),r};},686:(t,e,r)=>{function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n);}return r}function s(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n);}}var o=r(764).Buffer,a=r(862).inspect,c=a&&a.custom||"inspect";t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0;}var e,r;return e=t,r=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length;}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length;}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0;}},{key:"join",value:function(t){if(0===this.length)return "";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r}},{key:"concat",value:function(t){if(0===this.length)return o.alloc(0);for(var e,r,n,s=o.allocUnsafe(t>>>0),i=this.head,a=0;i;)e=i.data,r=s,n=a,o.prototype.copy.call(e,r,n),a+=i.data.length,i=i.next;return s}},{key:"consume",value:function(t,e){var r;return t<this.head.data.length?(r=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):r=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,r=1,n=e.data;for(t-=n.length;e=e.next;){var s=e.data,i=t>s.length?s.length:t;if(i===s.length?n+=s:n+=s.slice(0,t),0==(t-=i)){i===s.length?(++r,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=s.slice(i));break}++r;}return this.length-=r,n}},{key:"_getBuffer",value:function(t){var e=o.allocUnsafe(t),r=this.head,n=1;for(r.data.copy(e),t-=r.data.length;r=r.next;){var s=r.data,i=t>s.length?s.length:t;if(s.copy(e,e.length-t,0,i),0==(t-=i)){i===s.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=s.slice(i));break}++n;}return this.length-=n,e}},{key:c,value:function(t,e){return a(this,function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){s(t,e,r[e]);})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e));}));}return t}({},e,{depth:0,customInspect:!1}))}}],r&&i(e.prototype,r),t}();},29:(t,e,r)=>{var n=r(155);function s(t,e){o(t,e),i(t);}function i(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close");}function o(t,e){t.emit("error",e);}t.exports={destroy:function(t,e){var r=this,a=this._readableState&&this._readableState.destroyed,c=this._writableState&&this._writableState.destroyed;return a||c?(e?e(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(o,this,t)):n.nextTick(o,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?r._writableState?r._writableState.errorEmitted?n.nextTick(i,r):(r._writableState.errorEmitted=!0,n.nextTick(s,r,t)):n.nextTick(s,r,t):e?(n.nextTick(i,r),e(t)):n.nextTick(i,r);})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1);},errorOrDestroy:function(t,e){var r=t._readableState,n=t._writableState;r&&r.autoDestroy||n&&n.autoDestroy?t.destroy(e):t.emit("error",e);}};},86:(t,e,r)=>{var n=r(106).q.ERR_STREAM_PREMATURE_CLOSE;function s(){}t.exports=function t(e,r,i){if("function"==typeof r)return t(e,null,r);r||(r={}),i=function(t){var e=!1;return function(){if(!e){e=!0;for(var r=arguments.length,n=new Array(r),s=0;s<r;s++)n[s]=arguments[s];t.apply(this,n);}}}(i||s);var o=r.readable||!1!==r.readable&&e.readable,a=r.writable||!1!==r.writable&&e.writable,c=function(){e.writable||l();},u=e._writableState&&e._writableState.finished,l=function(){a=!1,u=!0,o||i.call(e);},h=e._readableState&&e._readableState.endEmitted,p=function(){o=!1,h=!0,a||i.call(e);},d=function(t){i.call(e,t);},f=function(){var t;return o&&!h?(e._readableState&&e._readableState.ended||(t=new n),i.call(e,t)):a&&!u?(e._writableState&&e._writableState.ended||(t=new n),i.call(e,t)):void 0},m=function(){e.req.on("finish",l);};return function(t){return t.setHeader&&"function"==typeof t.abort}(e)?(e.on("complete",l),e.on("abort",f),e.req?m():e.on("request",m)):a&&!e._writableState&&(e.on("end",c),e.on("close",c)),e.on("end",p),e.on("finish",l),!1!==r.error&&e.on("error",d),e.on("close",f),function(){e.removeListener("complete",l),e.removeListener("abort",f),e.removeListener("request",m),e.req&&e.req.removeListener("finish",l),e.removeListener("end",c),e.removeListener("close",c),e.removeListener("finish",l),e.removeListener("end",p),e.removeListener("error",d),e.removeListener("close",f);}};},265:t=>{t.exports=function(){throw new Error("Readable.from is not available in the browser")};},472:(t,e,r)=>{var n,s=r(106).q,i=s.ERR_MISSING_ARGS,o=s.ERR_STREAM_DESTROYED;function a(t){if(t)throw t}function c(t,e,s,i){i=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments));}}(i);var a=!1;t.on("close",(function(){a=!0;})),void 0===n&&(n=r(86)),n(t,{readable:e,writable:s},(function(t){if(t)return i(t);a=!0,i();}));var c=!1;return function(e){if(!a&&!c)return c=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void i(e||new o("pipe"))}}function u(t){t();}function l(t,e){return t.pipe(e)}function h(t){return t.length?"function"!=typeof t[t.length-1]?a:t.pop():a}t.exports=function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];var n,s=h(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new i("streams");var o=e.map((function(t,r){var i=r<e.length-1;return c(t,i,r>0,(function(t){n||(n=t),t&&o.forEach(u),i||(o.forEach(u),s(n));}))}));return e.reduce(l)};},94:(t,e,r)=>{var n=r(106).q.ERR_INVALID_OPT_VALUE;t.exports={getHighWaterMark:function(t,e,r,s){var i=function(t,e,r){return null!=t.highWaterMark?t.highWaterMark:e?t[r]:null}(e,s,r);if(null!=i){if(!isFinite(i)||Math.floor(i)!==i||i<0)throw new n(s?r:"highWaterMark",i);return Math.floor(i)}return t.objectMode?16:16384}};},194:(t,e,r)=>{t.exports=r(187).EventEmitter;},553:(t,e,r)=>{var n=r(509).Buffer,s=n.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return !0;default:return !1}};function i(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return "utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return "utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return "utf16le";case"latin1":case"binary":return "latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0;}}(t);if("string"!=typeof e&&(n.isEncoding===s||!s(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=c,this.end=u,e=4;break;case"utf8":this.fillLast=a,e=4;break;case"base64":this.text=l,this.end=h,e=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(e);}function o(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function a(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function c(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function u(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function l(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function h(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function p(t){return t.toString(this.encoding)}function d(t){return t&&t.length?this.write(t):""}e.s=i,i.prototype.write=function(t){if(0===t.length)return "";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return "";r=this.lastNeed,this.lastNeed=0;}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},i.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},i.prototype.text=function(t,e){var r=function(t,e,r){var n=e.length-1;if(n<r)return 0;var s=o(e[n]);return s>=0?(s>0&&(t.lastNeed=s-1),s):--n<r||-2===s?0:(s=o(e[n]))>=0?(s>0&&(t.lastNeed=s-2),s):--n<r||-2===s?0:(s=o(e[n]))>=0?(s>0&&(2===s?s=0:t.lastNeed=s-3),s):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var n=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,n),t.toString("utf8",e,n)},i.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length;};},927:(t,e,r)=>{function n(t){try{if(!r.g.localStorage)return !1}catch(t){return !1}var e=r.g.localStorage[t];return null!=e&&"true"===String(e).toLowerCase()}t.exports=function(t,e){if(n("noDeprecation"))return t;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(e);n("traceDeprecation")?console.trace(e):console.warn(e),r=!0;}return t.apply(this,arguments)}};},881:t=>{t.exports={isArray:function(t){return Array.isArray?Array.isArray(t):"[object Array]"===Object.prototype.toString.call(t)}};},888:(t,e,r)=>{var n=r(229),s=r(388),i=r(501),o=r(673);t.exports={xml2js:n,xml2json:s,js2xml:i,json2xml:o};},501:(t,e,r)=>{var n,s,i=r(740),o=r(881).isArray;function a(t,e,r){return (!r&&t.spaces?"\n":"")+Array(e+1).join(t.spaces)}function c(t,e,r){if(e.ignoreAttributes)return "";"attributesFn"in e&&(t=e.attributesFn(t,s,n));var i,o,c,u,l=[];for(i in t)t.hasOwnProperty(i)&&null!==t[i]&&void 0!==t[i]&&(u=e.noQuotesForNativeAttributes&&"string"!=typeof t[i]?"":'"',o=(o=""+t[i]).replace(/"/g,"&quot;"),c="attributeNameFn"in e?e.attributeNameFn(i,o,s,n):i,l.push(e.spaces&&e.indentAttributes?a(e,r+1,!1):" "),l.push(c+"="+u+("attributeValueFn"in e?e.attributeValueFn(o,i,s,n):o)+u));return t&&Object.keys(t).length&&e.spaces&&e.indentAttributes&&l.push(a(e,r,!1)),l.join("")}function u(t,e,r){return n=t,s="xml",e.ignoreDeclaration?"":"<?xml"+c(t[e.attributesKey],e,r)+"?>"}function l(t,e,r){if(e.ignoreInstruction)return "";var i;for(i in t)if(t.hasOwnProperty(i))break;var o="instructionNameFn"in e?e.instructionNameFn(i,t[i],s,n):i;if("object"==typeof t[i])return n=t,s=o,"<?"+o+c(t[i][e.attributesKey],e,r)+"?>";var a=t[i]?t[i]:"";return "instructionFn"in e&&(a=e.instructionFn(a,i,s,n)),"<?"+o+(a?" "+a:"")+"?>"}function h(t,e){return e.ignoreComment?"":"\x3c!--"+("commentFn"in e?e.commentFn(t,s,n):t)+"--\x3e"}function p(t,e){return e.ignoreCdata?"":"<![CDATA["+("cdataFn"in e?e.cdataFn(t,s,n):t.replace("]]>","]]]]><![CDATA[>"))+"]]>"}function d(t,e){return e.ignoreDoctype?"":"<!DOCTYPE "+("doctypeFn"in e?e.doctypeFn(t,s,n):t)+">"}function f(t,e){return e.ignoreText?"":(t=(t=(t=""+t).replace(/&amp;/g,"&")).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),"textFn"in e?e.textFn(t,s,n):t)}function m(t,e,r,i){return t.reduce((function(t,o){var u=a(e,r,i&&!t);switch(o.type){case"element":return t+u+function(t,e,r){n=t,s=t.name;var i=[],o="elementNameFn"in e?e.elementNameFn(t.name,t):t.name;i.push("<"+o),t[e.attributesKey]&&i.push(c(t[e.attributesKey],e,r));var a=t[e.elementsKey]&&t[e.elementsKey].length||t[e.attributesKey]&&"preserve"===t[e.attributesKey]["xml:space"];return a||(a="fullTagEmptyElementFn"in e?e.fullTagEmptyElementFn(t.name,t):e.fullTagEmptyElement),a?(i.push(">"),t[e.elementsKey]&&t[e.elementsKey].length&&(i.push(m(t[e.elementsKey],e,r+1)),n=t,s=t.name),i.push(e.spaces&&function(t,e){var r;if(t.elements&&t.elements.length)for(r=0;r<t.elements.length;++r)switch(t.elements[r][e.typeKey]){case"text":if(e.indentText)return !0;break;case"cdata":if(e.indentCdata)return !0;break;case"instruction":if(e.indentInstruction)return !0;break;default:return !0}return !1}(t,e)?"\n"+Array(r+1).join(e.spaces):""),i.push("</"+o+">")):i.push("/>"),i.join("")}(o,e,r);case"comment":return t+u+h(o[e.commentKey],e);case"doctype":return t+u+d(o[e.doctypeKey],e);case"cdata":return t+(e.indentCdata?u:"")+p(o[e.cdataKey],e);case"text":return t+(e.indentText?u:"")+f(o[e.textKey],e);case"instruction":var w={};return w[o[e.nameKey]]=o[e.attributesKey]?o:o[e.instructionKey],t+(e.indentInstruction?u:"")+l(w,e,r)}}),"")}function w(t,e,r){var n;for(n in t)if(t.hasOwnProperty(n))switch(n){case e.parentKey:case e.attributesKey:break;case e.textKey:if(e.indentText||r)return !0;break;case e.cdataKey:if(e.indentCdata||r)return !0;break;case e.instructionKey:if(e.indentInstruction||r)return !0;break;case e.doctypeKey:case e.commentKey:default:return !0}return !1}function g(t,e,r,i,o){n=t,s=e;var u="elementNameFn"in r?r.elementNameFn(e,t):e;if(null==t||""===t)return "fullTagEmptyElementFn"in r&&r.fullTagEmptyElementFn(e,t)||r.fullTagEmptyElement?"<"+u+"></"+u+">":"<"+u+"/>";var l=[];if(e){if(l.push("<"+u),"object"!=typeof t)return l.push(">"+f(t,r)+"</"+u+">"),l.join("");t[r.attributesKey]&&l.push(c(t[r.attributesKey],r,i));var h=w(t,r,!0)||t[r.attributesKey]&&"preserve"===t[r.attributesKey]["xml:space"];if(h||(h="fullTagEmptyElementFn"in r?r.fullTagEmptyElementFn(e,t):r.fullTagEmptyElement),!h)return l.push("/>"),l.join("");l.push(">");}return l.push(y(t,r,i+1,!1)),n=t,s=e,e&&l.push((o?a(r,i,!1):"")+"</"+u+">"),l.join("")}function y(t,e,r,n){var s,i,c,m=[];for(i in t)if(t.hasOwnProperty(i))for(c=o(t[i])?t[i]:[t[i]],s=0;s<c.length;++s){switch(i){case e.declarationKey:m.push(u(c[s],e,r));break;case e.instructionKey:m.push((e.indentInstruction?a(e,r,n):"")+l(c[s],e,r));break;case e.attributesKey:case e.parentKey:break;case e.textKey:m.push((e.indentText?a(e,r,n):"")+f(c[s],e));break;case e.cdataKey:m.push((e.indentCdata?a(e,r,n):"")+p(c[s],e));break;case e.doctypeKey:m.push(a(e,r,n)+d(c[s],e));break;case e.commentKey:m.push(a(e,r,n)+h(c[s],e));break;default:m.push(a(e,r,n)+g(c[s],i,e,r,w(c[s],e)));}n=n&&!m.length;}return m.join("")}t.exports=function(t,e){e=function(t){var e=i.copyOptions(t);return i.ensureFlagExists("ignoreDeclaration",e),i.ensureFlagExists("ignoreInstruction",e),i.ensureFlagExists("ignoreAttributes",e),i.ensureFlagExists("ignoreText",e),i.ensureFlagExists("ignoreComment",e),i.ensureFlagExists("ignoreCdata",e),i.ensureFlagExists("ignoreDoctype",e),i.ensureFlagExists("compact",e),i.ensureFlagExists("indentText",e),i.ensureFlagExists("indentCdata",e),i.ensureFlagExists("indentAttributes",e),i.ensureFlagExists("indentInstruction",e),i.ensureFlagExists("fullTagEmptyElement",e),i.ensureFlagExists("noQuotesForNativeAttributes",e),i.ensureSpacesExists(e),"number"==typeof e.spaces&&(e.spaces=Array(e.spaces+1).join(" ")),i.ensureKeyExists("declaration",e),i.ensureKeyExists("instruction",e),i.ensureKeyExists("attributes",e),i.ensureKeyExists("text",e),i.ensureKeyExists("comment",e),i.ensureKeyExists("cdata",e),i.ensureKeyExists("doctype",e),i.ensureKeyExists("type",e),i.ensureKeyExists("name",e),i.ensureKeyExists("elements",e),i.checkFnExists("doctype",e),i.checkFnExists("instruction",e),i.checkFnExists("cdata",e),i.checkFnExists("comment",e),i.checkFnExists("text",e),i.checkFnExists("instructionName",e),i.checkFnExists("elementName",e),i.checkFnExists("attributeName",e),i.checkFnExists("attributeValue",e),i.checkFnExists("attributes",e),i.checkFnExists("fullTagEmptyElement",e),e}(e);var r=[];return n=t,s="_root_",e.compact?r.push(y(t,e,0,!0)):(t[e.declarationKey]&&r.push(u(t[e.declarationKey],e,0)),t[e.elementsKey]&&t[e.elementsKey].length&&r.push(m(t[e.elementsKey],e,0,!r.length))),r.join("")};},673:(t,e,r)=>{var n=r(501);t.exports=function(t,e){t instanceof Buffer&&(t=t.toString());var r=null;if("string"==typeof t)try{r=JSON.parse(t);}catch(t){throw new Error("The JSON structure is invalid")}else r=t;return n(r,e)};},740:(t,e,r)=>{var n=r(881).isArray;t.exports={copyOptions:function(t){var e,r={};for(e in t)t.hasOwnProperty(e)&&(r[e]=t[e]);return r},ensureFlagExists:function(t,e){t in e&&"boolean"==typeof e[t]||(e[t]=!1);},ensureSpacesExists:function(t){(!("spaces"in t)||"number"!=typeof t.spaces&&"string"!=typeof t.spaces)&&(t.spaces=0);},ensureAlwaysArrayExists:function(t){"alwaysArray"in t&&("boolean"==typeof t.alwaysArray||n(t.alwaysArray))||(t.alwaysArray=!1);},ensureKeyExists:function(t,e){t+"Key"in e&&"string"==typeof e[t+"Key"]||(e[t+"Key"]=e.compact?"_"+t:t);},checkFnExists:function(t,e){return t+"Fn"in e}};},229:(t,e,r)=>{var n,s,i=r(99),o=r(740),a=r(881).isArray;function c(t){var e=Number(t);if(!isNaN(e))return e;var r=t.toLowerCase();return "true"===r||"false"!==r&&t}function u(t,e){var r;if(n.compact){if(!s[n[t+"Key"]]&&(a(n.alwaysArray)?-1!==n.alwaysArray.indexOf(n[t+"Key"]):n.alwaysArray)&&(s[n[t+"Key"]]=[]),s[n[t+"Key"]]&&!a(s[n[t+"Key"]])&&(s[n[t+"Key"]]=[s[n[t+"Key"]]]),t+"Fn"in n&&"string"==typeof e&&(e=n[t+"Fn"](e,s)),"instruction"===t&&("instructionFn"in n||"instructionNameFn"in n))for(r in e)if(e.hasOwnProperty(r))if("instructionFn"in n)e[r]=n.instructionFn(e[r],r,s);else {var i=e[r];delete e[r],e[n.instructionNameFn(r,i,s)]=i;}a(s[n[t+"Key"]])?s[n[t+"Key"]].push(e):s[n[t+"Key"]]=e;}else {s[n.elementsKey]||(s[n.elementsKey]=[]);var o={};if(o[n.typeKey]=t,"instruction"===t){for(r in e)if(e.hasOwnProperty(r))break;o[n.nameKey]="instructionNameFn"in n?n.instructionNameFn(r,e,s):r,n.instructionHasAttributes?(o[n.attributesKey]=e[r][n.attributesKey],"instructionFn"in n&&(o[n.attributesKey]=n.instructionFn(o[n.attributesKey],r,s))):("instructionFn"in n&&(e[r]=n.instructionFn(e[r],r,s)),o[n.instructionKey]=e[r]);}else t+"Fn"in n&&(e=n[t+"Fn"](e,s)),o[n[t+"Key"]]=e;n.addParent&&(o[n.parentKey]=s),s[n.elementsKey].push(o);}}function l(t){var e;if("attributesFn"in n&&t&&(t=n.attributesFn(t,s)),(n.trim||"attributeValueFn"in n||"attributeNameFn"in n||n.nativeTypeAttributes)&&t)for(e in t)if(t.hasOwnProperty(e)&&(n.trim&&(t[e]=t[e].trim()),n.nativeTypeAttributes&&(t[e]=c(t[e])),"attributeValueFn"in n&&(t[e]=n.attributeValueFn(t[e],e,s)),"attributeNameFn"in n)){var r=t[e];delete t[e],t[n.attributeNameFn(e,t[e],s)]=r;}return t}function h(t){var e={};if(t.body&&("xml"===t.name.toLowerCase()||n.instructionHasAttributes)){for(var r,i=/([\w:-]+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\w+))\s*/g;null!==(r=i.exec(t.body));)e[r[1]]=r[2]||r[3]||r[4];e=l(e);}if("xml"===t.name.toLowerCase()){if(n.ignoreDeclaration)return;s[n.declarationKey]={},Object.keys(e).length&&(s[n.declarationKey][n.attributesKey]=e),n.addParent&&(s[n.declarationKey][n.parentKey]=s);}else {if(n.ignoreInstruction)return;n.trim&&(t.body=t.body.trim());var o={};n.instructionHasAttributes&&Object.keys(e).length?(o[t.name]={},o[t.name][n.attributesKey]=e):o[t.name]=t.body,u("instruction",o);}}function p(t,e){var r;if("object"==typeof t&&(e=t.attributes,t=t.name),e=l(e),"elementNameFn"in n&&(t=n.elementNameFn(t,s)),n.compact){var i;if(r={},!n.ignoreAttributes&&e&&Object.keys(e).length)for(i in r[n.attributesKey]={},e)e.hasOwnProperty(i)&&(r[n.attributesKey][i]=e[i]);!(t in s)&&(a(n.alwaysArray)?-1!==n.alwaysArray.indexOf(t):n.alwaysArray)&&(s[t]=[]),s[t]&&!a(s[t])&&(s[t]=[s[t]]),a(s[t])?s[t].push(r):s[t]=r;}else s[n.elementsKey]||(s[n.elementsKey]=[]),(r={})[n.typeKey]="element",r[n.nameKey]=t,!n.ignoreAttributes&&e&&Object.keys(e).length&&(r[n.attributesKey]=e),n.alwaysChildren&&(r[n.elementsKey]=[]),s[n.elementsKey].push(r);r[n.parentKey]=s,s=r;}function d(t){n.ignoreText||(t.trim()||n.captureSpacesBetweenElements)&&(n.trim&&(t=t.trim()),n.nativeType&&(t=c(t)),n.sanitize&&(t=t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")),u("text",t));}function f(t){n.ignoreComment||(n.trim&&(t=t.trim()),u("comment",t));}function m(t){var e=s[n.parentKey];n.addParent||delete s[n.parentKey],s=e;}function w(t){n.ignoreCdata||(n.trim&&(t=t.trim()),u("cdata",t));}function g(t){n.ignoreDoctype||(t=t.replace(/^ /,""),n.trim&&(t=t.trim()),u("doctype",t));}function y(t){t.note=t;}t.exports=function(t,e){var r=i.parser(!0,{}),a={};if(s=a,n=function(t){return n=o.copyOptions(t),o.ensureFlagExists("ignoreDeclaration",n),o.ensureFlagExists("ignoreInstruction",n),o.ensureFlagExists("ignoreAttributes",n),o.ensureFlagExists("ignoreText",n),o.ensureFlagExists("ignoreComment",n),o.ensureFlagExists("ignoreCdata",n),o.ensureFlagExists("ignoreDoctype",n),o.ensureFlagExists("compact",n),o.ensureFlagExists("alwaysChildren",n),o.ensureFlagExists("addParent",n),o.ensureFlagExists("trim",n),o.ensureFlagExists("nativeType",n),o.ensureFlagExists("nativeTypeAttributes",n),o.ensureFlagExists("sanitize",n),o.ensureFlagExists("instructionHasAttributes",n),o.ensureFlagExists("captureSpacesBetweenElements",n),o.ensureAlwaysArrayExists(n),o.ensureKeyExists("declaration",n),o.ensureKeyExists("instruction",n),o.ensureKeyExists("attributes",n),o.ensureKeyExists("text",n),o.ensureKeyExists("comment",n),o.ensureKeyExists("cdata",n),o.ensureKeyExists("doctype",n),o.ensureKeyExists("type",n),o.ensureKeyExists("name",n),o.ensureKeyExists("elements",n),o.ensureKeyExists("parent",n),o.checkFnExists("doctype",n),o.checkFnExists("instruction",n),o.checkFnExists("cdata",n),o.checkFnExists("comment",n),o.checkFnExists("text",n),o.checkFnExists("instructionName",n),o.checkFnExists("elementName",n),o.checkFnExists("attributeName",n),o.checkFnExists("attributeValue",n),o.checkFnExists("attributes",n),n}(e),r.opt={strictEntities:!0},r.onopentag=p,r.ontext=d,r.oncomment=f,r.onclosetag=m,r.onerror=y,r.oncdata=w,r.ondoctype=g,r.onprocessinginstruction=h,r.write(t).close(),a[n.elementsKey]){var c=a[n.elementsKey];delete a[n.elementsKey],a[n.elementsKey]=c,delete a.text;}return a};},388:(t,e,r)=>{var n=r(740),s=r(229);t.exports=function(t,e){var r,i,o;return r=function(t){var e=n.copyOptions(t);return n.ensureSpacesExists(e),e}(e),i=s(t,r),o="compact"in r&&r.compact?"_parent":"parent",("addParent"in r&&r.addParent?JSON.stringify(i,(function(t,e){return t===o?"_":e}),r.spaces):JSON.stringify(i,null,r.spaces)).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")};},255:t=>{var e={"&":"&amp;",'"':"&quot;","'":"&apos;","<":"&lt;",">":"&gt;"};t.exports=function(t){return t&&t.replace?t.replace(/([&"<>'])/g,(function(t,r){return e[r]})):t};},479:(t,e,r)=>{var n=r(155),s=r(255),i=r(830).Stream;function o(t,e,r){r=r||0;var n,i,a=(n=e,new Array(r||0).join(n||"")),c=t;if("object"==typeof t&&(c=t[i=Object.keys(t)[0]])&&c._elem)return c._elem.name=i,c._elem.icount=r,c._elem.indent=e,c._elem.indents=a,c._elem.interrupt=c,c._elem;var u,l=[],h=[];function p(t){Object.keys(t).forEach((function(e){l.push(function(t,e){return t+'="'+s(e)+'"'}(e,t[e]));}));}switch(typeof c){case"object":if(null===c)break;c._attr&&p(c._attr),c._cdata&&h.push(("<![CDATA["+c._cdata).replace(/\]\]>/g,"]]]]><![CDATA[>")+"]]>"),c.forEach&&(u=!1,h.push(""),c.forEach((function(t){"object"==typeof t?"_attr"==Object.keys(t)[0]?p(t._attr):h.push(o(t,e,r+1)):(h.pop(),u=!0,h.push(s(t)));})),u||h.push(""));break;default:h.push(s(c));}return {name:i,interrupt:!1,attributes:l,content:h,icount:r,indents:a,indent:e}}function a(t,e,r){if("object"!=typeof e)return t(!1,e);var n=e.interrupt?1:e.content.length;function s(){for(;e.content.length;){var s=e.content.shift();if(void 0!==s){if(i(s))return;a(t,s);}}t(!1,(n>1?e.indents:"")+(e.name?"</"+e.name+">":"")+(e.indent&&!r?"\n":"")),r&&r();}function i(e){return !!e.interrupt&&(e.interrupt.append=t,e.interrupt.end=s,e.interrupt=!1,t(!0),!0)}if(t(!1,e.indents+(e.name?"<"+e.name:"")+(e.attributes.length?" "+e.attributes.join(" "):"")+(n?e.name?">":"":e.name?"/>":"")+(e.indent&&n>1?"\n":"")),!n)return t(!1,e.indent?"\n":"");i(e)||s();}t.exports=function(t,e){"object"!=typeof e&&(e={indent:e});var r,s,c=e.stream?new i:null,u="",l=!1,h=e.indent?!0===e.indent?"    ":e.indent:"",p=!0;function d(t){p?n.nextTick(t):t();}function f(t,e){if(void 0!==e&&(u+=e),t&&!l&&(c=c||new i,l=!0),t&&l){var r=u;d((function(){c.emit("data",r);})),u="";}}function m(t,e){a(f,o(t,h,h?1:0),e);}function w(){if(c){var t=u;d((function(){c.emit("data",t),c.emit("end"),c.readable=!1,c.emit("close");}));}}return d((function(){p=!1;})),e.declaration&&(s={version:"1.0",encoding:(r=e.declaration).encoding||"UTF-8"},r.standalone&&(s.standalone=r.standalone),m({"?xml":{_attr:s}}),u=u.replace("/>","?>")),t&&t.forEach?t.forEach((function(e,r){var n;r+1===t.length&&(n=w),m(e,n);})):m(t,w),c?(c.readable=!0,c):u},t.exports.element=t.exports.Element=function(){var t=Array.prototype.slice.call(arguments),e={_elem:o(t),push:function(t){if(!this.append)throw new Error("not assigned to a parent!");var e=this,r=this._elem.indent;a(this.append,o(t,r,this._elem.icount+(r?1:0)),(function(){e.append(!0);}));},close:function(t){void 0!==t&&this.push(t),this.end&&this.end();}};return e};},862:()=>{},964:()=>{}},e={};function r(n){var s=e[n];if(void 0!==s)return s.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]});},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0});};var n={};return (()=>{r.r(n),r.d(n,{AbstractNumbering:()=>uo,Alignment:()=>X,AlignmentAttributes:()=>$,AlignmentType:()=>U,Attributes:()=>a,BaseEmphasisMark:()=>dt,BaseXmlComponent:()=>t,Body:()=>xn,Bookmark:()=>Kr,BookmarkEnd:()=>Wr,BookmarkStart:()=>Gr,Border:()=>Y,BorderElement:()=>q,BorderStyle:()=>z,Column:()=>Tn,ColumnAttributes:()=>En,ColumnBreak:()=>Tr,Columns:()=>en,ColumnsAttributes:()=>tn,ConcreteHyperlink:()=>Mr,ConcreteNumbering:()=>po,DeletedTextRun:()=>ba,DocGridAttributes:()=>rn,Document:()=>Yo,DocumentAttributes:()=>An,DocumentBackground:()=>Rn,DocumentBackgroundAttributes:()=>Sn,DocumentDefaults:()=>Xo,DocumentGrid:()=>nn,DocumentGridType:()=>ee,DotEmphasisMark:()=>mt,Drawing:()=>dr,DropCapType:()=>kn,EMPTY_OBJECT:()=>e,EmphasisMark:()=>ft,EmphasisMarkType:()=>G,ExternalHyperlink:()=>zr,File:()=>Yo,FootNoteReferenceRunAttributes:()=>ua,FootNotes:()=>Gi,Footer:()=>ca,FooterWrapper:()=>Li,FootnoteReference:()=>la,FootnoteReferenceRun:()=>ha,FrameAnchorType:()=>Dn,FrameProperties:()=>Fn,FramePropertiesAttributes:()=>Pn,FrameWrap:()=>Ln,GridSpan:()=>js,Header:()=>aa,HeaderFooterReference:()=>Jr,HeaderFooterReferenceType:()=>Jt,HeaderFooterType:()=>te,HeaderWrapper:()=>Xi,HeadingLevel:()=>Vt,HeightRule:()=>ii,HorizontalPosition:()=>me,HorizontalPositionAlign:()=>_a,HorizontalPositionRelativeFrom:()=>zt,HpsMeasureElement:()=>P,HyperlinkType:()=>Yt,IgnoreIfEmptyXmlComponent:()=>i,ImageRun:()=>fr,ImportDotx:()=>La,ImportedRootElementAttributes:()=>p,ImportedXmlComponent:()=>h,Indent:()=>tt,InitializableXmlComponent:()=>f,InsertedTextRun:()=>pa,InternalHyperlink:()=>Ur,LeaderType:()=>Xt,Level:()=>io,LevelBase:()=>so,LevelForOverride:()=>oo,LevelFormat:()=>Yi,LevelOverride:()=>mo,LevelSuffix:()=>Qi,LineNumberAttributes:()=>sn,LineNumberRestartFormat:()=>re,LineNumberType:()=>on,LineRuleType:()=>Wt,Math:()=>Un,MathAccentCharacter:()=>Vn,MathAngledBrackets:()=>Ns,MathBase:()=>$n,MathCurlyBrackets:()=>Is,MathDegree:()=>ds,MathDenominator:()=>jn,MathFraction:()=>Gn,MathFunction:()=>vs,MathFunctionName:()=>ys,MathFunctionProperties:()=>bs,MathLimitLocation:()=>qn,MathNArayProperties:()=>ts,MathNumerator:()=>Kn,MathPreSubSuperScript:()=>hs,MathPreSubSuperScriptProperties:()=>ls,MathRadical:()=>gs,MathRadicalProperties:()=>ws,MathRoundBrackets:()=>Ss,MathRun:()=>Hn,MathSquareBrackets:()=>Rs,MathSubScript:()=>as,MathSubScriptElement:()=>es,MathSubScriptProperties:()=>os,MathSubSuperScript:()=>us,MathSubSuperScriptProperties:()=>cs,MathSum:()=>ns,MathSuperScript:()=>is,MathSuperScriptElement:()=>rs,MathSuperScriptProperties:()=>ss,Media:()=>qi,NumberFormat:()=>Ea,NumberProperties:()=>kr,NumberValueElement:()=>B,Numbering:()=>yo,OnOffElement:()=>L,OutlineLevel:()=>Vr,OverlapType:()=>Qs,Packer:()=>Oa,PageBorderDisplay:()=>ne,PageBorderOffsetFrom:()=>se,PageBorderZOrder:()=>ie,PageBorders:()=>cn,PageBreak:()=>Er,PageBreakBefore:()=>Ar,PageMargin:()=>ln,PageMarginAttributes:()=>un,PageNumber:()=>V,PageNumberSeparator:()=>oe,PageNumberType:()=>pn,PageNumberTypeAttributes:()=>hn,PageOrientation:()=>ae,PageReference:()=>qr,PageSize:()=>fn,PageSizeAttributes:()=>dn,PageTextDirection:()=>wn,PageTextDirectionType:()=>ce,Paragraph:()=>Mn,ParagraphProperties:()=>Bn,ParagraphPropertiesDefaults:()=>Vo,RelativeHorizontalPosition:()=>ri,RelativeVerticalPosition:()=>ni,Run:()=>Ot,RunFonts:()=>_t,RunProperties:()=>St,RunPropertiesChange:()=>Rt,RunPropertiesDefaults:()=>$o,SectionProperties:()=>_n,SectionType:()=>ue,SectionTypeAttributes:()=>gn,SequentialIdentifier:()=>gr,Shading:()=>pt,ShadingType:()=>K,SimpleField:()=>vr,SimpleMailMergeField:()=>_r,SimplePos:()=>he,Spacing:()=>Rr,StringContainer:()=>M,StringValueElement:()=>F,Style:()=>Ir,StyleForCharacter:()=>Oo,StyleForParagraph:()=>No,StyleLevel:()=>oa,Styles:()=>Wo,SymbolRun:()=>Lt,TDirection:()=>Vs,Tab:()=>yr,TabAttributes:()=>Or,TabStop:()=>Nr,TabStopItem:()=>Cr,TabStopPosition:()=>qt,TabStopType:()=>$t,Table:()=>pi,TableAnchorType:()=>ei,TableBorders:()=>Ys,TableCell:()=>Xs,TableCellBorders:()=>zs,TableFloatOptionsAttributes:()=>ai,TableFloatProperties:()=>ci,TableLayout:()=>li,TableLayoutType:()=>si,TableOfContents:()=>ia,TableOverlap:()=>ti,TableProperties:()=>hi,TableRow:()=>wi,TableRowHeight:()=>fi,TableRowHeightAttributes:()=>di,TableRowProperties:()=>mi,TableWidthElement:()=>Ms,TextDirection:()=>Fs,TextRun:()=>Ct,TextWrappingSide:()=>Kt,TextWrappingType:()=>jt,ThematicBreak:()=>Q,Type:()=>yn,Underline:()=>At,UnderlineType:()=>W,VerticalAlign:()=>Qt,VerticalAlignAttributes:()=>Zr,VerticalAlignElement:()=>Yr,VerticalMerge:()=>Gs,VerticalMergeType:()=>Ps,VerticalPosition:()=>ge,VerticalPositionAlign:()=>xa,VerticalPositionRelativeFrom:()=>Ht,WORKAROUND:()=>Qo,WORKAROUND2:()=>Zi,WORKAROUND3:()=>d,WORKAROUND4:()=>ps,WidthType:()=>Ds,WrapNone:()=>$e,WrapSquare:()=>qe,WrapTight:()=>Ye,WrapTopAndBottom:()=>Je,XmlAttributeComponent:()=>o,XmlComponent:()=>s,convertInchesToTwip:()=>Bt,convertMillimetersToTwip:()=>Ft,convertToXmlComponent:()=>u,dateTimeValue:()=>D,decimalNumber:()=>m,eighthPointMeasureValue:()=>C,hexColorValue:()=>T,hpsMeasureValue:()=>S,longHexNumber:()=>y,measurementOrPercentValue:()=>O,percentageValue:()=>N,pointMeasureValue:()=>k,positiveUniversalMeasureValue:()=>E,sectionMarginDefaults:()=>bn,sectionPageSizeDefaults:()=>vn,shortHexNumber:()=>b,signedHpsMeasureValue:()=>R,signedTwipsMeasureValue:()=>A,twipsMeasureValue:()=>I,uCharHexNumber:()=>v,uniqueId:()=>Ut,uniqueNumericId:()=>Mt,universalMeasureValue:()=>_,unsignedDecimalNumber:()=>w});class t{constructor(t){this.rootKey=t;}}const e=Object.seal({});class s extends t{constructor(t){super(t),this.root=new Array;}prepForXml(r){var n;const s=this.root.map((e=>e instanceof t?e.prepForXml(r):e)).filter((t=>void 0!==t));return {[this.rootKey]:s.length?1===s.length&&(null===(n=s[0])||void 0===n?void 0:n._attr)?s[0]:s:e}}addChildElement(t){return this.root.push(t),this}}class i extends s{prepForXml(t){const e=super.prepForXml(t);if(e&&("object"!=typeof e[this.rootKey]||Object.keys(e[this.rootKey]).length))return e}}class o extends t{constructor(t){super("_attr"),this.root=t;}prepForXml(t){const e={};return Object.keys(this.root).forEach((t=>{const r=this.root[t];if(void 0!==r){const n=this.xmlKeys&&this.xmlKeys[t]||t;e[n]=r;}})),{_attr:e}}set(t){this.root=t;}}class a extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val",color:"w:color",fill:"w:fill",space:"w:space",sz:"w:sz",type:"w:type",rsidR:"w:rsidR",rsidRPr:"w:rsidRPr",rsidSect:"w:rsidSect",w:"w:w",h:"w:h",top:"w:top",right:"w:right",bottom:"w:bottom",left:"w:left",header:"w:header",footer:"w:footer",gutter:"w:gutter",linePitch:"w:linePitch",pos:"w:pos"};}}var c=r(888);function u(t){switch(t.type){case void 0:case"element":const e=new h(t.name,t.attributes),r=t.elements||[];for(const t of r){const r=u(t);void 0!==r&&e.push(r);}return e;case"text":return t.text;default:return}}class l extends o{}class h extends s{static fromXmlString(t){return u((0, c.xml2js)(t,{compact:!1}))}constructor(t,e){super(t),e&&this.root.push(new l(e));}push(t){this.root.push(t);}}class p extends s{constructor(t){super(""),this._attr=t;}prepForXml(t){return {_attr:this._attr}}}const d="";class f extends s{constructor(t,e){super(t),e&&(this.root=e.root);}}function m(t){if(isNaN(t))throw new Error(`Invalid value '${t}' specified. Must be an integer.`);return Math.floor(t)}function w(t){const e=m(t);if(e<0)throw new Error(`Invalid value '${t}' specified. Must be a positive integer.`);return e}function g(t,e){const r=2*e;if(t.length!==r||isNaN(Number("0x"+t)))throw new Error(`Invalid hex value '${t}'. Expected ${r} digit hex value`);return t}function y(t){return g(t,4)}function b(t){return g(t,2)}function v(t){return g(t,1)}function _(t){const e=t.slice(-2);if(!x.includes(e))throw new Error(`Invalid unit '${e}' specified. Valid units are ${x.join(", ")}`);const r=t.substring(0,t.length-2);if(isNaN(Number(r)))throw new Error(`Invalid value '${r}' specified. Expected a valid number.`);return `${Number(r)}${e}`}const x=["mm","cm","in","pt","pc","pi"];function E(t){const e=_(t);if(parseFloat(e)<0)throw new Error(`Invalid value '${e}' specified. Expected a positive number.`);return e}function T(t){return "auto"===t?t:g("#"===t.charAt(0)?t.substring(1):t,3)}function A(t){return "string"==typeof t?_(t):m(t)}function S(t){return "string"==typeof t?E(t):w(t)}function R(t){return "string"==typeof t?_(t):m(t)}function I(t){return "string"==typeof t?E(t):w(t)}function N(t){if("%"!==t.slice(-1))throw new Error(`Invalid value '${t}'. Expected percentage value (eg '55%')`);const e=t.substring(0,t.length-1);if(isNaN(Number(e)))throw new Error(`Invalid value '${e}' specified. Expected a valid number.`);return `${Number(e)}%`}function O(t){return "number"==typeof t?m(t):"%"===t.slice(-1)?N(t):_(t)}const C=w,k=w;function D(t){return t.toISOString()}class L extends s{constructor(t,e=!0){super(t),!0!==e&&this.root.push(new a({val:e}));}}class P extends s{constructor(t,e){super(t),this.root.push(new a({val:S(e)}));}}class F extends s{constructor(t,e){super(t),this.root.push(new a({val:e}));}}class B extends s{constructor(t,e){super(t),this.root.push(new a({val:e}));}}class M extends s{constructor(t,e){super(t),this.root.push(e);}}var U,z,H,j,K,G,W,V;!function(t){t.START="start",t.END="end",t.CENTER="center",t.BOTH="both",t.JUSTIFIED="both",t.DISTRIBUTE="distribute",t.LEFT="left",t.RIGHT="right";}(U||(U={}));class $ extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val"};}}class X extends s{constructor(t){super("w:jc"),this.root.push(new $({val:t}));}}class q extends s{constructor(t,{color:e,size:r,space:n,style:s}){super(t),this.root.push(new Z({style:s,color:void 0===e?void 0:T(e),size:void 0===r?void 0:C(r),space:void 0===n?void 0:k(n)}));}}class Z extends o{constructor(){super(...arguments),this.xmlKeys={style:"w:val",color:"w:color",size:"w:sz",space:"w:space"};}}!function(t){t.SINGLE="single",t.DASH_DOT_STROKED="dashDotStroked",t.DASHED="dashed",t.DASH_SMALL_GAP="dashSmallGap",t.DOT_DASH="dotDash",t.DOT_DOT_DASH="dotDotDash",t.DOTTED="dotted",t.DOUBLE="double",t.DOUBLE_WAVE="doubleWave",t.INSET="inset",t.NIL="nil",t.NONE="none",t.OUTSET="outset",t.THICK="thick",t.THICK_THIN_LARGE_GAP="thickThinLargeGap",t.THICK_THIN_MEDIUM_GAP="thickThinMediumGap",t.THICK_THIN_SMALL_GAP="thickThinSmallGap",t.THIN_THICK_LARGE_GAP="thinThickLargeGap",t.THIN_THICK_MEDIUM_GAP="thinThickMediumGap",t.THIN_THICK_SMALL_GAP="thinThickSmallGap",t.THIN_THICK_THIN_LARGE_GAP="thinThickThinLargeGap",t.THIN_THICK_THIN_MEDIUM_GAP="thinThickThinMediumGap",t.THIN_THICK_THIN_SMALL_GAP="thinThickThinSmallGap",t.THREE_D_EMBOSS="threeDEmboss",t.THREE_D_ENGRAVE="threeDEngrave",t.TRIPLE="triple",t.WAVE="wave";}(z||(z={}));class Y extends i{constructor(t){super("w:pBdr"),t.top&&this.root.push(new q("w:top",t.top)),t.bottom&&this.root.push(new q("w:bottom",t.bottom)),t.left&&this.root.push(new q("w:left",t.left)),t.right&&this.root.push(new q("w:right",t.right));}}class Q extends s{constructor(){super("w:pBdr");const t=new q("w:bottom",{color:"auto",space:1,style:z.SINGLE,size:6});this.root.push(t);}}class J extends o{constructor(){super(...arguments),this.xmlKeys={start:"w:start",end:"w:end",left:"w:left",right:"w:right",hanging:"w:hanging",firstLine:"w:firstLine"};}}class tt extends s{constructor({start:t,end:e,left:r,right:n,hanging:s,firstLine:i}){super("w:ind"),this.root.push(new J({start:void 0===t?void 0:A(t),end:void 0===e?void 0:A(e),left:void 0===r?void 0:A(r),right:void 0===n?void 0:A(n),hanging:void 0===s?void 0:I(s),firstLine:void 0===i?void 0:I(i)}));}}class et extends s{constructor(){super("w:br");}}!function(t){t.BEGIN="begin",t.END="end",t.SEPARATE="separate";}(H||(H={}));class rt extends o{constructor(){super(...arguments),this.xmlKeys={type:"w:fldCharType",dirty:"w:dirty"};}}class nt extends s{constructor(t){super("w:fldChar"),this.root.push(new rt({type:H.BEGIN,dirty:t}));}}class st extends s{constructor(t){super("w:fldChar"),this.root.push(new rt({type:H.SEPARATE,dirty:t}));}}class it extends s{constructor(t){super("w:fldChar"),this.root.push(new rt({type:H.END,dirty:t}));}}!function(t){t.DEFAULT="default",t.PRESERVE="preserve";}(j||(j={}));class ot extends o{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"};}}class at extends s{constructor(){super("w:instrText"),this.root.push(new ot({space:j.PRESERVE})),this.root.push("PAGE");}}class ct extends s{constructor(){super("w:instrText"),this.root.push(new ot({space:j.PRESERVE})),this.root.push("NUMPAGES");}}class ut extends s{constructor(){super("w:instrText"),this.root.push(new ot({space:j.PRESERVE})),this.root.push("SECTIONPAGES");}}class lt extends o{constructor(){super(...arguments),this.xmlKeys={id:"w:id",author:"w:author",date:"w:date"};}}class ht extends o{constructor(){super(...arguments),this.xmlKeys={fill:"w:fill",color:"w:color",type:"w:val"};}}class pt extends s{constructor({fill:t,color:e,type:r}){super("w:shd"),this.root.push(new ht({fill:void 0===t?void 0:T(t),color:void 0===e?void 0:T(e),type:r}));}}!function(t){t.CLEAR="clear",t.DIAGONAL_CROSS="diagCross",t.DIAGONAL_STRIPE="diagStripe",t.HORIZONTAL_CROSS="horzCross",t.HORIZONTAL_STRIPE="horzStripe",t.NIL="nil",t.PERCENT_5="pct5",t.PERCENT_10="pct10",t.PERCENT_12="pct12",t.PERCENT_15="pct15",t.PERCENT_20="pct20",t.PERCENT_25="pct25",t.PERCENT_30="pct30",t.PERCENT_35="pct35",t.PERCENT_37="pct37",t.PERCENT_40="pct40",t.PERCENT_45="pct45",t.PERCENT_50="pct50",t.PERCENT_55="pct55",t.PERCENT_60="pct60",t.PERCENT_62="pct62",t.PERCENT_65="pct65",t.PERCENT_70="pct70",t.PERCENT_75="pct75",t.PERCENT_80="pct80",t.PERCENT_85="pct85",t.PERCENT_87="pct87",t.PERCENT_90="pct90",t.PERCENT_95="pct95",t.REVERSE_DIAGONAL_STRIPE="reverseDiagStripe",t.SOLID="solid",t.THIN_DIAGONAL_CROSS="thinDiagCross",t.THIN_DIAGONAL_STRIPE="thinDiagStripe",t.THIN_HORIZONTAL_CROSS="thinHorzCross",t.THIN_REVERSE_DIAGONAL_STRIPE="thinReverseDiagStripe",t.THIN_VERTICAL_STRIPE="thinVertStripe",t.VERTICAL_STRIPE="vertStripe";}(K||(K={})),function(t){t.DOT="dot";}(G||(G={}));class dt extends s{constructor(t){super("w:em"),this.root.push(new a({val:t}));}}class ft extends dt{constructor(t=G.DOT){super(t);}}class mt extends dt{constructor(){super(G.DOT);}}class wt extends s{constructor(t){super("w:spacing"),this.root.push(new a({val:A(t)}));}}class gt extends s{constructor(t){super("w:color"),this.root.push(new a({val:T(t)}));}}class yt extends s{constructor(t){super("w:highlight"),this.root.push(new a({val:t}));}}class bt extends s{constructor(t){super("w:highlightCs"),this.root.push(new a({val:t}));}}class vt extends o{constructor(){super(...arguments),this.xmlKeys={ascii:"w:ascii",cs:"w:cs",eastAsia:"w:eastAsia",hAnsi:"w:hAnsi",hint:"w:hint"};}}class _t extends s{constructor(t,e){if(super("w:rFonts"),"string"==typeof t){const r=t;this.root.push(new vt({ascii:r,cs:r,eastAsia:r,hAnsi:r,hint:e}));}else {const e=t;this.root.push(new vt(e));}}}class xt extends s{constructor(t){super("w:vertAlign"),this.root.push(new a({val:t}));}}class Et extends xt{constructor(){super("superscript");}}class Tt extends xt{constructor(){super("subscript");}}!function(t){t.SINGLE="single",t.WORDS="words",t.DOUBLE="double",t.THICK="thick",t.DOTTED="dotted",t.DOTTEDHEAVY="dottedHeavy",t.DASH="dash",t.DASHEDHEAVY="dashedHeavy",t.DASHLONG="dashLong",t.DASHLONGHEAVY="dashLongHeavy",t.DOTDASH="dotDash",t.DASHDOTHEAVY="dashDotHeavy",t.DOTDOTDASH="dotDotDash",t.DASHDOTDOTHEAVY="dashDotDotHeavy",t.WAVE="wave",t.WAVYHEAVY="wavyHeavy",t.WAVYDOUBLE="wavyDouble";}(W||(W={}));class At extends s{constructor(t=W.SINGLE,e){super("w:u"),this.root.push(new a({val:t,color:void 0===e?void 0:T(e)}));}}class St extends i{constructor(t){var e,r;if(super("w:rPr"),!t)return;void 0!==t.bold&&this.push(new L("w:b",t.bold)),(void 0===t.boldComplexScript&&void 0!==t.bold||t.boldComplexScript)&&this.push(new L("w:bCs",null!==(e=t.boldComplexScript)&&void 0!==e?e:t.bold)),void 0!==t.italics&&this.push(new L("w:i",t.italics)),(void 0===t.italicsComplexScript&&void 0!==t.italics||t.italicsComplexScript)&&this.push(new L("w:iCs",null!==(r=t.italicsComplexScript)&&void 0!==r?r:t.italics)),t.underline&&this.push(new At(t.underline.type,t.underline.color)),t.emphasisMark&&this.push(new ft(t.emphasisMark.type)),t.color&&this.push(new gt(t.color)),void 0!==t.size&&this.push(new P("w:sz",t.size));const n=void 0===t.sizeComplexScript||!0===t.sizeComplexScript?t.size:t.sizeComplexScript;n&&this.push(new P("w:szCs",n)),void 0!==t.rightToLeft&&this.push(new L("w:rtl",t.rightToLeft)),void 0!==t.smallCaps?this.push(new L("w:smallCaps",t.smallCaps)):void 0!==t.allCaps&&this.push(new L("w:caps",t.allCaps)),void 0!==t.strike&&this.push(new L("w:strike",t.strike)),void 0!==t.doubleStrike&&this.push(new L("w:dstrike",t.doubleStrike)),t.subScript&&this.push(new Tt),t.superScript&&this.push(new Et),t.style&&this.push(new F("w:rStyle",t.style)),t.font&&("string"==typeof t.font?this.push(new _t(t.font)):"name"in t.font?this.push(new _t(t.font.name,t.font.hint)):this.push(new _t(t.font))),t.highlight&&this.push(new yt(t.highlight));const s=void 0===t.highlightComplexScript||!0===t.highlightComplexScript?t.highlight:t.highlightComplexScript;s&&this.push(new bt(s)),t.characterSpacing&&this.push(new wt(t.characterSpacing)),void 0!==t.emboss&&this.push(new L("w:emboss",t.emboss)),void 0!==t.imprint&&this.push(new L("w:imprint",t.imprint)),t.shading&&this.push(new pt(t.shading)),t.revision&&this.push(new Rt(t.revision));}push(t){this.root.push(t);}}class Rt extends s{constructor(t){super("w:rPrChange"),this.root.push(new lt({id:t.id,author:t.author,date:t.date})),this.addChildElement(new St(t));}}class It extends o{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"};}}class Nt extends s{constructor(t){super("w:t"),this.root.push(new It({space:j.PRESERVE})),this.root.push(t);}}!function(t){t.CURRENT="CURRENT",t.TOTAL_PAGES="TOTAL_PAGES",t.TOTAL_PAGES_IN_SECTION="TOTAL_PAGES_IN_SECTION";}(V||(V={}));class Ot extends s{constructor(t){if(super("w:r"),this.properties=new St(t),this.root.push(this.properties),t.break)for(let e=0;e<t.break;e++)this.root.push(new et);if(t.children)for(const e of t.children)if("string"!=typeof e)this.root.push(e);else switch(e){case V.CURRENT:this.root.push(new nt),this.root.push(new at),this.root.push(new st),this.root.push(new it);break;case V.TOTAL_PAGES:this.root.push(new nt),this.root.push(new ct),this.root.push(new st),this.root.push(new it);break;case V.TOTAL_PAGES_IN_SECTION:this.root.push(new nt),this.root.push(new ut),this.root.push(new st),this.root.push(new it);break;default:this.root.push(new Nt(e));}else t.text&&this.root.push(new Nt(t.text));}}class Ct extends Ot{constructor(t){if("string"==typeof t)return super({}),this.root.push(new Nt(t)),this;super(t);}}class kt extends o{constructor(){super(...arguments),this.xmlKeys={char:"w:char",symbolfont:"w:font"};}}class Dt extends s{constructor(t="",e="Wingdings"){super("w:sym"),this.root.push(new kt({char:t,symbolfont:e}));}}class Lt extends Ot{constructor(t){if("string"==typeof t)return super({}),void this.root.push(new Dt(t));super(t),this.root.push(new Dt(t.char,t.symbolfont));}}let Pt=0;const Ft=t=>Math.floor(t/25.4*72*20),Bt=t=>Math.floor(72*t*20),Mt=()=>++Pt,Ut=()=>((t=21)=>{let e="",r=t;for(;r--;)e+="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[64*Math.random()|0];return e})().toLowerCase();var zt,Ht,jt,Kt,Gt,Wt,Vt,$t,Xt,qt,Zt,Yt,Qt,Jt,te,ee,re,ne,se,ie,oe,ae,ce,ue;!function(t){t.CHARACTER="character",t.COLUMN="column",t.INSIDE_MARGIN="insideMargin",t.LEFT_MARGIN="leftMargin",t.MARGIN="margin",t.OUTSIDE_MARGIN="outsideMargin",t.PAGE="page",t.RIGHT_MARGIN="rightMargin";}(zt||(zt={})),function(t){t.BOTTOM_MARGIN="bottomMargin",t.INSIDE_MARGIN="insideMargin",t.LINE="line",t.MARGIN="margin",t.OUTSIDE_MARGIN="outsideMargin",t.PAGE="page",t.PARAGRAPH="paragraph",t.TOP_MARGIN="topMargin";}(Ht||(Ht={}));class le extends o{constructor(){super(...arguments),this.xmlKeys={x:"x",y:"y"};}}class he extends s{constructor(){super("wp:simplePos"),this.root.push(new le({x:0,y:0}));}}class pe extends s{constructor(t){super("wp:align"),this.root.push(t);}}class de extends s{constructor(t){super("wp:posOffset"),this.root.push(t.toString());}}class fe extends o{constructor(){super(...arguments),this.xmlKeys={relativeFrom:"relativeFrom"};}}class me extends s{constructor(t){if(super("wp:positionH"),this.root.push(new fe({relativeFrom:t.relative||zt.PAGE})),t.align)this.root.push(new pe(t.align));else {if(void 0===t.offset)throw new Error("There is no configuration provided for floating position (Align or offset)");this.root.push(new de(t.offset));}}}class we extends o{constructor(){super(...arguments),this.xmlKeys={relativeFrom:"relativeFrom"};}}class ge extends s{constructor(t){if(super("wp:positionV"),this.root.push(new we({relativeFrom:t.relative||Ht.PAGE})),t.align)this.root.push(new pe(t.align));else {if(void 0===t.offset)throw new Error("There is no configuration provided for floating position (Align or offset)");this.root.push(new de(t.offset));}}}class ye extends o{constructor(){super(...arguments),this.xmlKeys={uri:"uri"};}}class be extends o{constructor(){super(...arguments),this.xmlKeys={embed:"r:embed",cstate:"cstate"};}}class ve extends s{constructor(t){super("a:blip"),this.root.push(new be({embed:`rId{${t.fileName}}`,cstate:"none"}));}}class _e extends s{constructor(){super("a:srcRect");}}class xe extends s{constructor(){super("a:fillRect");}}class Ee extends s{constructor(){super("a:stretch"),this.root.push(new xe);}}class Te extends s{constructor(t){super("pic:blipFill"),this.root.push(new ve(t)),this.root.push(new _e),this.root.push(new Ee);}}class Ae extends o{constructor(){super(...arguments),this.xmlKeys={noChangeAspect:"noChangeAspect",noChangeArrowheads:"noChangeArrowheads"};}}class Se extends s{constructor(){super("a:picLocks"),this.root.push(new Ae({noChangeAspect:1,noChangeArrowheads:1}));}}class Re extends s{constructor(){super("pic:cNvPicPr"),this.root.push(new Se);}}class Ie extends o{constructor(){super(...arguments),this.xmlKeys={id:"id",name:"name",descr:"descr"};}}class Ne extends s{constructor(){super("pic:cNvPr"),this.root.push(new Ie({id:0,name:"",descr:""}));}}class Oe extends s{constructor(){super("pic:nvPicPr"),this.root.push(new Ne),this.root.push(new Re);}}class Ce extends o{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns:pic"};}}class ke extends o{constructor(){super(...arguments),this.xmlKeys={cx:"cx",cy:"cy"};}}class De extends s{constructor(t,e){super("a:ext"),this.attributes=new ke({cx:t,cy:e}),this.root.push(this.attributes);}}class Le extends o{constructor(){super(...arguments),this.xmlKeys={x:"x",y:"y"};}}class Pe extends s{constructor(){super("a:off"),this.root.push(new Le({x:0,y:0}));}}class Fe extends o{constructor(){super(...arguments),this.xmlKeys={flipVertical:"flipV",flipHorizontal:"flipH",rotation:"rot"};}}class Be extends s{constructor(t){var e,r;super("a:xfrm"),this.root.push(new Fe({flipVertical:null===(e=t.flip)||void 0===e?void 0:e.vertical,flipHorizontal:null===(r=t.flip)||void 0===r?void 0:r.horizontal,rotation:t.rotation})),this.extents=new De(t.emus.x,t.emus.y),this.root.push(new Pe),this.root.push(this.extents);}}class Me extends s{constructor(){super("a:avLst");}}class Ue extends o{constructor(){super(...arguments),this.xmlKeys={prst:"prst"};}}class ze extends s{constructor(){super("a:prstGeom"),this.root.push(new Ue({prst:"rect"})),this.root.push(new Me);}}class He extends o{constructor(){super(...arguments),this.xmlKeys={bwMode:"bwMode"};}}class je extends s{constructor(t){super("pic:spPr"),this.root.push(new He({bwMode:"auto"})),this.form=new Be(t),this.root.push(this.form),this.root.push(new ze);}}class Ke extends s{constructor(t,e){super("pic:pic"),this.root.push(new Ce({xmlns:"http://schemas.openxmlformats.org/drawingml/2006/picture"})),this.root.push(new Oe),this.root.push(new Te(t)),this.root.push(new je(e));}}class Ge extends s{constructor(t,e){super("a:graphicData"),this.root.push(new ye({uri:"http://schemas.openxmlformats.org/drawingml/2006/picture"})),this.pic=new Ke(t,e),this.root.push(this.pic);}}class We extends o{constructor(){super(...arguments),this.xmlKeys={a:"xmlns:a"};}}class Ve extends s{constructor(t,e){super("a:graphic"),this.root.push(new We({a:"http://schemas.openxmlformats.org/drawingml/2006/main"})),this.data=new Ge(t,e),this.root.push(this.data);}}!function(t){t[t.NONE=0]="NONE",t[t.SQUARE=1]="SQUARE",t[t.TIGHT=2]="TIGHT",t[t.TOP_AND_BOTTOM=3]="TOP_AND_BOTTOM";}(jt||(jt={})),function(t){t.BOTH_SIDES="bothSides",t.LEFT="left",t.RIGHT="right",t.LARGEST="largest";}(Kt||(Kt={}));class $e extends s{constructor(){super("wp:wrapNone");}}class Xe extends o{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB",distL:"distL",distR:"distR",wrapText:"wrapText"};}}class qe extends s{constructor(t,e={top:0,bottom:0,left:0,right:0}){super("wp:wrapSquare"),this.root.push(new Xe({wrapText:t.side||Kt.BOTH_SIDES,distT:e.top,distB:e.bottom,distL:e.left,distR:e.right}));}}class Ze extends o{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB"};}}class Ye extends s{constructor(t={top:0,bottom:0}){super("wp:wrapTight"),this.root.push(new Ze({distT:t.top,distB:t.bottom}));}}class Qe extends o{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB"};}}class Je extends s{constructor(t={top:0,bottom:0}){super("wp:wrapTopAndBottom"),this.root.push(new Qe({distT:t.top,distB:t.bottom}));}}class tr extends o{constructor(){super(...arguments),this.xmlKeys={id:"id",name:"name",descr:"descr"};}}class er extends s{constructor(){super("wp:docPr"),this.root.push(new tr({id:0,name:"",descr:""}));}}class rr extends o{constructor(){super(...arguments),this.xmlKeys={b:"b",l:"l",r:"r",t:"t"};}}class nr extends s{constructor(){super("wp:effectExtent"),this.root.push(new rr({b:0,l:0,r:0,t:0}));}}class sr extends o{constructor(){super(...arguments),this.xmlKeys={cx:"cx",cy:"cy"};}}class ir extends s{constructor(t,e){super("wp:extent"),this.attributes=new sr({cx:t,cy:e}),this.root.push(this.attributes);}}class or extends o{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns:a",noChangeAspect:"noChangeAspect"};}}class ar extends s{constructor(){super("a:graphicFrameLocks"),this.root.push(new or({xmlns:"http://schemas.openxmlformats.org/drawingml/2006/main",noChangeAspect:1}));}}class cr extends s{constructor(){super("wp:cNvGraphicFramePr"),this.root.push(new ar);}}class ur extends o{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB",distL:"distL",distR:"distR",allowOverlap:"allowOverlap",behindDoc:"behindDoc",layoutInCell:"layoutInCell",locked:"locked",relativeHeight:"relativeHeight",simplePos:"simplePos"};}}class lr extends s{constructor(t,e,r){super("wp:anchor");const n=Object.assign({allowOverlap:!0,behindDocument:!1,lockAnchor:!1,layoutInCell:!0,verticalPosition:{},horizontalPosition:{}},r.floating);if(this.root.push(new ur({distT:n.margins&&n.margins.top||0,distB:n.margins&&n.margins.bottom||0,distL:n.margins&&n.margins.left||0,distR:n.margins&&n.margins.right||0,simplePos:"0",allowOverlap:!0===n.allowOverlap?"1":"0",behindDoc:!0===n.behindDocument?"1":"0",locked:!0===n.lockAnchor?"1":"0",layoutInCell:!0===n.layoutInCell?"1":"0",relativeHeight:n.zIndex?n.zIndex:e.emus.y})),this.root.push(new he),this.root.push(new me(n.horizontalPosition)),this.root.push(new ge(n.verticalPosition)),this.root.push(new ir(e.emus.x,e.emus.y)),this.root.push(new nr),void 0!==r.floating&&void 0!==r.floating.wrap)switch(r.floating.wrap.type){case jt.SQUARE:this.root.push(new qe(r.floating.wrap,r.floating.margins));break;case jt.TIGHT:this.root.push(new Ye(r.floating.margins));break;case jt.TOP_AND_BOTTOM:this.root.push(new Je(r.floating.margins));break;case jt.NONE:default:this.root.push(new $e);}else this.root.push(new $e);this.root.push(new er),this.root.push(new cr),this.root.push(new Ve(t,e));}}class hr extends o{constructor(){super(...arguments),this.xmlKeys={distT:"distT",distB:"distB",distL:"distL",distR:"distR"};}}class pr extends s{constructor(t,e){super("wp:inline"),this.root.push(new hr({distT:0,distB:0,distL:0,distR:0})),this.extent=new ir(e.emus.x,e.emus.y),this.graphic=new Ve(t,e),this.root.push(this.extent),this.root.push(new nr),this.root.push(new er),this.root.push(new cr),this.root.push(this.graphic);}}class dr extends s{constructor(t,e={}){super("w:drawing"),e.floating?this.root.push(new lr(t,t.transformation,e)):(this.inline=new pr(t,t.transformation),this.root.push(this.inline));}}class fr extends Ot{constructor(t){super({}),this.key=`${Ut()}.png`;const e="string"==typeof t.data?this.convertDataURIToBinary(t.data):t.data;this.imageData={stream:e,fileName:this.key,transformation:{pixels:{x:Math.round(t.transformation.width),y:Math.round(t.transformation.height)},emus:{x:Math.round(9525*t.transformation.width),y:Math.round(9525*t.transformation.height)},flip:t.transformation.flip,rotation:t.transformation.rotation?6e4*t.transformation.rotation:void 0}};const r=new dr(this.imageData,{floating:t.floating});this.root.push(r);}prepForXml(t){return t.file.Media.addImage(this.key,this.imageData),super.prepForXml(t)}convertDataURIToBinary(t){const e=";base64,",n=t.indexOf(e)+e.length;return "function"==typeof atob?new Uint8Array(atob(t.substring(n)).split("").map((t=>t.charCodeAt(0)))):new(r(764).Buffer)(t,"base64")}}class mr extends o{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"};}}class wr extends s{constructor(t){super("w:instrText"),this.root.push(new mr({space:j.PRESERVE})),this.root.push(`SEQ ${t}`);}}class gr extends Ot{constructor(t){super({}),this.root.push(new nt(!0)),this.root.push(new wr(t)),this.root.push(new st),this.root.push(new it);}}class yr extends s{constructor(){super("w:tab");}}class br extends o{constructor(){super(...arguments),this.xmlKeys={instr:"w:instr"};}}class vr extends s{constructor(t,e){super("w:fldSimple"),this.root.push(new br({instr:t})),void 0!==e&&this.root.push(new Ct(e));}}class _r extends vr{constructor(t){super(` MERGEFIELD ${t} `,`«${t}»`);}}!function(t){t.COLUMN="column",t.PAGE="page";}(Gt||(Gt={}));class xr extends s{constructor(t){super("w:br"),this.root.push(new a({type:t}));}}class Er extends Ot{constructor(){super({}),this.root.push(new xr(Gt.PAGE));}}class Tr extends Ot{constructor(){super({}),this.root.push(new xr(Gt.COLUMN));}}class Ar extends s{constructor(){super("w:pageBreakBefore");}}!function(t){t.AT_LEAST="atLeast",t.EXACTLY="exactly",t.AUTO="auto";}(Wt||(Wt={}));class Sr extends o{constructor(){super(...arguments),this.xmlKeys={after:"w:after",before:"w:before",line:"w:line",lineRule:"w:lineRule"};}}class Rr extends s{constructor(t){super("w:spacing"),this.root.push(new Sr(t));}}!function(t){t.HEADING_1="Heading1",t.HEADING_2="Heading2",t.HEADING_3="Heading3",t.HEADING_4="Heading4",t.HEADING_5="Heading5",t.HEADING_6="Heading6",t.TITLE="Title";}(Vt||(Vt={}));class Ir extends s{constructor(t){super("w:pStyle"),this.root.push(new a({val:t}));}}class Nr extends s{constructor(t,e,r){super("w:tabs"),this.root.push(new Cr(t,e,r));}}!function(t){t.LEFT="left",t.RIGHT="right",t.CENTER="center",t.BAR="bar",t.CLEAR="clear",t.DECIMAL="decimal",t.END="end",t.NUM="num",t.START="start";}($t||($t={})),function(t){t.DOT="dot",t.HYPHEN="hyphen",t.MIDDLE_DOT="middleDot",t.NONE="none",t.UNDERSCORE="underscore";}(Xt||(Xt={})),function(t){t[t.MAX=9026]="MAX";}(qt||(qt={}));class Or extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val",pos:"w:pos",leader:"w:leader"};}}class Cr extends s{constructor(t,e,r){super("w:tab"),this.root.push(new Or({val:t,pos:e,leader:r}));}}class kr extends s{constructor(t,e){super("w:numPr"),this.root.push(new Dr(e)),this.root.push(new Lr(t));}}class Dr extends s{constructor(t){if(super("w:ilvl"),t>9)throw new Error("Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7");this.root.push(new a({val:t}));}}class Lr extends s{constructor(t){super("w:numId"),this.root.push(new a({val:"string"==typeof t?`{${t}}`:t}));}}class Pr extends o{constructor(){super(...arguments),this.xmlKeys={id:"Id",type:"Type",target:"Target",targetMode:"TargetMode"};}}!function(t){t.EXTERNAL="External";}(Zt||(Zt={}));class Fr extends s{constructor(t,e,r,n){super("Relationship"),this.root.push(new Pr({id:t,type:e,target:r,targetMode:n}));}}class Br extends o{constructor(){super(...arguments),this.xmlKeys={id:"r:id",history:"w:history",anchor:"w:anchor"};}}!function(t){t.INTERNAL="INTERNAL",t.EXTERNAL="EXTERNAL";}(Yt||(Yt={}));class Mr extends s{constructor(t,e,r){super("w:hyperlink"),this.linkId=e;const n={history:1,anchor:r||void 0,id:r?void 0:`rId${this.linkId}`},s=new Br(n);this.root.push(s),t.forEach((t=>{this.root.push(t);}));}}class Ur extends Mr{constructor(t){super(t.children,Ut(),t.anchor);}}class zr{constructor(t){this.options=t;}}class Hr extends o{constructor(){super(...arguments),this.xmlKeys={id:"w:id",name:"w:name"};}}class jr extends o{constructor(){super(...arguments),this.xmlKeys={id:"w:id"};}}class Kr{constructor(t){const e=Mt();this.start=new Gr(t.id,e),this.children=t.children,this.end=new Wr(e);}}class Gr extends s{constructor(t,e){super("w:bookmarkStart");const r=new Hr({name:t,id:e});this.root.push(r);}}class Wr extends s{constructor(t){super("w:bookmarkEnd");const e=new jr({id:t});this.root.push(e);}}class Vr extends s{constructor(t){super("w:outlineLvl"),this.level=t,this.root.push(new a({val:t}));}}class $r extends o{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"};}}class Xr extends s{constructor(t,e={}){super("w:instrText"),this.root.push(new $r({space:j.PRESERVE}));let r=`PAGEREF ${t}`;e.hyperlink&&(r=`${r} \\h`),e.useRelativePosition&&(r=`${r} \\p`),this.root.push(r);}}class qr extends Ot{constructor(t,e={}){super({children:[new nt(!0),new Xr(t,e),new it]});}}!function(t){t.BOTH="both",t.BOTTOM="bottom",t.CENTER="center",t.TOP="top";}(Qt||(Qt={}));class Zr extends o{constructor(){super(...arguments),this.xmlKeys={verticalAlign:"w:val"};}}class Yr extends s{constructor(t){super("w:vAlign"),this.root.push(new Zr({verticalAlign:t}));}}!function(t){t.DEFAULT="default",t.FIRST="first",t.EVEN="even";}(Jt||(Jt={}));class Qr extends o{constructor(){super(...arguments),this.xmlKeys={type:"w:type",id:"r:id"};}}!function(t){t.HEADER="w:headerReference",t.FOOTER="w:footerReference";}(te||(te={}));class Jr extends s{constructor(t,e){super(t),this.root.push(new Qr({type:e.type||Jt.DEFAULT,id:`rId${e.id}`}));}}class tn extends o{constructor(){super(...arguments),this.xmlKeys={space:"w:space",count:"w:num",separate:"w:sep",equalWidth:"w:equalWidth"};}}class en extends s{constructor({space:t,count:e,separate:r,equalWidth:n,children:s}){super("w:cols"),this.root.push(new tn({space:void 0===t?void 0:I(t),count:void 0===e?void 0:m(e),separate:r,equalWidth:n})),!n&&s&&s.forEach((t=>this.addChildElement(t)));}}!function(t){t.DEFAULT="default",t.LINES="lines",t.LINES_AND_CHARS="linesAndChars",t.SNAP_TO_CHARS="snapToChars";}(ee||(ee={}));class rn extends o{constructor(){super(...arguments),this.xmlKeys={type:"w:type",linePitch:"w:linePitch",charSpace:"w:charSpace"};}}class nn extends s{constructor(t,e,r){super("w:docGrid"),this.root.push(new rn({type:r,linePitch:m(t),charSpace:e?m(e):void 0}));}}!function(t){t.NEW_PAGE="newPage",t.NEW_SECTION="newSection",t.CONTINUOUS="continuous";}(re||(re={}));class sn extends o{constructor(){super(...arguments),this.xmlKeys={countBy:"w:countBy",start:"w:start",restart:"w:restart",distance:"w:distance"};}}class on extends s{constructor({countBy:t,start:e,restart:r,distance:n}){super("w:lnNumType"),this.root.push(new sn({countBy:void 0===t?void 0:m(t),start:void 0===e?void 0:m(e),restart:r,distance:void 0===n?void 0:I(n)}));}}!function(t){t.ALL_PAGES="allPages",t.FIRST_PAGE="firstPage",t.NOT_FIRST_PAGE="notFirstPage";}(ne||(ne={})),function(t){t.PAGE="page",t.TEXT="text";}(se||(se={})),function(t){t.BACK="back",t.FRONT="front";}(ie||(ie={}));class an extends o{constructor(){super(...arguments),this.xmlKeys={display:"w:display",offsetFrom:"w:offsetFrom",zOrder:"w:zOrder"};}}class cn extends i{constructor(t){super("w:pgBorders"),t&&(t.pageBorders?this.root.push(new an({display:t.pageBorders.display,offsetFrom:t.pageBorders.offsetFrom,zOrder:t.pageBorders.zOrder})):this.root.push(new an({})),t.pageBorderTop&&this.root.push(new q("w:top",t.pageBorderTop)),t.pageBorderLeft&&this.root.push(new q("w:left",t.pageBorderLeft)),t.pageBorderBottom&&this.root.push(new q("w:bottom",t.pageBorderBottom)),t.pageBorderRight&&this.root.push(new q("w:right",t.pageBorderRight)));}}class un extends o{constructor(){super(...arguments),this.xmlKeys={top:"w:top",right:"w:right",bottom:"w:bottom",left:"w:left",header:"w:header",footer:"w:footer",gutter:"w:gutter"};}}class ln extends s{constructor(t,e,r,n,s,i,o){super("w:pgMar"),this.root.push(new un({top:A(t),right:I(e),bottom:A(r),left:I(n),header:I(s),footer:I(i),gutter:I(o)}));}}!function(t){t.HYPHEN="hyphen",t.PERIOD="period",t.COLON="colon",t.EM_DASH="emDash",t.EN_DASH="endash";}(oe||(oe={}));class hn extends o{constructor(){super(...arguments),this.xmlKeys={start:"w:start",formatType:"w:fmt",separator:"w:chapSep"};}}class pn extends s{constructor({start:t,formatType:e,separator:r}){super("w:pgNumType"),this.root.push(new hn({start:void 0===t?void 0:m(t),formatType:e,separator:r}));}}!function(t){t.PORTRAIT="portrait",t.LANDSCAPE="landscape";}(ae||(ae={}));class dn extends o{constructor(){super(...arguments),this.xmlKeys={width:"w:w",height:"w:h",orientation:"w:orient"};}}class fn extends s{constructor(t,e,r){super("w:pgSz");const n=r===ae.LANDSCAPE,s=I(t),i=I(e);this.root.push(new dn({width:n?i:s,height:n?s:i,orientation:r}));}}!function(t){t.LEFT_TO_RIGHT_TOP_TO_BOTTOM="lrTb",t.TOP_TO_BOTTOM_RIGHT_TO_LEFT="tbRl";}(ce||(ce={}));class mn extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val"};}}class wn extends s{constructor(t){super("w:textDirection"),this.root.push(new mn({val:t}));}}!function(t){t.NEXT_PAGE="nextPage",t.NEXT_COLUMN="nextColumn",t.CONTINUOUS="continuous",t.EVEN_PAGE="evenPage",t.ODD_PAGE="oddPage";}(ue||(ue={}));class gn extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val"};}}class yn extends s{constructor(t){super("w:type"),this.root.push(new gn({val:t}));}}const bn={TOP:"1in",RIGHT:"1in",BOTTOM:"1in",LEFT:"1in",HEADER:708,FOOTER:708,GUTTER:0},vn={WIDTH:11906,HEIGHT:16838,ORIENTATION:ae.PORTRAIT};class _n extends s{constructor({page:{size:{width:t=vn.WIDTH,height:e=vn.HEIGHT,orientation:r=vn.ORIENTATION}={},margin:{top:n=bn.TOP,right:s=bn.RIGHT,bottom:i=bn.BOTTOM,left:o=bn.LEFT,header:a=bn.HEADER,footer:c=bn.FOOTER,gutter:u=bn.GUTTER}={},pageNumbers:l={},borders:h,textDirection:p}={},grid:{linePitch:d=360,charSpace:f,type:m}={},headerWrapperGroup:w={},footerWrapperGroup:g={},lineNumbers:y,titlePage:b,verticalAlign:v,column:_,type:x}={}){super("w:sectPr"),this.addHeaderFooterGroup(te.HEADER,w),this.addHeaderFooterGroup(te.FOOTER,g),x&&this.root.push(new yn(x)),this.root.push(new fn(t,e,r)),this.root.push(new ln(n,s,i,o,a,c,u)),h&&this.root.push(new cn(h)),y&&this.root.push(new on(y)),this.root.push(new pn(l)),_&&this.root.push(new en(_)),v&&this.root.push(new Yr(v)),void 0!==b&&this.root.push(new L("w:titlePg",b)),p&&this.root.push(new wn(p)),this.root.push(new nn(d,f,m));}addHeaderFooterGroup(t,e){e.default&&this.root.push(new Jr(t,{type:Jt.DEFAULT,id:e.default.View.ReferenceId})),e.first&&this.root.push(new Jr(t,{type:Jt.FIRST,id:e.first.View.ReferenceId})),e.even&&this.root.push(new Jr(t,{type:Jt.EVEN,id:e.even.View.ReferenceId}));}}class xn extends s{constructor(){super("w:body"),this.sections=[];}addSection(t){const e=this.sections.pop();this.root.push(this.createSectionParagraph(e)),this.sections.push(new _n(t));}prepForXml(t){return 1===this.sections.length&&(this.root.splice(0,1),this.root.push(this.sections.pop())),super.prepForXml(t)}push(t){this.root.push(t);}createSectionParagraph(t){const e=new Mn({}),r=new Bn({});return r.push(t),e.addChildElement(r),e}}class En extends o{constructor(){super(...arguments),this.xmlKeys={width:"w:w",space:"w:space"};}}class Tn extends s{constructor({width:t,space:e}){super("w:col"),this.root.push(new En({width:I(t),space:void 0===e?void 0:I(e)}));}}class An extends o{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type"};}}class Sn extends o{constructor(){super(...arguments),this.xmlKeys={color:"w:color",themeColor:"w:themeColor",themeShade:"w:themeShade",themeTint:"w:themeTint"};}}class Rn extends s{constructor(t){super("w:background"),this.root.push(new Sn({color:void 0===t.color?void 0:T(t.color),themeColor:t.themeColor,themeShade:void 0===t.themeShade?void 0:v(t.themeShade),themeTint:void 0===t.themeTint?void 0:v(t.themeTint)}));}}class In extends s{constructor(t){super("w:document"),this.root.push(new An({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.body=new xn,this.root.push(new Rn(t.background)),this.root.push(this.body);}add(t){return this.body.push(t),this}get Body(){return this.body}}class Nn extends o{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns"};}}class On extends s{constructor(){super("Relationships"),this.root.push(new Nn({xmlns:"http://schemas.openxmlformats.org/package/2006/relationships"}));}addRelationship(t){this.root.push(t);}createRelationship(t,e,r,n){const s=new Fr(`rId${t}`,e,r,n);return this.addRelationship(s),s}get RelationshipCount(){return this.root.length-1}}class Cn{constructor(t){this.document=new In(t),this.relationships=new On;}get View(){return this.document}get Relationships(){return this.relationships}}var kn,Dn,Ln;!function(t){t.NONE="none",t.DROP="drop",t.MARGIN="margin";}(kn||(kn={})),function(t){t.MARGIN="margin",t.PAGE="page",t.TEXT="text";}(Dn||(Dn={})),function(t){t.AROUND="around",t.AUTO="auto",t.NONE="none",t.NOT_BESIDE="notBeside",t.THROUGH="through",t.TIGHT="tight";}(Ln||(Ln={}));class Pn extends o{constructor(){super(...arguments),this.xmlKeys={anchorLock:"w:anchorLock",dropCap:"w:dropCap",width:"w:w",height:"w:h",x:"w:x",y:"w:y",anchorHorizontal:"w:hAnchor",anchorVertical:"w:vAnchor",spaceHorizontal:"w:hSpace",spaceVertical:"w:vSpace",rule:"w:hRule",alignmentX:"w:xAlign",alignmentY:"w:yAlign",lines:"w:lines",wrap:"w:wrap"};}}class Fn extends s{constructor(t){var e,r;super("w:framePr"),this.root.push(new Pn({anchorLock:t.anchorLock,dropCap:t.dropCap,width:t.width,height:t.height,x:t.position.x,y:t.position.y,anchorHorizontal:t.anchor.horizontal,anchorVertical:t.anchor.vertical,spaceHorizontal:null===(e=t.space)||void 0===e?void 0:e.horizontal,spaceVertical:null===(r=t.space)||void 0===r?void 0:r.vertical,rule:t.rule,alignmentX:t.alignment.x,alignmentY:t.alignment.y,lines:t.lines,wrap:t.wrap}));}}class Bn extends i{constructor(t){var e,r;if(super("w:pPr"),this.numberingReferences=[],!t)return this;if(t.heading&&this.push(new Ir(t.heading)),t.bullet&&this.push(new Ir("ListParagraph")),t.numbering&&(t.style||t.heading||t.numbering.custom||this.push(new Ir("ListParagraph"))),t.style&&this.push(new Ir(t.style)),void 0!==t.keepNext&&this.push(new L("w:keepNext",t.keepNext)),void 0!==t.keepLines&&this.push(new L("w:keepLines",t.keepLines)),t.pageBreakBefore&&this.push(new Ar),t.frame&&this.push(new Fn(t.frame)),void 0!==t.widowControl&&this.push(new L("w:widowControl",t.widowControl)),t.bullet&&this.push(new kr(1,t.bullet.level)),t.numbering&&(this.numberingReferences.push({reference:t.numbering.reference,instance:null!==(e=t.numbering.instance)&&void 0!==e?e:0}),this.push(new kr(`${t.numbering.reference}-${null!==(r=t.numbering.instance)&&void 0!==r?r:0}`,t.numbering.level))),t.border&&this.push(new Y(t.border)),t.thematicBreak&&this.push(new Q),t.shading&&this.push(new pt(t.shading)),t.rightTabStop&&this.push(new Nr($t.RIGHT,t.rightTabStop)),t.tabStops)for(const e of t.tabStops)this.push(new Nr(e.type,e.position,e.leader));t.leftTabStop&&this.push(new Nr($t.LEFT,t.leftTabStop)),void 0!==t.bidirectional&&this.push(new L("w:bidi",t.bidirectional)),t.spacing&&this.push(new Rr(t.spacing)),t.indent&&this.push(new tt(t.indent)),void 0!==t.contextualSpacing&&this.push(new L("w:contextualSpacing",t.contextualSpacing)),t.alignment&&this.push(new X(t.alignment)),void 0!==t.outlineLevel&&this.push(new Vr(t.outlineLevel)),void 0!==t.suppressLineNumbers&&this.push(new L("w:suppressLineNumbers",t.suppressLineNumbers));}push(t){this.root.push(t);}prepForXml(t){if(t.viewWrapper instanceof Cn)for(const e of this.numberingReferences)t.file.Numbering.createConcreteNumberingInstance(e.reference,e.instance);return super.prepForXml(t)}}class Mn extends s{constructor(t){if(super("w:p"),"string"==typeof t)return this.properties=new Bn({}),this.root.push(this.properties),this.root.push(new Ct(t)),this;if(this.properties=new Bn(t),this.root.push(this.properties),t.text&&this.root.push(new Ct(t.text)),t.children)for(const e of t.children)if(e instanceof Kr){this.root.push(e.start);for(const t of e.children)this.root.push(t);this.root.push(e.end);}else this.root.push(e);}prepForXml(t){for(const e of this.root)if(e instanceof zr){const r=this.root.indexOf(e),n=new Mr(e.options.children,Ut());t.viewWrapper.Relationships.createRelationship(n.linkId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",e.options.link,Zt.EXTERNAL),this.root[r]=n;}return super.prepForXml(t)}addRunToFront(t){return this.root.splice(1,0,t),this}}class Un extends s{constructor(t){super("m:oMath");for(const e of t.children)this.root.push(e);}}class zn extends s{constructor(t){super("m:t"),this.root.push(t);}}class Hn extends s{constructor(t){super("m:r"),this.root.push(new zn(t));}}class jn extends s{constructor(t){super("m:den");for(const e of t)this.root.push(e);}}class Kn extends s{constructor(t){super("m:num");for(const e of t)this.root.push(e);}}class Gn extends s{constructor(t){super("m:f"),this.root.push(new Kn(t.numerator)),this.root.push(new jn(t.denominator));}}class Wn extends o{constructor(){super(...arguments),this.xmlKeys={accent:"m:val"};}}class Vn extends s{constructor(t){super("m:chr"),this.root.push(new Wn({accent:t}));}}class $n extends s{constructor(t){super("m:e");for(const e of t)this.root.push(e);}}class Xn extends o{constructor(){super(...arguments),this.xmlKeys={value:"m:val"};}}class qn extends s{constructor(){super("m:limLoc"),this.root.push(new Xn({value:"undOvr"}));}}class Zn extends o{constructor(){super(...arguments),this.xmlKeys={hide:"m:val"};}}class Yn extends s{constructor(){super("m:subHide"),this.root.push(new Zn({hide:1}));}}class Qn extends o{constructor(){super(...arguments),this.xmlKeys={hide:"m:val"};}}class Jn extends s{constructor(){super("m:supHide"),this.root.push(new Qn({hide:1}));}}class ts extends s{constructor(t,e,r){super("m:naryPr"),this.root.push(new Vn(t)),this.root.push(new qn),e||this.root.push(new Jn),r||this.root.push(new Yn);}}class es extends s{constructor(t){super("m:sub");for(const e of t)this.root.push(e);}}class rs extends s{constructor(t){super("m:sup");for(const e of t)this.root.push(e);}}class ns extends s{constructor(t){super("m:nary"),this.root.push(new ts("∑",!!t.superScript,!!t.subScript)),t.subScript&&this.root.push(new es(t.subScript)),t.superScript&&this.root.push(new rs(t.superScript)),this.root.push(new $n(t.children));}}class ss extends s{constructor(){super("m:sSupPr");}}class is extends s{constructor(t){super("m:sSup"),this.root.push(new ss),this.root.push(new $n(t.children)),this.root.push(new rs(t.superScript));}}class os extends s{constructor(){super("m:sSubPr");}}class as extends s{constructor(t){super("m:sSub"),this.root.push(new os),this.root.push(new $n(t.children)),this.root.push(new es(t.subScript));}}class cs extends s{constructor(){super("m:sSubSupPr");}}class us extends s{constructor(t){super("m:sSubSup"),this.root.push(new cs),this.root.push(new $n(t.children)),this.root.push(new es(t.subScript)),this.root.push(new rs(t.superScript));}}class ls extends s{constructor(){super("m:sPrePr");}}class hs extends s{constructor(t){super("m:sPre"),this.root.push(new ls),this.root.push(new $n(t.children)),this.root.push(new es(t.subScript)),this.root.push(new rs(t.superScript));}}const ps="";class ds extends s{constructor(t){if(super("m:deg"),t)for(const e of t)this.root.push(e);}}class fs extends o{constructor(){super(...arguments),this.xmlKeys={hide:"m:val"};}}class ms extends s{constructor(){super("m:degHide"),this.root.push(new fs({hide:1}));}}class ws extends s{constructor(t){super("m:radPr"),t||this.root.push(new ms);}}class gs extends s{constructor(t){super("m:rad"),this.root.push(new ws(!!t.degree)),this.root.push(new ds(t.degree)),this.root.push(new $n(t.children));}}class ys extends s{constructor(t){super("m:fName");for(const e of t)this.root.push(e);}}class bs extends s{constructor(){super("m:funcPr");}}class vs extends s{constructor(t){super("m:func"),this.root.push(new bs),this.root.push(new ys(t.name)),this.root.push(new $n(t.children));}}class _s extends o{constructor(){super(...arguments),this.xmlKeys={character:"m:val"};}}class xs extends s{constructor(t){super("m:begChr"),this.root.push(new _s({character:t}));}}class Es extends o{constructor(){super(...arguments),this.xmlKeys={character:"m:val"};}}class Ts extends s{constructor(t){super("m:endChr"),this.root.push(new Es({character:t}));}}class As extends s{constructor(t){super("m:dPr"),t&&(this.root.push(new xs(t.beginningCharacter)),this.root.push(new Ts(t.endingCharacter)));}}class Ss extends s{constructor(t){super("m:d"),this.root.push(new As),this.root.push(new $n(t.children));}}class Rs extends s{constructor(t){super("m:d"),this.root.push(new As({beginningCharacter:"[",endingCharacter:"]"})),this.root.push(new $n(t.children));}}class Is extends s{constructor(t){super("m:d"),this.root.push(new As({beginningCharacter:"{",endingCharacter:"}"})),this.root.push(new $n(t.children));}}class Ns extends s{constructor(t){super("m:d"),this.root.push(new As({beginningCharacter:"〈",endingCharacter:"〉"})),this.root.push(new $n(t.children));}}class Os extends s{constructor(t){super("w:tblGrid");for(const e of t)this.root.push(new ks(e));}}class Cs extends o{constructor(){super(...arguments),this.xmlKeys={w:"w:w"};}}class ks extends s{constructor(t){super("w:gridCol"),void 0!==t&&this.root.push(new Cs({w:I(t)}));}}var Ds,Ls,Ps,Fs;!function(t){t.AUTO="auto",t.DXA="dxa",t.NIL="nil",t.PERCENTAGE="pct";}(Ds||(Ds={}));class Bs extends o{constructor(){super(...arguments),this.xmlKeys={type:"w:type",size:"w:w"};}}class Ms extends s{constructor(t,{type:e=Ds.AUTO,size:r}){super(t);let n=r;e===Ds.PERCENTAGE&&"number"==typeof r&&(n=`${r}%`),this.root.push(new Bs({type:e,size:O(n)}));}}!function(t){t.TABLE="w:tblCellMar",t.TABLE_CELL="w:tcMar";}(Ls||(Ls={}));class Us extends i{constructor(t,{marginUnitType:e=Ds.DXA,top:r,left:n,bottom:s,right:i}){super(t),void 0!==r&&this.root.push(new Ms("w:top",{type:e,size:r})),void 0!==n&&this.root.push(new Ms("w:left",{type:e,size:n})),void 0!==s&&this.root.push(new Ms("w:bottom",{type:e,size:s})),void 0!==i&&this.root.push(new Ms("w:right",{type:e,size:i}));}}class zs extends i{constructor(t){super("w:tcBorders"),t.top&&this.root.push(new q("w:top",t.top)),t.start&&this.root.push(new q("w:start",t.start)),t.left&&this.root.push(new q("w:left",t.left)),t.bottom&&this.root.push(new q("w:bottom",t.bottom)),t.end&&this.root.push(new q("w:end",t.end)),t.right&&this.root.push(new q("w:right",t.right));}}class Hs extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val"};}}class js extends s{constructor(t){super("w:gridSpan"),this.root.push(new Hs({val:m(t)}));}}!function(t){t.CONTINUE="continue",t.RESTART="restart";}(Ps||(Ps={}));class Ks extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val"};}}class Gs extends s{constructor(t){super("w:vMerge"),this.root.push(new Ks({val:t}));}}!function(t){t.BOTTOM_TO_TOP_LEFT_TO_RIGHT="btLr",t.LEFT_TO_RIGHT_TOP_TO_BOTTOM="lrTb",t.TOP_TO_BOTTOM_RIGHT_TO_LEFT="tbRl";}(Fs||(Fs={}));class Ws extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val"};}}class Vs extends s{constructor(t){super("w:textDirection"),this.root.push(new Ws({val:t}));}}class $s extends i{constructor(t){super("w:tcPr"),t.width&&this.root.push(new Ms("w:tcW",t.width)),t.columnSpan&&this.root.push(new js(t.columnSpan)),t.verticalMerge?this.root.push(new Gs(t.verticalMerge)):t.rowSpan&&t.rowSpan>1&&this.root.push(new Gs(Ps.RESTART)),t.borders&&this.root.push(new zs(t.borders)),t.shading&&this.root.push(new pt(t.shading)),t.margins&&this.root.push(new Us(Ls.TABLE_CELL,t.margins)),t.textDirection&&this.root.push(new Vs(t.textDirection)),t.verticalAlign&&this.root.push(new Yr(t.verticalAlign));}}class Xs extends s{constructor(t){super("w:tc"),this.options=t,this.root.push(new $s(t));for(const e of t.children)this.root.push(e);}prepForXml(t){return this.root[this.root.length-1]instanceof Mn||this.root.push(new Mn({})),super.prepForXml(t)}}const qs={style:z.NONE,size:0,color:"auto"},Zs={style:z.SINGLE,size:4,color:"auto"};class Ys extends s{constructor(t){super("w:tblBorders"),t.top?this.root.push(new q("w:top",t.top)):this.root.push(new q("w:top",Zs)),t.left?this.root.push(new q("w:left",t.left)):this.root.push(new q("w:left",Zs)),t.bottom?this.root.push(new q("w:bottom",t.bottom)):this.root.push(new q("w:bottom",Zs)),t.right?this.root.push(new q("w:right",t.right)):this.root.push(new q("w:right",Zs)),t.insideHorizontal?this.root.push(new q("w:insideH",t.insideHorizontal)):this.root.push(new q("w:insideH",Zs)),t.insideVertical?this.root.push(new q("w:insideV",t.insideVertical)):this.root.push(new q("w:insideV",Zs));}}var Qs;Ys.NONE={top:qs,bottom:qs,left:qs,right:qs,insideHorizontal:qs,insideVertical:qs},function(t){t.NEVER="never",t.OVERLAP="overlap";}(Qs||(Qs={}));class Js extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val"};}}class ti extends s{constructor(t){super("w:tblOverlap"),this.root.push(new Js({val:t}));}}var ei,ri,ni,si,ii,oi;!function(t){t.MARGIN="margin",t.PAGE="page",t.TEXT="text";}(ei||(ei={})),function(t){t.CENTER="center",t.INSIDE="inside",t.LEFT="left",t.OUTSIDE="outside",t.RIGHT="right";}(ri||(ri={})),function(t){t.CENTER="center",t.INSIDE="inside",t.BOTTOM="bottom",t.OUTSIDE="outside",t.INLINE="inline",t.TOP="top";}(ni||(ni={}));class ai extends o{constructor(){super(...arguments),this.xmlKeys={horizontalAnchor:"w:horzAnchor",verticalAnchor:"w:vertAnchor",absoluteHorizontalPosition:"w:tblpX",relativeHorizontalPosition:"w:tblpXSpec",absoluteVerticalPosition:"w:tblpY",relativeVerticalPosition:"w:tblpYSpec",bottomFromText:"w:bottomFromText",topFromText:"w:topFromText",leftFromText:"w:leftFromText",rightFromText:"w:rightFromText"};}}class ci extends s{constructor(t){var{leftFromText:e,rightFromText:r,topFromText:n,bottomFromText:s,absoluteHorizontalPosition:i,absoluteVerticalPosition:o}=t,a=function(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(t);s<n.length;s++)e.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(t,n[s])&&(r[n[s]]=t[n[s]]);}return r}(t,["leftFromText","rightFromText","topFromText","bottomFromText","absoluteHorizontalPosition","absoluteVerticalPosition"]);super("w:tblpPr"),this.root.push(new ai(Object.assign({leftFromText:void 0===e?void 0:I(e),rightFromText:void 0===r?void 0:I(r),topFromText:void 0===n?void 0:I(n),bottomFromText:void 0===s?void 0:I(s),absoluteHorizontalPosition:void 0===i?void 0:A(i),absoluteVerticalPosition:void 0===o?void 0:A(o)},a))),a.overlap&&this.root.push(new ti(a.overlap));}}!function(t){t.AUTOFIT="autofit",t.FIXED="fixed";}(si||(si={}));class ui extends o{constructor(){super(...arguments),this.xmlKeys={type:"w:type"};}}class li extends s{constructor(t){super("w:tblLayout"),this.root.push(new ui({type:t}));}}class hi extends i{constructor(t){super("w:tblPr"),t.style&&this.root.push(new F("w:tblStyle",t.style)),t.float&&this.root.push(new ci(t.float)),void 0!==t.visuallyRightToLeft&&this.root.push(new L("w:bidiVisual",t.visuallyRightToLeft)),t.width&&this.root.push(new Ms("w:tblW",t.width)),t.alignment&&this.root.push(new X(t.alignment)),t.indent&&this.root.push(new Ms("w:tblInd",t.indent)),t.borders&&this.root.push(new Ys(t.borders)),t.shading&&this.root.push(new pt(t.shading)),t.layout&&this.root.push(new li(t.layout)),t.cellMargin&&this.root.push(new Us(Ls.TABLE,t.cellMargin));}}class pi extends s{constructor({rows:t,width:e,columnWidths:r=Array(Math.max(...t.map((t=>t.CellCount)))).fill(100),margins:n,indent:s,float:i,layout:o,style:a,borders:c,alignment:u,visuallyRightToLeft:l}){super("w:tbl"),this.root.push(new hi({borders:null!=c?c:{},width:null!=e?e:{size:100},indent:s,float:i,layout:o,style:a,alignment:u,cellMargin:n,visuallyRightToLeft:l})),this.root.push(new Os(r));for(const e of t)this.root.push(e);t.forEach(((e,r)=>{if(r===t.length-1)return;let n=0;e.cells.forEach((e=>{if(e.options.rowSpan&&e.options.rowSpan>1){const s=new Xs({rowSpan:e.options.rowSpan-1,columnSpan:e.options.columnSpan,borders:e.options.borders,children:[],verticalMerge:Ps.CONTINUE});t[r+1].addCellToColumnIndex(s,n);}n+=e.options.columnSpan||1;}));}));}}!function(t){t.AUTO="auto",t.ATLEAST="atLeast",t.EXACT="exact";}(ii||(ii={}));class di extends o{constructor(){super(...arguments),this.xmlKeys={value:"w:val",rule:"w:hRule"};}}class fi extends s{constructor(t,e){super("w:trHeight"),this.root.push(new di({value:I(t),rule:e}));}}class mi extends i{constructor(t){super("w:trPr"),void 0!==t.cantSplit&&this.root.push(new L("w:cantSplit",t.cantSplit)),void 0!==t.tableHeader&&this.root.push(new L("w:tblHeader",t.tableHeader)),t.height&&this.root.push(new fi(t.height.value,t.height.rule));}}class wi extends s{constructor(t){super("w:tr"),this.options=t,this.root.push(new mi(t));for(const e of t.children)this.root.push(e);}get CellCount(){return this.options.children.length}get cells(){return this.root.filter((t=>t instanceof Xs))}addCellToIndex(t,e){this.root.splice(e+1,0,t);}addCellToColumnIndex(t,e){const r=this.columnIndexToRootIndex(e,!0);this.addCellToIndex(t,r-1);}rootIndexToColumnIndex(t){if(t<1||t>=this.root.length)throw new Error("cell 'rootIndex' should between 1 to "+(this.root.length-1));let e=0;for(let r=1;r<t;r++)e+=this.root[r].options.columnSpan||1;return e}columnIndexToRootIndex(t,e=!1){if(t<0)throw new Error("cell 'columnIndex' should not less than zero");let r=0,n=1;for(;r<=t;){if(n>=this.root.length){if(e)return this.root.length;throw new Error("cell 'columnIndex' should not great than "+(r-1))}const t=this.root[n];n+=1,r+=t&&t.options.columnSpan||1;}return n-1}}class gi extends o{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns",vt:"xmlns:vt"};}}class yi extends s{constructor(){super("Properties"),this.root.push(new gi({xmlns:"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes"}));}}class bi extends o{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns"};}}class vi extends o{constructor(){super(...arguments),this.xmlKeys={contentType:"ContentType",extension:"Extension"};}}class _i extends s{constructor(t,e){super("Default"),this.root.push(new vi({contentType:t,extension:e}));}}class xi extends o{constructor(){super(...arguments),this.xmlKeys={contentType:"ContentType",partName:"PartName"};}}class Ei extends s{constructor(t,e){super("Override"),this.root.push(new xi({contentType:t,partName:e}));}}class Ti extends s{constructor(){super("Types"),this.root.push(new bi({xmlns:"http://schemas.openxmlformats.org/package/2006/content-types"})),this.root.push(new _i("image/png","png")),this.root.push(new _i("image/jpeg","jpeg")),this.root.push(new _i("image/jpeg","jpg")),this.root.push(new _i("image/bmp","bmp")),this.root.push(new _i("image/gif","gif")),this.root.push(new _i("application/vnd.openxmlformats-package.relationships+xml","rels")),this.root.push(new _i("application/xml","xml")),this.root.push(new Ei("application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml","/word/document.xml")),this.root.push(new Ei("application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml","/word/styles.xml")),this.root.push(new Ei("application/vnd.openxmlformats-package.core-properties+xml","/docProps/core.xml")),this.root.push(new Ei("application/vnd.openxmlformats-officedocument.custom-properties+xml","/docProps/custom.xml")),this.root.push(new Ei("application/vnd.openxmlformats-officedocument.extended-properties+xml","/docProps/app.xml")),this.root.push(new Ei("application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml","/word/numbering.xml")),this.root.push(new Ei("application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml","/word/footnotes.xml")),this.root.push(new Ei("application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml","/word/settings.xml"));}addFooter(t){this.root.push(new Ei("application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml",`/word/footer${t}.xml`));}addHeader(t){this.root.push(new Ei("application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml",`/word/header${t}.xml`));}}class Ai extends s{constructor(t){super("cp:coreProperties"),this.root.push(new An({cp:"http://schemas.openxmlformats.org/package/2006/metadata/core-properties",dc:"http://purl.org/dc/elements/1.1/",dcterms:"http://purl.org/dc/terms/",dcmitype:"http://purl.org/dc/dcmitype/",xsi:"http://www.w3.org/2001/XMLSchema-instance"})),t.title&&this.root.push(new M("dc:title",t.title)),t.subject&&this.root.push(new M("dc:subject",t.subject)),t.creator&&this.root.push(new M("dc:creator",t.creator)),t.keywords&&this.root.push(new M("cp:keywords",t.keywords)),t.description&&this.root.push(new M("dc:description",t.description)),t.lastModifiedBy&&this.root.push(new M("cp:lastModifiedBy",t.lastModifiedBy)),t.revision&&this.root.push(new M("cp:revision",String(t.revision))),this.root.push(new Si("dcterms:created")),this.root.push(new Si("dcterms:modified"));}}class Si extends s{constructor(t){super(t),this.root.push(new An({type:"dcterms:W3CDTF"})),this.root.push(D(new Date));}}class Ri extends o{constructor(){super(...arguments),this.xmlKeys={xmlns:"xmlns",vt:"xmlns:vt"};}}class Ii extends o{constructor(){super(...arguments),this.xmlKeys={fmtid:"fmtid",pid:"pid",name:"name"};}}class Ni extends s{constructor(t,e){super("property"),this.root.push(new Ii({fmtid:"{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",pid:t.toString(),name:e.name})),this.root.push(new Oi(e.value));}}class Oi extends s{constructor(t){super("vt:lpwstr"),this.root.push(t);}}class Ci extends s{constructor(t){super("Properties"),this.properties=[],this.root.push(new Ri({xmlns:"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",vt:"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes"})),this.nextId=2;for(const e of t)this.addCustomProperty(e);}prepForXml(t){return this.properties.forEach((t=>this.root.push(t))),super.prepForXml(t)}addCustomProperty(t){this.properties.push(new Ni(this.nextId++,t));}}class ki extends o{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type"};}}class Di extends f{constructor(t,e){super("w:ftr",e),this.refId=t,e||this.root.push(new ki({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape"}));}get ReferenceId(){return this.refId}add(t){this.root.push(t);}}class Li{constructor(t,e,r){this.media=t,this.footer=new Di(e,r),this.relationships=new On;}add(t){this.footer.add(t);}addChildElement(t){this.footer.addChildElement(t);}get View(){return this.footer}get Relationships(){return this.relationships}get Media(){return this.media}}class Pi extends o{constructor(){super(...arguments),this.xmlKeys={type:"w:type",id:"w:id"};}}class Fi extends s{constructor(){super("w:footnoteRef");}}class Bi extends Ot{constructor(){super({style:"FootnoteReference"}),this.root.push(new Fi);}}!function(t){t.SEPERATOR="separator",t.CONTINUATION_SEPERATOR="continuationSeparator";}(oi||(oi={}));class Mi extends s{constructor(t){super("w:footnote"),this.root.push(new Pi({type:t.type,id:t.id}));for(let e=0;e<t.children.length;e++){const r=t.children[e];0===e&&r.addRunToFront(new Bi),this.root.push(r);}}}class Ui extends s{constructor(){super("w:continuationSeparator");}}class zi extends Ot{constructor(){super({}),this.root.push(new Ui);}}class Hi extends s{constructor(){super("w:separator");}}class ji extends Ot{constructor(){super({}),this.root.push(new Hi);}}class Ki extends o{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"};}}class Gi extends s{constructor(){super("w:footnotes"),this.root.push(new Ki({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"}));const t=new Mi({id:-1,type:oi.SEPERATOR,children:[new Mn({spacing:{after:0,line:240,lineRule:Wt.AUTO},children:[new ji]})]});this.root.push(t);const e=new Mi({id:0,type:oi.CONTINUATION_SEPERATOR,children:[new Mn({spacing:{after:0,line:240,lineRule:Wt.AUTO},children:[new zi]})]});this.root.push(e);}createFootNote(t,e){const r=new Mi({id:t,children:e});this.root.push(r);}}class Wi{constructor(){this.footnotess=new Gi,this.relationships=new On;}get View(){return this.footnotess}get Relationships(){return this.relationships}}class Vi extends o{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",cp:"xmlns:cp",dc:"xmlns:dc",dcterms:"xmlns:dcterms",dcmitype:"xmlns:dcmitype",xsi:"xmlns:xsi",type:"xsi:type",cx:"xmlns:cx",cx1:"xmlns:cx1",cx2:"xmlns:cx2",cx3:"xmlns:cx3",cx4:"xmlns:cx4",cx5:"xmlns:cx5",cx6:"xmlns:cx6",cx7:"xmlns:cx7",cx8:"xmlns:cx8",w16cid:"xmlns:w16cid",w16se:"xmlns:w16se"};}}class $i extends f{constructor(t,e){super("w:hdr",e),this.refId=t,e||this.root.push(new Vi({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",cx:"http://schemas.microsoft.com/office/drawing/2014/chartex",cx1:"http://schemas.microsoft.com/office/drawing/2015/9/8/chartex",cx2:"http://schemas.microsoft.com/office/drawing/2015/10/21/chartex",cx3:"http://schemas.microsoft.com/office/drawing/2016/5/9/chartex",cx4:"http://schemas.microsoft.com/office/drawing/2016/5/10/chartex",cx5:"http://schemas.microsoft.com/office/drawing/2016/5/11/chartex",cx6:"http://schemas.microsoft.com/office/drawing/2016/5/12/chartex",cx7:"http://schemas.microsoft.com/office/drawing/2016/5/13/chartex",cx8:"http://schemas.microsoft.com/office/drawing/2016/5/14/chartex",w16cid:"http://schemas.microsoft.com/office/word/2016/wordml/cid",w16se:"http://schemas.microsoft.com/office/word/2015/wordml/symex"}));}get ReferenceId(){return this.refId}add(t){this.root.push(t);}}class Xi{constructor(t,e,r){this.media=t,this.header=new $i(e,r),this.relationships=new On;}add(t){return this.header.add(t),this}addChildElement(t){this.header.addChildElement(t);}get View(){return this.header}get Relationships(){return this.relationships}get Media(){return this.media}}class qi{constructor(){this.map=new Map;}addMedia(t,e){const r=`${Ut()}.png`,n={stream:"string"==typeof t?this.convertDataURIToBinary(t):t,fileName:r,transformation:{pixels:{x:Math.round(e.width),y:Math.round(e.height)},emus:{x:Math.round(9525*e.width),y:Math.round(9525*e.height)},flip:e.flip,rotation:e.rotation?6e4*e.rotation:void 0}};return this.map.set(r,n),n}addImage(t,e){this.map.set(t,e);}get Array(){return Array.from(this.map.values())}convertDataURIToBinary(t){const e=";base64,",n=t.indexOf(e)+e.length;return "function"==typeof atob?new Uint8Array(atob(t.substring(n)).split("").map((t=>t.charCodeAt(0)))):new(r(764).Buffer)(t,"base64")}}const Zi="";var Yi,Qi;!function(t){t.BULLET="bullet",t.CARDINAL_TEXT="cardinalText",t.CHICAGO="chicago",t.DECIMAL="decimal",t.DECIMAL_ENCLOSED_CIRCLE="decimalEnclosedCircle",t.DECIMAL_ENCLOSED_FULLSTOP="decimalEnclosedFullstop",t.DECIMAL_ENCLOSED_PARENTHESES="decimalEnclosedParen",t.DECIMAL_ZERO="decimalZero",t.LOWER_LETTER="lowerLetter",t.LOWER_ROMAN="lowerRoman",t.NONE="none",t.ORDINAL_TEXT="ordinalText",t.UPPER_LETTER="upperLetter",t.UPPER_ROMAN="upperRoman";}(Yi||(Yi={}));class Ji extends o{constructor(){super(...arguments),this.xmlKeys={ilvl:"w:ilvl",tentative:"w15:tentative"};}}class to extends s{constructor(t){super("w:numFmt"),this.root.push(new a({val:t}));}}class eo extends s{constructor(t){super("w:lvlText"),this.root.push(new a({val:t}));}}class ro extends s{constructor(t){super("w:lvlJc"),this.root.push(new a({val:t}));}}!function(t){t.NOTHING="nothing",t.SPACE="space",t.TAB="tab";}(Qi||(Qi={}));class no extends s{constructor(t){super("w:suff"),this.root.push(new a({val:t}));}}class so extends s{constructor({level:t,format:e,text:r,alignment:n=U.START,start:s=1,style:i,suffix:o}){if(super("w:lvl"),this.root.push(new B("w:start",m(s))),e&&this.root.push(new to(e)),o&&this.root.push(new no(o)),r&&this.root.push(new eo(r)),this.root.push(new ro(n)),this.paragraphProperties=new Bn(i&&i.paragraph),this.runProperties=new St(i&&i.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties),t>9)throw new Error("Level cannot be greater than 9. Read more here: https://answers.microsoft.com/en-us/msoffice/forum/all/does-word-support-more-than-9-list-levels/d130fdcd-1781-446d-8c84-c6c79124e4d7");this.root.push(new Ji({ilvl:m(t),tentative:1}));}}class io extends so{constructor(t){super(t);}}class oo extends so{}class ao extends s{constructor(t){super("w:multiLevelType"),this.root.push(new a({val:t}));}}class co extends o{constructor(){super(...arguments),this.xmlKeys={abstractNumId:"w:abstractNumId",restartNumberingAfterBreak:"w15:restartNumberingAfterBreak"};}}class uo extends s{constructor(t,e){super("w:abstractNum"),this.root.push(new co({abstractNumId:m(t),restartNumberingAfterBreak:0})),this.root.push(new ao("hybridMultilevel")),this.id=t;for(const t of e)this.root.push(new io(t));}}class lo extends s{constructor(t){super("w:abstractNumId"),this.root.push(new a({val:t}));}}class ho extends o{constructor(){super(...arguments),this.xmlKeys={numId:"w:numId"};}}class po extends s{constructor(t){super("w:num"),this.numId=t.numId,this.reference=t.reference,this.instance=t.instance,this.root.push(new ho({numId:m(t.numId)})),this.root.push(new lo(m(t.abstractNumId))),t.overrideLevel&&this.root.push(new mo(t.overrideLevel.num,t.overrideLevel.start));}}class fo extends o{constructor(){super(...arguments),this.xmlKeys={ilvl:"w:ilvl"};}}class mo extends s{constructor(t,e){super("w:lvlOverride"),this.root.push(new fo({ilvl:t})),void 0!==e&&this.root.push(new go(e));}}class wo extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val"};}}class go extends s{constructor(t){super("w:startOverride"),this.root.push(new wo({val:t}));}}class yo extends s{constructor(t){super("w:numbering"),this.abstractNumberingMap=new Map,this.concreteNumberingMap=new Map,this.referenceConfigMap=new Map,this.root.push(new An({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"}));const e=new uo(Mt(),[{level:0,format:Yi.BULLET,text:"●",alignment:U.LEFT,style:{paragraph:{indent:{left:Bt(.5),hanging:Bt(.25)}}}},{level:1,format:Yi.BULLET,text:"○",alignment:U.LEFT,style:{paragraph:{indent:{left:Bt(1),hanging:Bt(.25)}}}},{level:2,format:Yi.BULLET,text:"■",alignment:U.LEFT,style:{paragraph:{indent:{left:2160,hanging:Bt(.25)}}}},{level:3,format:Yi.BULLET,text:"●",alignment:U.LEFT,style:{paragraph:{indent:{left:2880,hanging:Bt(.25)}}}},{level:4,format:Yi.BULLET,text:"○",alignment:U.LEFT,style:{paragraph:{indent:{left:3600,hanging:Bt(.25)}}}},{level:5,format:Yi.BULLET,text:"■",alignment:U.LEFT,style:{paragraph:{indent:{left:4320,hanging:Bt(.25)}}}},{level:6,format:Yi.BULLET,text:"●",alignment:U.LEFT,style:{paragraph:{indent:{left:5040,hanging:Bt(.25)}}}},{level:7,format:Yi.BULLET,text:"●",alignment:U.LEFT,style:{paragraph:{indent:{left:5760,hanging:Bt(.25)}}}},{level:8,format:Yi.BULLET,text:"●",alignment:U.LEFT,style:{paragraph:{indent:{left:6480,hanging:Bt(.25)}}}}]);this.concreteNumberingMap.set("default-bullet-numbering",new po({numId:1,abstractNumId:e.id,reference:"default-bullet-numbering",instance:0,overrideLevel:{num:0,start:1}})),this.abstractNumberingMap.set("default-bullet-numbering",e);for(const e of t.config)this.abstractNumberingMap.set(e.reference,new uo(Mt(),e.levels)),this.referenceConfigMap.set(e.reference,e.levels);}prepForXml(t){for(const t of this.abstractNumberingMap.values())this.root.push(t);for(const t of this.concreteNumberingMap.values())this.root.push(t);return super.prepForXml(t)}createConcreteNumberingInstance(t,e){const r=this.abstractNumberingMap.get(t);if(!r)return;const n=`${t}-${e}`;if(this.concreteNumberingMap.has(n))return;const s={numId:Mt(),abstractNumId:r.id,reference:t,instance:e,overrideLevel:{num:0,start:1}},i=this.referenceConfigMap.get(t),o=i&&i[0].start;o&&Number.isInteger(o)&&(s.overrideLevel={num:0,start:o}),this.concreteNumberingMap.set(n,new po(s));}get ConcreteNumbering(){return Array.from(this.concreteNumberingMap.values())}get ReferenceConfig(){return Array.from(this.referenceConfigMap.values())}}class bo extends o{constructor(){super(...arguments),this.xmlKeys={version:"w:val",name:"w:name",uri:"w:uri"};}}class vo extends s{constructor(t){super("w:compatSetting"),this.root.push(new bo({version:t,uri:"http://schemas.microsoft.com/office/word",name:"compatibilityMode"}));}}class _o extends s{constructor(t){super("w:compat"),void 0!==t.doNotExpandShiftReturn&&this.root.push(new L("w:doNotExpandShiftReturn",t.doNotExpandShiftReturn)),t.version&&this.root.push(new vo(t.version));}}class xo extends o{constructor(){super(...arguments),this.xmlKeys={wpc:"xmlns:wpc",mc:"xmlns:mc",o:"xmlns:o",r:"xmlns:r",m:"xmlns:m",v:"xmlns:v",wp14:"xmlns:wp14",wp:"xmlns:wp",w10:"xmlns:w10",w:"xmlns:w",w14:"xmlns:w14",w15:"xmlns:w15",wpg:"xmlns:wpg",wpi:"xmlns:wpi",wne:"xmlns:wne",wps:"xmlns:wps",Ignorable:"mc:Ignorable"};}}class Eo extends s{constructor(t){super("w:settings"),this.root.push(new xo({wpc:"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",o:"urn:schemas-microsoft-com:office:office",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",m:"http://schemas.openxmlformats.org/officeDocument/2006/math",v:"urn:schemas-microsoft-com:vml",wp14:"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",wp:"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",w10:"urn:schemas-microsoft-com:office:word",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",wpg:"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",wpi:"http://schemas.microsoft.com/office/word/2010/wordprocessingInk",wne:"http://schemas.microsoft.com/office/word/2006/wordml",wps:"http://schemas.microsoft.com/office/word/2010/wordprocessingShape",Ignorable:"w14 w15 wp14"})),this.root.push(new L("w:displayBackgroundShape",!0)),void 0!==t.trackRevisions&&this.root.push(new L("w:trackRevisions",t.trackRevisions)),void 0!==t.evenAndOddHeaders&&this.root.push(new L("w:evenAndOddHeaders",t.evenAndOddHeaders)),void 0!==t.updateFields&&this.root.push(new L("w:updateFields",t.updateFields)),this.root.push(new _o({version:t.compatabilityModeVersion||15}));}}class To extends o{constructor(){super(...arguments),this.xmlKeys={val:"w:val"};}}class Ao extends s{constructor(t){super("w:name"),this.root.push(new To({val:t}));}}class So extends s{constructor(t){super("w:uiPriority"),this.root.push(new To({val:m(t)}));}}class Ro extends o{constructor(){super(...arguments),this.xmlKeys={type:"w:type",styleId:"w:styleId",default:"w:default",customStyle:"w:customStyle"};}}class Io extends s{constructor(t,e){super("w:style"),this.root.push(new Ro(t)),e.name&&this.root.push(new Ao(e.name)),e.basedOn&&this.root.push(new F("w:basedOn",e.basedOn)),e.next&&this.root.push(new F("w:next",e.next)),e.link&&this.root.push(new F("w:link",e.link)),void 0!==e.uiPriority&&this.root.push(new So(e.uiPriority)),void 0!==e.semiHidden&&this.root.push(new L("w:semiHidden",e.semiHidden)),void 0!==e.unhideWhenUsed&&this.root.push(new L("w:unhideWhenUsed",e.unhideWhenUsed)),void 0!==e.quickFormat&&this.root.push(new L("w:qFormat",e.quickFormat));}}class No extends Io{constructor(t){super({type:"paragraph",styleId:t.id},t),this.paragraphProperties=new Bn(t.paragraph),this.runProperties=new St(t.run),this.root.push(this.paragraphProperties),this.root.push(this.runProperties);}}class Oo extends Io{constructor(t){super({type:"character",styleId:t.id},Object.assign({uiPriority:99,unhideWhenUsed:!0},t)),this.runProperties=new St(t.run),this.root.push(this.runProperties);}}class Co extends No{constructor(t){super(Object.assign(Object.assign({},t),{basedOn:"Normal",next:"Normal",quickFormat:!0}));}}class ko extends Co{constructor(t){super(Object.assign(Object.assign({},t),{id:"Title",name:"Title"}));}}class Do extends Co{constructor(t){super(Object.assign(Object.assign({},t),{id:"Heading1",name:"Heading 1"}));}}class Lo extends Co{constructor(t){super(Object.assign(Object.assign({},t),{id:"Heading2",name:"Heading 2"}));}}class Po extends Co{constructor(t){super(Object.assign(Object.assign({},t),{id:"Heading3",name:"Heading 3"}));}}class Fo extends Co{constructor(t){super(Object.assign(Object.assign({},t),{id:"Heading4",name:"Heading 4"}));}}class Bo extends Co{constructor(t){super(Object.assign(Object.assign({},t),{id:"Heading5",name:"Heading 5"}));}}class Mo extends Co{constructor(t){super(Object.assign(Object.assign({},t),{id:"Heading6",name:"Heading 6"}));}}class Uo extends Co{constructor(t){super(Object.assign(Object.assign({},t),{id:"Strong",name:"Strong"}));}}class zo extends No{constructor(t){super(Object.assign(Object.assign({},t),{id:"ListParagraph",name:"List Paragraph",basedOn:"Normal",quickFormat:!0}));}}class Ho extends No{constructor(t){super(Object.assign(Object.assign({},t),{id:"FootnoteText",name:"footnote text",link:"FootnoteTextChar",basedOn:"Normal",uiPriority:99,semiHidden:!0,unhideWhenUsed:!0,paragraph:{spacing:{after:0,line:240,lineRule:Wt.AUTO}},run:{size:20}}));}}class jo extends Oo{constructor(t){super(Object.assign(Object.assign({},t),{id:"FootnoteReference",name:"footnote reference",basedOn:"DefaultParagraphFont",semiHidden:!0,run:{superScript:!0}}));}}class Ko extends Oo{constructor(t){super(Object.assign(Object.assign({},t),{id:"FootnoteTextChar",name:"Footnote Text Char",basedOn:"DefaultParagraphFont",link:"FootnoteText",semiHidden:!0,run:{size:20}}));}}class Go extends Oo{constructor(t){super(Object.assign(Object.assign({},t),{id:"Hyperlink",name:"Hyperlink",basedOn:"DefaultParagraphFont",run:{color:"0563C1",underline:{type:W.SINGLE}}}));}}class Wo extends s{constructor(t){if(super("w:styles"),t.initialStyles&&this.root.push(t.initialStyles),t.importedStyles)for(const e of t.importedStyles)this.root.push(e);if(t.paragraphStyles)for(const e of t.paragraphStyles)this.root.push(new No(e));if(t.characterStyles)for(const e of t.characterStyles)this.root.push(new Oo(e));}}class Vo extends s{constructor(t){super("w:pPrDefault"),this.root.push(new Bn(t));}}class $o extends s{constructor(t){super("w:rPrDefault"),this.root.push(new St(t));}}class Xo extends s{constructor(t){super("w:docDefaults"),this.runPropertiesDefaults=new $o(t.run),this.paragraphPropertiesDefaults=new Vo(t.paragraph),this.root.push(this.runPropertiesDefaults),this.root.push(this.paragraphPropertiesDefaults);}}class qo{newInstance(t){const e=(0, c.xml2js)(t,{compact:!1});let r;for(const t of e.elements||[])"w:styles"===t.name&&(r=t);if(void 0===r)throw new Error("can not find styles element");const n=r.elements||[];return new Wo({initialStyles:new p(r.attributes),importedStyles:n.map((t=>u(t)))})}}class Zo{newInstance(t={}){var e;return {initialStyles:new An({mc:"http://schemas.openxmlformats.org/markup-compatibility/2006",r:"http://schemas.openxmlformats.org/officeDocument/2006/relationships",w:"http://schemas.openxmlformats.org/wordprocessingml/2006/main",w14:"http://schemas.microsoft.com/office/word/2010/wordml",w15:"http://schemas.microsoft.com/office/word/2012/wordml",Ignorable:"w14 w15"}),importedStyles:[new Xo(null!==(e=t.document)&&void 0!==e?e:{}),new ko(Object.assign({run:{size:56}},t.title)),new Do(Object.assign({run:{color:"2E74B5",size:32}},t.heading1)),new Lo(Object.assign({run:{color:"2E74B5",size:26}},t.heading2)),new Po(Object.assign({run:{color:"1F4D78",size:24}},t.heading3)),new Fo(Object.assign({run:{color:"2E74B5",italics:!0}},t.heading4)),new Bo(Object.assign({run:{color:"2E74B5"}},t.heading5)),new Mo(Object.assign({run:{color:"1F4D78"}},t.heading6)),new Uo(Object.assign({run:{bold:!0}},t.strong)),new zo(t.listParagraph||{}),new Go(t.hyperlink||{}),new jo(t.footnoteReference||{}),new Ho(t.footnoteText||{}),new Ko(t.footnoteTextChar||{})]}}}class Yo{constructor(t,e={}){var r,n,s,i,o,a;if(this.currentRelationshipId=1,this.headers=[],this.footers=[],this.coreProperties=new Ai(Object.assign(Object.assign({},t),{creator:null!==(r=t.creator)&&void 0!==r?r:"Un-named",revision:null!==(n=t.revision)&&void 0!==n?n:1,lastModifiedBy:null!==(s=t.lastModifiedBy)&&void 0!==s?s:"Un-named"})),this.numbering=new yo(t.numbering?t.numbering:{config:[]}),this.fileRelationships=new On,this.customProperties=new Ci(null!==(i=t.customProperties)&&void 0!==i?i:[]),this.appProperties=new yi,this.footnotesWrapper=new Wi,this.contentTypes=new Ti,this.documentWrapper=new Cn({background:t.background||{}}),this.settings=new Eo({compatabilityModeVersion:t.compatabilityModeVersion,evenAndOddHeaders:!!t.evenAndOddHeaderAndFooters,trackRevisions:null===(o=t.features)||void 0===o?void 0:o.trackRevisions,updateFields:null===(a=t.features)||void 0===a?void 0:a.updateFields}),this.media=e.template&&e.template.media?e.template.media:new qi,e.template&&(this.currentRelationshipId=e.template.currentRelationshipId+1),e.template&&t.externalStyles)throw Error("can not use both template and external styles");if(e.template){const t=new qo;this.styles=t.newInstance(e.template.styles);}else if(t.externalStyles){const e=new qo;this.styles=e.newInstance(t.externalStyles);}else if(t.styles){const e=(new Zo).newInstance(t.styles.default);this.styles=new Wo(Object.assign(Object.assign({},e),t.styles));}else {const t=new Zo;this.styles=new Wo(t.newInstance());}if(this.addDefaultRelationships(),e.template&&e.template.headers)for(const t of e.template.headers)this.addHeaderToDocument(t.header,t.type);if(e.template&&e.template.footers)for(const t of e.template.footers)this.addFooterToDocument(t.footer,t.type);for(const e of t.sections)this.addSection(e);if(t.footnotes)for(const e in t.footnotes)this.footnotesWrapper.View.createFootNote(parseFloat(e),t.footnotes[e].children);}addSection({headers:t={},footers:e={},children:r,properties:n}){this.documentWrapper.View.Body.addSection(Object.assign(Object.assign({},n),{headerWrapperGroup:{default:t.default?this.createHeader(t.default):void 0,first:t.first?this.createHeader(t.first):void 0,even:t.even?this.createHeader(t.even):void 0},footerWrapperGroup:{default:e.default?this.createFooter(e.default):void 0,first:e.first?this.createFooter(e.first):void 0,even:e.even?this.createFooter(e.even):void 0}}));for(const t of r)this.documentWrapper.View.add(t);}createHeader(t){const e=new Xi(this.media,this.currentRelationshipId++);for(const r of t.options.children)e.add(r);return this.addHeaderToDocument(e),e}createFooter(t){const e=new Li(this.media,this.currentRelationshipId++);for(const r of t.options.children)e.add(r);return this.addFooterToDocument(e),e}addHeaderToDocument(t,e=Jt.DEFAULT){this.headers.push({header:t,type:e}),this.documentWrapper.Relationships.createRelationship(t.View.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header",`header${this.headers.length}.xml`),this.contentTypes.addHeader(this.headers.length);}addFooterToDocument(t,e=Jt.DEFAULT){this.footers.push({footer:t,type:e}),this.documentWrapper.Relationships.createRelationship(t.View.ReferenceId,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer",`footer${this.footers.length}.xml`),this.contentTypes.addFooter(this.footers.length);}addDefaultRelationships(){this.fileRelationships.createRelationship(1,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument","word/document.xml"),this.fileRelationships.createRelationship(2,"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties","docProps/core.xml"),this.fileRelationships.createRelationship(3,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties","docProps/app.xml"),this.fileRelationships.createRelationship(4,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties","docProps/custom.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles","styles.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering","numbering.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes","footnotes.xml"),this.documentWrapper.Relationships.createRelationship(this.currentRelationshipId++,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings","settings.xml");}get Document(){return this.documentWrapper}get Styles(){return this.styles}get CoreProperties(){return this.coreProperties}get Numbering(){return this.numbering}get Media(){return this.media}get FileRelationships(){return this.fileRelationships}get Headers(){return this.headers.map((t=>t.header))}get Footers(){return this.footers.map((t=>t.footer))}get ContentTypes(){return this.contentTypes}get CustomProperties(){return this.customProperties}get AppProperties(){return this.appProperties}get FootNotes(){return this.footnotesWrapper}get Settings(){return this.settings}}const Qo="";class Jo extends o{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"};}}class ta extends s{constructor(t={}){super("w:instrText"),this.properties=t,this.root.push(new Jo({space:j.PRESERVE}));let e="TOC";this.properties.captionLabel&&(e=`${e} \\a "${this.properties.captionLabel}"`),this.properties.entriesFromBookmark&&(e=`${e} \\b "${this.properties.entriesFromBookmark}"`),this.properties.captionLabelIncludingNumbers&&(e=`${e} \\c "${this.properties.captionLabelIncludingNumbers}"`),this.properties.sequenceAndPageNumbersSeparator&&(e=`${e} \\d "${this.properties.sequenceAndPageNumbersSeparator}"`),this.properties.tcFieldIdentifier&&(e=`${e} \\f "${this.properties.tcFieldIdentifier}"`),this.properties.hyperlink&&(e=`${e} \\h`),this.properties.tcFieldLevelRange&&(e=`${e} \\l "${this.properties.tcFieldLevelRange}"`),this.properties.pageNumbersEntryLevelsRange&&(e=`${e} \\n "${this.properties.pageNumbersEntryLevelsRange}"`),this.properties.headingStyleRange&&(e=`${e} \\o "${this.properties.headingStyleRange}"`),this.properties.entryAndPageNumberSeparator&&(e=`${e} \\p "${this.properties.entryAndPageNumberSeparator}"`),this.properties.seqFieldIdentifierForPrefix&&(e=`${e} \\s "${this.properties.seqFieldIdentifierForPrefix}"`),this.properties.stylesWithLevels&&this.properties.stylesWithLevels.length&&(e=`${e} \\t "${this.properties.stylesWithLevels.map((t=>`${t.styleName},${t.level}`)).join(",")}"`),this.properties.useAppliedParagraphOutlineLevel&&(e=`${e} \\u`),this.properties.preserveTabInEntries&&(e=`${e} \\w`),this.properties.preserveNewLineInEntries&&(e=`${e} \\x`),this.properties.hideTabAndPageNumbersInWebView&&(e=`${e} \\z`),this.root.push(e);}}class ea extends s{constructor(){super("w:sdtContent");}}class ra extends o{constructor(){super(...arguments),this.xmlKeys={alias:"w:val"};}}class na extends s{constructor(t){super("w:alias"),this.root.push(new ra({alias:t}));}}class sa extends s{constructor(t){super("w:sdtPr"),this.root.push(new na(t));}}class ia extends s{constructor(t="Table of Contents",e){super("w:sdt"),this.root.push(new sa(t));const r=new ea,n=new Mn({children:[new Ot({children:[new nt(!0),new ta(e),new st]})]});r.addChildElement(n);const s=new Mn({children:[new Ot({children:[new it]})]});r.addChildElement(s),this.root.push(r);}}class oa{constructor(t,e){this.styleName=t,this.level=e;}}class aa{constructor(t={children:[]}){this.options=t;}}class ca{constructor(t={children:[]}){this.options=t;}}class ua extends o{constructor(){super(...arguments),this.xmlKeys={id:"w:id"};}}class la extends s{constructor(t){super("w:footnoteReference"),this.root.push(new ua({id:t}));}}class ha extends Ot{constructor(t){super({style:"FootnoteReference"}),this.root.push(new la(t));}}class pa extends s{constructor(t){super("w:ins"),this.root.push(new lt({id:t.id,author:t.author,date:t.date})),this.addChildElement(new Ct(t));}}class da extends o{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"};}}class fa extends s{constructor(){super("w:delInstrText"),this.root.push(new da({space:j.PRESERVE})),this.root.push("PAGE");}}class ma extends s{constructor(){super("w:delInstrText"),this.root.push(new da({space:j.PRESERVE})),this.root.push("NUMPAGES");}}class wa extends s{constructor(){super("w:delInstrText"),this.root.push(new da({space:j.PRESERVE})),this.root.push("SECTIONPAGES");}}class ga extends o{constructor(){super(...arguments),this.xmlKeys={space:"xml:space"};}}class ya extends s{constructor(t){super("w:delText"),this.root.push(new ga({space:j.PRESERVE})),this.root.push(t);}}class ba extends s{constructor(t){super("w:del"),this.root.push(new lt({id:t.id,author:t.author,date:t.date})),this.deletedTextRunWrapper=new va(t),this.addChildElement(this.deletedTextRunWrapper);}}class va extends s{constructor(t){if(super("w:r"),this.root.push(new St(t)),t.children)for(const e of t.children)if("string"!=typeof e)this.root.push(e);else switch(e){case V.CURRENT:this.root.push(new nt),this.root.push(new fa),this.root.push(new st),this.root.push(new it);break;case V.TOTAL_PAGES:this.root.push(new nt),this.root.push(new ma),this.root.push(new st),this.root.push(new it);break;case V.TOTAL_PAGES_IN_SECTION:this.root.push(new nt),this.root.push(new wa),this.root.push(new st),this.root.push(new it);break;default:this.root.push(new ya(e));}else t.text&&this.root.push(new ya(t.text));if(t.break)for(let e=0;e<t.break;e++)this.root.splice(1,0,new et);}}var _a,xa,Ea;!function(t){t.CENTER="center",t.INSIDE="inside",t.LEFT="left",t.OUTSIDE="outside",t.RIGHT="right";}(_a||(_a={})),function(t){t.BOTTOM="bottom",t.CENTER="center",t.INSIDE="inside",t.OUTSIDE="outside",t.TOP="top";}(xa||(xa={})),function(t){t.DECIMAL="decimal",t.UPPER_ROMAN="upperRoman",t.LOWER_ROMAN="lowerRoman",t.UPPER_LETTER="upperLetter",t.LOWER_LETTER="lowerLetter",t.ORDINAL="ordinal",t.CARDINAL_TEXT="cardinalText",t.ORDINAL_TEXT="ordinalText",t.HEX="hex",t.CHICAGO="chicago",t.IDEOGRAPH_DIGITAL="ideographDigital",t.JAPANESE_COUNTING="japaneseCounting",t.AIUEO="aiueo",t.IROHA="iroha",t.DECIMAL_FULL_WIDTH="decimalFullWidth",t.DECIMAL_HALF_WIDTH="decimalHalfWidth",t.JAPANESE_LEGAL="japaneseLegal",t.JAPANESE_DIGITAL_TEN_THOUSAND="japaneseDigitalTenThousand",t.DECIMAL_ENCLOSED_CIRCLE="decimalEnclosedCircle",t.DECIMAL_FULL_WIDTH_2="decimalFullWidth2",t.AIUEO_FULL_WIDTH="aiueoFullWidth",t.IROHA_FULL_WIDTH="irohaFullWidth",t.DECIMAL_ZERO="decimalZero",t.BULLET="bullet",t.GANADA="ganada",t.CHOSUNG="chosung",t.DECIMAL_ENCLOSED_FULL_STOP="decimalEnclosedFullstop",t.DECIMAL_ENCLOSED_PAREN="decimalEnclosedParen",t.DECIMAL_ENCLOSED_CIRCLE_CHINESE="decimalEnclosedCircleChinese",t.IDEOGRAPH_ENCLOSED_CIRCLE="ideographEnclosedCircle",t.IDEOGRAPH_TRADITIONAL="ideographTraditional",t.IDEOGRAPH_ZODIAC="ideographZodiac",t.IDEOGRAPH_ZODIAC_TRADITIONAL="ideographZodiacTraditional",t.TAIWANESE_COUNTING="taiwaneseCounting",t.IDEOGRAPH_LEGAL_TRADITIONAL="ideographLegalTraditional",t.TAIWANESE_COUNTING_THOUSAND="taiwaneseCountingThousand",t.TAIWANESE_DIGITAL="taiwaneseDigital",t.CHINESE_COUNTING="chineseCounting",t.CHINESE_LEGAL_SIMPLIFIED="chineseLegalSimplified",t.CHINESE_COUNTING_TEN_THOUSAND="chineseCountingThousand",t.KOREAN_DIGITAL="koreanDigital",t.KOREAN_COUNTING="koreanCounting",t.KOREAN_LEGAL="koreanLegal",t.KOREAN_DIGITAL_2="koreanDigital2",t.VIETNAMESE_COUNTING="vietnameseCounting",t.RUSSIAN_LOWER="russianLower",t.RUSSIAN_UPPER="russianUpper",t.NONE="none",t.NUMBER_IN_DASH="numberInDash",t.HEBREW_1="hebrew1",t.HEBREW_2="hebrew2",t.ARABIC_ALPHA="arabicAlpha",t.ARABIC_ABJAD="arabicAbjad",t.HINDI_VOWELS="hindiVowels",t.HINDI_CONSONANTS="hindiConsonants",t.HINDI_NUMBERS="hindiNumbers",t.HINDI_COUNTING="hindiCounting",t.THAI_LETTERS="thaiLetters",t.THAI_NUMBERS="thaiNumbers",t.THAI_COUNTING="thaiCounting",t.BAHT_TEXT="bahtText",t.DOLLAR_TEXT="dollarText";}(Ea||(Ea={}));var Ta=r(733),Aa=r(479);class Sa{format(t,e={}){const r=t.prepForXml(e);if(r)return r;throw Error("XMLComponent did not format correctly")}}class Ra{replace(t,e,r){let n=t;return e.forEach(((t,e)=>{n=n.replace(new RegExp(`{${t.fileName}}`,"g"),(r+e).toString());})),n}getMediaData(t,e){return e.Array.filter((e=>t.search(`{${e.fileName}}`)>0))}}class Ia{replace(t,e){let r=t;for(const t of e)r=r.replace(new RegExp(`{${t.reference}-${t.instance}}`,"g"),t.numId.toString());return r}}var Na=function(t,e,r,n){return new(r||(r=Promise))((function(s,i){function o(t){try{c(n.next(t));}catch(t){i(t);}}function a(t){try{c(n.throw(t));}catch(t){i(t);}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e);}))).then(o,a);}c((n=n.apply(t,e||[])).next());}))};class Oa{static toBuffer(t,e){return Na(this,void 0,void 0,(function*(){const r=this.compiler.compile(t,e);return yield r.generateAsync({type:"nodebuffer",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBase64String(t,e){return Na(this,void 0,void 0,(function*(){const r=this.compiler.compile(t,e);return yield r.generateAsync({type:"base64",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}static toBlob(t,e){return Na(this,void 0,void 0,(function*(){const r=this.compiler.compile(t,e);return yield r.generateAsync({type:"blob",mimeType:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",compression:"DEFLATE"})}))}}Oa.compiler=new class{constructor(){this.formatter=new Sa,this.imageReplacer=new Ra,this.numberingReplacer=new Ia;}compile(t,e){const r=new Ta,n=this.xmlifyFile(t,e),s=new Map(Object.entries(n));for(const[,t]of s)if(Array.isArray(t))for(const e of t)r.file(e.path,e.data);else r.file(t.path,t.data);for(const e of t.Media.Array){const t=e.stream;r.file(`word/media/${e.fileName}`,t);}return r}xmlifyFile(t,e){const r=t.Document.Relationships.RelationshipCount+1,n=Aa(this.formatter.format(t.Document.View,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{standalone:"yes",encoding:"UTF-8"}}),s=this.imageReplacer.getMediaData(n,t.Media);return {Relationships:{data:(()=>(s.forEach(((e,n)=>{t.Document.Relationships.createRelationship(r+n,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${e.fileName}`);})),Aa(this.formatter.format(t.Document.Relationships,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{encoding:"UTF-8"}})))(),path:"word/_rels/document.xml.rels"},Document:{data:(()=>{const e=this.imageReplacer.replace(n,s,r);return this.numberingReplacer.replace(e,t.Numbering.ConcreteNumbering)})(),path:"word/document.xml"},Styles:{data:(()=>{const r=Aa(this.formatter.format(t.Styles,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{standalone:"yes",encoding:"UTF-8"}});return this.numberingReplacer.replace(r,t.Numbering.ConcreteNumbering)})(),path:"word/styles.xml"},Properties:{data:Aa(this.formatter.format(t.CoreProperties,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/core.xml"},Numbering:{data:Aa(this.formatter.format(t.Numbering,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/numbering.xml"},FileRelationships:{data:Aa(this.formatter.format(t.FileRelationships,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{encoding:"UTF-8"}}),path:"_rels/.rels"},HeaderRelationships:t.Headers.map(((r,n)=>{const s=Aa(this.formatter.format(r.View,{viewWrapper:r,file:t}),{indent:e,declaration:{encoding:"UTF-8"}});return this.imageReplacer.getMediaData(s,t.Media).forEach(((t,e)=>{r.Relationships.createRelationship(e,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${t.fileName}`);})),{data:Aa(this.formatter.format(r.Relationships,{viewWrapper:r,file:t}),{indent:e,declaration:{encoding:"UTF-8"}}),path:`word/_rels/header${n+1}.xml.rels`}})),FooterRelationships:t.Footers.map(((r,n)=>{const s=Aa(this.formatter.format(r.View,{viewWrapper:r,file:t}),{indent:e,declaration:{encoding:"UTF-8"}});return this.imageReplacer.getMediaData(s,t.Media).forEach(((t,e)=>{r.Relationships.createRelationship(e,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${t.fileName}`);})),{data:Aa(this.formatter.format(r.Relationships,{viewWrapper:r,file:t}),{indent:e,declaration:{encoding:"UTF-8"}}),path:`word/_rels/footer${n+1}.xml.rels`}})),Headers:t.Headers.map(((r,n)=>{const s=Aa(this.formatter.format(r.View,{viewWrapper:r,file:t}),{indent:e,declaration:{encoding:"UTF-8"}}),i=this.imageReplacer.getMediaData(s,t.Media);return {data:this.imageReplacer.replace(s,i,0),path:`word/header${n+1}.xml`}})),Footers:t.Footers.map(((r,n)=>{const s=Aa(this.formatter.format(r.View,{viewWrapper:r,file:t}),{indent:e,declaration:{encoding:"UTF-8"}}),i=this.imageReplacer.getMediaData(s,t.Media);return {data:this.imageReplacer.replace(s,i,0),path:`word/footer${n+1}.xml`}})),ContentTypes:{data:Aa(this.formatter.format(t.ContentTypes,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{encoding:"UTF-8"}}),path:"[Content_Types].xml"},CustomProperties:{data:Aa(this.formatter.format(t.CustomProperties,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/custom.xml"},AppProperties:{data:Aa(this.formatter.format(t.AppProperties,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"docProps/app.xml"},FootNotes:{data:Aa(this.formatter.format(t.FootNotes.View,{viewWrapper:t.FootNotes,file:t}),{indent:e,declaration:{encoding:"UTF-8"}}),path:"word/footnotes.xml"},FootNotesRelationships:{data:Aa(this.formatter.format(t.FootNotes.Relationships,{viewWrapper:t.FootNotes,file:t}),{indent:e,declaration:{encoding:"UTF-8"}}),path:"word/_rels/footnotes.xml.rels"},Settings:{data:Aa(this.formatter.format(t.Settings,{viewWrapper:t.Document,file:t}),{indent:e,declaration:{standalone:"yes",encoding:"UTF-8"}}),path:"word/settings.xml"}}}};var Ca=function(t,e,r,n){return new(r||(r=Promise))((function(s,i){function o(t){try{c(n.next(t));}catch(t){i(t);}}function a(t){try{c(n.throw(t));}catch(t){i(t);}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e);}))).then(o,a);}c((n=n.apply(t,e||[])).next());}))};const ka={"http://schemas.openxmlformats.org/officeDocument/2006/relationships/header":"header","http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer":"footer","http://schemas.openxmlformats.org/officeDocument/2006/relationships/image":"image","http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink":"hyperlink"};var Da;!function(t){t.HEADER="header",t.FOOTER="footer",t.IMAGE="image",t.HYPERLINK="hyperlink";}(Da||(Da={}));class La{extract(t){return Ca(this,void 0,void 0,(function*(){const e=yield Ta.loadAsync(t),r=yield e.files["word/document.xml"].async("text"),n=yield e.files["word/_rels/document.xml.rels"].async("text"),s=this.extractDocumentRefs(r),i=this.findReferenceFiles(n),o=new qi;return {headers:yield this.createHeaders(e,s,i,o,0),footers:yield this.createFooters(e,s,i,o,s.headers.length),currentRelationshipId:s.footers.length+s.headers.length,styles:yield e.files["word/styles.xml"].async("text"),titlePageIsDefined:this.checkIfTitlePageIsDefined(r),media:o}}))}createFooters(t,e,r,n,s){return Ca(this,void 0,void 0,(function*(){const i=e.footers.map(((e,i)=>Ca(this,void 0,void 0,(function*(){const o=r.find((t=>t.id===e.id));if(null===o||!o)throw new Error(`Can not find target file for id ${e.id}`);const a=yield t.files[`word/${o.target}`].async("text"),l=(0, c.xml2js)(a,{compact:!1,captureSpacesBetweenElements:!0});if(!l.elements)return;const h=u(l.elements.reduce(((t,e)=>"w:ftr"===e.name?e:t))),p=new Li(n,s+i,h);return yield this.addRelationshipToWrapper(o,t,p,n),{type:e.type,footer:p}})))).filter((t=>!!t));return Promise.all(i)}))}createHeaders(t,e,r,n,s){return Ca(this,void 0,void 0,(function*(){const i=e.headers.map(((e,i)=>Ca(this,void 0,void 0,(function*(){const o=r.find((t=>t.id===e.id));if(null===o||!o)throw new Error(`Can not find target file for id ${e.id}`);const a=yield t.files[`word/${o.target}`].async("text"),l=(0, c.xml2js)(a,{compact:!1,captureSpacesBetweenElements:!0});if(!l.elements)return;const h=u(l.elements.reduce(((t,e)=>"w:hdr"===e.name?e:t))),p=new Xi(n,s+i,h);return yield this.addRelationshipToWrapper(o,t,p,n),{type:e.type,header:p}})))).filter((t=>!!t));return Promise.all(i)}))}addRelationshipToWrapper(t,e,r,n){return Ca(this,void 0,void 0,(function*(){const s=e.files[`word/_rels/${t.target}.rels`];if(!s)return;const i=yield s.async("text"),o=this.findReferenceFiles(i).filter((t=>t.type===Da.IMAGE)),a=this.findReferenceFiles(i).filter((t=>t.type===Da.HYPERLINK));for(const t of o){const s=yield e.files[`word/${t.target}`].async("nodebuffer"),i=n.addMedia(s,{width:100,height:100});r.Relationships.createRelationship(t.id,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",`media/${i.fileName}`);}for(const t of a)r.Relationships.createRelationship(t.id,"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",t.target,Zt.EXTERNAL);}))}findReferenceFiles(t){const e=(0, c.xml2js)(t,{compact:!0});return (Array.isArray(e.Relationships.Relationship)?e.Relationships.Relationship:[e.Relationships.Relationship]).map((t=>{if(void 0===t._attributes)throw Error("relationship element has no attributes");return {id:this.parseRefId(t._attributes.Id),type:ka[t._attributes.Type],target:t._attributes.Target}})).filter((t=>null!==t.type))}extractDocumentRefs(t){const e=(0, c.xml2js)(t,{compact:!0})["w:document"]["w:body"]["w:sectPr"],r=e["w:headerReference"];let n;n=void 0===r?[]:Array.isArray(r)?r:[r];const s=n.map((t=>{if(void 0===t._attributes)throw Error("header reference element has no attributes");return {type:t._attributes["w:type"],id:this.parseRefId(t._attributes["r:id"])}})),i=e["w:footerReference"];let o;return o=void 0===i?[]:Array.isArray(i)?i:[i],{headers:s,footers:o.map((t=>{if(void 0===t._attributes)throw Error("footer reference element has no attributes");return {type:t._attributes["w:type"],id:this.parseRefId(t._attributes["r:id"])}}))}}checkIfTitlePageIsDefined(t){return void 0!==(0, c.xml2js)(t,{compact:!0})["w:document"]["w:body"]["w:sectPr"]["w:titlePg"]}parseRefId(t){const e=/^rId(\d+)$/.exec(t);if(null===e)throw new Error("Invalid ref id");return parseInt(e[1],10)}}})(),n})()}));
    }(build));

    var docx$1 = /*@__PURE__*/getDefaultExportFromCjs(build.exports);

    var FileSaver_min = {exports: {}};

    (function (module, exports) {
    (function(a,b){b();})(commonjsGlobal,function(){function b(a,b){return "undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c);},d.onerror=function(){console.error("could not download file");},d.send();}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send();}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"));}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b);}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof commonjsGlobal&&commonjsGlobal.global===commonjsGlobal?commonjsGlobal:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href);},4E4),setTimeout(function(){e(j);},0));}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else {var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i);});}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null;},k.readAsDataURL(b);}else {var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m);},4E4);}});f.saveAs=g.saveAs=g,(module.exports=g);});


    }(FileSaver_min));

    var saveAs = FileSaver_min.exports;

    const textNodesUnder = (el) => {
      var n, a=[], walk=document.createTreeWalker(el,NodeFilter.SHOW_TEXT);
      while(n=walk.nextNode()) a.push(n);
      return a;
    };


    const whitelist = ['<b>', '</b>', '<i>', '</i>', '<u>', '</u>'];

    const renderer = (chapters) => ({
      html:      text => whitelist.includes(text.trim().toLowerCase()) ? text.trim().toLowerCase() : mangle(text),
      paragraph: text => `<p>${text}</p>`,
      strong:    text => `<b>${text}</b>`,
      em:        text => `<i>${text}</i>`,
      codespan:  text => '',
      code: (code, lang) => '',
      link: (fullKey, i, text) => {
        const key = fullKey.replace('#', '');
        return `<mage-link to="${key}">${
      text.trim() || (chapters.has(key) ? (chapters.get(key).title.trim() || key) : key)
    }</mage-link>`
      },
    });



    const encode = (bookText) => {
      const indexedBook = extractIndexedBook(bookText);
      const children = [];
      
      const name = indexedBook.properties.title || 'magebook';
      for(let [key, {title, text}] of indexedBook.chapters){
        title = title?.trim() || key; 
      
        // Create Bookmark
        const bookMark = new docx$1.Bookmark({
          id: `mage${key}`,
          children: [
            new docx$1.TextRun({
              text: title,
              bold: true,
              color: '#000000',
            })
          ]
        });
      
        const l = document.createElement("div");
        l.innerHTML = encodeToHTML(text, renderer(indexedBook.chapters)) || '<p></p>';
      
        // Create paragraphs
        const paragraphs = [];
      
        {
          paragraphs.push(new docx$1.Paragraph({
              children: [bookMark],
              alignment: 'center',
              heading: docx$1.HeadingLevel.HEADING_3
          }));
        }
      
        const childNodes = l.childNodes;
        childNodes.forEach( (p, i) =>{
          const children = [];
      
          textNodesUnder(p).forEach( (node) => {
            let bold      = false;
            let italics   = false;
            let underline = false;
      
            let domElement = node.parentNode;
            while(domElement.tagName !== 'P'){
              const tag = domElement.tagName;
      
              if(tag === 'MAGE-LINK'){
                const href= domElement.getAttribute('to');
                children.push(
                  new docx$1.InternalHyperlink({
                    children: [
                        new docx$1.TextRun({
                            text: node.nodeValue,
                            style: "Hyperlink",
                        }),
                    ],
                    anchor: `mage${href}`,
                  }));
                return
              }
      
              if(tag === 'B') bold      = true;
              if(tag === 'I') italics   = true;
              if(tag === 'U') underline = true;
              domElement = domElement.parentNode;
            }
      
            children.push(new docx$1.TextRun({
              bold, italics, underline,
              text: node.nodeValue
            }));
          });
      
          // Get alignment
          let alignment = 'both';
          // Create paragraph
          paragraphs.push(new docx$1.Paragraph({
              children: [
                ...([]),
                ...children,
              ],
              alignment,
          }));
        });
      
        paragraphs.push(new docx$1.Paragraph({
            children: [
              new docx$1.TextRun(''),
              ...([]),
            ]
        }));
      

        children.push(...paragraphs);
      }


      const doc = new docx$1.Document({
        styles: {
        paragraphStyles: [
            {
                id: "Normal",
                name: "Normal",
                next: "Normal",
                quickFormat: false,
                run: {
                    size: 24,
                    font: "Times New Roman",
                },
                paragraph: {
                    spacing: {
                        line: "276",
                    },
                },
            },
          ],
        },
        sections: [{
          headers: { default: null, },
          properties: {
            page: {
              size: {
                width: "14.80cm",
                height: "21.00cm",
              },
              margin: {
                  top: "2.5cm",
                  right: "2cm",
                  bottom: "2cm",
                  left: "2cm",
              },
            },
          },
          children,
        }],
      });

      docx$1.Packer.toBlob(doc).then(blob => {
        saveAs(blob, name + '.docx');
      });

      

    };


    var docx = {encode};

    /*
     * Dexie.js - a minimalistic wrapper for IndexedDB
     * ===============================================
     *
     * By David Fahlander, david.fahlander@gmail.com
     *
     * Version 3.2.0, Thu Nov 18 2021
     *
     * http://dexie.org
     *
     * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
     */
     
    const _global = typeof globalThis !== 'undefined' ? globalThis :
        typeof self !== 'undefined' ? self :
            typeof window !== 'undefined' ? window :
                global;

    const keys = Object.keys;
    const isArray = Array.isArray;
    if (typeof Promise !== 'undefined' && !_global.Promise) {
        _global.Promise = Promise;
    }
    function extend(obj, extension) {
        if (typeof extension !== 'object')
            return obj;
        keys(extension).forEach(function (key) {
            obj[key] = extension[key];
        });
        return obj;
    }
    const getProto = Object.getPrototypeOf;
    const _hasOwn = {}.hasOwnProperty;
    function hasOwn(obj, prop) {
        return _hasOwn.call(obj, prop);
    }
    function props(proto, extension) {
        if (typeof extension === 'function')
            extension = extension(getProto(proto));
        (typeof Reflect === "undefined" ? keys : Reflect.ownKeys)(extension).forEach(key => {
            setProp(proto, key, extension[key]);
        });
    }
    const defineProperty = Object.defineProperty;
    function setProp(obj, prop, functionOrGetSet, options) {
        defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === 'function' ?
            { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } :
            { value: functionOrGetSet, configurable: true, writable: true }, options));
    }
    function derive(Child) {
        return {
            from: function (Parent) {
                Child.prototype = Object.create(Parent.prototype);
                setProp(Child.prototype, "constructor", Child);
                return {
                    extend: props.bind(null, Child.prototype)
                };
            }
        };
    }
    const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    function getPropertyDescriptor(obj, prop) {
        const pd = getOwnPropertyDescriptor(obj, prop);
        let proto;
        return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
    }
    const _slice = [].slice;
    function slice(args, start, end) {
        return _slice.call(args, start, end);
    }
    function override(origFunc, overridedFactory) {
        return overridedFactory(origFunc);
    }
    function assert(b) {
        if (!b)
            throw new Error("Assertion Failed");
    }
    function asap$1(fn) {
        if (_global.setImmediate)
            setImmediate(fn);
        else
            setTimeout(fn, 0);
    }
    function arrayToObject(array, extractor) {
        return array.reduce((result, item, i) => {
            var nameAndValue = extractor(item, i);
            if (nameAndValue)
                result[nameAndValue[0]] = nameAndValue[1];
            return result;
        }, {});
    }
    function tryCatch(fn, onerror, args) {
        try {
            fn.apply(null, args);
        }
        catch (ex) {
            onerror && onerror(ex);
        }
    }
    function getByKeyPath(obj, keyPath) {
        if (hasOwn(obj, keyPath))
            return obj[keyPath];
        if (!keyPath)
            return obj;
        if (typeof keyPath !== 'string') {
            var rv = [];
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                var val = getByKeyPath(obj, keyPath[i]);
                rv.push(val);
            }
            return rv;
        }
        var period = keyPath.indexOf('.');
        if (period !== -1) {
            var innerObj = obj[keyPath.substr(0, period)];
            return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));
        }
        return undefined;
    }
    function setByKeyPath(obj, keyPath, value) {
        if (!obj || keyPath === undefined)
            return;
        if ('isFrozen' in Object && Object.isFrozen(obj))
            return;
        if (typeof keyPath !== 'string' && 'length' in keyPath) {
            assert(typeof value !== 'string' && 'length' in value);
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                setByKeyPath(obj, keyPath[i], value[i]);
            }
        }
        else {
            var period = keyPath.indexOf('.');
            if (period !== -1) {
                var currentKeyPath = keyPath.substr(0, period);
                var remainingKeyPath = keyPath.substr(period + 1);
                if (remainingKeyPath === "")
                    if (value === undefined) {
                        if (isArray(obj) && !isNaN(parseInt(currentKeyPath)))
                            obj.splice(currentKeyPath, 1);
                        else
                            delete obj[currentKeyPath];
                    }
                    else
                        obj[currentKeyPath] = value;
                else {
                    var innerObj = obj[currentKeyPath];
                    if (!innerObj)
                        innerObj = (obj[currentKeyPath] = {});
                    setByKeyPath(innerObj, remainingKeyPath, value);
                }
            }
            else {
                if (value === undefined) {
                    if (isArray(obj) && !isNaN(parseInt(keyPath)))
                        obj.splice(keyPath, 1);
                    else
                        delete obj[keyPath];
                }
                else
                    obj[keyPath] = value;
            }
        }
    }
    function delByKeyPath(obj, keyPath) {
        if (typeof keyPath === 'string')
            setByKeyPath(obj, keyPath, undefined);
        else if ('length' in keyPath)
            [].map.call(keyPath, function (kp) {
                setByKeyPath(obj, kp, undefined);
            });
    }
    function shallowClone(obj) {
        var rv = {};
        for (var m in obj) {
            if (hasOwn(obj, m))
                rv[m] = obj[m];
        }
        return rv;
    }
    const concat = [].concat;
    function flatten(a) {
        return concat.apply([], a);
    }
    const intrinsicTypeNames = "Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey"
        .split(',').concat(flatten([8, 16, 32, 64].map(num => ["Int", "Uint", "Float"].map(t => t + num + "Array")))).filter(t => _global[t]);
    const intrinsicTypes = intrinsicTypeNames.map(t => _global[t]);
    arrayToObject(intrinsicTypeNames, x => [x, true]);
    let circularRefs = null;
    function deepClone(any) {
        circularRefs = typeof WeakMap !== 'undefined' && new WeakMap();
        const rv = innerDeepClone(any);
        circularRefs = null;
        return rv;
    }
    function innerDeepClone(any) {
        if (!any || typeof any !== 'object')
            return any;
        let rv = circularRefs && circularRefs.get(any);
        if (rv)
            return rv;
        if (isArray(any)) {
            rv = [];
            circularRefs && circularRefs.set(any, rv);
            for (var i = 0, l = any.length; i < l; ++i) {
                rv.push(innerDeepClone(any[i]));
            }
        }
        else if (intrinsicTypes.indexOf(any.constructor) >= 0) {
            rv = any;
        }
        else {
            const proto = getProto(any);
            rv = proto === Object.prototype ? {} : Object.create(proto);
            circularRefs && circularRefs.set(any, rv);
            for (var prop in any) {
                if (hasOwn(any, prop)) {
                    rv[prop] = innerDeepClone(any[prop]);
                }
            }
        }
        return rv;
    }
    const { toString } = {};
    function toStringTag(o) {
        return toString.call(o).slice(8, -1);
    }
    const iteratorSymbol = typeof Symbol !== 'undefined' ?
        Symbol.iterator :
        '@@iterator';
    const getIteratorOf = typeof iteratorSymbol === "symbol" ? function (x) {
        var i;
        return x != null && (i = x[iteratorSymbol]) && i.apply(x);
    } : function () { return null; };
    const NO_CHAR_ARRAY = {};
    function getArrayOf(arrayLike) {
        var i, a, x, it;
        if (arguments.length === 1) {
            if (isArray(arrayLike))
                return arrayLike.slice();
            if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string')
                return [arrayLike];
            if ((it = getIteratorOf(arrayLike))) {
                a = [];
                while ((x = it.next()), !x.done)
                    a.push(x.value);
                return a;
            }
            if (arrayLike == null)
                return [arrayLike];
            i = arrayLike.length;
            if (typeof i === 'number') {
                a = new Array(i);
                while (i--)
                    a[i] = arrayLike[i];
                return a;
            }
            return [arrayLike];
        }
        i = arguments.length;
        a = new Array(i);
        while (i--)
            a[i] = arguments[i];
        return a;
    }
    const isAsyncFunction = typeof Symbol !== 'undefined'
        ? (fn) => fn[Symbol.toStringTag] === 'AsyncFunction'
        : () => false;

    var debug = typeof location !== 'undefined' &&
        /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
    function setDebug(value, filter) {
        debug = value;
        libraryFilter = filter;
    }
    var libraryFilter = () => true;
    const NEEDS_THROW_FOR_STACK = !new Error("").stack;
    function getErrorWithStack() {
        if (NEEDS_THROW_FOR_STACK)
            try {
                getErrorWithStack.arguments;
                throw new Error();
            }
            catch (e) {
                return e;
            }
        return new Error();
    }
    function prettyStack(exception, numIgnoredFrames) {
        var stack = exception.stack;
        if (!stack)
            return "";
        numIgnoredFrames = (numIgnoredFrames || 0);
        if (stack.indexOf(exception.name) === 0)
            numIgnoredFrames += (exception.name + exception.message).split('\n').length;
        return stack.split('\n')
            .slice(numIgnoredFrames)
            .filter(libraryFilter)
            .map(frame => "\n" + frame)
            .join('');
    }

    var dexieErrorNames = [
        'Modify',
        'Bulk',
        'OpenFailed',
        'VersionChange',
        'Schema',
        'Upgrade',
        'InvalidTable',
        'MissingAPI',
        'NoSuchDatabase',
        'InvalidArgument',
        'SubTransaction',
        'Unsupported',
        'Internal',
        'DatabaseClosed',
        'PrematureCommit',
        'ForeignAwait'
    ];
    var idbDomErrorNames = [
        'Unknown',
        'Constraint',
        'Data',
        'TransactionInactive',
        'ReadOnly',
        'Version',
        'NotFound',
        'InvalidState',
        'InvalidAccess',
        'Abort',
        'Timeout',
        'QuotaExceeded',
        'Syntax',
        'DataClone'
    ];
    var errorList = dexieErrorNames.concat(idbDomErrorNames);
    var defaultTexts = {
        VersionChanged: "Database version changed by other database connection",
        DatabaseClosed: "Database has been closed",
        Abort: "Transaction aborted",
        TransactionInactive: "Transaction has already completed or failed",
        MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"
    };
    function DexieError(name, msg) {
        this._e = getErrorWithStack();
        this.name = name;
        this.message = msg;
    }
    derive(DexieError).from(Error).extend({
        stack: {
            get: function () {
                return this._stack ||
                    (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
            }
        },
        toString: function () { return this.name + ": " + this.message; }
    });
    function getMultiErrorMessage(msg, failures) {
        return msg + ". Errors: " + Object.keys(failures)
            .map(key => failures[key].toString())
            .filter((v, i, s) => s.indexOf(v) === i)
            .join('\n');
    }
    function ModifyError(msg, failures, successCount, failedKeys) {
        this._e = getErrorWithStack();
        this.failures = failures;
        this.failedKeys = failedKeys;
        this.successCount = successCount;
        this.message = getMultiErrorMessage(msg, failures);
    }
    derive(ModifyError).from(DexieError);
    function BulkError(msg, failures) {
        this._e = getErrorWithStack();
        this.name = "BulkError";
        this.failures = Object.keys(failures).map(pos => failures[pos]);
        this.failuresByPos = failures;
        this.message = getMultiErrorMessage(msg, failures);
    }
    derive(BulkError).from(DexieError);
    var errnames = errorList.reduce((obj, name) => (obj[name] = name + "Error", obj), {});
    const BaseException = DexieError;
    var exceptions = errorList.reduce((obj, name) => {
        var fullName = name + "Error";
        function DexieError(msgOrInner, inner) {
            this._e = getErrorWithStack();
            this.name = fullName;
            if (!msgOrInner) {
                this.message = defaultTexts[name] || fullName;
                this.inner = null;
            }
            else if (typeof msgOrInner === 'string') {
                this.message = `${msgOrInner}${!inner ? '' : '\n ' + inner}`;
                this.inner = inner || null;
            }
            else if (typeof msgOrInner === 'object') {
                this.message = `${msgOrInner.name} ${msgOrInner.message}`;
                this.inner = msgOrInner;
            }
        }
        derive(DexieError).from(BaseException);
        obj[name] = DexieError;
        return obj;
    }, {});
    exceptions.Syntax = SyntaxError;
    exceptions.Type = TypeError;
    exceptions.Range = RangeError;
    var exceptionMap = idbDomErrorNames.reduce((obj, name) => {
        obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    function mapError(domError, message) {
        if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])
            return domError;
        var rv = new exceptionMap[domError.name](message || domError.message, domError);
        if ("stack" in domError) {
            setProp(rv, "stack", { get: function () {
                    return this.inner.stack;
                } });
        }
        return rv;
    }
    var fullNameExceptions = errorList.reduce((obj, name) => {
        if (["Syntax", "Type", "Range"].indexOf(name) === -1)
            obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    fullNameExceptions.ModifyError = ModifyError;
    fullNameExceptions.DexieError = DexieError;
    fullNameExceptions.BulkError = BulkError;

    function nop() { }
    function mirror(val) { return val; }
    function pureFunctionChain(f1, f2) {
        if (f1 == null || f1 === mirror)
            return f2;
        return function (val) {
            return f2(f1(val));
        };
    }
    function callBoth(on1, on2) {
        return function () {
            on1.apply(this, arguments);
            on2.apply(this, arguments);
        };
    }
    function hookCreatingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res !== undefined)
                arguments[0] = res;
            var onsuccess = this.onsuccess,
            onerror = this.onerror;
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res2 !== undefined ? res2 : res;
        };
    }
    function hookDeletingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            f1.apply(this, arguments);
            var onsuccess = this.onsuccess,
            onerror = this.onerror;
            this.onsuccess = this.onerror = null;
            f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
        };
    }
    function hookUpdatingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function (modifications) {
            var res = f1.apply(this, arguments);
            extend(modifications, res);
            var onsuccess = this.onsuccess,
            onerror = this.onerror;
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res === undefined ?
                (res2 === undefined ? undefined : res2) :
                (extend(res, res2));
        };
    }
    function reverseStoppableEventChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            if (f2.apply(this, arguments) === false)
                return false;
            return f1.apply(this, arguments);
        };
    }
    function promisableChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res && typeof res.then === 'function') {
                var thiz = this, i = arguments.length, args = new Array(i);
                while (i--)
                    args[i] = arguments[i];
                return res.then(function () {
                    return f2.apply(thiz, args);
                });
            }
            return f2.apply(this, arguments);
        };
    }

    var INTERNAL = {};
    const LONG_STACKS_CLIP_LIMIT = 100,
    MAX_LONG_STACKS = 20, ZONE_ECHO_LIMIT = 100, [resolvedNativePromise, nativePromiseProto, resolvedGlobalPromise] = typeof Promise === 'undefined' ?
        [] :
        (() => {
            let globalP = Promise.resolve();
            if (typeof crypto === 'undefined' || !crypto.subtle)
                return [globalP, getProto(globalP), globalP];
            const nativeP = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
            return [
                nativeP,
                getProto(nativeP),
                globalP
            ];
        })(), nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
    const NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
    const patchGlobalPromise = !!resolvedGlobalPromise;
    var stack_being_generated = false;
    var schedulePhysicalTick = resolvedGlobalPromise ?
        () => { resolvedGlobalPromise.then(physicalTick); }
        :
            _global.setImmediate ?
                setImmediate.bind(null, physicalTick) :
                _global.MutationObserver ?
                    () => {
                        var hiddenDiv = document.createElement("div");
                        (new MutationObserver(() => {
                            physicalTick();
                            hiddenDiv = null;
                        })).observe(hiddenDiv, { attributes: true });
                        hiddenDiv.setAttribute('i', '1');
                    } :
                    () => { setTimeout(physicalTick, 0); };
    var asap = function (callback, args) {
        microtickQueue.push([callback, args]);
        if (needsNewPhysicalTick) {
            schedulePhysicalTick();
            needsNewPhysicalTick = false;
        }
    };
    var isOutsideMicroTick = true,
    needsNewPhysicalTick = true,
    unhandledErrors = [],
    rejectingErrors = [],
    currentFulfiller = null, rejectionMapper = mirror;
    var globalPSD = {
        id: 'global',
        global: true,
        ref: 0,
        unhandleds: [],
        onunhandled: globalError,
        pgp: false,
        env: {},
        finalize: function () {
            this.unhandleds.forEach(uh => {
                try {
                    globalError(uh[0], uh[1]);
                }
                catch (e) { }
            });
        }
    };
    var PSD = globalPSD;
    var microtickQueue = [];
    var numScheduledCalls = 0;
    var tickFinalizers = [];
    function DexiePromise(fn) {
        if (typeof this !== 'object')
            throw new TypeError('Promises must be constructed via new');
        this._listeners = [];
        this.onuncatched = nop;
        this._lib = false;
        var psd = (this._PSD = PSD);
        if (debug) {
            this._stackHolder = getErrorWithStack();
            this._prev = null;
            this._numPrev = 0;
        }
        if (typeof fn !== 'function') {
            if (fn !== INTERNAL)
                throw new TypeError('Not a function');
            this._state = arguments[1];
            this._value = arguments[2];
            if (this._state === false)
                handleRejection(this, this._value);
            return;
        }
        this._state = null;
        this._value = null;
        ++psd.ref;
        executePromiseTask(this, fn);
    }
    const thenProp = {
        get: function () {
            var psd = PSD, microTaskId = totalEchoes;
            function then(onFulfilled, onRejected) {
                var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
                const cleanup = possibleAwait && !decrementExpectedAwaits();
                var rv = new DexiePromise((resolve, reject) => {
                    propagateToListener(this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait, cleanup), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait, cleanup), resolve, reject, psd));
                });
                debug && linkToPreviousPromise(rv, this);
                return rv;
            }
            then.prototype = INTERNAL;
            return then;
        },
        set: function (value) {
            setProp(this, 'then', value && value.prototype === INTERNAL ?
                thenProp :
                {
                    get: function () {
                        return value;
                    },
                    set: thenProp.set
                });
        }
    };
    props(DexiePromise.prototype, {
        then: thenProp,
        _then: function (onFulfilled, onRejected) {
            propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
        },
        catch: function (onRejected) {
            if (arguments.length === 1)
                return this.then(null, onRejected);
            var type = arguments[0], handler = arguments[1];
            return typeof type === 'function' ? this.then(null, err =>
            err instanceof type ? handler(err) : PromiseReject(err))
                : this.then(null, err =>
                err && err.name === type ? handler(err) : PromiseReject(err));
        },
        finally: function (onFinally) {
            return this.then(value => {
                onFinally();
                return value;
            }, err => {
                onFinally();
                return PromiseReject(err);
            });
        },
        stack: {
            get: function () {
                if (this._stack)
                    return this._stack;
                try {
                    stack_being_generated = true;
                    var stacks = getStack(this, [], MAX_LONG_STACKS);
                    var stack = stacks.join("\nFrom previous: ");
                    if (this._state !== null)
                        this._stack = stack;
                    return stack;
                }
                finally {
                    stack_being_generated = false;
                }
            }
        },
        timeout: function (ms, msg) {
            return ms < Infinity ?
                new DexiePromise((resolve, reject) => {
                    var handle = setTimeout(() => reject(new exceptions.Timeout(msg)), ms);
                    this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
                }) : this;
        }
    });
    if (typeof Symbol !== 'undefined' && Symbol.toStringTag)
        setProp(DexiePromise.prototype, Symbol.toStringTag, 'Dexie.Promise');
    globalPSD.env = snapShot();
    function Listener(onFulfilled, onRejected, resolve, reject, zone) {
        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
        this.onRejected = typeof onRejected === 'function' ? onRejected : null;
        this.resolve = resolve;
        this.reject = reject;
        this.psd = zone;
    }
    props(DexiePromise, {
        all: function () {
            var values = getArrayOf.apply(null, arguments)
                .map(onPossibleParallellAsync);
            return new DexiePromise(function (resolve, reject) {
                if (values.length === 0)
                    resolve([]);
                var remaining = values.length;
                values.forEach((a, i) => DexiePromise.resolve(a).then(x => {
                    values[i] = x;
                    if (!--remaining)
                        resolve(values);
                }, reject));
            });
        },
        resolve: value => {
            if (value instanceof DexiePromise)
                return value;
            if (value && typeof value.then === 'function')
                return new DexiePromise((resolve, reject) => {
                    value.then(resolve, reject);
                });
            var rv = new DexiePromise(INTERNAL, true, value);
            linkToPreviousPromise(rv, currentFulfiller);
            return rv;
        },
        reject: PromiseReject,
        race: function () {
            var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
            return new DexiePromise((resolve, reject) => {
                values.map(value => DexiePromise.resolve(value).then(resolve, reject));
            });
        },
        PSD: {
            get: () => PSD,
            set: value => PSD = value
        },
        totalEchoes: { get: () => totalEchoes },
        newPSD: newScope,
        usePSD: usePSD,
        scheduler: {
            get: () => asap,
            set: value => { asap = value; }
        },
        rejectionMapper: {
            get: () => rejectionMapper,
            set: value => { rejectionMapper = value; }
        },
        follow: (fn, zoneProps) => {
            return new DexiePromise((resolve, reject) => {
                return newScope((resolve, reject) => {
                    var psd = PSD;
                    psd.unhandleds = [];
                    psd.onunhandled = reject;
                    psd.finalize = callBoth(function () {
                        run_at_end_of_this_or_next_physical_tick(() => {
                            this.unhandleds.length === 0 ? resolve() : reject(this.unhandleds[0]);
                        });
                    }, psd.finalize);
                    fn();
                }, zoneProps, resolve, reject);
            });
        }
    });
    if (NativePromise) {
        if (NativePromise.allSettled)
            setProp(DexiePromise, "allSettled", function () {
                const possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
                return new DexiePromise(resolve => {
                    if (possiblePromises.length === 0)
                        resolve([]);
                    let remaining = possiblePromises.length;
                    const results = new Array(remaining);
                    possiblePromises.forEach((p, i) => DexiePromise.resolve(p).then(value => results[i] = { status: "fulfilled", value }, reason => results[i] = { status: "rejected", reason })
                        .then(() => --remaining || resolve(results)));
                });
            });
        if (NativePromise.any && typeof AggregateError !== 'undefined')
            setProp(DexiePromise, "any", function () {
                const possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
                return new DexiePromise((resolve, reject) => {
                    if (possiblePromises.length === 0)
                        reject(new AggregateError([]));
                    let remaining = possiblePromises.length;
                    const failures = new Array(remaining);
                    possiblePromises.forEach((p, i) => DexiePromise.resolve(p).then(value => resolve(value), failure => {
                        failures[i] = failure;
                        if (!--remaining)
                            reject(new AggregateError(failures));
                    }));
                });
            });
    }
    function executePromiseTask(promise, fn) {
        try {
            fn(value => {
                if (promise._state !== null)
                    return;
                if (value === promise)
                    throw new TypeError('A promise cannot be resolved with itself.');
                var shouldExecuteTick = promise._lib && beginMicroTickScope();
                if (value && typeof value.then === 'function') {
                    executePromiseTask(promise, (resolve, reject) => {
                        value instanceof DexiePromise ?
                            value._then(resolve, reject) :
                            value.then(resolve, reject);
                    });
                }
                else {
                    promise._state = true;
                    promise._value = value;
                    propagateAllListeners(promise);
                }
                if (shouldExecuteTick)
                    endMicroTickScope();
            }, handleRejection.bind(null, promise));
        }
        catch (ex) {
            handleRejection(promise, ex);
        }
    }
    function handleRejection(promise, reason) {
        rejectingErrors.push(reason);
        if (promise._state !== null)
            return;
        var shouldExecuteTick = promise._lib && beginMicroTickScope();
        reason = rejectionMapper(reason);
        promise._state = false;
        promise._value = reason;
        debug && reason !== null && typeof reason === 'object' && !reason._promise && tryCatch(() => {
            var origProp = getPropertyDescriptor(reason, "stack");
            reason._promise = promise;
            setProp(reason, "stack", {
                get: () => stack_being_generated ?
                    origProp && (origProp.get ?
                        origProp.get.apply(reason) :
                        origProp.value) :
                    promise.stack
            });
        });
        addPossiblyUnhandledError(promise);
        propagateAllListeners(promise);
        if (shouldExecuteTick)
            endMicroTickScope();
    }
    function propagateAllListeners(promise) {
        var listeners = promise._listeners;
        promise._listeners = [];
        for (var i = 0, len = listeners.length; i < len; ++i) {
            propagateToListener(promise, listeners[i]);
        }
        var psd = promise._PSD;
        --psd.ref || psd.finalize();
        if (numScheduledCalls === 0) {
            ++numScheduledCalls;
            asap(() => {
                if (--numScheduledCalls === 0)
                    finalizePhysicalTick();
            }, []);
        }
    }
    function propagateToListener(promise, listener) {
        if (promise._state === null) {
            promise._listeners.push(listener);
            return;
        }
        var cb = promise._state ? listener.onFulfilled : listener.onRejected;
        if (cb === null) {
            return (promise._state ? listener.resolve : listener.reject)(promise._value);
        }
        ++listener.psd.ref;
        ++numScheduledCalls;
        asap(callListener, [cb, promise, listener]);
    }
    function callListener(cb, promise, listener) {
        try {
            currentFulfiller = promise;
            var ret, value = promise._value;
            if (promise._state) {
                ret = cb(value);
            }
            else {
                if (rejectingErrors.length)
                    rejectingErrors = [];
                ret = cb(value);
                if (rejectingErrors.indexOf(value) === -1)
                    markErrorAsHandled(promise);
            }
            listener.resolve(ret);
        }
        catch (e) {
            listener.reject(e);
        }
        finally {
            currentFulfiller = null;
            if (--numScheduledCalls === 0)
                finalizePhysicalTick();
            --listener.psd.ref || listener.psd.finalize();
        }
    }
    function getStack(promise, stacks, limit) {
        if (stacks.length === limit)
            return stacks;
        var stack = "";
        if (promise._state === false) {
            var failure = promise._value, errorName, message;
            if (failure != null) {
                errorName = failure.name || "Error";
                message = failure.message || failure;
                stack = prettyStack(failure, 0);
            }
            else {
                errorName = failure;
                message = "";
            }
            stacks.push(errorName + (message ? ": " + message : "") + stack);
        }
        if (debug) {
            stack = prettyStack(promise._stackHolder, 2);
            if (stack && stacks.indexOf(stack) === -1)
                stacks.push(stack);
            if (promise._prev)
                getStack(promise._prev, stacks, limit);
        }
        return stacks;
    }
    function linkToPreviousPromise(promise, prev) {
        var numPrev = prev ? prev._numPrev + 1 : 0;
        if (numPrev < LONG_STACKS_CLIP_LIMIT) {
            promise._prev = prev;
            promise._numPrev = numPrev;
        }
    }
    function physicalTick() {
        beginMicroTickScope() && endMicroTickScope();
    }
    function beginMicroTickScope() {
        var wasRootExec = isOutsideMicroTick;
        isOutsideMicroTick = false;
        needsNewPhysicalTick = false;
        return wasRootExec;
    }
    function endMicroTickScope() {
        var callbacks, i, l;
        do {
            while (microtickQueue.length > 0) {
                callbacks = microtickQueue;
                microtickQueue = [];
                l = callbacks.length;
                for (i = 0; i < l; ++i) {
                    var item = callbacks[i];
                    item[0].apply(null, item[1]);
                }
            }
        } while (microtickQueue.length > 0);
        isOutsideMicroTick = true;
        needsNewPhysicalTick = true;
    }
    function finalizePhysicalTick() {
        var unhandledErrs = unhandledErrors;
        unhandledErrors = [];
        unhandledErrs.forEach(p => {
            p._PSD.onunhandled.call(null, p._value, p);
        });
        var finalizers = tickFinalizers.slice(0);
        var i = finalizers.length;
        while (i)
            finalizers[--i]();
    }
    function run_at_end_of_this_or_next_physical_tick(fn) {
        function finalizer() {
            fn();
            tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
        }
        tickFinalizers.push(finalizer);
        ++numScheduledCalls;
        asap(() => {
            if (--numScheduledCalls === 0)
                finalizePhysicalTick();
        }, []);
    }
    function addPossiblyUnhandledError(promise) {
        if (!unhandledErrors.some(p => p._value === promise._value))
            unhandledErrors.push(promise);
    }
    function markErrorAsHandled(promise) {
        var i = unhandledErrors.length;
        while (i)
            if (unhandledErrors[--i]._value === promise._value) {
                unhandledErrors.splice(i, 1);
                return;
            }
    }
    function PromiseReject(reason) {
        return new DexiePromise(INTERNAL, false, reason);
    }
    function wrap(fn, errorCatcher) {
        var psd = PSD;
        return function () {
            var wasRootExec = beginMicroTickScope(), outerScope = PSD;
            try {
                switchToZone(psd, true);
                return fn.apply(this, arguments);
            }
            catch (e) {
                errorCatcher && errorCatcher(e);
            }
            finally {
                switchToZone(outerScope, false);
                if (wasRootExec)
                    endMicroTickScope();
            }
        };
    }
    const task = { awaits: 0, echoes: 0, id: 0 };
    var taskCounter = 0;
    var zoneStack = [];
    var zoneEchoes = 0;
    var totalEchoes = 0;
    var zone_id_counter = 0;
    function newScope(fn, props, a1, a2) {
        var parent = PSD, psd = Object.create(parent);
        psd.parent = parent;
        psd.ref = 0;
        psd.global = false;
        psd.id = ++zone_id_counter;
        var globalEnv = globalPSD.env;
        psd.env = patchGlobalPromise ? {
            Promise: DexiePromise,
            PromiseProp: { value: DexiePromise, configurable: true, writable: true },
            all: DexiePromise.all,
            race: DexiePromise.race,
            allSettled: DexiePromise.allSettled,
            any: DexiePromise.any,
            resolve: DexiePromise.resolve,
            reject: DexiePromise.reject,
            nthen: getPatchedPromiseThen(globalEnv.nthen, psd),
            gthen: getPatchedPromiseThen(globalEnv.gthen, psd)
        } : {};
        if (props)
            extend(psd, props);
        ++parent.ref;
        psd.finalize = function () {
            --this.parent.ref || this.parent.finalize();
        };
        var rv = usePSD(psd, fn, a1, a2);
        if (psd.ref === 0)
            psd.finalize();
        return rv;
    }
    function incrementExpectedAwaits() {
        if (!task.id)
            task.id = ++taskCounter;
        ++task.awaits;
        task.echoes += ZONE_ECHO_LIMIT;
        return task.id;
    }
    function decrementExpectedAwaits() {
        if (!task.awaits)
            return false;
        if (--task.awaits === 0)
            task.id = 0;
        task.echoes = task.awaits * ZONE_ECHO_LIMIT;
        return true;
    }
    if (('' + nativePromiseThen).indexOf('[native code]') === -1) {
        incrementExpectedAwaits = decrementExpectedAwaits = nop;
    }
    function onPossibleParallellAsync(possiblePromise) {
        if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
            incrementExpectedAwaits();
            return possiblePromise.then(x => {
                decrementExpectedAwaits();
                return x;
            }, e => {
                decrementExpectedAwaits();
                return rejection(e);
            });
        }
        return possiblePromise;
    }
    function zoneEnterEcho(targetZone) {
        ++totalEchoes;
        if (!task.echoes || --task.echoes === 0) {
            task.echoes = task.id = 0;
        }
        zoneStack.push(PSD);
        switchToZone(targetZone, true);
    }
    function zoneLeaveEcho() {
        var zone = zoneStack[zoneStack.length - 1];
        zoneStack.pop();
        switchToZone(zone, false);
    }
    function switchToZone(targetZone, bEnteringZone) {
        var currentZone = PSD;
        if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
            enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
        }
        if (targetZone === PSD)
            return;
        PSD = targetZone;
        if (currentZone === globalPSD)
            globalPSD.env = snapShot();
        if (patchGlobalPromise) {
            var GlobalPromise = globalPSD.env.Promise;
            var targetEnv = targetZone.env;
            nativePromiseProto.then = targetEnv.nthen;
            GlobalPromise.prototype.then = targetEnv.gthen;
            if (currentZone.global || targetZone.global) {
                Object.defineProperty(_global, 'Promise', targetEnv.PromiseProp);
                GlobalPromise.all = targetEnv.all;
                GlobalPromise.race = targetEnv.race;
                GlobalPromise.resolve = targetEnv.resolve;
                GlobalPromise.reject = targetEnv.reject;
                if (targetEnv.allSettled)
                    GlobalPromise.allSettled = targetEnv.allSettled;
                if (targetEnv.any)
                    GlobalPromise.any = targetEnv.any;
            }
        }
    }
    function snapShot() {
        var GlobalPromise = _global.Promise;
        return patchGlobalPromise ? {
            Promise: GlobalPromise,
            PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
            all: GlobalPromise.all,
            race: GlobalPromise.race,
            allSettled: GlobalPromise.allSettled,
            any: GlobalPromise.any,
            resolve: GlobalPromise.resolve,
            reject: GlobalPromise.reject,
            nthen: nativePromiseProto.then,
            gthen: GlobalPromise.prototype.then
        } : {};
    }
    function usePSD(psd, fn, a1, a2, a3) {
        var outerScope = PSD;
        try {
            switchToZone(psd, true);
            return fn(a1, a2, a3);
        }
        finally {
            switchToZone(outerScope, false);
        }
    }
    function enqueueNativeMicroTask(job) {
        nativePromiseThen.call(resolvedNativePromise, job);
    }
    function nativeAwaitCompatibleWrap(fn, zone, possibleAwait, cleanup) {
        return typeof fn !== 'function' ? fn : function () {
            var outerZone = PSD;
            if (possibleAwait)
                incrementExpectedAwaits();
            switchToZone(zone, true);
            try {
                return fn.apply(this, arguments);
            }
            finally {
                switchToZone(outerZone, false);
                if (cleanup)
                    enqueueNativeMicroTask(decrementExpectedAwaits);
            }
        };
    }
    function getPatchedPromiseThen(origThen, zone) {
        return function (onResolved, onRejected) {
            return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone), nativeAwaitCompatibleWrap(onRejected, zone));
        };
    }
    const UNHANDLEDREJECTION = "unhandledrejection";
    function globalError(err, promise) {
        var rv;
        try {
            rv = promise.onuncatched(err);
        }
        catch (e) { }
        if (rv !== false)
            try {
                var event, eventData = { promise: promise, reason: err };
                if (_global.document && document.createEvent) {
                    event = document.createEvent('Event');
                    event.initEvent(UNHANDLEDREJECTION, true, true);
                    extend(event, eventData);
                }
                else if (_global.CustomEvent) {
                    event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });
                    extend(event, eventData);
                }
                if (event && _global.dispatchEvent) {
                    dispatchEvent(event);
                    if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)
                        try {
                            _global.onunhandledrejection(event);
                        }
                        catch (_) { }
                }
                if (debug && event && !event.defaultPrevented) {
                    console.warn(`Unhandled rejection: ${err.stack || err}`);
                }
            }
            catch (e) { }
    }
    var rejection = DexiePromise.reject;

    function tempTransaction(db, mode, storeNames, fn) {
        if (!db.idbdb || (!db._state.openComplete && (!PSD.letThrough && !db._vip))) {
            if (db._state.openComplete) {
                return rejection(new exceptions.DatabaseClosed(db._state.dbOpenError));
            }
            if (!db._state.isBeingOpened) {
                if (!db._options.autoOpen)
                    return rejection(new exceptions.DatabaseClosed());
                db.open().catch(nop);
            }
            return db._state.dbReadyPromise.then(() => tempTransaction(db, mode, storeNames, fn));
        }
        else {
            var trans = db._createTransaction(mode, storeNames, db._dbSchema);
            try {
                trans.create();
            }
            catch (ex) {
                return rejection(ex);
            }
            return trans._promise(mode, (resolve, reject) => {
                return newScope(() => {
                    PSD.trans = trans;
                    return fn(resolve, reject, trans);
                });
            }).then(result => {
                return trans._completion.then(() => result);
            });
        }
    }

    const DEXIE_VERSION = '3.2.0';
    const maxString = String.fromCharCode(65535);
    const minKey = -Infinity;
    const INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
    const STRING_EXPECTED = "String expected.";
    const connections = [];
    const isIEOrEdge = typeof navigator !== 'undefined' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
    const hasIEDeleteObjectStoreBug = isIEOrEdge;
    const hangsOnDeleteLargeKeyRange = isIEOrEdge;
    const dexieStackFrameFilter = frame => !/(dexie\.js|dexie\.min\.js)/.test(frame);
    const DBNAMES_DB = '__dbnames';
    const READONLY = 'readonly';
    const READWRITE = 'readwrite';

    function combine(filter1, filter2) {
        return filter1 ?
            filter2 ?
                function () { return filter1.apply(this, arguments) && filter2.apply(this, arguments); } :
                filter1 :
            filter2;
    }

    const AnyRange = {
        type: 3 ,
        lower: -Infinity,
        lowerOpen: false,
        upper: [[]],
        upperOpen: false
    };

    function workaroundForUndefinedPrimKey(keyPath) {
        return typeof keyPath === "string" && !/\./.test(keyPath)
            ? (obj) => {
                if (obj[keyPath] === undefined && (keyPath in obj)) {
                    obj = deepClone(obj);
                    delete obj[keyPath];
                }
                return obj;
            }
            : (obj) => obj;
    }

    class Table {
        _trans(mode, fn, writeLocked) {
            const trans = this._tx || PSD.trans;
            const tableName = this.name;
            function checkTableInTransaction(resolve, reject, trans) {
                if (!trans.schema[tableName])
                    throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
                return fn(trans.idbtrans, trans);
            }
            const wasRootExec = beginMicroTickScope();
            try {
                return trans && trans.db === this.db ?
                    trans === PSD.trans ?
                        trans._promise(mode, checkTableInTransaction, writeLocked) :
                        newScope(() => trans._promise(mode, checkTableInTransaction, writeLocked), { trans: trans, transless: PSD.transless || PSD }) :
                    tempTransaction(this.db, mode, [this.name], checkTableInTransaction);
            }
            finally {
                if (wasRootExec)
                    endMicroTickScope();
            }
        }
        get(keyOrCrit, cb) {
            if (keyOrCrit && keyOrCrit.constructor === Object)
                return this.where(keyOrCrit).first(cb);
            return this._trans('readonly', (trans) => {
                return this.core.get({ trans, key: keyOrCrit })
                    .then(res => this.hook.reading.fire(res));
            }).then(cb);
        }
        where(indexOrCrit) {
            if (typeof indexOrCrit === 'string')
                return new this.db.WhereClause(this, indexOrCrit);
            if (isArray(indexOrCrit))
                return new this.db.WhereClause(this, `[${indexOrCrit.join('+')}]`);
            const keyPaths = keys(indexOrCrit);
            if (keyPaths.length === 1)
                return this
                    .where(keyPaths[0])
                    .equals(indexOrCrit[keyPaths[0]]);
            const compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(ix => ix.compound &&
                keyPaths.every(keyPath => ix.keyPath.indexOf(keyPath) >= 0) &&
                ix.keyPath.every(keyPath => keyPaths.indexOf(keyPath) >= 0))[0];
            if (compoundIndex && this.db._maxKey !== maxString)
                return this
                    .where(compoundIndex.name)
                    .equals(compoundIndex.keyPath.map(kp => indexOrCrit[kp]));
            if (!compoundIndex && debug)
                console.warn(`The query ${JSON.stringify(indexOrCrit)} on ${this.name} would benefit of a ` +
                    `compound index [${keyPaths.join('+')}]`);
            const { idxByName } = this.schema;
            const idb = this.db._deps.indexedDB;
            function equals(a, b) {
                try {
                    return idb.cmp(a, b) === 0;
                }
                catch (e) {
                    return false;
                }
            }
            const [idx, filterFunction] = keyPaths.reduce(([prevIndex, prevFilterFn], keyPath) => {
                const index = idxByName[keyPath];
                const value = indexOrCrit[keyPath];
                return [
                    prevIndex || index,
                    prevIndex || !index ?
                        combine(prevFilterFn, index && index.multi ?
                            x => {
                                const prop = getByKeyPath(x, keyPath);
                                return isArray(prop) && prop.some(item => equals(value, item));
                            } : x => equals(value, getByKeyPath(x, keyPath)))
                        : prevFilterFn
                ];
            }, [null, null]);
            return idx ?
                this.where(idx.name).equals(indexOrCrit[idx.keyPath])
                    .filter(filterFunction) :
                compoundIndex ?
                    this.filter(filterFunction) :
                    this.where(keyPaths).equals('');
        }
        filter(filterFunction) {
            return this.toCollection().and(filterFunction);
        }
        count(thenShortcut) {
            return this.toCollection().count(thenShortcut);
        }
        offset(offset) {
            return this.toCollection().offset(offset);
        }
        limit(numRows) {
            return this.toCollection().limit(numRows);
        }
        each(callback) {
            return this.toCollection().each(callback);
        }
        toArray(thenShortcut) {
            return this.toCollection().toArray(thenShortcut);
        }
        toCollection() {
            return new this.db.Collection(new this.db.WhereClause(this));
        }
        orderBy(index) {
            return new this.db.Collection(new this.db.WhereClause(this, isArray(index) ?
                `[${index.join('+')}]` :
                index));
        }
        reverse() {
            return this.toCollection().reverse();
        }
        mapToClass(constructor) {
            this.schema.mappedClass = constructor;
            const readHook = obj => {
                if (!obj)
                    return obj;
                const res = Object.create(constructor.prototype);
                for (var m in obj)
                    if (hasOwn(obj, m))
                        try {
                            res[m] = obj[m];
                        }
                        catch (_) { }
                return res;
            };
            if (this.schema.readHook) {
                this.hook.reading.unsubscribe(this.schema.readHook);
            }
            this.schema.readHook = readHook;
            this.hook("reading", readHook);
            return constructor;
        }
        defineClass() {
            function Class(content) {
                extend(this, content);
            }
            return this.mapToClass(Class);
        }
        add(obj, key) {
            const { auto, keyPath } = this.schema.primKey;
            let objToAdd = obj;
            if (keyPath && auto) {
                objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
            }
            return this._trans('readwrite', trans => {
                return this.core.mutate({ trans, type: 'add', keys: key != null ? [key] : null, values: [objToAdd] });
            }).then(res => res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult)
                .then(lastResult => {
                if (keyPath) {
                    try {
                        setByKeyPath(obj, keyPath, lastResult);
                    }
                    catch (_) { }
                }
                return lastResult;
            });
        }
        update(keyOrObject, modifications) {
            if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {
                const key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
                if (key === undefined)
                    return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
                try {
                    if (typeof modifications !== "function") {
                        keys(modifications).forEach(keyPath => {
                            setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
                        });
                    }
                    else {
                        modifications(keyOrObject, { value: keyOrObject, primKey: key });
                    }
                }
                catch (_a) {
                }
                return this.where(":id").equals(key).modify(modifications);
            }
            else {
                return this.where(":id").equals(keyOrObject).modify(modifications);
            }
        }
        put(obj, key) {
            const { auto, keyPath } = this.schema.primKey;
            let objToAdd = obj;
            if (keyPath && auto) {
                objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
            }
            return this._trans('readwrite', trans => this.core.mutate({ trans, type: 'put', values: [objToAdd], keys: key != null ? [key] : null }))
                .then(res => res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult)
                .then(lastResult => {
                if (keyPath) {
                    try {
                        setByKeyPath(obj, keyPath, lastResult);
                    }
                    catch (_) { }
                }
                return lastResult;
            });
        }
        delete(key) {
            return this._trans('readwrite', trans => this.core.mutate({ trans, type: 'delete', keys: [key] }))
                .then(res => res.numFailures ? DexiePromise.reject(res.failures[0]) : undefined);
        }
        clear() {
            return this._trans('readwrite', trans => this.core.mutate({ trans, type: 'deleteRange', range: AnyRange }))
                .then(res => res.numFailures ? DexiePromise.reject(res.failures[0]) : undefined);
        }
        bulkGet(keys) {
            return this._trans('readonly', trans => {
                return this.core.getMany({
                    keys,
                    trans
                }).then(result => result.map(res => this.hook.reading.fire(res)));
            });
        }
        bulkAdd(objects, keysOrOptions, options) {
            const keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
            options = options || (keys ? undefined : keysOrOptions);
            const wantResults = options ? options.allKeys : undefined;
            return this._trans('readwrite', trans => {
                const { auto, keyPath } = this.schema.primKey;
                if (keyPath && keys)
                    throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
                if (keys && keys.length !== objects.length)
                    throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                const numObjects = objects.length;
                let objectsToAdd = keyPath && auto ?
                    objects.map(workaroundForUndefinedPrimKey(keyPath)) :
                    objects;
                return this.core.mutate({ trans, type: 'add', keys: keys, values: objectsToAdd, wantResults })
                    .then(({ numFailures, results, lastResult, failures }) => {
                    const result = wantResults ? results : lastResult;
                    if (numFailures === 0)
                        return result;
                    throw new BulkError(`${this.name}.bulkAdd(): ${numFailures} of ${numObjects} operations failed`, failures);
                });
            });
        }
        bulkPut(objects, keysOrOptions, options) {
            const keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
            options = options || (keys ? undefined : keysOrOptions);
            const wantResults = options ? options.allKeys : undefined;
            return this._trans('readwrite', trans => {
                const { auto, keyPath } = this.schema.primKey;
                if (keyPath && keys)
                    throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
                if (keys && keys.length !== objects.length)
                    throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                const numObjects = objects.length;
                let objectsToPut = keyPath && auto ?
                    objects.map(workaroundForUndefinedPrimKey(keyPath)) :
                    objects;
                return this.core.mutate({ trans, type: 'put', keys: keys, values: objectsToPut, wantResults })
                    .then(({ numFailures, results, lastResult, failures }) => {
                    const result = wantResults ? results : lastResult;
                    if (numFailures === 0)
                        return result;
                    throw new BulkError(`${this.name}.bulkPut(): ${numFailures} of ${numObjects} operations failed`, failures);
                });
            });
        }
        bulkDelete(keys) {
            const numKeys = keys.length;
            return this._trans('readwrite', trans => {
                return this.core.mutate({ trans, type: 'delete', keys: keys });
            }).then(({ numFailures, lastResult, failures }) => {
                if (numFailures === 0)
                    return lastResult;
                throw new BulkError(`${this.name}.bulkDelete(): ${numFailures} of ${numKeys} operations failed`, failures);
            });
        }
    }

    function Events(ctx) {
        var evs = {};
        var rv = function (eventName, subscriber) {
            if (subscriber) {
                var i = arguments.length, args = new Array(i - 1);
                while (--i)
                    args[i - 1] = arguments[i];
                evs[eventName].subscribe.apply(null, args);
                return ctx;
            }
            else if (typeof (eventName) === 'string') {
                return evs[eventName];
            }
        };
        rv.addEventType = add;
        for (var i = 1, l = arguments.length; i < l; ++i) {
            add(arguments[i]);
        }
        return rv;
        function add(eventName, chainFunction, defaultFunction) {
            if (typeof eventName === 'object')
                return addConfiguredEvents(eventName);
            if (!chainFunction)
                chainFunction = reverseStoppableEventChain;
            if (!defaultFunction)
                defaultFunction = nop;
            var context = {
                subscribers: [],
                fire: defaultFunction,
                subscribe: function (cb) {
                    if (context.subscribers.indexOf(cb) === -1) {
                        context.subscribers.push(cb);
                        context.fire = chainFunction(context.fire, cb);
                    }
                },
                unsubscribe: function (cb) {
                    context.subscribers = context.subscribers.filter(function (fn) { return fn !== cb; });
                    context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
                }
            };
            evs[eventName] = rv[eventName] = context;
            return context;
        }
        function addConfiguredEvents(cfg) {
            keys(cfg).forEach(function (eventName) {
                var args = cfg[eventName];
                if (isArray(args)) {
                    add(eventName, cfg[eventName][0], cfg[eventName][1]);
                }
                else if (args === 'asap') {
                    var context = add(eventName, mirror, function fire() {
                        var i = arguments.length, args = new Array(i);
                        while (i--)
                            args[i] = arguments[i];
                        context.subscribers.forEach(function (fn) {
                            asap$1(function fireEvent() {
                                fn.apply(null, args);
                            });
                        });
                    });
                }
                else
                    throw new exceptions.InvalidArgument("Invalid event config");
            });
        }
    }

    function makeClassConstructor(prototype, constructor) {
        derive(constructor).from({ prototype });
        return constructor;
    }

    function createTableConstructor(db) {
        return makeClassConstructor(Table.prototype, function Table(name, tableSchema, trans) {
            this.db = db;
            this._tx = trans;
            this.name = name;
            this.schema = tableSchema;
            this.hook = db._allTables[name] ? db._allTables[name].hook : Events(null, {
                "creating": [hookCreatingChain, nop],
                "reading": [pureFunctionChain, mirror],
                "updating": [hookUpdatingChain, nop],
                "deleting": [hookDeletingChain, nop]
            });
        });
    }

    function isPlainKeyRange(ctx, ignoreLimitFilter) {
        return !(ctx.filter || ctx.algorithm || ctx.or) &&
            (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
    }
    function addFilter(ctx, fn) {
        ctx.filter = combine(ctx.filter, fn);
    }
    function addReplayFilter(ctx, factory, isLimitFilter) {
        var curr = ctx.replayFilter;
        ctx.replayFilter = curr ? () => combine(curr(), factory()) : factory;
        ctx.justLimit = isLimitFilter && !curr;
    }
    function addMatchFilter(ctx, fn) {
        ctx.isMatch = combine(ctx.isMatch, fn);
    }
    function getIndexOrStore(ctx, coreSchema) {
        if (ctx.isPrimKey)
            return coreSchema.primaryKey;
        const index = coreSchema.getIndexByKeyPath(ctx.index);
        if (!index)
            throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + coreSchema.name + " is not indexed");
        return index;
    }
    function openCursor(ctx, coreTable, trans) {
        const index = getIndexOrStore(ctx, coreTable.schema);
        return coreTable.openCursor({
            trans,
            values: !ctx.keysOnly,
            reverse: ctx.dir === 'prev',
            unique: !!ctx.unique,
            query: {
                index,
                range: ctx.range
            }
        });
    }
    function iter(ctx, fn, coreTrans, coreTable) {
        const filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
        if (!ctx.or) {
            return iterate(openCursor(ctx, coreTable, coreTrans), combine(ctx.algorithm, filter), fn, !ctx.keysOnly && ctx.valueMapper);
        }
        else {
            const set = {};
            const union = (item, cursor, advance) => {
                if (!filter || filter(cursor, advance, result => cursor.stop(result), err => cursor.fail(err))) {
                    var primaryKey = cursor.primaryKey;
                    var key = '' + primaryKey;
                    if (key === '[object ArrayBuffer]')
                        key = '' + new Uint8Array(primaryKey);
                    if (!hasOwn(set, key)) {
                        set[key] = true;
                        fn(item, cursor, advance);
                    }
                }
            };
            return Promise.all([
                ctx.or._iterate(union, coreTrans),
                iterate(openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)
            ]);
        }
    }
    function iterate(cursorPromise, filter, fn, valueMapper) {
        var mappedFn = valueMapper ? (x, c, a) => fn(valueMapper(x), c, a) : fn;
        var wrappedFn = wrap(mappedFn);
        return cursorPromise.then(cursor => {
            if (cursor) {
                return cursor.start(() => {
                    var c = () => cursor.continue();
                    if (!filter || filter(cursor, advancer => c = advancer, val => { cursor.stop(val); c = nop; }, e => { cursor.fail(e); c = nop; }))
                        wrappedFn(cursor.value, cursor, advancer => c = advancer);
                    c();
                });
            }
        });
    }

    function cmp(a, b) {
        try {
            const ta = type(a);
            const tb = type(b);
            if (ta !== tb) {
                if (ta === 'Array')
                    return 1;
                if (tb === 'Array')
                    return -1;
                if (ta === 'binary')
                    return 1;
                if (tb === 'binary')
                    return -1;
                if (ta === 'string')
                    return 1;
                if (tb === 'string')
                    return -1;
                if (ta === 'Date')
                    return 1;
                if (tb !== 'Date')
                    return NaN;
                return -1;
            }
            switch (ta) {
                case 'number':
                case 'Date':
                case 'string':
                    return a > b ? 1 : a < b ? -1 : 0;
                case 'binary': {
                    return compareUint8Arrays(getUint8Array(a), getUint8Array(b));
                }
                case 'Array':
                    return compareArrays(a, b);
            }
        }
        catch (_a) { }
        return NaN;
    }
    function compareArrays(a, b) {
        const al = a.length;
        const bl = b.length;
        const l = al < bl ? al : bl;
        for (let i = 0; i < l; ++i) {
            const res = cmp(a[i], b[i]);
            if (res !== 0)
                return res;
        }
        return al === bl ? 0 : al < bl ? -1 : 1;
    }
    function compareUint8Arrays(a, b) {
        const al = a.length;
        const bl = b.length;
        const l = al < bl ? al : bl;
        for (let i = 0; i < l; ++i) {
            if (a[i] !== b[i])
                return a[i] < b[i] ? -1 : 1;
        }
        return al === bl ? 0 : al < bl ? -1 : 1;
    }
    function type(x) {
        const t = typeof x;
        if (t !== 'object')
            return t;
        if (ArrayBuffer.isView(x))
            return 'binary';
        const tsTag = toStringTag(x);
        return tsTag === 'ArrayBuffer' ? 'binary' : tsTag;
    }
    function getUint8Array(a) {
        if (a instanceof Uint8Array)
            return a;
        if (ArrayBuffer.isView(a))
            return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
        return new Uint8Array(a);
    }

    class Collection {
        _read(fn, cb) {
            var ctx = this._ctx;
            return ctx.error ?
                ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                ctx.table._trans('readonly', fn).then(cb);
        }
        _write(fn) {
            var ctx = this._ctx;
            return ctx.error ?
                ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                ctx.table._trans('readwrite', fn, "locked");
        }
        _addAlgorithm(fn) {
            var ctx = this._ctx;
            ctx.algorithm = combine(ctx.algorithm, fn);
        }
        _iterate(fn, coreTrans) {
            return iter(this._ctx, fn, coreTrans, this._ctx.table.core);
        }
        clone(props) {
            var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
            if (props)
                extend(ctx, props);
            rv._ctx = ctx;
            return rv;
        }
        raw() {
            this._ctx.valueMapper = null;
            return this;
        }
        each(fn) {
            var ctx = this._ctx;
            return this._read(trans => iter(ctx, fn, trans, ctx.table.core));
        }
        count(cb) {
            return this._read(trans => {
                const ctx = this._ctx;
                const coreTable = ctx.table.core;
                if (isPlainKeyRange(ctx, true)) {
                    return coreTable.count({
                        trans,
                        query: {
                            index: getIndexOrStore(ctx, coreTable.schema),
                            range: ctx.range
                        }
                    }).then(count => Math.min(count, ctx.limit));
                }
                else {
                    var count = 0;
                    return iter(ctx, () => { ++count; return false; }, trans, coreTable)
                        .then(() => count);
                }
            }).then(cb);
        }
        sortBy(keyPath, cb) {
            const parts = keyPath.split('.').reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
            function getval(obj, i) {
                if (i)
                    return getval(obj[parts[i]], i - 1);
                return obj[lastPart];
            }
            var order = this._ctx.dir === "next" ? 1 : -1;
            function sorter(a, b) {
                var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
                return aVal < bVal ? -order : aVal > bVal ? order : 0;
            }
            return this.toArray(function (a) {
                return a.sort(sorter);
            }).then(cb);
        }
        toArray(cb) {
            return this._read(trans => {
                var ctx = this._ctx;
                if (ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                    const { valueMapper } = ctx;
                    const index = getIndexOrStore(ctx, ctx.table.core.schema);
                    return ctx.table.core.query({
                        trans,
                        limit: ctx.limit,
                        values: true,
                        query: {
                            index,
                            range: ctx.range
                        }
                    }).then(({ result }) => valueMapper ? result.map(valueMapper) : result);
                }
                else {
                    const a = [];
                    return iter(ctx, item => a.push(item), trans, ctx.table.core).then(() => a);
                }
            }, cb);
        }
        offset(offset) {
            var ctx = this._ctx;
            if (offset <= 0)
                return this;
            ctx.offset += offset;
            if (isPlainKeyRange(ctx)) {
                addReplayFilter(ctx, () => {
                    var offsetLeft = offset;
                    return (cursor, advance) => {
                        if (offsetLeft === 0)
                            return true;
                        if (offsetLeft === 1) {
                            --offsetLeft;
                            return false;
                        }
                        advance(() => {
                            cursor.advance(offsetLeft);
                            offsetLeft = 0;
                        });
                        return false;
                    };
                });
            }
            else {
                addReplayFilter(ctx, () => {
                    var offsetLeft = offset;
                    return () => (--offsetLeft < 0);
                });
            }
            return this;
        }
        limit(numRows) {
            this._ctx.limit = Math.min(this._ctx.limit, numRows);
            addReplayFilter(this._ctx, () => {
                var rowsLeft = numRows;
                return function (cursor, advance, resolve) {
                    if (--rowsLeft <= 0)
                        advance(resolve);
                    return rowsLeft >= 0;
                };
            }, true);
            return this;
        }
        until(filterFunction, bIncludeStopEntry) {
            addFilter(this._ctx, function (cursor, advance, resolve) {
                if (filterFunction(cursor.value)) {
                    advance(resolve);
                    return bIncludeStopEntry;
                }
                else {
                    return true;
                }
            });
            return this;
        }
        first(cb) {
            return this.limit(1).toArray(function (a) { return a[0]; }).then(cb);
        }
        last(cb) {
            return this.reverse().first(cb);
        }
        filter(filterFunction) {
            addFilter(this._ctx, function (cursor) {
                return filterFunction(cursor.value);
            });
            addMatchFilter(this._ctx, filterFunction);
            return this;
        }
        and(filter) {
            return this.filter(filter);
        }
        or(indexName) {
            return new this.db.WhereClause(this._ctx.table, indexName, this);
        }
        reverse() {
            this._ctx.dir = (this._ctx.dir === "prev" ? "next" : "prev");
            if (this._ondirectionchange)
                this._ondirectionchange(this._ctx.dir);
            return this;
        }
        desc() {
            return this.reverse();
        }
        eachKey(cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            return this.each(function (val, cursor) { cb(cursor.key, cursor); });
        }
        eachUniqueKey(cb) {
            this._ctx.unique = "unique";
            return this.eachKey(cb);
        }
        eachPrimaryKey(cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            return this.each(function (val, cursor) { cb(cursor.primaryKey, cursor); });
        }
        keys(cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            var a = [];
            return this.each(function (item, cursor) {
                a.push(cursor.key);
            }).then(function () {
                return a;
            }).then(cb);
        }
        primaryKeys(cb) {
            var ctx = this._ctx;
            if (ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                return this._read(trans => {
                    var index = getIndexOrStore(ctx, ctx.table.core.schema);
                    return ctx.table.core.query({
                        trans,
                        values: false,
                        limit: ctx.limit,
                        query: {
                            index,
                            range: ctx.range
                        }
                    });
                }).then(({ result }) => result).then(cb);
            }
            ctx.keysOnly = !ctx.isMatch;
            var a = [];
            return this.each(function (item, cursor) {
                a.push(cursor.primaryKey);
            }).then(function () {
                return a;
            }).then(cb);
        }
        uniqueKeys(cb) {
            this._ctx.unique = "unique";
            return this.keys(cb);
        }
        firstKey(cb) {
            return this.limit(1).keys(function (a) { return a[0]; }).then(cb);
        }
        lastKey(cb) {
            return this.reverse().firstKey(cb);
        }
        distinct() {
            var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
            if (!idx || !idx.multi)
                return this;
            var set = {};
            addFilter(this._ctx, function (cursor) {
                var strKey = cursor.primaryKey.toString();
                var found = hasOwn(set, strKey);
                set[strKey] = true;
                return !found;
            });
            return this;
        }
        modify(changes) {
            var ctx = this._ctx;
            return this._write(trans => {
                var modifyer;
                if (typeof changes === 'function') {
                    modifyer = changes;
                }
                else {
                    var keyPaths = keys(changes);
                    var numKeys = keyPaths.length;
                    modifyer = function (item) {
                        var anythingModified = false;
                        for (var i = 0; i < numKeys; ++i) {
                            var keyPath = keyPaths[i], val = changes[keyPath];
                            if (getByKeyPath(item, keyPath) !== val) {
                                setByKeyPath(item, keyPath, val);
                                anythingModified = true;
                            }
                        }
                        return anythingModified;
                    };
                }
                const coreTable = ctx.table.core;
                const { outbound, extractKey } = coreTable.schema.primaryKey;
                const limit = this.db._options.modifyChunkSize || 200;
                const totalFailures = [];
                let successCount = 0;
                const failedKeys = [];
                const applyMutateResult = (expectedCount, res) => {
                    const { failures, numFailures } = res;
                    successCount += expectedCount - numFailures;
                    for (let pos of keys(failures)) {
                        totalFailures.push(failures[pos]);
                    }
                };
                return this.clone().primaryKeys().then(keys => {
                    const nextChunk = (offset) => {
                        const count = Math.min(limit, keys.length - offset);
                        return coreTable.getMany({
                            trans,
                            keys: keys.slice(offset, offset + count),
                            cache: "immutable"
                        }).then(values => {
                            const addValues = [];
                            const putValues = [];
                            const putKeys = outbound ? [] : null;
                            const deleteKeys = [];
                            for (let i = 0; i < count; ++i) {
                                const origValue = values[i];
                                const ctx = {
                                    value: deepClone(origValue),
                                    primKey: keys[offset + i]
                                };
                                if (modifyer.call(ctx, ctx.value, ctx) !== false) {
                                    if (ctx.value == null) {
                                        deleteKeys.push(keys[offset + i]);
                                    }
                                    else if (!outbound && cmp(extractKey(origValue), extractKey(ctx.value)) !== 0) {
                                        deleteKeys.push(keys[offset + i]);
                                        addValues.push(ctx.value);
                                    }
                                    else {
                                        putValues.push(ctx.value);
                                        if (outbound)
                                            putKeys.push(keys[offset + i]);
                                    }
                                }
                            }
                            const criteria = isPlainKeyRange(ctx) &&
                                ctx.limit === Infinity &&
                                (typeof changes !== 'function' || changes === deleteCallback) && {
                                index: ctx.index,
                                range: ctx.range
                            };
                            return Promise.resolve(addValues.length > 0 &&
                                coreTable.mutate({ trans, type: 'add', values: addValues })
                                    .then(res => {
                                    for (let pos in res.failures) {
                                        deleteKeys.splice(parseInt(pos), 1);
                                    }
                                    applyMutateResult(addValues.length, res);
                                })).then(() => (putValues.length > 0 || (criteria && typeof changes === 'object')) &&
                                coreTable.mutate({
                                    trans,
                                    type: 'put',
                                    keys: putKeys,
                                    values: putValues,
                                    criteria,
                                    changeSpec: typeof changes !== 'function'
                                        && changes
                                }).then(res => applyMutateResult(putValues.length, res))).then(() => (deleteKeys.length > 0 || (criteria && changes === deleteCallback)) &&
                                coreTable.mutate({
                                    trans,
                                    type: 'delete',
                                    keys: deleteKeys,
                                    criteria
                                }).then(res => applyMutateResult(deleteKeys.length, res))).then(() => {
                                return keys.length > offset + count && nextChunk(offset + limit);
                            });
                        });
                    };
                    return nextChunk(0).then(() => {
                        if (totalFailures.length > 0)
                            throw new ModifyError("Error modifying one or more objects", totalFailures, successCount, failedKeys);
                        return keys.length;
                    });
                });
            });
        }
        delete() {
            var ctx = this._ctx, range = ctx.range;
            if (isPlainKeyRange(ctx) &&
                ((ctx.isPrimKey && !hangsOnDeleteLargeKeyRange) || range.type === 3 ))
             {
                return this._write(trans => {
                    const { primaryKey } = ctx.table.core.schema;
                    const coreRange = range;
                    return ctx.table.core.count({ trans, query: { index: primaryKey, range: coreRange } }).then(count => {
                        return ctx.table.core.mutate({ trans, type: 'deleteRange', range: coreRange })
                            .then(({ failures, lastResult, results, numFailures }) => {
                            if (numFailures)
                                throw new ModifyError("Could not delete some values", Object.keys(failures).map(pos => failures[pos]), count - numFailures);
                            return count - numFailures;
                        });
                    });
                });
            }
            return this.modify(deleteCallback);
        }
    }
    const deleteCallback = (value, ctx) => ctx.value = null;

    function createCollectionConstructor(db) {
        return makeClassConstructor(Collection.prototype, function Collection(whereClause, keyRangeGenerator) {
            this.db = db;
            let keyRange = AnyRange, error = null;
            if (keyRangeGenerator)
                try {
                    keyRange = keyRangeGenerator();
                }
                catch (ex) {
                    error = ex;
                }
            const whereCtx = whereClause._ctx;
            const table = whereCtx.table;
            const readingHook = table.hook.reading.fire;
            this._ctx = {
                table: table,
                index: whereCtx.index,
                isPrimKey: (!whereCtx.index || (table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name)),
                range: keyRange,
                keysOnly: false,
                dir: "next",
                unique: "",
                algorithm: null,
                filter: null,
                replayFilter: null,
                justLimit: true,
                isMatch: null,
                offset: 0,
                limit: Infinity,
                error: error,
                or: whereCtx.or,
                valueMapper: readingHook !== mirror ? readingHook : null
            };
        });
    }

    function simpleCompare(a, b) {
        return a < b ? -1 : a === b ? 0 : 1;
    }
    function simpleCompareReverse(a, b) {
        return a > b ? -1 : a === b ? 0 : 1;
    }

    function fail(collectionOrWhereClause, err, T) {
        var collection = collectionOrWhereClause instanceof WhereClause ?
            new collectionOrWhereClause.Collection(collectionOrWhereClause) :
            collectionOrWhereClause;
        collection._ctx.error = T ? new T(err) : new TypeError(err);
        return collection;
    }
    function emptyCollection(whereClause) {
        return new whereClause.Collection(whereClause, () => rangeEqual("")).limit(0);
    }
    function upperFactory(dir) {
        return dir === "next" ?
            (s) => s.toUpperCase() :
            (s) => s.toLowerCase();
    }
    function lowerFactory(dir) {
        return dir === "next" ?
            (s) => s.toLowerCase() :
            (s) => s.toUpperCase();
    }
    function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
        var length = Math.min(key.length, lowerNeedle.length);
        var llp = -1;
        for (var i = 0; i < length; ++i) {
            var lwrKeyChar = lowerKey[i];
            if (lwrKeyChar !== lowerNeedle[i]) {
                if (cmp(key[i], upperNeedle[i]) < 0)
                    return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
                if (cmp(key[i], lowerNeedle[i]) < 0)
                    return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
                if (llp >= 0)
                    return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
                return null;
            }
            if (cmp(key[i], lwrKeyChar) < 0)
                llp = i;
        }
        if (length < lowerNeedle.length && dir === "next")
            return key + upperNeedle.substr(key.length);
        if (length < key.length && dir === "prev")
            return key.substr(0, upperNeedle.length);
        return (llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1));
    }
    function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
        var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
        if (!needles.every(s => typeof s === 'string')) {
            return fail(whereClause, STRING_EXPECTED);
        }
        function initDirection(dir) {
            upper = upperFactory(dir);
            lower = lowerFactory(dir);
            compare = (dir === "next" ? simpleCompare : simpleCompareReverse);
            var needleBounds = needles.map(function (needle) {
                return { lower: lower(needle), upper: upper(needle) };
            }).sort(function (a, b) {
                return compare(a.lower, b.lower);
            });
            upperNeedles = needleBounds.map(function (nb) { return nb.upper; });
            lowerNeedles = needleBounds.map(function (nb) { return nb.lower; });
            direction = dir;
            nextKeySuffix = (dir === "next" ? "" : suffix);
        }
        initDirection("next");
        var c = new whereClause.Collection(whereClause, () => createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix));
        c._ondirectionchange = function (direction) {
            initDirection(direction);
        };
        var firstPossibleNeedle = 0;
        c._addAlgorithm(function (cursor, advance, resolve) {
            var key = cursor.key;
            if (typeof key !== 'string')
                return false;
            var lowerKey = lower(key);
            if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
                return true;
            }
            else {
                var lowestPossibleCasing = null;
                for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
                    var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
                    if (casing === null && lowestPossibleCasing === null)
                        firstPossibleNeedle = i + 1;
                    else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
                        lowestPossibleCasing = casing;
                    }
                }
                if (lowestPossibleCasing !== null) {
                    advance(function () { cursor.continue(lowestPossibleCasing + nextKeySuffix); });
                }
                else {
                    advance(resolve);
                }
                return false;
            }
        });
        return c;
    }
    function createRange(lower, upper, lowerOpen, upperOpen) {
        return {
            type: 2 ,
            lower,
            upper,
            lowerOpen,
            upperOpen
        };
    }
    function rangeEqual(value) {
        return {
            type: 1 ,
            lower: value,
            upper: value
        };
    }

    class WhereClause {
        get Collection() {
            return this._ctx.table.db.Collection;
        }
        between(lower, upper, includeLower, includeUpper) {
            includeLower = includeLower !== false;
            includeUpper = includeUpper === true;
            try {
                if ((this._cmp(lower, upper) > 0) ||
                    (this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)))
                    return emptyCollection(this);
                return new this.Collection(this, () => createRange(lower, upper, !includeLower, !includeUpper));
            }
            catch (e) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
        }
        equals(value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, () => rangeEqual(value));
        }
        above(value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, () => createRange(value, undefined, true));
        }
        aboveOrEqual(value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, () => createRange(value, undefined, false));
        }
        below(value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, () => createRange(undefined, value, false, true));
        }
        belowOrEqual(value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, () => createRange(undefined, value));
        }
        startsWith(str) {
            if (typeof str !== 'string')
                return fail(this, STRING_EXPECTED);
            return this.between(str, str + maxString, true, true);
        }
        startsWithIgnoreCase(str) {
            if (str === "")
                return this.startsWith(str);
            return addIgnoreCaseAlgorithm(this, (x, a) => x.indexOf(a[0]) === 0, [str], maxString);
        }
        equalsIgnoreCase(str) {
            return addIgnoreCaseAlgorithm(this, (x, a) => x === a[0], [str], "");
        }
        anyOfIgnoreCase() {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
                return emptyCollection(this);
            return addIgnoreCaseAlgorithm(this, (x, a) => a.indexOf(x) !== -1, set, "");
        }
        startsWithAnyOfIgnoreCase() {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
                return emptyCollection(this);
            return addIgnoreCaseAlgorithm(this, (x, a) => a.some(n => x.indexOf(n) === 0), set, maxString);
        }
        anyOf() {
            const set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            let compare = this._cmp;
            try {
                set.sort(compare);
            }
            catch (e) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
            if (set.length === 0)
                return emptyCollection(this);
            const c = new this.Collection(this, () => createRange(set[0], set[set.length - 1]));
            c._ondirectionchange = direction => {
                compare = (direction === "next" ?
                    this._ascending :
                    this._descending);
                set.sort(compare);
            };
            let i = 0;
            c._addAlgorithm((cursor, advance, resolve) => {
                const key = cursor.key;
                while (compare(key, set[i]) > 0) {
                    ++i;
                    if (i === set.length) {
                        advance(resolve);
                        return false;
                    }
                }
                if (compare(key, set[i]) === 0) {
                    return true;
                }
                else {
                    advance(() => { cursor.continue(set[i]); });
                    return false;
                }
            });
            return c;
        }
        notEqual(value) {
            return this.inAnyRange([[minKey, value], [value, this.db._maxKey]], { includeLowers: false, includeUppers: false });
        }
        noneOf() {
            const set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
                return new this.Collection(this);
            try {
                set.sort(this._ascending);
            }
            catch (e) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
            const ranges = set.reduce((res, val) => res ?
                res.concat([[res[res.length - 1][1], val]]) :
                [[minKey, val]], null);
            ranges.push([set[set.length - 1], this.db._maxKey]);
            return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
        }
        inAnyRange(ranges, options) {
            const cmp = this._cmp, ascending = this._ascending, descending = this._descending, min = this._min, max = this._max;
            if (ranges.length === 0)
                return emptyCollection(this);
            if (!ranges.every(range => range[0] !== undefined &&
                range[1] !== undefined &&
                ascending(range[0], range[1]) <= 0)) {
                return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
            }
            const includeLowers = !options || options.includeLowers !== false;
            const includeUppers = options && options.includeUppers === true;
            function addRange(ranges, newRange) {
                let i = 0, l = ranges.length;
                for (; i < l; ++i) {
                    const range = ranges[i];
                    if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                        range[0] = min(range[0], newRange[0]);
                        range[1] = max(range[1], newRange[1]);
                        break;
                    }
                }
                if (i === l)
                    ranges.push(newRange);
                return ranges;
            }
            let sortDirection = ascending;
            function rangeSorter(a, b) { return sortDirection(a[0], b[0]); }
            let set;
            try {
                set = ranges.reduce(addRange, []);
                set.sort(rangeSorter);
            }
            catch (ex) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
            let rangePos = 0;
            const keyIsBeyondCurrentEntry = includeUppers ?
                key => ascending(key, set[rangePos][1]) > 0 :
                key => ascending(key, set[rangePos][1]) >= 0;
            const keyIsBeforeCurrentEntry = includeLowers ?
                key => descending(key, set[rangePos][0]) > 0 :
                key => descending(key, set[rangePos][0]) >= 0;
            function keyWithinCurrentRange(key) {
                return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
            }
            let checkKey = keyIsBeyondCurrentEntry;
            const c = new this.Collection(this, () => createRange(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers));
            c._ondirectionchange = direction => {
                if (direction === "next") {
                    checkKey = keyIsBeyondCurrentEntry;
                    sortDirection = ascending;
                }
                else {
                    checkKey = keyIsBeforeCurrentEntry;
                    sortDirection = descending;
                }
                set.sort(rangeSorter);
            };
            c._addAlgorithm((cursor, advance, resolve) => {
                var key = cursor.key;
                while (checkKey(key)) {
                    ++rangePos;
                    if (rangePos === set.length) {
                        advance(resolve);
                        return false;
                    }
                }
                if (keyWithinCurrentRange(key)) {
                    return true;
                }
                else if (this._cmp(key, set[rangePos][1]) === 0 || this._cmp(key, set[rangePos][0]) === 0) {
                    return false;
                }
                else {
                    advance(() => {
                        if (sortDirection === ascending)
                            cursor.continue(set[rangePos][0]);
                        else
                            cursor.continue(set[rangePos][1]);
                    });
                    return false;
                }
            });
            return c;
        }
        startsWithAnyOf() {
            const set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (!set.every(s => typeof s === 'string')) {
                return fail(this, "startsWithAnyOf() only works with strings");
            }
            if (set.length === 0)
                return emptyCollection(this);
            return this.inAnyRange(set.map((str) => [str, str + maxString]));
        }
    }

    function createWhereClauseConstructor(db) {
        return makeClassConstructor(WhereClause.prototype, function WhereClause(table, index, orCollection) {
            this.db = db;
            this._ctx = {
                table: table,
                index: index === ":id" ? null : index,
                or: orCollection
            };
            const indexedDB = db._deps.indexedDB;
            if (!indexedDB)
                throw new exceptions.MissingAPI();
            this._cmp = this._ascending = indexedDB.cmp.bind(indexedDB);
            this._descending = (a, b) => indexedDB.cmp(b, a);
            this._max = (a, b) => indexedDB.cmp(a, b) > 0 ? a : b;
            this._min = (a, b) => indexedDB.cmp(a, b) < 0 ? a : b;
            this._IDBKeyRange = db._deps.IDBKeyRange;
        });
    }

    function eventRejectHandler(reject) {
        return wrap(function (event) {
            preventDefault(event);
            reject(event.target.error);
            return false;
        });
    }
    function preventDefault(event) {
        if (event.stopPropagation)
            event.stopPropagation();
        if (event.preventDefault)
            event.preventDefault();
    }

    const DEXIE_STORAGE_MUTATED_EVENT_NAME = 'storagemutated';
    const STORAGE_MUTATED_DOM_EVENT_NAME = 'x-storagemutated-1';
    const globalEvents = Events(null, DEXIE_STORAGE_MUTATED_EVENT_NAME);

    class Transaction {
        _lock() {
            assert(!PSD.global);
            ++this._reculock;
            if (this._reculock === 1 && !PSD.global)
                PSD.lockOwnerFor = this;
            return this;
        }
        _unlock() {
            assert(!PSD.global);
            if (--this._reculock === 0) {
                if (!PSD.global)
                    PSD.lockOwnerFor = null;
                while (this._blockedFuncs.length > 0 && !this._locked()) {
                    var fnAndPSD = this._blockedFuncs.shift();
                    try {
                        usePSD(fnAndPSD[1], fnAndPSD[0]);
                    }
                    catch (e) { }
                }
            }
            return this;
        }
        _locked() {
            return this._reculock && PSD.lockOwnerFor !== this;
        }
        create(idbtrans) {
            if (!this.mode)
                return this;
            const idbdb = this.db.idbdb;
            const dbOpenError = this.db._state.dbOpenError;
            assert(!this.idbtrans);
            if (!idbtrans && !idbdb) {
                switch (dbOpenError && dbOpenError.name) {
                    case "DatabaseClosedError":
                        throw new exceptions.DatabaseClosed(dbOpenError);
                    case "MissingAPIError":
                        throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
                    default:
                        throw new exceptions.OpenFailed(dbOpenError);
                }
            }
            if (!this.active)
                throw new exceptions.TransactionInactive();
            assert(this._completion._state === null);
            idbtrans = this.idbtrans = idbtrans ||
                (this.db.core
                    ? this.db.core.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability })
                    : idbdb.transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability }));
            idbtrans.onerror = wrap(ev => {
                preventDefault(ev);
                this._reject(idbtrans.error);
            });
            idbtrans.onabort = wrap(ev => {
                preventDefault(ev);
                this.active && this._reject(new exceptions.Abort(idbtrans.error));
                this.active = false;
                this.on("abort").fire(ev);
            });
            idbtrans.oncomplete = wrap(() => {
                this.active = false;
                this._resolve();
                if ('mutatedParts' in idbtrans) {
                    globalEvents.storagemutated.fire(idbtrans["mutatedParts"]);
                }
            });
            return this;
        }
        _promise(mode, fn, bWriteLock) {
            if (mode === 'readwrite' && this.mode !== 'readwrite')
                return rejection(new exceptions.ReadOnly("Transaction is readonly"));
            if (!this.active)
                return rejection(new exceptions.TransactionInactive());
            if (this._locked()) {
                return new DexiePromise((resolve, reject) => {
                    this._blockedFuncs.push([() => {
                            this._promise(mode, fn, bWriteLock).then(resolve, reject);
                        }, PSD]);
                });
            }
            else if (bWriteLock) {
                return newScope(() => {
                    var p = new DexiePromise((resolve, reject) => {
                        this._lock();
                        const rv = fn(resolve, reject, this);
                        if (rv && rv.then)
                            rv.then(resolve, reject);
                    });
                    p.finally(() => this._unlock());
                    p._lib = true;
                    return p;
                });
            }
            else {
                var p = new DexiePromise((resolve, reject) => {
                    var rv = fn(resolve, reject, this);
                    if (rv && rv.then)
                        rv.then(resolve, reject);
                });
                p._lib = true;
                return p;
            }
        }
        _root() {
            return this.parent ? this.parent._root() : this;
        }
        waitFor(promiseLike) {
            var root = this._root();
            const promise = DexiePromise.resolve(promiseLike);
            if (root._waitingFor) {
                root._waitingFor = root._waitingFor.then(() => promise);
            }
            else {
                root._waitingFor = promise;
                root._waitingQueue = [];
                var store = root.idbtrans.objectStore(root.storeNames[0]);
                (function spin() {
                    ++root._spinCount;
                    while (root._waitingQueue.length)
                        (root._waitingQueue.shift())();
                    if (root._waitingFor)
                        store.get(-Infinity).onsuccess = spin;
                }());
            }
            var currentWaitPromise = root._waitingFor;
            return new DexiePromise((resolve, reject) => {
                promise.then(res => root._waitingQueue.push(wrap(resolve.bind(null, res))), err => root._waitingQueue.push(wrap(reject.bind(null, err)))).finally(() => {
                    if (root._waitingFor === currentWaitPromise) {
                        root._waitingFor = null;
                    }
                });
            });
        }
        abort() {
            if (this.active) {
                this.active = false;
                if (this.idbtrans)
                    this.idbtrans.abort();
                this._reject(new exceptions.Abort());
            }
        }
        table(tableName) {
            const memoizedTables = (this._memoizedTables || (this._memoizedTables = {}));
            if (hasOwn(memoizedTables, tableName))
                return memoizedTables[tableName];
            const tableSchema = this.schema[tableName];
            if (!tableSchema) {
                throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
            }
            const transactionBoundTable = new this.db.Table(tableName, tableSchema, this);
            transactionBoundTable.core = this.db.core.table(tableName);
            memoizedTables[tableName] = transactionBoundTable;
            return transactionBoundTable;
        }
    }

    function createTransactionConstructor(db) {
        return makeClassConstructor(Transaction.prototype, function Transaction(mode, storeNames, dbschema, chromeTransactionDurability, parent) {
            this.db = db;
            this.mode = mode;
            this.storeNames = storeNames;
            this.schema = dbschema;
            this.chromeTransactionDurability = chromeTransactionDurability;
            this.idbtrans = null;
            this.on = Events(this, "complete", "error", "abort");
            this.parent = parent || null;
            this.active = true;
            this._reculock = 0;
            this._blockedFuncs = [];
            this._resolve = null;
            this._reject = null;
            this._waitingFor = null;
            this._waitingQueue = null;
            this._spinCount = 0;
            this._completion = new DexiePromise((resolve, reject) => {
                this._resolve = resolve;
                this._reject = reject;
            });
            this._completion.then(() => {
                this.active = false;
                this.on.complete.fire();
            }, e => {
                var wasActive = this.active;
                this.active = false;
                this.on.error.fire(e);
                this.parent ?
                    this.parent._reject(e) :
                    wasActive && this.idbtrans && this.idbtrans.abort();
                return rejection(e);
            });
        });
    }

    function createIndexSpec(name, keyPath, unique, multi, auto, compound, isPrimKey) {
        return {
            name,
            keyPath,
            unique,
            multi,
            auto,
            compound,
            src: (unique && !isPrimKey ? '&' : '') + (multi ? '*' : '') + (auto ? "++" : "") + nameFromKeyPath(keyPath)
        };
    }
    function nameFromKeyPath(keyPath) {
        return typeof keyPath === 'string' ?
            keyPath :
            keyPath ? ('[' + [].join.call(keyPath, '+') + ']') : "";
    }

    function createTableSchema(name, primKey, indexes) {
        return {
            name,
            primKey,
            indexes,
            mappedClass: null,
            idxByName: arrayToObject(indexes, index => [index.name, index])
        };
    }

    function safariMultiStoreFix(storeNames) {
        return storeNames.length === 1 ? storeNames[0] : storeNames;
    }
    let getMaxKey = (IdbKeyRange) => {
        try {
            IdbKeyRange.only([[]]);
            getMaxKey = () => [[]];
            return [[]];
        }
        catch (e) {
            getMaxKey = () => maxString;
            return maxString;
        }
    };

    function getKeyExtractor(keyPath) {
        if (keyPath == null) {
            return () => undefined;
        }
        else if (typeof keyPath === 'string') {
            return getSinglePathKeyExtractor(keyPath);
        }
        else {
            return obj => getByKeyPath(obj, keyPath);
        }
    }
    function getSinglePathKeyExtractor(keyPath) {
        const split = keyPath.split('.');
        if (split.length === 1) {
            return obj => obj[keyPath];
        }
        else {
            return obj => getByKeyPath(obj, keyPath);
        }
    }

    function arrayify(arrayLike) {
        return [].slice.call(arrayLike);
    }
    let _id_counter = 0;
    function getKeyPathAlias(keyPath) {
        return keyPath == null ?
            ":id" :
            typeof keyPath === 'string' ?
                keyPath :
                `[${keyPath.join('+')}]`;
    }
    function createDBCore(db, IdbKeyRange, tmpTrans) {
        function extractSchema(db, trans) {
            const tables = arrayify(db.objectStoreNames);
            return {
                schema: {
                    name: db.name,
                    tables: tables.map(table => trans.objectStore(table)).map(store => {
                        const { keyPath, autoIncrement } = store;
                        const compound = isArray(keyPath);
                        const outbound = keyPath == null;
                        const indexByKeyPath = {};
                        const result = {
                            name: store.name,
                            primaryKey: {
                                name: null,
                                isPrimaryKey: true,
                                outbound,
                                compound,
                                keyPath,
                                autoIncrement,
                                unique: true,
                                extractKey: getKeyExtractor(keyPath)
                            },
                            indexes: arrayify(store.indexNames).map(indexName => store.index(indexName))
                                .map(index => {
                                const { name, unique, multiEntry, keyPath } = index;
                                const compound = isArray(keyPath);
                                const result = {
                                    name,
                                    compound,
                                    keyPath,
                                    unique,
                                    multiEntry,
                                    extractKey: getKeyExtractor(keyPath)
                                };
                                indexByKeyPath[getKeyPathAlias(keyPath)] = result;
                                return result;
                            }),
                            getIndexByKeyPath: (keyPath) => indexByKeyPath[getKeyPathAlias(keyPath)]
                        };
                        indexByKeyPath[":id"] = result.primaryKey;
                        if (keyPath != null) {
                            indexByKeyPath[getKeyPathAlias(keyPath)] = result.primaryKey;
                        }
                        return result;
                    })
                },
                hasGetAll: tables.length > 0 && ('getAll' in trans.objectStore(tables[0])) &&
                    !(typeof navigator !== 'undefined' && /Safari/.test(navigator.userAgent) &&
                        !/(Chrome\/|Edge\/)/.test(navigator.userAgent) &&
                        [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
            };
        }
        function makeIDBKeyRange(range) {
            if (range.type === 3 )
                return null;
            if (range.type === 4 )
                throw new Error("Cannot convert never type to IDBKeyRange");
            const { lower, upper, lowerOpen, upperOpen } = range;
            const idbRange = lower === undefined ?
                upper === undefined ?
                    null :
                    IdbKeyRange.upperBound(upper, !!upperOpen) :
                upper === undefined ?
                    IdbKeyRange.lowerBound(lower, !!lowerOpen) :
                    IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);
            return idbRange;
        }
        function createDbCoreTable(tableSchema) {
            const tableName = tableSchema.name;
            function mutate({ trans, type, keys, values, range }) {
                return new Promise((resolve, reject) => {
                    resolve = wrap(resolve);
                    const store = trans.objectStore(tableName);
                    const outbound = store.keyPath == null;
                    const isAddOrPut = type === "put" || type === "add";
                    if (!isAddOrPut && type !== 'delete' && type !== 'deleteRange')
                        throw new Error("Invalid operation type: " + type);
                    const { length } = keys || values || { length: 1 };
                    if (keys && values && keys.length !== values.length) {
                        throw new Error("Given keys array must have same length as given values array.");
                    }
                    if (length === 0)
                        return resolve({ numFailures: 0, failures: {}, results: [], lastResult: undefined });
                    let req;
                    const reqs = [];
                    const failures = [];
                    let numFailures = 0;
                    const errorHandler = event => {
                        ++numFailures;
                        preventDefault(event);
                    };
                    if (type === 'deleteRange') {
                        if (range.type === 4 )
                            return resolve({ numFailures, failures, results: [], lastResult: undefined });
                        if (range.type === 3 )
                            reqs.push(req = store.clear());
                        else
                            reqs.push(req = store.delete(makeIDBKeyRange(range)));
                    }
                    else {
                        const [args1, args2] = isAddOrPut ?
                            outbound ?
                                [values, keys] :
                                [values, null] :
                            [keys, null];
                        if (isAddOrPut) {
                            for (let i = 0; i < length; ++i) {
                                reqs.push(req = (args2 && args2[i] !== undefined ?
                                    store[type](args1[i], args2[i]) :
                                    store[type](args1[i])));
                                req.onerror = errorHandler;
                            }
                        }
                        else {
                            for (let i = 0; i < length; ++i) {
                                reqs.push(req = store[type](args1[i]));
                                req.onerror = errorHandler;
                            }
                        }
                    }
                    const done = event => {
                        const lastResult = event.target.result;
                        reqs.forEach((req, i) => req.error != null && (failures[i] = req.error));
                        resolve({
                            numFailures,
                            failures,
                            results: type === "delete" ? keys : reqs.map(req => req.result),
                            lastResult
                        });
                    };
                    req.onerror = event => {
                        errorHandler(event);
                        done(event);
                    };
                    req.onsuccess = done;
                });
            }
            function openCursor({ trans, values, query, reverse, unique }) {
                return new Promise((resolve, reject) => {
                    resolve = wrap(resolve);
                    const { index, range } = query;
                    const store = trans.objectStore(tableName);
                    const source = index.isPrimaryKey ?
                        store :
                        store.index(index.name);
                    const direction = reverse ?
                        unique ?
                            "prevunique" :
                            "prev" :
                        unique ?
                            "nextunique" :
                            "next";
                    const req = values || !('openKeyCursor' in source) ?
                        source.openCursor(makeIDBKeyRange(range), direction) :
                        source.openKeyCursor(makeIDBKeyRange(range), direction);
                    req.onerror = eventRejectHandler(reject);
                    req.onsuccess = wrap(ev => {
                        const cursor = req.result;
                        if (!cursor) {
                            resolve(null);
                            return;
                        }
                        cursor.___id = ++_id_counter;
                        cursor.done = false;
                        const _cursorContinue = cursor.continue.bind(cursor);
                        let _cursorContinuePrimaryKey = cursor.continuePrimaryKey;
                        if (_cursorContinuePrimaryKey)
                            _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor);
                        const _cursorAdvance = cursor.advance.bind(cursor);
                        const doThrowCursorIsNotStarted = () => { throw new Error("Cursor not started"); };
                        const doThrowCursorIsStopped = () => { throw new Error("Cursor not stopped"); };
                        cursor.trans = trans;
                        cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsNotStarted;
                        cursor.fail = wrap(reject);
                        cursor.next = function () {
                            let gotOne = 1;
                            return this.start(() => gotOne-- ? this.continue() : this.stop()).then(() => this);
                        };
                        cursor.start = (callback) => {
                            const iterationPromise = new Promise((resolveIteration, rejectIteration) => {
                                resolveIteration = wrap(resolveIteration);
                                req.onerror = eventRejectHandler(rejectIteration);
                                cursor.fail = rejectIteration;
                                cursor.stop = value => {
                                    cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsStopped;
                                    resolveIteration(value);
                                };
                            });
                            const guardedCallback = () => {
                                if (req.result) {
                                    try {
                                        callback();
                                    }
                                    catch (err) {
                                        cursor.fail(err);
                                    }
                                }
                                else {
                                    cursor.done = true;
                                    cursor.start = () => { throw new Error("Cursor behind last entry"); };
                                    cursor.stop();
                                }
                            };
                            req.onsuccess = wrap(ev => {
                                req.onsuccess = guardedCallback;
                                guardedCallback();
                            });
                            cursor.continue = _cursorContinue;
                            cursor.continuePrimaryKey = _cursorContinuePrimaryKey;
                            cursor.advance = _cursorAdvance;
                            guardedCallback();
                            return iterationPromise;
                        };
                        resolve(cursor);
                    }, reject);
                });
            }
            function query(hasGetAll) {
                return (request) => {
                    return new Promise((resolve, reject) => {
                        resolve = wrap(resolve);
                        const { trans, values, limit, query } = request;
                        const nonInfinitLimit = limit === Infinity ? undefined : limit;
                        const { index, range } = query;
                        const store = trans.objectStore(tableName);
                        const source = index.isPrimaryKey ? store : store.index(index.name);
                        const idbKeyRange = makeIDBKeyRange(range);
                        if (limit === 0)
                            return resolve({ result: [] });
                        if (hasGetAll) {
                            const req = values ?
                                source.getAll(idbKeyRange, nonInfinitLimit) :
                                source.getAllKeys(idbKeyRange, nonInfinitLimit);
                            req.onsuccess = event => resolve({ result: event.target.result });
                            req.onerror = eventRejectHandler(reject);
                        }
                        else {
                            let count = 0;
                            const req = values || !('openKeyCursor' in source) ?
                                source.openCursor(idbKeyRange) :
                                source.openKeyCursor(idbKeyRange);
                            const result = [];
                            req.onsuccess = event => {
                                const cursor = req.result;
                                if (!cursor)
                                    return resolve({ result });
                                result.push(values ? cursor.value : cursor.primaryKey);
                                if (++count === limit)
                                    return resolve({ result });
                                cursor.continue();
                            };
                            req.onerror = eventRejectHandler(reject);
                        }
                    });
                };
            }
            return {
                name: tableName,
                schema: tableSchema,
                mutate,
                getMany({ trans, keys }) {
                    return new Promise((resolve, reject) => {
                        resolve = wrap(resolve);
                        const store = trans.objectStore(tableName);
                        const length = keys.length;
                        const result = new Array(length);
                        let keyCount = 0;
                        let callbackCount = 0;
                        let req;
                        const successHandler = event => {
                            const req = event.target;
                            if ((result[req._pos] = req.result) != null)
                                ;
                            if (++callbackCount === keyCount)
                                resolve(result);
                        };
                        const errorHandler = eventRejectHandler(reject);
                        for (let i = 0; i < length; ++i) {
                            const key = keys[i];
                            if (key != null) {
                                req = store.get(keys[i]);
                                req._pos = i;
                                req.onsuccess = successHandler;
                                req.onerror = errorHandler;
                                ++keyCount;
                            }
                        }
                        if (keyCount === 0)
                            resolve(result);
                    });
                },
                get({ trans, key }) {
                    return new Promise((resolve, reject) => {
                        resolve = wrap(resolve);
                        const store = trans.objectStore(tableName);
                        const req = store.get(key);
                        req.onsuccess = event => resolve(event.target.result);
                        req.onerror = eventRejectHandler(reject);
                    });
                },
                query: query(hasGetAll),
                openCursor,
                count({ query, trans }) {
                    const { index, range } = query;
                    return new Promise((resolve, reject) => {
                        const store = trans.objectStore(tableName);
                        const source = index.isPrimaryKey ? store : store.index(index.name);
                        const idbKeyRange = makeIDBKeyRange(range);
                        const req = idbKeyRange ? source.count(idbKeyRange) : source.count();
                        req.onsuccess = wrap(ev => resolve(ev.target.result));
                        req.onerror = eventRejectHandler(reject);
                    });
                }
            };
        }
        const { schema, hasGetAll } = extractSchema(db, tmpTrans);
        const tables = schema.tables.map(tableSchema => createDbCoreTable(tableSchema));
        const tableMap = {};
        tables.forEach(table => tableMap[table.name] = table);
        return {
            stack: "dbcore",
            transaction: db.transaction.bind(db),
            table(name) {
                const result = tableMap[name];
                if (!result)
                    throw new Error(`Table '${name}' not found`);
                return tableMap[name];
            },
            MIN_KEY: -Infinity,
            MAX_KEY: getMaxKey(IdbKeyRange),
            schema
        };
    }

    function createMiddlewareStack(stackImpl, middlewares) {
        return middlewares.reduce((down, { create }) => ({ ...down, ...create(down) }), stackImpl);
    }
    function createMiddlewareStacks(middlewares, idbdb, { IDBKeyRange, indexedDB }, tmpTrans) {
        const dbcore = createMiddlewareStack(createDBCore(idbdb, IDBKeyRange, tmpTrans), middlewares.dbcore);
        return {
            dbcore
        };
    }
    function generateMiddlewareStacks({ _novip: db }, tmpTrans) {
        const idbdb = tmpTrans.db;
        const stacks = createMiddlewareStacks(db._middlewares, idbdb, db._deps, tmpTrans);
        db.core = stacks.dbcore;
        db.tables.forEach(table => {
            const tableName = table.name;
            if (db.core.schema.tables.some(tbl => tbl.name === tableName)) {
                table.core = db.core.table(tableName);
                if (db[tableName] instanceof db.Table) {
                    db[tableName].core = table.core;
                }
            }
        });
    }

    function setApiOnPlace({ _novip: db }, objs, tableNames, dbschema) {
        tableNames.forEach(tableName => {
            const schema = dbschema[tableName];
            objs.forEach(obj => {
                const propDesc = getPropertyDescriptor(obj, tableName);
                if (!propDesc || ("value" in propDesc && propDesc.value === undefined)) {
                    if (obj === db.Transaction.prototype || obj instanceof db.Transaction) {
                        setProp(obj, tableName, {
                            get() { return this.table(tableName); },
                            set(value) {
                                defineProperty(this, tableName, { value, writable: true, configurable: true, enumerable: true });
                            }
                        });
                    }
                    else {
                        obj[tableName] = new db.Table(tableName, schema);
                    }
                }
            });
        });
    }
    function removeTablesApi({ _novip: db }, objs) {
        objs.forEach(obj => {
            for (let key in obj) {
                if (obj[key] instanceof db.Table)
                    delete obj[key];
            }
        });
    }
    function lowerVersionFirst(a, b) {
        return a._cfg.version - b._cfg.version;
    }
    function runUpgraders(db, oldVersion, idbUpgradeTrans, reject) {
        const globalSchema = db._dbSchema;
        const trans = db._createTransaction('readwrite', db._storeNames, globalSchema);
        trans.create(idbUpgradeTrans);
        trans._completion.catch(reject);
        const rejectTransaction = trans._reject.bind(trans);
        const transless = PSD.transless || PSD;
        newScope(() => {
            PSD.trans = trans;
            PSD.transless = transless;
            if (oldVersion === 0) {
                keys(globalSchema).forEach(tableName => {
                    createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
                });
                generateMiddlewareStacks(db, idbUpgradeTrans);
                DexiePromise.follow(() => db.on.populate.fire(trans)).catch(rejectTransaction);
            }
            else
                updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans).catch(rejectTransaction);
        });
    }
    function updateTablesAndIndexes({ _novip: db }, oldVersion, trans, idbUpgradeTrans) {
        const queue = [];
        const versions = db._versions;
        let globalSchema = db._dbSchema = buildGlobalSchema(db, db.idbdb, idbUpgradeTrans);
        let anyContentUpgraderHasRun = false;
        const versToRun = versions.filter(v => v._cfg.version >= oldVersion);
        versToRun.forEach(version => {
            queue.push(() => {
                const oldSchema = globalSchema;
                const newSchema = version._cfg.dbschema;
                adjustToExistingIndexNames(db, oldSchema, idbUpgradeTrans);
                adjustToExistingIndexNames(db, newSchema, idbUpgradeTrans);
                globalSchema = db._dbSchema = newSchema;
                const diff = getSchemaDiff(oldSchema, newSchema);
                diff.add.forEach(tuple => {
                    createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
                });
                diff.change.forEach(change => {
                    if (change.recreate) {
                        throw new exceptions.Upgrade("Not yet support for changing primary key");
                    }
                    else {
                        const store = idbUpgradeTrans.objectStore(change.name);
                        change.add.forEach(idx => addIndex(store, idx));
                        change.change.forEach(idx => {
                            store.deleteIndex(idx.name);
                            addIndex(store, idx);
                        });
                        change.del.forEach(idxName => store.deleteIndex(idxName));
                    }
                });
                const contentUpgrade = version._cfg.contentUpgrade;
                if (contentUpgrade && version._cfg.version > oldVersion) {
                    generateMiddlewareStacks(db, idbUpgradeTrans);
                    trans._memoizedTables = {};
                    anyContentUpgraderHasRun = true;
                    let upgradeSchema = shallowClone(newSchema);
                    diff.del.forEach(table => {
                        upgradeSchema[table] = oldSchema[table];
                    });
                    removeTablesApi(db, [db.Transaction.prototype]);
                    setApiOnPlace(db, [db.Transaction.prototype], keys(upgradeSchema), upgradeSchema);
                    trans.schema = upgradeSchema;
                    const contentUpgradeIsAsync = isAsyncFunction(contentUpgrade);
                    if (contentUpgradeIsAsync) {
                        incrementExpectedAwaits();
                    }
                    let returnValue;
                    const promiseFollowed = DexiePromise.follow(() => {
                        returnValue = contentUpgrade(trans);
                        if (returnValue) {
                            if (contentUpgradeIsAsync) {
                                var decrementor = decrementExpectedAwaits.bind(null, null);
                                returnValue.then(decrementor, decrementor);
                            }
                        }
                    });
                    return (returnValue && typeof returnValue.then === 'function' ?
                        DexiePromise.resolve(returnValue) : promiseFollowed.then(() => returnValue));
                }
            });
            queue.push(idbtrans => {
                if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
                    const newSchema = version._cfg.dbschema;
                    deleteRemovedTables(newSchema, idbtrans);
                }
                removeTablesApi(db, [db.Transaction.prototype]);
                setApiOnPlace(db, [db.Transaction.prototype], db._storeNames, db._dbSchema);
                trans.schema = db._dbSchema;
            });
        });
        function runQueue() {
            return queue.length ? DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) :
                DexiePromise.resolve();
        }
        return runQueue().then(() => {
            createMissingTables(globalSchema, idbUpgradeTrans);
        });
    }
    function getSchemaDiff(oldSchema, newSchema) {
        const diff = {
            del: [],
            add: [],
            change: []
        };
        let table;
        for (table in oldSchema) {
            if (!newSchema[table])
                diff.del.push(table);
        }
        for (table in newSchema) {
            const oldDef = oldSchema[table], newDef = newSchema[table];
            if (!oldDef) {
                diff.add.push([table, newDef]);
            }
            else {
                const change = {
                    name: table,
                    def: newDef,
                    recreate: false,
                    del: [],
                    add: [],
                    change: []
                };
                if ((
                '' + (oldDef.primKey.keyPath || '')) !== ('' + (newDef.primKey.keyPath || '')) ||
                    (oldDef.primKey.auto !== newDef.primKey.auto && !isIEOrEdge))
                 {
                    change.recreate = true;
                    diff.change.push(change);
                }
                else {
                    const oldIndexes = oldDef.idxByName;
                    const newIndexes = newDef.idxByName;
                    let idxName;
                    for (idxName in oldIndexes) {
                        if (!newIndexes[idxName])
                            change.del.push(idxName);
                    }
                    for (idxName in newIndexes) {
                        const oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
                        if (!oldIdx)
                            change.add.push(newIdx);
                        else if (oldIdx.src !== newIdx.src)
                            change.change.push(newIdx);
                    }
                    if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
                        diff.change.push(change);
                    }
                }
            }
        }
        return diff;
    }
    function createTable(idbtrans, tableName, primKey, indexes) {
        const store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ?
            { keyPath: primKey.keyPath, autoIncrement: primKey.auto } :
            { autoIncrement: primKey.auto });
        indexes.forEach(idx => addIndex(store, idx));
        return store;
    }
    function createMissingTables(newSchema, idbtrans) {
        keys(newSchema).forEach(tableName => {
            if (!idbtrans.db.objectStoreNames.contains(tableName)) {
                createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
            }
        });
    }
    function deleteRemovedTables(newSchema, idbtrans) {
        [].slice.call(idbtrans.db.objectStoreNames).forEach(storeName => newSchema[storeName] == null && idbtrans.db.deleteObjectStore(storeName));
    }
    function addIndex(store, idx) {
        store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
    }
    function buildGlobalSchema(db, idbdb, tmpTrans) {
        const globalSchema = {};
        const dbStoreNames = slice(idbdb.objectStoreNames, 0);
        dbStoreNames.forEach(storeName => {
            const store = tmpTrans.objectStore(storeName);
            let keyPath = store.keyPath;
            const primKey = createIndexSpec(nameFromKeyPath(keyPath), keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== "string", true);
            const indexes = [];
            for (let j = 0; j < store.indexNames.length; ++j) {
                const idbindex = store.index(store.indexNames[j]);
                keyPath = idbindex.keyPath;
                var index = createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== "string", false);
                indexes.push(index);
            }
            globalSchema[storeName] = createTableSchema(storeName, primKey, indexes);
        });
        return globalSchema;
    }
    function readGlobalSchema({ _novip: db }, idbdb, tmpTrans) {
        db.verno = idbdb.version / 10;
        const globalSchema = db._dbSchema = buildGlobalSchema(db, idbdb, tmpTrans);
        db._storeNames = slice(idbdb.objectStoreNames, 0);
        setApiOnPlace(db, [db._allTables], keys(globalSchema), globalSchema);
    }
    function verifyInstalledSchema(db, tmpTrans) {
        const installedSchema = buildGlobalSchema(db, db.idbdb, tmpTrans);
        const diff = getSchemaDiff(installedSchema, db._dbSchema);
        return !(diff.add.length || diff.change.some(ch => ch.add.length || ch.change.length));
    }
    function adjustToExistingIndexNames({ _novip: db }, schema, idbtrans) {
        const storeNames = idbtrans.db.objectStoreNames;
        for (let i = 0; i < storeNames.length; ++i) {
            const storeName = storeNames[i];
            const store = idbtrans.objectStore(storeName);
            db._hasGetAll = 'getAll' in store;
            for (let j = 0; j < store.indexNames.length; ++j) {
                const indexName = store.indexNames[j];
                const keyPath = store.index(indexName).keyPath;
                const dexieName = typeof keyPath === 'string' ? keyPath : "[" + slice(keyPath).join('+') + "]";
                if (schema[storeName]) {
                    const indexSpec = schema[storeName].idxByName[dexieName];
                    if (indexSpec) {
                        indexSpec.name = indexName;
                        delete schema[storeName].idxByName[dexieName];
                        schema[storeName].idxByName[indexName] = indexSpec;
                    }
                }
            }
        }
        if (typeof navigator !== 'undefined' && /Safari/.test(navigator.userAgent) &&
            !/(Chrome\/|Edge\/)/.test(navigator.userAgent) &&
            _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope &&
            [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
            db._hasGetAll = false;
        }
    }
    function parseIndexSyntax(primKeyAndIndexes) {
        return primKeyAndIndexes.split(',').map((index, indexNum) => {
            index = index.trim();
            const name = index.replace(/([&*]|\+\+)/g, "");
            const keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split('+') : name;
            return createIndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray(keyPath), indexNum === 0);
        });
    }

    class Version {
        _parseStoresSpec(stores, outSchema) {
            keys(stores).forEach(tableName => {
                if (stores[tableName] !== null) {
                    var indexes = parseIndexSyntax(stores[tableName]);
                    var primKey = indexes.shift();
                    if (primKey.multi)
                        throw new exceptions.Schema("Primary key cannot be multi-valued");
                    indexes.forEach(idx => {
                        if (idx.auto)
                            throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                        if (!idx.keyPath)
                            throw new exceptions.Schema("Index must have a name and cannot be an empty string");
                    });
                    outSchema[tableName] = createTableSchema(tableName, primKey, indexes);
                }
            });
        }
        stores(stores) {
            const db = this.db;
            this._cfg.storesSource = this._cfg.storesSource ?
                extend(this._cfg.storesSource, stores) :
                stores;
            const versions = db._versions;
            const storesSpec = {};
            let dbschema = {};
            versions.forEach(version => {
                extend(storesSpec, version._cfg.storesSource);
                dbschema = (version._cfg.dbschema = {});
                version._parseStoresSpec(storesSpec, dbschema);
            });
            db._dbSchema = dbschema;
            removeTablesApi(db, [db._allTables, db, db.Transaction.prototype]);
            setApiOnPlace(db, [db._allTables, db, db.Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
            db._storeNames = keys(dbschema);
            return this;
        }
        upgrade(upgradeFunction) {
            this._cfg.contentUpgrade = promisableChain(this._cfg.contentUpgrade || nop, upgradeFunction);
            return this;
        }
    }

    function createVersionConstructor(db) {
        return makeClassConstructor(Version.prototype, function Version(versionNumber) {
            this.db = db;
            this._cfg = {
                version: versionNumber,
                storesSource: null,
                dbschema: {},
                tables: {},
                contentUpgrade: null
            };
        });
    }

    function getDbNamesTable(indexedDB, IDBKeyRange) {
        let dbNamesDB = indexedDB["_dbNamesDB"];
        if (!dbNamesDB) {
            dbNamesDB = indexedDB["_dbNamesDB"] = new Dexie$1(DBNAMES_DB, {
                addons: [],
                indexedDB,
                IDBKeyRange,
            });
            dbNamesDB.version(1).stores({ dbnames: "name" });
        }
        return dbNamesDB.table("dbnames");
    }
    function hasDatabasesNative(indexedDB) {
        return indexedDB && typeof indexedDB.databases === "function";
    }
    function getDatabaseNames({ indexedDB, IDBKeyRange, }) {
        return hasDatabasesNative(indexedDB)
            ? Promise.resolve(indexedDB.databases()).then((infos) => infos
                .map((info) => info.name)
                .filter((name) => name !== DBNAMES_DB))
            : getDbNamesTable(indexedDB, IDBKeyRange).toCollection().primaryKeys();
    }
    function _onDatabaseCreated({ indexedDB, IDBKeyRange }, name) {
        !hasDatabasesNative(indexedDB) &&
            name !== DBNAMES_DB &&
            getDbNamesTable(indexedDB, IDBKeyRange).put({ name }).catch(nop);
    }
    function _onDatabaseDeleted({ indexedDB, IDBKeyRange }, name) {
        !hasDatabasesNative(indexedDB) &&
            name !== DBNAMES_DB &&
            getDbNamesTable(indexedDB, IDBKeyRange).delete(name).catch(nop);
    }

    function vip(fn) {
        return newScope(function () {
            PSD.letThrough = true;
            return fn();
        });
    }

    function idbReady() {
        var isSafari = !navigator.userAgentData &&
            /Safari\//.test(navigator.userAgent) &&
            !/Chrom(e|ium)\//.test(navigator.userAgent);
        if (!isSafari || !indexedDB.databases)
            return Promise.resolve();
        var intervalId;
        return new Promise(function (resolve) {
            var tryIdb = function () { return indexedDB.databases().finally(resolve); };
            intervalId = setInterval(tryIdb, 100);
            tryIdb();
        }).finally(function () { return clearInterval(intervalId); });
    }

    function dexieOpen(db) {
        const state = db._state;
        const { indexedDB } = db._deps;
        if (state.isBeingOpened || db.idbdb)
            return state.dbReadyPromise.then(() => state.dbOpenError ?
                rejection(state.dbOpenError) :
                db);
        debug && (state.openCanceller._stackHolder = getErrorWithStack());
        state.isBeingOpened = true;
        state.dbOpenError = null;
        state.openComplete = false;
        const openCanceller = state.openCanceller;
        function throwIfCancelled() {
            if (state.openCanceller !== openCanceller)
                throw new exceptions.DatabaseClosed('db.open() was cancelled');
        }
        let resolveDbReady = state.dbReadyResolve,
        upgradeTransaction = null, wasCreated = false;
        return DexiePromise.race([openCanceller, (typeof navigator === 'undefined' ? DexiePromise.resolve() : idbReady()).then(() => new DexiePromise((resolve, reject) => {
                throwIfCancelled();
                if (!indexedDB)
                    throw new exceptions.MissingAPI();
                const dbName = db.name;
                const req = state.autoSchema ?
                    indexedDB.open(dbName) :
                    indexedDB.open(dbName, Math.round(db.verno * 10));
                if (!req)
                    throw new exceptions.MissingAPI();
                req.onerror = eventRejectHandler(reject);
                req.onblocked = wrap(db._fireOnBlocked);
                req.onupgradeneeded = wrap(e => {
                    upgradeTransaction = req.transaction;
                    if (state.autoSchema && !db._options.allowEmptyDB) {
                        req.onerror = preventDefault;
                        upgradeTransaction.abort();
                        req.result.close();
                        const delreq = indexedDB.deleteDatabase(dbName);
                        delreq.onsuccess = delreq.onerror = wrap(() => {
                            reject(new exceptions.NoSuchDatabase(`Database ${dbName} doesnt exist`));
                        });
                    }
                    else {
                        upgradeTransaction.onerror = eventRejectHandler(reject);
                        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
                        wasCreated = oldVer < 1;
                        db._novip.idbdb = req.result;
                        runUpgraders(db, oldVer / 10, upgradeTransaction, reject);
                    }
                }, reject);
                req.onsuccess = wrap(() => {
                    upgradeTransaction = null;
                    const idbdb = db._novip.idbdb = req.result;
                    const objectStoreNames = slice(idbdb.objectStoreNames);
                    if (objectStoreNames.length > 0)
                        try {
                            const tmpTrans = idbdb.transaction(safariMultiStoreFix(objectStoreNames), 'readonly');
                            if (state.autoSchema)
                                readGlobalSchema(db, idbdb, tmpTrans);
                            else {
                                adjustToExistingIndexNames(db, db._dbSchema, tmpTrans);
                                if (!verifyInstalledSchema(db, tmpTrans)) {
                                    console.warn(`Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.`);
                                }
                            }
                            generateMiddlewareStacks(db, tmpTrans);
                        }
                        catch (e) {
                        }
                    connections.push(db);
                    idbdb.onversionchange = wrap(ev => {
                        state.vcFired = true;
                        db.on("versionchange").fire(ev);
                    });
                    idbdb.onclose = wrap(ev => {
                        db.on("close").fire(ev);
                    });
                    if (wasCreated)
                        _onDatabaseCreated(db._deps, dbName);
                    resolve();
                }, reject);
            }))]).then(() => {
            throwIfCancelled();
            state.onReadyBeingFired = [];
            return DexiePromise.resolve(vip(() => db.on.ready.fire(db.vip))).then(function fireRemainders() {
                if (state.onReadyBeingFired.length > 0) {
                    let remainders = state.onReadyBeingFired.reduce(promisableChain, nop);
                    state.onReadyBeingFired = [];
                    return DexiePromise.resolve(vip(() => remainders(db.vip))).then(fireRemainders);
                }
            });
        }).finally(() => {
            state.onReadyBeingFired = null;
            state.isBeingOpened = false;
        }).then(() => {
            return db;
        }).catch(err => {
            state.dbOpenError = err;
            try {
                upgradeTransaction && upgradeTransaction.abort();
            }
            catch (_a) { }
            if (openCanceller === state.openCanceller) {
                db._close();
            }
            return rejection(err);
        }).finally(() => {
            state.openComplete = true;
            resolveDbReady();
        });
    }

    function awaitIterator(iterator) {
        var callNext = result => iterator.next(result), doThrow = error => iterator.throw(error), onSuccess = step(callNext), onError = step(doThrow);
        function step(getNext) {
            return (val) => {
                var next = getNext(val), value = next.value;
                return next.done ? value :
                    (!value || typeof value.then !== 'function' ?
                        isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) :
                        value.then(onSuccess, onError));
            };
        }
        return step(callNext)();
    }

    function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
        var i = arguments.length;
        if (i < 2)
            throw new exceptions.InvalidArgument("Too few arguments");
        var args = new Array(i - 1);
        while (--i)
            args[i - 1] = arguments[i];
        scopeFunc = args.pop();
        var tables = flatten(args);
        return [mode, tables, scopeFunc];
    }
    function enterTransactionScope(db, mode, storeNames, parentTransaction, scopeFunc) {
        return DexiePromise.resolve().then(() => {
            const transless = PSD.transless || PSD;
            const trans = db._createTransaction(mode, storeNames, db._dbSchema, parentTransaction);
            const zoneProps = {
                trans: trans,
                transless: transless
            };
            if (parentTransaction) {
                trans.idbtrans = parentTransaction.idbtrans;
            }
            else {
                trans.create();
            }
            const scopeFuncIsAsync = isAsyncFunction(scopeFunc);
            if (scopeFuncIsAsync) {
                incrementExpectedAwaits();
            }
            let returnValue;
            const promiseFollowed = DexiePromise.follow(() => {
                returnValue = scopeFunc.call(trans, trans);
                if (returnValue) {
                    if (scopeFuncIsAsync) {
                        var decrementor = decrementExpectedAwaits.bind(null, null);
                        returnValue.then(decrementor, decrementor);
                    }
                    else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {
                        returnValue = awaitIterator(returnValue);
                    }
                }
            }, zoneProps);
            return (returnValue && typeof returnValue.then === 'function' ?
                DexiePromise.resolve(returnValue).then(x => trans.active ?
                    x
                    : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")))
                : promiseFollowed.then(() => returnValue)).then(x => {
                if (parentTransaction)
                    trans._resolve();
                return trans._completion.then(() => x);
            }).catch(e => {
                trans._reject(e);
                return rejection(e);
            });
        });
    }

    function pad(a, value, count) {
        const result = isArray(a) ? a.slice() : [a];
        for (let i = 0; i < count; ++i)
            result.push(value);
        return result;
    }
    function createVirtualIndexMiddleware(down) {
        return {
            ...down,
            table(tableName) {
                const table = down.table(tableName);
                const { schema } = table;
                const indexLookup = {};
                const allVirtualIndexes = [];
                function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {
                    const keyPathAlias = getKeyPathAlias(keyPath);
                    const indexList = (indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || []);
                    const keyLength = keyPath == null ? 0 : typeof keyPath === 'string' ? 1 : keyPath.length;
                    const isVirtual = keyTail > 0;
                    const virtualIndex = {
                        ...lowLevelIndex,
                        isVirtual,
                        keyTail,
                        keyLength,
                        extractKey: getKeyExtractor(keyPath),
                        unique: !isVirtual && lowLevelIndex.unique
                    };
                    indexList.push(virtualIndex);
                    if (!virtualIndex.isPrimaryKey) {
                        allVirtualIndexes.push(virtualIndex);
                    }
                    if (keyLength > 1) {
                        const virtualKeyPath = keyLength === 2 ?
                            keyPath[0] :
                            keyPath.slice(0, keyLength - 1);
                        addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);
                    }
                    indexList.sort((a, b) => a.keyTail - b.keyTail);
                    return virtualIndex;
                }
                const primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);
                indexLookup[":id"] = [primaryKey];
                for (const index of schema.indexes) {
                    addVirtualIndexes(index.keyPath, 0, index);
                }
                function findBestIndex(keyPath) {
                    const result = indexLookup[getKeyPathAlias(keyPath)];
                    return result && result[0];
                }
                function translateRange(range, keyTail) {
                    return {
                        type: range.type === 1  ?
                            2  :
                            range.type,
                        lower: pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),
                        lowerOpen: true,
                        upper: pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),
                        upperOpen: true
                    };
                }
                function translateRequest(req) {
                    const index = req.query.index;
                    return index.isVirtual ? {
                        ...req,
                        query: {
                            index,
                            range: translateRange(req.query.range, index.keyTail)
                        }
                    } : req;
                }
                const result = {
                    ...table,
                    schema: {
                        ...schema,
                        primaryKey,
                        indexes: allVirtualIndexes,
                        getIndexByKeyPath: findBestIndex
                    },
                    count(req) {
                        return table.count(translateRequest(req));
                    },
                    query(req) {
                        return table.query(translateRequest(req));
                    },
                    openCursor(req) {
                        const { keyTail, isVirtual, keyLength } = req.query.index;
                        if (!isVirtual)
                            return table.openCursor(req);
                        function createVirtualCursor(cursor) {
                            function _continue(key) {
                                key != null ?
                                    cursor.continue(pad(key, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) :
                                    req.unique ?
                                        cursor.continue(cursor.key.slice(0, keyLength)
                                            .concat(req.reverse
                                            ? down.MIN_KEY
                                            : down.MAX_KEY, keyTail)) :
                                        cursor.continue();
                            }
                            const virtualCursor = Object.create(cursor, {
                                continue: { value: _continue },
                                continuePrimaryKey: {
                                    value(key, primaryKey) {
                                        cursor.continuePrimaryKey(pad(key, down.MAX_KEY, keyTail), primaryKey);
                                    }
                                },
                                primaryKey: {
                                    get() {
                                        return cursor.primaryKey;
                                    }
                                },
                                key: {
                                    get() {
                                        const key = cursor.key;
                                        return keyLength === 1 ?
                                            key[0] :
                                            key.slice(0, keyLength);
                                    }
                                },
                                value: {
                                    get() {
                                        return cursor.value;
                                    }
                                }
                            });
                            return virtualCursor;
                        }
                        return table.openCursor(translateRequest(req))
                            .then(cursor => cursor && createVirtualCursor(cursor));
                    }
                };
                return result;
            }
        };
    }
    const virtualIndexMiddleware = {
        stack: "dbcore",
        name: "VirtualIndexMiddleware",
        level: 1,
        create: createVirtualIndexMiddleware
    };

    function getObjectDiff(a, b, rv, prfx) {
        rv = rv || {};
        prfx = prfx || '';
        keys(a).forEach((prop) => {
            if (!hasOwn(b, prop)) {
                rv[prfx + prop] = undefined;
            }
            else {
                var ap = a[prop], bp = b[prop];
                if (typeof ap === 'object' && typeof bp === 'object' && ap && bp) {
                    const apTypeName = toStringTag(ap);
                    const bpTypeName = toStringTag(bp);
                    if (apTypeName !== bpTypeName) {
                        rv[prfx + prop] = b[prop];
                    }
                    else if (apTypeName === 'Object') {
                        getObjectDiff(ap, bp, rv, prfx + prop + '.');
                    }
                    else if (ap !== bp) {
                        rv[prfx + prop] = b[prop];
                    }
                }
                else if (ap !== bp)
                    rv[prfx + prop] = b[prop];
            }
        });
        keys(b).forEach((prop) => {
            if (!hasOwn(a, prop)) {
                rv[prfx + prop] = b[prop];
            }
        });
        return rv;
    }

    function getEffectiveKeys(primaryKey, req) {
        if (req.type === 'delete')
            return req.keys;
        return req.keys || req.values.map(primaryKey.extractKey);
    }

    const hooksMiddleware = {
        stack: "dbcore",
        name: "HooksMiddleware",
        level: 2,
        create: (downCore) => ({
            ...downCore,
            table(tableName) {
                const downTable = downCore.table(tableName);
                const { primaryKey } = downTable.schema;
                const tableMiddleware = {
                    ...downTable,
                    mutate(req) {
                        const dxTrans = PSD.trans;
                        const { deleting, creating, updating } = dxTrans.table(tableName).hook;
                        switch (req.type) {
                            case 'add':
                                if (creating.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', () => addPutOrDelete(req), true);
                            case 'put':
                                if (creating.fire === nop && updating.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', () => addPutOrDelete(req), true);
                            case 'delete':
                                if (deleting.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', () => addPutOrDelete(req), true);
                            case 'deleteRange':
                                if (deleting.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', () => deleteRange(req), true);
                        }
                        return downTable.mutate(req);
                        function addPutOrDelete(req) {
                            const dxTrans = PSD.trans;
                            const keys = req.keys || getEffectiveKeys(primaryKey, req);
                            if (!keys)
                                throw new Error("Keys missing");
                            req = req.type === 'add' || req.type === 'put' ?
                                { ...req, keys } :
                                { ...req };
                            if (req.type !== 'delete')
                                req.values = [...req.values];
                            if (req.keys)
                                req.keys = [...req.keys];
                            return getExistingValues(downTable, req, keys).then(existingValues => {
                                const contexts = keys.map((key, i) => {
                                    const existingValue = existingValues[i];
                                    const ctx = { onerror: null, onsuccess: null };
                                    if (req.type === 'delete') {
                                        deleting.fire.call(ctx, key, existingValue, dxTrans);
                                    }
                                    else if (req.type === 'add' || existingValue === undefined) {
                                        const generatedPrimaryKey = creating.fire.call(ctx, key, req.values[i], dxTrans);
                                        if (key == null && generatedPrimaryKey != null) {
                                            key = generatedPrimaryKey;
                                            req.keys[i] = key;
                                            if (!primaryKey.outbound) {
                                                setByKeyPath(req.values[i], primaryKey.keyPath, key);
                                            }
                                        }
                                    }
                                    else {
                                        const objectDiff = getObjectDiff(existingValue, req.values[i]);
                                        const additionalChanges = updating.fire.call(ctx, objectDiff, key, existingValue, dxTrans);
                                        if (additionalChanges) {
                                            const requestedValue = req.values[i];
                                            Object.keys(additionalChanges).forEach(keyPath => {
                                                if (hasOwn(requestedValue, keyPath)) {
                                                    requestedValue[keyPath] = additionalChanges[keyPath];
                                                }
                                                else {
                                                    setByKeyPath(requestedValue, keyPath, additionalChanges[keyPath]);
                                                }
                                            });
                                        }
                                    }
                                    return ctx;
                                });
                                return downTable.mutate(req).then(({ failures, results, numFailures, lastResult }) => {
                                    for (let i = 0; i < keys.length; ++i) {
                                        const primKey = results ? results[i] : keys[i];
                                        const ctx = contexts[i];
                                        if (primKey == null) {
                                            ctx.onerror && ctx.onerror(failures[i]);
                                        }
                                        else {
                                            ctx.onsuccess && ctx.onsuccess(req.type === 'put' && existingValues[i] ?
                                                req.values[i] :
                                                primKey
                                            );
                                        }
                                    }
                                    return { failures, results, numFailures, lastResult };
                                }).catch(error => {
                                    contexts.forEach(ctx => ctx.onerror && ctx.onerror(error));
                                    return Promise.reject(error);
                                });
                            });
                        }
                        function deleteRange(req) {
                            return deleteNextChunk(req.trans, req.range, 10000);
                        }
                        function deleteNextChunk(trans, range, limit) {
                            return downTable.query({ trans, values: false, query: { index: primaryKey, range }, limit })
                                .then(({ result }) => {
                                return addPutOrDelete({ type: 'delete', keys: result, trans }).then(res => {
                                    if (res.numFailures > 0)
                                        return Promise.reject(res.failures[0]);
                                    if (result.length < limit) {
                                        return { failures: [], numFailures: 0, lastResult: undefined };
                                    }
                                    else {
                                        return deleteNextChunk(trans, { ...range, lower: result[result.length - 1], lowerOpen: true }, limit);
                                    }
                                });
                            });
                        }
                    }
                };
                return tableMiddleware;
            },
        })
    };
    function getExistingValues(table, req, effectiveKeys) {
        return req.type === "add"
            ? Promise.resolve([])
            : table.getMany({ trans: req.trans, keys: effectiveKeys, cache: "immutable" });
    }

    function getFromTransactionCache(keys, cache, clone) {
        try {
            if (!cache)
                return null;
            if (cache.keys.length < keys.length)
                return null;
            const result = [];
            for (let i = 0, j = 0; i < cache.keys.length && j < keys.length; ++i) {
                if (cmp(cache.keys[i], keys[j]) !== 0)
                    continue;
                result.push(clone ? deepClone(cache.values[i]) : cache.values[i]);
                ++j;
            }
            return result.length === keys.length ? result : null;
        }
        catch (_a) {
            return null;
        }
    }
    const cacheExistingValuesMiddleware = {
        stack: "dbcore",
        level: -1,
        create: (core) => {
            return {
                table: (tableName) => {
                    const table = core.table(tableName);
                    return {
                        ...table,
                        getMany: (req) => {
                            if (!req.cache) {
                                return table.getMany(req);
                            }
                            const cachedResult = getFromTransactionCache(req.keys, req.trans["_cache"], req.cache === "clone");
                            if (cachedResult) {
                                return DexiePromise.resolve(cachedResult);
                            }
                            return table.getMany(req).then((res) => {
                                req.trans["_cache"] = {
                                    keys: req.keys,
                                    values: req.cache === "clone" ? deepClone(res) : res,
                                };
                                return res;
                            });
                        },
                        mutate: (req) => {
                            if (req.type !== "add")
                                req.trans["_cache"] = null;
                            return table.mutate(req);
                        },
                    };
                },
            };
        },
    };

    function isEmptyRange(node) {
        return !("from" in node);
    }
    const RangeSet = function (fromOrTree, to) {
        if (this) {
            extend(this, arguments.length ? { d: 1, from: fromOrTree, to: arguments.length > 1 ? to : fromOrTree } : { d: 0 });
        }
        else {
            const rv = new RangeSet();
            if (fromOrTree && ("d" in fromOrTree)) {
                extend(rv, fromOrTree);
            }
            return rv;
        }
    };
    props(RangeSet.prototype, {
        add(rangeSet) {
            mergeRanges(this, rangeSet);
            return this;
        },
        addKey(key) {
            addRange(this, key, key);
            return this;
        },
        addKeys(keys) {
            keys.forEach(key => addRange(this, key, key));
            return this;
        },
        [iteratorSymbol]() {
            return getRangeSetIterator(this);
        }
    });
    function addRange(target, from, to) {
        const diff = cmp(from, to);
        if (isNaN(diff))
            return;
        if (diff > 0)
            throw RangeError();
        if (isEmptyRange(target))
            return extend(target, { from, to, d: 1 });
        const left = target.l;
        const right = target.r;
        if (cmp(to, target.from) < 0) {
            left
                ? addRange(left, from, to)
                : (target.l = { from, to, d: 1, l: null, r: null });
            return rebalance(target);
        }
        if (cmp(from, target.to) > 0) {
            right
                ? addRange(right, from, to)
                : (target.r = { from, to, d: 1, l: null, r: null });
            return rebalance(target);
        }
        if (cmp(from, target.from) < 0) {
            target.from = from;
            target.l = null;
            target.d = right ? right.d + 1 : 1;
        }
        if (cmp(to, target.to) > 0) {
            target.to = to;
            target.r = null;
            target.d = target.l ? target.l.d + 1 : 1;
        }
        const rightWasCutOff = !target.r;
        if (left && !target.l) {
            mergeRanges(target, left);
        }
        if (right && rightWasCutOff) {
            mergeRanges(target, right);
        }
    }
    function mergeRanges(target, newSet) {
        function _addRangeSet(target, { from, to, l, r }) {
            addRange(target, from, to);
            if (l)
                _addRangeSet(target, l);
            if (r)
                _addRangeSet(target, r);
        }
        if (!isEmptyRange(newSet))
            _addRangeSet(target, newSet);
    }
    function rangesOverlap(rangeSet1, rangeSet2) {
        const i1 = getRangeSetIterator(rangeSet2);
        let nextResult1 = i1.next();
        if (nextResult1.done)
            return false;
        let a = nextResult1.value;
        const i2 = getRangeSetIterator(rangeSet1);
        let nextResult2 = i2.next(a.from);
        let b = nextResult2.value;
        while (!nextResult1.done && !nextResult2.done) {
            if (cmp(b.from, a.to) <= 0 && cmp(b.to, a.from) >= 0)
                return true;
            cmp(a.from, b.from) < 0
                ? (a = (nextResult1 = i1.next(b.from)).value)
                : (b = (nextResult2 = i2.next(a.from)).value);
        }
        return false;
    }
    function getRangeSetIterator(node) {
        let state = isEmptyRange(node) ? null : { s: 0, n: node };
        return {
            next(key) {
                const keyProvided = arguments.length > 0;
                while (state) {
                    switch (state.s) {
                        case 0:
                            state.s = 1;
                            if (keyProvided) {
                                while (state.n.l && cmp(key, state.n.from) < 0)
                                    state = { up: state, n: state.n.l, s: 1 };
                            }
                            else {
                                while (state.n.l)
                                    state = { up: state, n: state.n.l, s: 1 };
                            }
                        case 1:
                            state.s = 2;
                            if (!keyProvided || cmp(key, state.n.to) <= 0)
                                return { value: state.n, done: false };
                        case 2:
                            if (state.n.r) {
                                state.s = 3;
                                state = { up: state, n: state.n.r, s: 0 };
                                continue;
                            }
                        case 3:
                            state = state.up;
                    }
                }
                return { done: true };
            },
        };
    }
    function rebalance(target) {
        var _a, _b;
        const diff = (((_a = target.r) === null || _a === void 0 ? void 0 : _a.d) || 0) - (((_b = target.l) === null || _b === void 0 ? void 0 : _b.d) || 0);
        const r = diff > 1 ? "r" : diff < -1 ? "l" : "";
        if (r) {
            const l = r === "r" ? "l" : "r";
            const rootClone = { ...target };
            const oldRootRight = target[r];
            target.from = oldRootRight.from;
            target.to = oldRootRight.to;
            target[r] = oldRootRight[r];
            rootClone[r] = oldRootRight[l];
            target[l] = rootClone;
            rootClone.d = computeDepth(rootClone);
        }
        target.d = computeDepth(target);
    }
    function computeDepth({ r, l }) {
        return (r ? (l ? Math.max(r.d, l.d) : r.d) : l ? l.d : 0) + 1;
    }

    const observabilityMiddleware = {
        stack: "dbcore",
        level: 0,
        create: (core) => {
            const dbName = core.schema.name;
            const FULL_RANGE = new RangeSet(core.MIN_KEY, core.MAX_KEY);
            return {
                ...core,
                table: (tableName) => {
                    const table = core.table(tableName);
                    const { schema } = table;
                    const { primaryKey } = schema;
                    const { extractKey, outbound } = primaryKey;
                    const tableClone = {
                        ...table,
                        mutate: (req) => {
                            const trans = req.trans;
                            const mutatedParts = trans.mutatedParts || (trans.mutatedParts = {});
                            const getRangeSet = (indexName) => {
                                const part = `idb://${dbName}/${tableName}/${indexName}`;
                                return (mutatedParts[part] ||
                                    (mutatedParts[part] = new RangeSet()));
                            };
                            const pkRangeSet = getRangeSet("");
                            const delsRangeSet = getRangeSet(":dels");
                            const { type } = req;
                            let [keys, newObjs] = req.type === "deleteRange"
                                ? [req.range]
                                : req.type === "delete"
                                    ? [req.keys]
                                    : req.values.length < 50
                                        ? [[], req.values]
                                        : [];
                            const oldCache = req.trans["_cache"];
                            return table.mutate(req).then((res) => {
                                if (isArray(keys)) {
                                    if (type !== "delete")
                                        keys = res.results;
                                    pkRangeSet.addKeys(keys);
                                    const oldObjs = getFromTransactionCache(keys, oldCache);
                                    if (!oldObjs && type !== "add") {
                                        delsRangeSet.addKeys(keys);
                                    }
                                    if (oldObjs || newObjs) {
                                        trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs);
                                    }
                                }
                                else if (keys) {
                                    const range = { from: keys.lower, to: keys.upper };
                                    delsRangeSet.add(range);
                                    pkRangeSet.add(range);
                                }
                                else {
                                    pkRangeSet.add(FULL_RANGE);
                                    delsRangeSet.add(FULL_RANGE);
                                    schema.indexes.forEach(idx => getRangeSet(idx.name).add(FULL_RANGE));
                                }
                                return res;
                            });
                        },
                    };
                    const getRange = ({ query: { index, range }, }) => {
                        var _a, _b;
                        return [
                            index,
                            new RangeSet((_a = range.lower) !== null && _a !== void 0 ? _a : core.MIN_KEY, (_b = range.upper) !== null && _b !== void 0 ? _b : core.MAX_KEY),
                        ];
                    };
                    const readSubscribers = {
                        get: (req) => [primaryKey, new RangeSet(req.key)],
                        getMany: (req) => [primaryKey, new RangeSet().addKeys(req.keys)],
                        count: getRange,
                        query: getRange,
                        openCursor: getRange,
                    };
                    keys(readSubscribers).forEach(method => {
                        tableClone[method] = function (req) {
                            const { subscr } = PSD;
                            if (subscr) {
                                const getRangeSet = (indexName) => {
                                    const part = `idb://${dbName}/${tableName}/${indexName}`;
                                    return (subscr[part] ||
                                        (subscr[part] = new RangeSet()));
                                };
                                const pkRangeSet = getRangeSet("");
                                const delsRangeSet = getRangeSet(":dels");
                                const [queriedIndex, queriedRanges] = readSubscribers[method](req);
                                getRangeSet(queriedIndex.name || "").add(queriedRanges);
                                if (!queriedIndex.isPrimaryKey) {
                                    if (method === "count") {
                                        delsRangeSet.add(FULL_RANGE);
                                    }
                                    else {
                                        const keysPromise = method === "query" &&
                                            outbound &&
                                            req.values &&
                                            table.query({
                                                ...req,
                                                values: false,
                                            });
                                        return table[method].apply(this, arguments).then((res) => {
                                            if (method === "query") {
                                                if (outbound && req.values) {
                                                    return keysPromise.then(({ result: resultingKeys }) => {
                                                        pkRangeSet.addKeys(resultingKeys);
                                                        return res;
                                                    });
                                                }
                                                const pKeys = req.values
                                                    ? res.result.map(extractKey)
                                                    : res.result;
                                                if (req.values) {
                                                    pkRangeSet.addKeys(pKeys);
                                                }
                                                else {
                                                    delsRangeSet.addKeys(pKeys);
                                                }
                                            }
                                            else if (method === "openCursor") {
                                                const cursor = res;
                                                const wantValues = req.values;
                                                return (cursor &&
                                                    Object.create(cursor, {
                                                        key: {
                                                            get() {
                                                                delsRangeSet.addKey(cursor.primaryKey);
                                                                return cursor.key;
                                                            },
                                                        },
                                                        primaryKey: {
                                                            get() {
                                                                const pkey = cursor.primaryKey;
                                                                delsRangeSet.addKey(pkey);
                                                                return pkey;
                                                            },
                                                        },
                                                        value: {
                                                            get() {
                                                                wantValues && pkRangeSet.addKey(cursor.primaryKey);
                                                                return cursor.value;
                                                            },
                                                        },
                                                    }));
                                            }
                                            return res;
                                        });
                                    }
                                }
                            }
                            return table[method].apply(this, arguments);
                        };
                    });
                    return tableClone;
                },
            };
        },
    };
    function trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs) {
        function addAffectedIndex(ix) {
            const rangeSet = getRangeSet(ix.name || "");
            function extractKey(obj) {
                return obj != null ? ix.extractKey(obj) : null;
            }
            const addKeyOrKeys = (key) => ix.multiEntry && isArray(key)
                ? key.forEach(key => rangeSet.addKey(key))
                : rangeSet.addKey(key);
            (oldObjs || newObjs).forEach((_, i) => {
                const oldKey = oldObjs && extractKey(oldObjs[i]);
                const newKey = newObjs && extractKey(newObjs[i]);
                if (cmp(oldKey, newKey) !== 0) {
                    if (oldKey != null)
                        addKeyOrKeys(oldKey);
                    if (newKey != null)
                        addKeyOrKeys(newKey);
                }
            });
        }
        schema.indexes.forEach(addAffectedIndex);
    }

    class Dexie$1 {
        constructor(name, options) {
            this._middlewares = {};
            this.verno = 0;
            const deps = Dexie$1.dependencies;
            this._options = options = {
                addons: Dexie$1.addons,
                autoOpen: true,
                indexedDB: deps.indexedDB,
                IDBKeyRange: deps.IDBKeyRange,
                ...options
            };
            this._deps = {
                indexedDB: options.indexedDB,
                IDBKeyRange: options.IDBKeyRange
            };
            const { addons, } = options;
            this._dbSchema = {};
            this._versions = [];
            this._storeNames = [];
            this._allTables = {};
            this.idbdb = null;
            this._novip = this;
            const state = {
                dbOpenError: null,
                isBeingOpened: false,
                onReadyBeingFired: null,
                openComplete: false,
                dbReadyResolve: nop,
                dbReadyPromise: null,
                cancelOpen: nop,
                openCanceller: null,
                autoSchema: true
            };
            state.dbReadyPromise = new DexiePromise(resolve => {
                state.dbReadyResolve = resolve;
            });
            state.openCanceller = new DexiePromise((_, reject) => {
                state.cancelOpen = reject;
            });
            this._state = state;
            this.name = name;
            this.on = Events(this, "populate", "blocked", "versionchange", "close", { ready: [promisableChain, nop] });
            this.on.ready.subscribe = override(this.on.ready.subscribe, subscribe => {
                return (subscriber, bSticky) => {
                    Dexie$1.vip(() => {
                        const state = this._state;
                        if (state.openComplete) {
                            if (!state.dbOpenError)
                                DexiePromise.resolve().then(subscriber);
                            if (bSticky)
                                subscribe(subscriber);
                        }
                        else if (state.onReadyBeingFired) {
                            state.onReadyBeingFired.push(subscriber);
                            if (bSticky)
                                subscribe(subscriber);
                        }
                        else {
                            subscribe(subscriber);
                            const db = this;
                            if (!bSticky)
                                subscribe(function unsubscribe() {
                                    db.on.ready.unsubscribe(subscriber);
                                    db.on.ready.unsubscribe(unsubscribe);
                                });
                        }
                    });
                };
            });
            this.Collection = createCollectionConstructor(this);
            this.Table = createTableConstructor(this);
            this.Transaction = createTransactionConstructor(this);
            this.Version = createVersionConstructor(this);
            this.WhereClause = createWhereClauseConstructor(this);
            this.on("versionchange", ev => {
                if (ev.newVersion > 0)
                    console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`);
                else
                    console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`);
                this.close();
            });
            this.on("blocked", ev => {
                if (!ev.newVersion || ev.newVersion < ev.oldVersion)
                    console.warn(`Dexie.delete('${this.name}') was blocked`);
                else
                    console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${ev.oldVersion / 10}`);
            });
            this._maxKey = getMaxKey(options.IDBKeyRange);
            this._createTransaction = (mode, storeNames, dbschema, parentTransaction) => new this.Transaction(mode, storeNames, dbschema, this._options.chromeTransactionDurability, parentTransaction);
            this._fireOnBlocked = ev => {
                this.on("blocked").fire(ev);
                connections
                    .filter(c => c.name === this.name && c !== this && !c._state.vcFired)
                    .map(c => c.on("versionchange").fire(ev));
            };
            this.use(virtualIndexMiddleware);
            this.use(hooksMiddleware);
            this.use(observabilityMiddleware);
            this.use(cacheExistingValuesMiddleware);
            this.vip = Object.create(this, { _vip: { value: true } });
            addons.forEach(addon => addon(this));
        }
        version(versionNumber) {
            if (isNaN(versionNumber) || versionNumber < 0.1)
                throw new exceptions.Type(`Given version is not a positive number`);
            versionNumber = Math.round(versionNumber * 10) / 10;
            if (this.idbdb || this._state.isBeingOpened)
                throw new exceptions.Schema("Cannot add version when database is open");
            this.verno = Math.max(this.verno, versionNumber);
            const versions = this._versions;
            var versionInstance = versions.filter(v => v._cfg.version === versionNumber)[0];
            if (versionInstance)
                return versionInstance;
            versionInstance = new this.Version(versionNumber);
            versions.push(versionInstance);
            versions.sort(lowerVersionFirst);
            versionInstance.stores({});
            this._state.autoSchema = false;
            return versionInstance;
        }
        _whenReady(fn) {
            return (this.idbdb && (this._state.openComplete || PSD.letThrough || this._vip)) ? fn() : new DexiePromise((resolve, reject) => {
                if (this._state.openComplete) {
                    return reject(new exceptions.DatabaseClosed(this._state.dbOpenError));
                }
                if (!this._state.isBeingOpened) {
                    if (!this._options.autoOpen) {
                        reject(new exceptions.DatabaseClosed());
                        return;
                    }
                    this.open().catch(nop);
                }
                this._state.dbReadyPromise.then(resolve, reject);
            }).then(fn);
        }
        use({ stack, create, level, name }) {
            if (name)
                this.unuse({ stack, name });
            const middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);
            middlewares.push({ stack, create, level: level == null ? 10 : level, name });
            middlewares.sort((a, b) => a.level - b.level);
            return this;
        }
        unuse({ stack, name, create }) {
            if (stack && this._middlewares[stack]) {
                this._middlewares[stack] = this._middlewares[stack].filter(mw => create ? mw.create !== create :
                    name ? mw.name !== name :
                        false);
            }
            return this;
        }
        open() {
            return dexieOpen(this);
        }
        _close() {
            const state = this._state;
            const idx = connections.indexOf(this);
            if (idx >= 0)
                connections.splice(idx, 1);
            if (this.idbdb) {
                try {
                    this.idbdb.close();
                }
                catch (e) { }
                this._novip.idbdb = null;
            }
            state.dbReadyPromise = new DexiePromise(resolve => {
                state.dbReadyResolve = resolve;
            });
            state.openCanceller = new DexiePromise((_, reject) => {
                state.cancelOpen = reject;
            });
        }
        close() {
            this._close();
            const state = this._state;
            this._options.autoOpen = false;
            state.dbOpenError = new exceptions.DatabaseClosed();
            if (state.isBeingOpened)
                state.cancelOpen(state.dbOpenError);
        }
        delete() {
            const hasArguments = arguments.length > 0;
            const state = this._state;
            return new DexiePromise((resolve, reject) => {
                const doDelete = () => {
                    this.close();
                    var req = this._deps.indexedDB.deleteDatabase(this.name);
                    req.onsuccess = wrap(() => {
                        _onDatabaseDeleted(this._deps, this.name);
                        resolve();
                    });
                    req.onerror = eventRejectHandler(reject);
                    req.onblocked = this._fireOnBlocked;
                };
                if (hasArguments)
                    throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
                if (state.isBeingOpened) {
                    state.dbReadyPromise.then(doDelete);
                }
                else {
                    doDelete();
                }
            });
        }
        backendDB() {
            return this.idbdb;
        }
        isOpen() {
            return this.idbdb !== null;
        }
        hasBeenClosed() {
            const dbOpenError = this._state.dbOpenError;
            return dbOpenError && (dbOpenError.name === 'DatabaseClosed');
        }
        hasFailed() {
            return this._state.dbOpenError !== null;
        }
        dynamicallyOpened() {
            return this._state.autoSchema;
        }
        get tables() {
            return keys(this._allTables).map(name => this._allTables[name]);
        }
        transaction() {
            const args = extractTransactionArgs.apply(this, arguments);
            return this._transaction.apply(this, args);
        }
        _transaction(mode, tables, scopeFunc) {
            let parentTransaction = PSD.trans;
            if (!parentTransaction || parentTransaction.db !== this || mode.indexOf('!') !== -1)
                parentTransaction = null;
            const onlyIfCompatible = mode.indexOf('?') !== -1;
            mode = mode.replace('!', '').replace('?', '');
            let idbMode, storeNames;
            try {
                storeNames = tables.map(table => {
                    var storeName = table instanceof this.Table ? table.name : table;
                    if (typeof storeName !== 'string')
                        throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                    return storeName;
                });
                if (mode == "r" || mode === READONLY)
                    idbMode = READONLY;
                else if (mode == "rw" || mode == READWRITE)
                    idbMode = READWRITE;
                else
                    throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
                if (parentTransaction) {
                    if (parentTransaction.mode === READONLY && idbMode === READWRITE) {
                        if (onlyIfCompatible) {
                            parentTransaction = null;
                        }
                        else
                            throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                    }
                    if (parentTransaction) {
                        storeNames.forEach(storeName => {
                            if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                                if (onlyIfCompatible) {
                                    parentTransaction = null;
                                }
                                else
                                    throw new exceptions.SubTransaction("Table " + storeName +
                                        " not included in parent transaction.");
                            }
                        });
                    }
                    if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
                        parentTransaction = null;
                    }
                }
            }
            catch (e) {
                return parentTransaction ?
                    parentTransaction._promise(null, (_, reject) => { reject(e); }) :
                    rejection(e);
            }
            const enterTransaction = enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);
            return (parentTransaction ?
                parentTransaction._promise(idbMode, enterTransaction, "lock") :
                PSD.trans ?
                    usePSD(PSD.transless, () => this._whenReady(enterTransaction)) :
                    this._whenReady(enterTransaction));
        }
        table(tableName) {
            if (!hasOwn(this._allTables, tableName)) {
                throw new exceptions.InvalidTable(`Table ${tableName} does not exist`);
            }
            return this._allTables[tableName];
        }
    }

    const symbolObservable = typeof Symbol !== "undefined" && "observable" in Symbol
        ? Symbol.observable
        : "@@observable";
    class Observable {
        constructor(subscribe) {
            this._subscribe = subscribe;
        }
        subscribe(x, error, complete) {
            return this._subscribe(!x || typeof x === "function" ? { next: x, error, complete } : x);
        }
        [symbolObservable]() {
            return this;
        }
    }

    function extendObservabilitySet(target, newSet) {
        keys(newSet).forEach(part => {
            const rangeSet = target[part] || (target[part] = new RangeSet());
            mergeRanges(rangeSet, newSet[part]);
        });
        return target;
    }

    function liveQuery(querier) {
        return new Observable((observer) => {
            const scopeFuncIsAsync = isAsyncFunction(querier);
            function execute(subscr) {
                if (scopeFuncIsAsync) {
                    incrementExpectedAwaits();
                }
                const exec = () => newScope(querier, { subscr, trans: null });
                const rv = PSD.trans
                    ?
                        usePSD(PSD.transless, exec)
                    : exec();
                if (scopeFuncIsAsync) {
                    rv.then(decrementExpectedAwaits, decrementExpectedAwaits);
                }
                return rv;
            }
            let closed = false;
            let accumMuts = {};
            let currentObs = {};
            const subscription = {
                get closed() {
                    return closed;
                },
                unsubscribe: () => {
                    closed = true;
                    globalEvents.storagemutated.unsubscribe(mutationListener);
                },
            };
            observer.start && observer.start(subscription);
            let querying = false, startedListening = false;
            function shouldNotify() {
                return keys(currentObs).some((key) => accumMuts[key] && rangesOverlap(accumMuts[key], currentObs[key]));
            }
            const mutationListener = (parts) => {
                extendObservabilitySet(accumMuts, parts);
                if (shouldNotify()) {
                    doQuery();
                }
            };
            const doQuery = () => {
                if (querying || closed)
                    return;
                accumMuts = {};
                const subscr = {};
                const ret = execute(subscr);
                if (!startedListening) {
                    globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, mutationListener);
                    startedListening = true;
                }
                querying = true;
                Promise.resolve(ret).then((result) => {
                    querying = false;
                    if (closed)
                        return;
                    if (shouldNotify()) {
                        doQuery();
                    }
                    else {
                        accumMuts = {};
                        currentObs = subscr;
                        observer.next && observer.next(result);
                    }
                }, (err) => {
                    querying = false;
                    observer.error && observer.error(err);
                    subscription.unsubscribe();
                });
            };
            doQuery();
            return subscription;
        });
    }

    let domDeps;
    try {
        domDeps = {
            indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
            IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
        };
    }
    catch (e) {
        domDeps = { indexedDB: null, IDBKeyRange: null };
    }

    const Dexie = Dexie$1;
    props(Dexie, {
        ...fullNameExceptions,
        delete(databaseName) {
            const db = new Dexie(databaseName, { addons: [] });
            return db.delete();
        },
        exists(name) {
            return new Dexie(name, { addons: [] }).open().then(db => {
                db.close();
                return true;
            }).catch('NoSuchDatabaseError', () => false);
        },
        getDatabaseNames(cb) {
            try {
                return getDatabaseNames(Dexie.dependencies).then(cb);
            }
            catch (_a) {
                return rejection(new exceptions.MissingAPI());
            }
        },
        defineClass() {
            function Class(content) {
                extend(this, content);
            }
            return Class;
        },
        ignoreTransaction(scopeFunc) {
            return PSD.trans ?
                usePSD(PSD.transless, scopeFunc) :
                scopeFunc();
        },
        vip,
        async: function (generatorFn) {
            return function () {
                try {
                    var rv = awaitIterator(generatorFn.apply(this, arguments));
                    if (!rv || typeof rv.then !== 'function')
                        return DexiePromise.resolve(rv);
                    return rv;
                }
                catch (e) {
                    return rejection(e);
                }
            };
        },
        spawn: function (generatorFn, args, thiz) {
            try {
                var rv = awaitIterator(generatorFn.apply(thiz, args || []));
                if (!rv || typeof rv.then !== 'function')
                    return DexiePromise.resolve(rv);
                return rv;
            }
            catch (e) {
                return rejection(e);
            }
        },
        currentTransaction: {
            get: () => PSD.trans || null
        },
        waitFor: function (promiseOrFunction, optionalTimeout) {
            const promise = DexiePromise.resolve(typeof promiseOrFunction === 'function' ?
                Dexie.ignoreTransaction(promiseOrFunction) :
                promiseOrFunction)
                .timeout(optionalTimeout || 60000);
            return PSD.trans ?
                PSD.trans.waitFor(promise) :
                promise;
        },
        Promise: DexiePromise,
        debug: {
            get: () => debug,
            set: value => {
                setDebug(value, value === 'dexie' ? () => true : dexieStackFrameFilter);
            }
        },
        derive: derive,
        extend: extend,
        props: props,
        override: override,
        Events: Events,
        on: globalEvents,
        liveQuery,
        extendObservabilitySet,
        getByKeyPath: getByKeyPath,
        setByKeyPath: setByKeyPath,
        delByKeyPath: delByKeyPath,
        shallowClone: shallowClone,
        deepClone: deepClone,
        getObjectDiff: getObjectDiff,
        cmp,
        asap: asap$1,
        minKey: minKey,
        addons: [],
        connections: connections,
        errnames: errnames,
        dependencies: domDeps,
        semVer: DEXIE_VERSION,
        version: DEXIE_VERSION.split('.')
            .map(n => parseInt(n))
            .reduce((p, c, i) => p + (c / Math.pow(10, i * 2))),
    });
    Dexie.maxKey = getMaxKey(Dexie.dependencies.IDBKeyRange);

    if (typeof dispatchEvent !== 'undefined' && typeof addEventListener !== 'undefined') {
        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, updatedParts => {
            if (!propagatingLocally) {
                let event;
                if (isIEOrEdge) {
                    event = document.createEvent('CustomEvent');
                    event.initCustomEvent(STORAGE_MUTATED_DOM_EVENT_NAME, true, true, updatedParts);
                }
                else {
                    event = new CustomEvent(STORAGE_MUTATED_DOM_EVENT_NAME, {
                        detail: updatedParts
                    });
                }
                propagatingLocally = true;
                dispatchEvent(event);
                propagatingLocally = false;
            }
        });
        addEventListener(STORAGE_MUTATED_DOM_EVENT_NAME, ({ detail }) => {
            if (!propagatingLocally) {
                propagateLocally(detail);
            }
        });
    }
    function propagateLocally(updateParts) {
        let wasMe = propagatingLocally;
        try {
            propagatingLocally = true;
            globalEvents.storagemutated.fire(updateParts);
        }
        finally {
            propagatingLocally = wasMe;
        }
    }
    let propagatingLocally = false;

    if (typeof BroadcastChannel !== 'undefined') {
        const bc = new BroadcastChannel(STORAGE_MUTATED_DOM_EVENT_NAME);
        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, (changedParts) => {
            if (!propagatingLocally) {
                bc.postMessage(changedParts);
            }
        });
        bc.onmessage = (ev) => {
            if (ev.data)
                propagateLocally(ev.data);
        };
    }
    else if (typeof self !== 'undefined' && typeof navigator !== 'undefined') {
        globalEvents(DEXIE_STORAGE_MUTATED_EVENT_NAME, (changedParts) => {
            try {
                if (!propagatingLocally) {
                    if (typeof localStorage !== 'undefined') {
                        localStorage.setItem(STORAGE_MUTATED_DOM_EVENT_NAME, JSON.stringify({
                            trig: Math.random(),
                            changedParts,
                        }));
                    }
                    if (typeof self['clients'] === 'object') {
                        [...self['clients'].matchAll({ includeUncontrolled: true })].forEach((client) => client.postMessage({
                            type: STORAGE_MUTATED_DOM_EVENT_NAME,
                            changedParts,
                        }));
                    }
                }
            }
            catch (_a) { }
        });
        addEventListener('storage', (ev) => {
            if (ev.key === STORAGE_MUTATED_DOM_EVENT_NAME) {
                const data = JSON.parse(ev.newValue);
                if (data)
                    propagateLocally(data.changedParts);
            }
        });
        const swContainer = self.document && navigator.serviceWorker;
        if (swContainer) {
            swContainer.addEventListener('message', propagateMessageLocally);
        }
    }
    function propagateMessageLocally({ data }) {
        if (data && data.type === STORAGE_MUTATED_DOM_EVENT_NAME) {
            propagateLocally(data.changedParts);
        }
    }

    DexiePromise.rejectionMapper = mapError;
    setDebug(debug, dexieStackFrameFilter);

    var queryString = {};

    var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

    var token = '%[a-f0-9]{2}';
    var singleMatcher = new RegExp(token, 'gi');
    var multiMatcher = new RegExp('(' + token + ')+', 'gi');

    function decodeComponents(components, split) {
    	try {
    		// Try to decode the entire string first
    		return decodeURIComponent(components.join(''));
    	} catch (err) {
    		// Do nothing
    	}

    	if (components.length === 1) {
    		return components;
    	}

    	split = split || 1;

    	// Split the array in 2 parts
    	var left = components.slice(0, split);
    	var right = components.slice(split);

    	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
    }

    function decode$1(input) {
    	try {
    		return decodeURIComponent(input);
    	} catch (err) {
    		var tokens = input.match(singleMatcher);

    		for (var i = 1; i < tokens.length; i++) {
    			input = decodeComponents(tokens, i).join('');

    			tokens = input.match(singleMatcher);
    		}

    		return input;
    	}
    }

    function customDecodeURIComponent(input) {
    	// Keep track of all the replacements and prefill the map with the `BOM`
    	var replaceMap = {
    		'%FE%FF': '\uFFFD\uFFFD',
    		'%FF%FE': '\uFFFD\uFFFD'
    	};

    	var match = multiMatcher.exec(input);
    	while (match) {
    		try {
    			// Decode as big chunks as possible
    			replaceMap[match[0]] = decodeURIComponent(match[0]);
    		} catch (err) {
    			var result = decode$1(match[0]);

    			if (result !== match[0]) {
    				replaceMap[match[0]] = result;
    			}
    		}

    		match = multiMatcher.exec(input);
    	}

    	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
    	replaceMap['%C2'] = '\uFFFD';

    	var entries = Object.keys(replaceMap);

    	for (var i = 0; i < entries.length; i++) {
    		// Replace all decoded components
    		var key = entries[i];
    		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
    	}

    	return input;
    }

    var decodeUriComponent = function (encodedURI) {
    	if (typeof encodedURI !== 'string') {
    		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
    	}

    	try {
    		encodedURI = encodedURI.replace(/\+/g, ' ');

    		// Try the built in decoder first
    		return decodeURIComponent(encodedURI);
    	} catch (err) {
    		// Fallback to a more advanced decoder
    		return customDecodeURIComponent(encodedURI);
    	}
    };

    var splitOnFirst = (string, separator) => {
    	if (!(typeof string === 'string' && typeof separator === 'string')) {
    		throw new TypeError('Expected the arguments to be of type `string`');
    	}

    	if (separator === '') {
    		return [string];
    	}

    	const separatorIndex = string.indexOf(separator);

    	if (separatorIndex === -1) {
    		return [string];
    	}

    	return [
    		string.slice(0, separatorIndex),
    		string.slice(separatorIndex + separator.length)
    	];
    };

    var filterObj = function (obj, predicate) {
    	var ret = {};
    	var keys = Object.keys(obj);
    	var isArr = Array.isArray(predicate);

    	for (var i = 0; i < keys.length; i++) {
    		var key = keys[i];
    		var val = obj[key];

    		if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
    			ret[key] = val;
    		}
    	}

    	return ret;
    };

    (function (exports) {
    const strictUriEncode$1 = strictUriEncode;
    const decodeComponent = decodeUriComponent;
    const splitOnFirst$1 = splitOnFirst;
    const filterObject = filterObj;

    const isNullOrUndefined = value => value === null || value === undefined;

    const encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');

    function encoderForArrayFormat(options) {
    	switch (options.arrayFormat) {
    		case 'index':
    			return key => (result, value) => {
    				const index = result.length;

    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, [encode(key, options), '[', index, ']'].join('')];
    				}

    				return [
    					...result,
    					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
    				];
    			};

    		case 'bracket':
    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, [encode(key, options), '[]'].join('')];
    				}

    				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
    			};

    		case 'comma':
    		case 'separator':
    		case 'bracket-separator': {
    			const keyValueSep = options.arrayFormat === 'bracket-separator' ?
    				'[]=' :
    				'=';

    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				// Translate null to an empty string so that it doesn't serialize as 'null'
    				value = value === null ? '' : value;

    				if (result.length === 0) {
    					return [[encode(key, options), keyValueSep, encode(value, options)].join('')];
    				}

    				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
    			};
    		}

    		default:
    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, encode(key, options)];
    				}

    				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
    			};
    	}
    }

    function parserForArrayFormat(options) {
    	let result;

    	switch (options.arrayFormat) {
    		case 'index':
    			return (key, value, accumulator) => {
    				result = /\[(\d*)\]$/.exec(key);

    				key = key.replace(/\[\d*\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = {};
    				}

    				accumulator[key][result[1]] = value;
    			};

    		case 'bracket':
    			return (key, value, accumulator) => {
    				result = /(\[\])$/.exec(key);
    				key = key.replace(/\[\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = [value];
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};

    		case 'comma':
    		case 'separator':
    			return (key, value, accumulator) => {
    				const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);
    				const isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));
    				value = isEncodedArray ? decode(value, options) : value;
    				const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
    				accumulator[key] = newValue;
    			};

    		case 'bracket-separator':
    			return (key, value, accumulator) => {
    				const isArray = /(\[\])$/.test(key);
    				key = key.replace(/\[\]$/, '');

    				if (!isArray) {
    					accumulator[key] = value ? decode(value, options) : value;
    					return;
    				}

    				const arrayValue = value === null ?
    					[] :
    					value.split(options.arrayFormatSeparator).map(item => decode(item, options));

    				if (accumulator[key] === undefined) {
    					accumulator[key] = arrayValue;
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], arrayValue);
    			};

    		default:
    			return (key, value, accumulator) => {
    				if (accumulator[key] === undefined) {
    					accumulator[key] = value;
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};
    	}
    }

    function validateArrayFormatSeparator(value) {
    	if (typeof value !== 'string' || value.length !== 1) {
    		throw new TypeError('arrayFormatSeparator must be single character string');
    	}
    }

    function encode(value, options) {
    	if (options.encode) {
    		return options.strict ? strictUriEncode$1(value) : encodeURIComponent(value);
    	}

    	return value;
    }

    function decode(value, options) {
    	if (options.decode) {
    		return decodeComponent(value);
    	}

    	return value;
    }

    function keysSorter(input) {
    	if (Array.isArray(input)) {
    		return input.sort();
    	}

    	if (typeof input === 'object') {
    		return keysSorter(Object.keys(input))
    			.sort((a, b) => Number(a) - Number(b))
    			.map(key => input[key]);
    	}

    	return input;
    }

    function removeHash(input) {
    	const hashStart = input.indexOf('#');
    	if (hashStart !== -1) {
    		input = input.slice(0, hashStart);
    	}

    	return input;
    }

    function getHash(url) {
    	let hash = '';
    	const hashStart = url.indexOf('#');
    	if (hashStart !== -1) {
    		hash = url.slice(hashStart);
    	}

    	return hash;
    }

    function extract(input) {
    	input = removeHash(input);
    	const queryStart = input.indexOf('?');
    	if (queryStart === -1) {
    		return '';
    	}

    	return input.slice(queryStart + 1);
    }

    function parseValue(value, options) {
    	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
    		value = Number(value);
    	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
    		value = value.toLowerCase() === 'true';
    	}

    	return value;
    }

    function parse(query, options) {
    	options = Object.assign({
    		decode: true,
    		sort: true,
    		arrayFormat: 'none',
    		arrayFormatSeparator: ',',
    		parseNumbers: false,
    		parseBooleans: false
    	}, options);

    	validateArrayFormatSeparator(options.arrayFormatSeparator);

    	const formatter = parserForArrayFormat(options);

    	// Create an object with no prototype
    	const ret = Object.create(null);

    	if (typeof query !== 'string') {
    		return ret;
    	}

    	query = query.trim().replace(/^[?#&]/, '');

    	if (!query) {
    		return ret;
    	}

    	for (const param of query.split('&')) {
    		if (param === '') {
    			continue;
    		}

    		let [key, value] = splitOnFirst$1(options.decode ? param.replace(/\+/g, ' ') : param, '=');

    		// Missing `=` should be `null`:
    		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
    		value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);
    		formatter(decode(key, options), value, ret);
    	}

    	for (const key of Object.keys(ret)) {
    		const value = ret[key];
    		if (typeof value === 'object' && value !== null) {
    			for (const k of Object.keys(value)) {
    				value[k] = parseValue(value[k], options);
    			}
    		} else {
    			ret[key] = parseValue(value, options);
    		}
    	}

    	if (options.sort === false) {
    		return ret;
    	}

    	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
    		const value = ret[key];
    		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
    			// Sort object keys, not values
    			result[key] = keysSorter(value);
    		} else {
    			result[key] = value;
    		}

    		return result;
    	}, Object.create(null));
    }

    exports.extract = extract;
    exports.parse = parse;

    exports.stringify = (object, options) => {
    	if (!object) {
    		return '';
    	}

    	options = Object.assign({
    		encode: true,
    		strict: true,
    		arrayFormat: 'none',
    		arrayFormatSeparator: ','
    	}, options);

    	validateArrayFormatSeparator(options.arrayFormatSeparator);

    	const shouldFilter = key => (
    		(options.skipNull && isNullOrUndefined(object[key])) ||
    		(options.skipEmptyString && object[key] === '')
    	);

    	const formatter = encoderForArrayFormat(options);

    	const objectCopy = {};

    	for (const key of Object.keys(object)) {
    		if (!shouldFilter(key)) {
    			objectCopy[key] = object[key];
    		}
    	}

    	const keys = Object.keys(objectCopy);

    	if (options.sort !== false) {
    		keys.sort(options.sort);
    	}

    	return keys.map(key => {
    		const value = object[key];

    		if (value === undefined) {
    			return '';
    		}

    		if (value === null) {
    			return encode(key, options);
    		}

    		if (Array.isArray(value)) {
    			if (value.length === 0 && options.arrayFormat === 'bracket-separator') {
    				return encode(key, options) + '[]';
    			}

    			return value
    				.reduce(formatter(key), [])
    				.join('&');
    		}

    		return encode(key, options) + '=' + encode(value, options);
    	}).filter(x => x.length > 0).join('&');
    };

    exports.parseUrl = (url, options) => {
    	options = Object.assign({
    		decode: true
    	}, options);

    	const [url_, hash] = splitOnFirst$1(url, '#');

    	return Object.assign(
    		{
    			url: url_.split('?')[0] || '',
    			query: parse(extract(url), options)
    		},
    		options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
    	);
    };

    exports.stringifyUrl = (object, options) => {
    	options = Object.assign({
    		encode: true,
    		strict: true,
    		[encodeFragmentIdentifier]: true
    	}, options);

    	const url = removeHash(object.url).split('?')[0] || '';
    	const queryFromUrl = exports.extract(object.url);
    	const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

    	const query = Object.assign(parsedQueryFromUrl, object.query);
    	let queryString = exports.stringify(query, options);
    	if (queryString) {
    		queryString = `?${queryString}`;
    	}

    	let hash = getHash(object.url);
    	if (object.fragmentIdentifier) {
    		hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
    	}

    	return `${url}${queryString}${hash}`;
    };

    exports.pick = (input, filter, options) => {
    	options = Object.assign({
    		parseFragmentIdentifier: true,
    		[encodeFragmentIdentifier]: false
    	}, options);

    	const {url, query, fragmentIdentifier} = exports.parseUrl(input, options);
    	return exports.stringifyUrl({
    		url,
    		query: filterObject(query, filter),
    		fragmentIdentifier
    	}, options);
    };

    exports.exclude = (input, filter, options) => {
    	const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);

    	return exports.pick(input, exclusionFilter, options);
    };
    }(queryString));

    const debounced = (millis, defaultValue = null)  => {
      let timer;
    	let value = defaultValue;
      const { subscribe, set, update } = writable(defaultValue); 

      const flush = () => {
        clearTimeout(timer);
        set(value);
        return value
      };

    	return {
    		subscribe,
        flush,

        get: flush,

        set: (newValue) => {
          value = newValue;
          flush();
        },

        lazySet: (newValue) => {
          value = newValue;
          clearTimeout(timer);
          timer = setTimeout(() => {
            set(value);
          }, millis);
        },
    	};
    };

    const isLoaded = writable(false);


    const newBook = debounced(100, '');

    const sanitizeKey = key => key.replace(/[^a-z0-9]/gi,'');


    const decode = (file) => {
      let result = {
        properties: {},
        chapters: new Map(),
        linksToChapter: new Map(),
        groups: new Set(),
      };

      let key = '';
      let chapter;

      let lastLineHadContent = false;
      let lastContentLinePlusOne = 1;

      const lines = file.split('\n');
      lines.forEach( (oLine, zeroIndexlineNumber) => { 
        const i = zeroIndexlineNumber;  // We keep zero indexed as reference
        const line = oLine.trim();

        if(lastLineHadContent) lastContentLinePlusOne = i; 
        lastLineHadContent = (line !== '');
      
        // Parsing dell'header
        if(key === '' && !line.startsWith('### ')) {
          if(line.startsWith('# ')) {
            result.properties['title'] = line.replace(/\#/g, '').trim();
            return
          }
          const semicolon = line.indexOf(':');
          if(semicolon !== -1){
            result.properties[line.substr(0, semicolon)] = line.substr(semicolon + 1);
          }
          return
        }
      
        // Parsing del testo
        if(line.startsWith('### ')){
          if(key !== ''){
            chapter.contentEnd = lastContentLinePlusOne - 1;
            chapter.end = i - 1;
            result.chapters.set(key, chapter);
          }
          // crea nuova entità
          key = line.substr(4).trim();
          let title = '';
          const index = key.indexOf('{#');
          if(index != -1){
            title = key.substr(0, index - 1).trim();
            key = key.substr(index + 2,  key.lastIndexOf('}') - 2 - index).trim();
          }
          chapter = {
            title,
            group: '',
            start: lastContentLinePlusOne,
            contentStart: i,
            contentEnd: i,
            end: i,
            flags: [],
            links: new Set(),
          };
          return
        }
      
        if(line.includes('![flag-') || line.includes('![][flag-')){
    ['final', 'fixed', 'death'].forEach( (flag) => {
            if(line.includes(`![flag-${flag}]`) || line.includes(`![][flag-${flag}]`)) chapter.flags.push(flag);
          });
          return
        }
        const groupIndex = line.indexOf('[group]:<> ("');
        if(groupIndex != -1){
          chapter.group = line.substr(groupIndex + 13, line.lastIndexOf('")') - groupIndex - 13);
          result.groups.add(chapter.group);
          return
        }


        let myRegexp = new RegExp(`\\[([^\\[]*)\\]\\(\\s*\\#([^\\)]+)\\s*\\)`, "g");

        let match = myRegexp.exec(oLine);
        while (match != null) {
          const linkTarget = match[2].trim();
          chapter.links.add(linkTarget);
          if(!result.linksToChapter.has(linkTarget)) result.linksToChapter.set(linkTarget, new Set());
          result.linksToChapter.get(linkTarget).add(key);
          match = myRegexp.exec(oLine);
        }

      });

      if(key !== ''){
        chapter.end = lines.length - 1;
        chapter.contentEnd = lastLineHadContent ? chapter.end : lastContentLinePlusOne - 1;
        result.chapters.set(key, chapter);
      }

      return result
    };

    const $bookIndex = {};

    const bookIndex = derived(
    	newBook,
    	$book => (Object.assign($bookIndex, decode($book)), $bookIndex)
    );

    const editorComponentID = 'main-editor';



    let editor$2 = null;
    let firepad = null;


    const showSidemenu = writable(false);
    const isSynced = debounced(500, null);
    const initError = writable("");



    const cursorPosition = debounced(10, {row: 0, column: 0});

    const currentChapterKey = derived(
      [cursorPosition, bookIndex],
      ([$cursorPosition, $bookIndex]) => {
        let cursorRow = $cursorPosition.row;
        let lastWorkingKey = '';
        for(const [key, chapter] of $bookIndex.chapters.entries()) {
          if(chapter.contentStart <= cursorRow){
            lastWorkingKey = key;
          } else {
            return lastWorkingKey
          }
        }
        return lastWorkingKey
      } 
    );

    const currentChapterFullTitle = derived(
      [currentChapterKey, bookIndex],
      ([$currentChapterKey, $bookIndex]) => {
        if($currentChapterKey == '') return ' '
        const chapter = $bookIndex.chapters.get($currentChapterKey);
        return $currentChapterKey + (chapter.title ? ' - ' + chapter.title : '')
      }
    );

    const setupAce = () => {
      editor$2 = ace.edit(editorComponentID);
      window.editor = editor$2;
      editor$2.setTheme("ace/theme/chrome");
      editor$2.session.setMode("ace/mode/markdown");
      editor$2.session.setUseWorker(false);
      
      editor$2.setOptions({
        showPrintMargin: false,
        wrap: true,
        fontSize: 18,
        showGutter: window.innerWidth > 430,
        scrollPastEnd: 0.7,
      });
      
      editor$2.session.selection.on('changeCursor', () => cursorPosition.lazySet(editor$2.selection.getCursor()));
      
      editor$2.container.style.lineHeight = 1.4;
     
      const findF = editor$2.commands.commands.find.exec;

      editor$2.commands.addCommand({
        bindKey: {win: 'Ctrl-F', mac: 'Command-F'},
        description: "Find",
        exec: (...e) => {
          findF(...e);
          setTimeout(() => preventClickPropagation(document.querySelector('.ace_search')), 400);
        },
        name: "find",
        readOnly: true
      });

      delete editor$2.keyBinding.$defaultHandler.commandKeyBinding['ctrl-k'];
      delete editor$2.keyBinding.$defaultHandler.commandKeyBinding['ctrl-l'];
      
      editor$2.renderer.updateFontSize();
      editor$2.session.on('change', function() {
        newBook.lazySet(editor$2.getValue());
      });

    };


    const initEditorLocal = (data) => {
      setupAce();

      editor$2.getSession().setValue(data.book);
      editor$2.moveCursorTo(data.cursor.row,data.cursor.column);
      editor$2.scrollToLine(data.cursor.row || 0, true, true, function () {});
      editor$2.focus();


      isLoaded.set(true);
    };


    const initEditorFirebase = (config) => {

      try{
        setupAce();


        const app = firebase.initializeApp(config);

        // Get a reference to the database service
        const database = firebase.database(app);

        window.db = database;



        //// Create Firepad.
        firepad = window.Firepad.fromACE(database.ref(config.book), editor$2, {
          defaultText: get_store_value(X)('books.fire').replace('%1', config.book)
        });

        firepad.on('ready', function() {
          isLoaded.set(true);
        });

        firepad.on('synced', function(newValue) {
          if(newValue){
            isSynced.set(true);
          }else {
            isSynced.lazySet(false);
          }
        });
        
      }catch(e){
        initError.set(e.toString());
      }

    };



    const getEditor = () => editor$2;

    const parsedHash = queryString.parse(location.hash);



    // Database: declare tables, IDs and indexes
    const db = new Dexie$1('magebook2');
    db.version(1).stores({
      sessions: '&id, time, preview',
      fireSessions: '&id, time, preview'
    });

    const isFirebase = writable(false);




    // Session previews
    const previews = async() => (await db.sessions.orderBy('preview').keys()).reverse().map( key => ({
          time: new Date(Number(key.substr(0, 30))),
          id: key.substr(31, 20),
          name: key.substr(52, 30)
        }));


    // Session class
    const session = new (function(){
      // Generate unique identifier for this session
      let data;
      const IDLength = 20; 
      const lock = randomString(IDLength);

      // Session hash preview
      const preview = (sessionData)  => {
        const name = (sessionData.data.title || 'no title').padEnd(30, '').substr(0, 30);
        return `${String(sessionData.time).padStart(30, '0')}-${sessionData.id}-${name}`
      };

      // Session cleaner
      const maxSessions = 50;
      const cleanOldSessions = async() => {
        const key = 'time';
        const times = (await db.sessions.orderBy(key).keys()).reverse();
        if(times.length > maxSessions){
          const lastTime = times[maxSessions];
          await db.sessions.where("time").below(lastTime).modify(function() {
              delete this.value;
          });
        }
      };

      // Session loader
      let sessionName;
      const load = async() => {

        if(parsedHash.fsession){
          isFirebase.set(true);
          window.addEventListener('hashchange', () => {
            window.location.reload();
          }, false);
      
          initEditorFirebase(JSON.parse(atob(decodeURIComponent(parsedHash.fsession))));

          return
        }


        if(sessionName){
          console.error("Session loaded twice!");
          return
        }
        // Trova il nome della sessione o creane una nuova
        const lastSession = localStorage.getItem('mage-session-last');

        sessionName = await (async() => {
          const prefix = 'msession=';
          if(!lastSession) return randomString(IDLength)

          if(window.location.hash && window.location.hash.includes(prefix)){
            const pos = window.location.hash.indexOf(prefix) + prefix.length;
            if(!((pos + IDLength) > window.location.hash.length)){
              const candidate = window.location.hash.substr(pos, IDLength);
              if(candidate == lastSession) return candidate
              try {
                if(await db.sessions.get(candidate)){
                  return candidate
                }
              }catch(e){}
            }
          }
          return lastSession ||  randomString(IDLength)
        })();
        location.replace(`#msession=${sessionName}`); // Set dell'url
        
        // Listen url change
        window.addEventListener('hashchange', () => {
          if(!window.location.hash.includes(`#msession=${sessionName}`)){
            window.location.reload();
          }
        }, false);

        // Acquire lock
        localStorage.setItem('mage-session-last', sessionName);
        localStorage.setItem(`mage-lock-${sessionName}`, lock);

        // Load book in session
        let info;
        if(lastSession == sessionName){
          info = JSON.parse(localStorage.getItem('mage-session-last-data'));
        }else {
          try{
            info =  (await db.sessions.get(sessionName)); 
          }catch(e){}
        }
        info = info || {
          data:{book: get_store_value(X)('books.local'), cursor: {row: 0, column: 0}} 
        };
         
        initEditorLocal(info.data);

        data = derived(
          [newBook, cursorPosition, bookIndex],
          ([$newBook, $cursorPosition, $bookIndex]) => ({
            book: $newBook,
            cursor: $cursorPosition,
            title: $bookIndex.properties.title
          })
        );

        // Save book on changes
        data.subscribe( async(bookData) => {
          if(localStorage.getItem(`mage-lock-${sessionName}`) != lock ){
            lockStore.set( {
              lock: true,
              session: this,
            });
            return 
          }

          localStorage.setItem('mage-session-last', sessionName);
          const sessionData = {
            id: sessionName,
            data: bookData,
            time: new Date().getTime(),
          };
          localStorage.setItem('mage-session-last-data', JSON.stringify(sessionData));

          try{
          await db.sessions.put({
            preview: preview(sessionData),
            ...sessionData
          });
          }catch(e){console.log(e);}
        });
        
        window.onbeforeunload = (e) => {
          newBook.flush();
          delete e['returnValue'];

        };
        setInterval( () => newBook.flush(), 10000);

        cleanOldSessions();
      };

      const open = async(params) => {
        window.onbeforeunload = () => {};

        const id = randomString(IDLength);
        localStorage.setItem('mage-session-last', id);

        const sessionData = {
          id,
          file:{name: "New"},
          time: new Date().getTime(),
          ...params,
        };
        localStorage.setItem('mage-session-last-data', JSON.stringify(sessionData));
        try {
          await db.sessions.put(sessionData);
        }catch(e){}
        location.assign(`#msession=${sessionData.id}`);
      };

      this.duplicate = async(params) => {
        
        open({
          data: get_store_value(data),
          ...params,
        });
      };

      this.lock = () => {
        localStorage.setItem(`mage-lock-${sessionName}`, lock);
        lockStore.set({ lock: false });
        book.refresh();
      };


      // Session exports
      Object.assign(this, {sessionName, load, open});
    })();

    const formats = {
      'md': md,
      'xlgc': xlgc,
      'fodt': fodt,
      'docx': docx,
    };


    // Read file from fileinput
    const open$1 = (elem) => {
      // Crea una copia delle info del file
      const file = elem.files[0];
      const name = file.name;

      // Usa un fileReader per leggere il file come testo
      const reader = new FileReader();
      reader.onload = async() => {
        const extension = name.substr(name.lastIndexOf('.') + 1);
        if(!['md', 'xlgc'].includes(extension)){
          console.error("Unsupported format");
          return
        }

        const book = reader.result;
        const decodedMd = formats[extension].decode(book);
        const encodedBook = (extension === 'md') 
          ? book
          : await Promise.resolve(decodedMd);


        
        session.open({
          data: {
            book: encodedBook,
            cursor: {row: 0, column: 0},
            title: decodedMd.title,
          }
        });

        elem.value = '';
      };
      reader.readAsText(file);
    };


    // Download file
    const download = async(formatKey, book) => {

      const format = formats[formatKey];
      const decodedMd = md.decode(book);

      const encodedBook = (formatKey === 'md') 
        ? book
        : await Promise.resolve(format.encode(book));

      if(!encodedBook) return

      const element = document.createElement('a');
      element.setAttribute(
        'href',
        `data:${format.mimetype};charset=utf-8,${encodeURIComponent(encodedBook)}`
      );
      element.setAttribute('download', (decodedMd.properties.title || 'magebook') + '.' + formatKey);

      element.style.display = 'none';
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    };

    // APP MODE
    const isApp    = writable(false);
    const appPath     = writable('');
    const recentFiles = writable(null);

    if (parsedHash.app){
      isApp.set(true);
      window.loadRecents().then (result => recentFiles.set(JSON.parse(result)));

      appPath.set(parsedHash.path || '');
    }


    const loadAppMode = async() => {

      const path = get_store_value(appPath);
      const recents = get_store_value(recentFiles);
      
      const data = {
        book: await window.readFile(path),
        cursor: {row: 0, column: 0},
      };
      

      if(data.book == '%ERROR%%') {
        appReload();
        return
      }

      if(data.book == ''){
         data.book = get_store_value(X)('books.local');
      }else if (path.endsWith('.xlgc')){
        await       window.writeFile(path.substring(0, path.length - 5) + `-backup-${Math.floor(new Date()/1000)}.xlgc`,data.book);
        data.book = xlgc.decode(data.book);
      }


      try{
        const {cursor} = JSON.parse(recents[encodeURIComponent(path)].Data);
        data.cursor.row = cursor.row || 0;
        data.cursor.column = cursor.column || 0;
      }catch(e){console.log(e);}

      initEditorLocal(data);

      newBook.subscribe( $newBook => {
        if(get_store_value(appPath).endsWith('.xlgc')){
          window.writeFile(get_store_value(appPath), xlgc.encode(md.decode($newBook)));
        }else {
          window.writeFile(get_store_value(appPath), $newBook);
        }
      });

      const recentFileData = derived( 
        [bookIndex, cursorPosition],
        ([$bookIndex, $cursorPosition]) => ({title: $bookIndex.properties.title, cursor: $cursorPosition})
      );

      recentFileData.subscribe( value => window.saveRecent(encodeURIComponent(get_store_value(appPath)), JSON.stringify(value)));


    };

    const appReload = async () =>{

      await window.releaseLock();
      window.location.hash = 'app=true';
      location.reload();
    };

    var name = "magebook";
    var version = "0.2.3";
    var author = "Luca Fabbian";
    var email = "luca.fabbian.1999@gmail.com";
    var description = "Interactive fiction editor";
    var license = "MIT";
    var homepage = "https://librogamesland.github.io/magebook";
    var repository = {
    	type: "git",
    	url: "https://github.com/librogamesland/magebook.git"
    };
    var keywords = [
    	"lgl",
    	"librogamesland",
    	"librogame",
    	"gamebook",
    	"editor",
    	"rollup-plugin",
    	"vite-plugin"
    ];
    var main = "index.js";
    var scripts = {
    	build: "rollup -c",
    	clean: "rm -rf ./editor/build; rm -rf ./dist;",
    	release: "npm run clean; npm run build;  ./build-app.sh",
    	dev: "rollup -c -w",
    	"api-build": "rollup -c 'rollup-api.config.js'",
    	"api-dev": "rollup -c 'rollup-api.config.js' -w"
    };
    var devDependencies = {
    	"@babel/core": "^7.16.7",
    	"@babel/plugin-transform-runtime": "^7.16.7",
    	"@babel/preset-env": "^7.16.7",
    	"@babel/runtime-corejs3": "^7.16.7",
    	"@fbraem/rollup-plugin-toml": "0.0.1",
    	"@hpcc-js/wasm": "^1.12.7",
    	"@rollup/plugin-babel": "^5.3.0",
    	"@rollup/plugin-commonjs": "^21.0.1",
    	"@rollup/plugin-json": "^4.1.0",
    	"@rollup/plugin-node-resolve": "^13.1.3",
    	"@rollup/plugin-typescript": "^8.3.0",
    	"@rollup/pluginutils": "^4.1.2",
    	"@tsconfig/svelte": "^3.0.0",
    	"babel-preset-env": "^1.7.0",
    	dexie: "^3.2.0",
    	docx: "^7.3.0",
    	"file-saver": "^2.0.5",
    	jsdom: "^19.0.0",
    	marked: "^4.0.8",
    	"query-string": "^7.0.1",
    	rollup: "^2.63.0",
    	"rollup-plugin-css-only": "^3.1.0",
    	"rollup-plugin-external-globals": "^0.6.1",
    	"rollup-plugin-serve": "^1.1.0",
    	"rollup-plugin-svelte": "^7.1.0",
    	"rollup-plugin-terser": "^7.0.2",
    	"rollup-plugin-toml": "^1.0.0",
    	"smooth-scroll-into-view-if-needed": "^1.1.32",
    	svelte: "^3.44.3",
    	"svelte-check": "^2.2.11",
    	"svelte-i18n": "^3.3.13",
    	"svelte-preprocess": "^4.10.1",
    	tslib: "^2.3.1",
    	typescript: "^4.5.4"
    };
    var manifest = {
    	name: name,
    	version: version,
    	author: author,
    	email: email,
    	description: description,
    	license: license,
    	homepage: homepage,
    	repository: repository,
    	keywords: keywords,
    	main: main,
    	scripts: scripts,
    	devDependencies: devDependencies
    };

    /* src/components/dialogs/About.svelte generated by Svelte v3.44.3 */
    const file$d = "src/components/dialogs/About.svelte";

    function create_fragment$d(ctx) {
    	let div;
    	let h3;
    	let t2;
    	let img;
    	let img_src_value;
    	let t3;
    	let br;
    	let t4;
    	let p0;
    	let raw_value = /*$_*/ ctx[1]('about.text') + "";
    	let t5;
    	let p1;
    	let t6_value = /*$_*/ ctx[1]('about.contact') + "";
    	let t6;
    	let t7;
    	let a;
    	let t9;
    	let button;
    	let t10_value = /*$_*/ ctx[1]('dialogs.ok') + "";
    	let t10;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = `Magebook - v. ${manifest.version}`;
    			t2 = space();
    			img = element("img");
    			t3 = space();
    			br = element("br");
    			t4 = space();
    			p0 = element("p");
    			t5 = space();
    			p1 = element("p");
    			t6 = text(t6_value);
    			t7 = text(": ");
    			a = element("a");
    			a.textContent = "luc.fabbian@gmail.com";
    			t9 = space();
    			button = element("button");
    			t10 = text(t10_value);
    			add_location(h3, file$d, 8, 2, 180);
    			if (!src_url_equal(img.src, img_src_value = "./static/img/logo.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Magebook logo");
    			attr_dev(img, "class", "svelte-1qabtlc");
    			add_location(img, file$d, 9, 2, 224);
    			add_location(br, file$d, 10, 2, 280);
    			attr_dev(p0, "class", "svelte-1qabtlc");
    			add_location(p0, file$d, 11, 2, 287);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "rel", "noopener");
    			attr_dev(a, "href", "mailto:luca.fabbian.1999@gmail.com?subject=Magebook%20-%20Segnalazione");
    			add_location(a, file$d, 12, 28, 347);
    			attr_dev(p1, "class", "svelte-1qabtlc");
    			add_location(p1, file$d, 12, 2, 321);
    			attr_dev(button, "class", "ok svelte-1qabtlc");
    			add_location(button, file$d, 13, 2, 491);
    			attr_dev(div, "class", "dialog svelte-1qabtlc");
    			add_location(div, file$d, 7, 0, 157);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(div, t2);
    			append_dev(div, img);
    			append_dev(div, t3);
    			append_dev(div, br);
    			append_dev(div, t4);
    			append_dev(div, p0);
    			p0.innerHTML = raw_value;
    			append_dev(div, t5);
    			append_dev(div, p1);
    			append_dev(p1, t6);
    			append_dev(p1, t7);
    			append_dev(p1, a);
    			append_dev(div, t9);
    			append_dev(div, button);
    			append_dev(button, t10);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 2 && raw_value !== (raw_value = /*$_*/ ctx[1]('about.text') + "")) p0.innerHTML = raw_value;			if (dirty & /*$_*/ 2 && t6_value !== (t6_value = /*$_*/ ctx[1]('about.contact') + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*$_*/ 2 && t10_value !== (t10_value = /*$_*/ ctx[1]('dialogs.ok') + "")) set_data_dev(t10, t10_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('About', slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;
    	const writable_props = ['params', 'callback'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => callback(true);

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(2, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({ _: X, manifest, params, callback, $_ });

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(2, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [callback, $_, params, click_handler];
    }

    class About extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { params: 2, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[2] === undefined && !('params' in props)) {
    			console.warn("<About> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !('callback' in props)) {
    			console.warn("<About> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/Confirm.svelte generated by Svelte v3.44.3 */
    const file$c = "src/components/dialogs/Confirm.svelte";

    // (18:2) {#if saveCopy}
    function create_if_block$5(ctx) {
    	let button;
    	let t_value = /*$_*/ ctx[5]('dialogs.shuffle.savecopy') + "";
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t = text(t_value);
    			attr_dev(button, "class", "cancel");
    			add_location(button, file$c, 18, 2, 421);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$_*/ 32 && t_value !== (t_value = /*$_*/ ctx[5]('dialogs.shuffle.savecopy') + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(18:2) {#if saveCopy}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div;
    	let h3;
    	let t0;
    	let t1;
    	let p;
    	let t2;
    	let t3;
    	let button0;
    	let t4_value = /*$_*/ ctx[5]('dialogs.ok') + "";
    	let t4;
    	let t5;
    	let t6;
    	let button1;
    	let t7_value = /*$_*/ ctx[5]('dialogs.cancel') + "";
    	let t7;
    	let mounted;
    	let dispose;
    	let if_block = /*saveCopy*/ ctx[4] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(/*title*/ ctx[2]);
    			t1 = space();
    			p = element("p");
    			t2 = text(/*text*/ ctx[3]);
    			t3 = space();
    			button0 = element("button");
    			t4 = text(t4_value);
    			t5 = space();
    			if (if_block) if_block.c();
    			t6 = space();
    			button1 = element("button");
    			t7 = text(t7_value);
    			add_location(h3, file$c, 14, 2, 288);
    			add_location(p, file$c, 15, 2, 307);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$c, 16, 2, 323);
    			attr_dev(button1, "class", "cancel");
    			add_location(button1, file$c, 21, 2, 546);
    			attr_dev(div, "class", "dialog");
    			add_location(div, file$c, 13, 0, 265);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			append_dev(div, p);
    			append_dev(p, t2);
    			append_dev(div, t3);
    			append_dev(div, button0);
    			append_dev(button0, t4);
    			append_dev(div, t5);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t6);
    			append_dev(div, button1);
    			append_dev(button1, t7);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[7], false, false, false),
    					listen_dev(button1, "click", /*click_handler_2*/ ctx[9], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 4) set_data_dev(t0, /*title*/ ctx[2]);
    			if (dirty & /*text*/ 8) set_data_dev(t2, /*text*/ ctx[3]);
    			if (dirty & /*$_*/ 32 && t4_value !== (t4_value = /*$_*/ ctx[5]('dialogs.ok') + "")) set_data_dev(t4, t4_value);

    			if (/*saveCopy*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(div, t6);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*$_*/ 32 && t7_value !== (t7_value = /*$_*/ ctx[5]('dialogs.cancel') + "")) set_data_dev(t7, t7_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let saveCopy;

    	let $params,
    		$$unsubscribe_params = noop,
    		$$subscribe_params = () => ($$unsubscribe_params(), $$unsubscribe_params = subscribe(params, $$value => $$invalidate(6, $params = $$value)), params);

    	let $_;
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(5, $_ = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_params());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Confirm', slots, []);
    	let { params } = $$props;
    	validate_store(params, 'params');
    	$$subscribe_params();
    	let { callback } = $$props;
    	let title, text;
    	const writable_props = ['params', 'callback'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Confirm> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => callback(true);
    	const click_handler_1 = () => download('md', newBook.flush());
    	const click_handler_2 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$subscribe_params($$invalidate(0, params = $$props.params));
    		if ('callback' in $$props) $$invalidate(1, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: X,
    		newBook,
    		download,
    		params,
    		callback,
    		title,
    		text,
    		saveCopy,
    		$params,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$subscribe_params($$invalidate(0, params = $$props.params));
    		if ('callback' in $$props) $$invalidate(1, callback = $$props.callback);
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('text' in $$props) $$invalidate(3, text = $$props.text);
    		if ('saveCopy' in $$props) $$invalidate(4, saveCopy = $$props.saveCopy);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$params*/ 64) {
    			$$invalidate(2, [title, text, saveCopy] = $params, title, ($$invalidate(3, text), $$invalidate(6, $params)), ($$invalidate(4, saveCopy), $$invalidate(6, $params)));
    		}
    	};

    	return [
    		params,
    		callback,
    		title,
    		text,
    		saveCopy,
    		$_,
    		$params,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Confirm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { params: 0, callback: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Confirm",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[0] === undefined && !('params' in props)) {
    			console.warn("<Confirm> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[1] === undefined && !('callback' in props)) {
    			console.warn("<Confirm> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Confirm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Confirm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Confirm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Confirm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/Img.svelte generated by Svelte v3.44.3 */

    const { console: console_1$2 } = globals;
    const file$b = "src/components/dialogs/Img.svelte";

    // (46:18) 
    function create_if_block_1$4(ctx) {
    	let div1;
    	let p;
    	let t0_value = /*$_*/ ctx[4]('dialogs.graph.loading') + "";
    	let t0;
    	let t1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			p = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			add_location(p, file$b, 47, 2, 1214);
    			attr_dev(div0, "class", "spinner-1");
    			add_location(div0, file$b, 48, 2, 1253);
    			attr_dev(div1, "class", "dialog");
    			set_style(div1, "text-align", "center");
    			add_location(div1, file$b, 46, 0, 1164);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, p);
    			append_dev(p, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$_*/ 16 && t0_value !== (t0_value = /*$_*/ ctx[4]('dialogs.graph.loading') + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(46:18) ",
    		ctx
    	});

    	return block;
    }

    // (25:0) {#if loaded}
    function create_if_block$4(ctx) {
    	let div1;
    	let div0;
    	let raw_value = /*src*/ ctx[3].replace(/width=\"([^"]*)\"/, 'width="100%"').replace(/height=\"([^"]*)\"/, '') + "";
    	let t0;
    	let button;
    	let t1_value = /*$_*/ ctx[4]('dialogs.graph.open') + "";
    	let t1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			button = element("button");
    			t1 = text(t1_value);
    			add_location(div0, file$b, 31, 2, 587);
    			attr_dev(button, "class", "ok");
    			add_location(button, file$b, 35, 2, 766);
    			attr_dev(div1, "class", "imgbox svelte-m36p7x");
    			add_location(div1, file$b, 25, 0, 490);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			div0.innerHTML = raw_value;
    			append_dev(div1, t0);
    			append_dev(div1, button);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", stop_propagation(/*click_handler*/ ctx[6]), false, false, true),
    					listen_dev(button, "click", /*click_handler_1*/ ctx[7], false, false, false),
    					listen_dev(div1, "click", /*click_handler_2*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*src*/ 8 && raw_value !== (raw_value = /*src*/ ctx[3].replace(/width=\"([^"]*)\"/, 'width="100%"').replace(/height=\"([^"]*)\"/, '') + "")) div0.innerHTML = raw_value;			if (dirty & /*$_*/ 16 && t1_value !== (t1_value = /*$_*/ ctx[4]('dialogs.graph.open') + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(25:0) {#if loaded}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*loaded*/ ctx[1]) return create_if_block$4;
    		if (/*waiting*/ ctx[2]) return create_if_block_1$4;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) {
    				if_block.d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(4, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Img', slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;
    	let loaded = false;
    	let waiting = false;
    	let src;

    	const unsubscribe = params.subscribe(async values => {
    		$$invalidate(1, loaded = false);
    		$$invalidate(2, waiting = true);
    		await tick();

    		setTimeout(
    			async () => {
    				$$invalidate(3, src = await Promise.resolve(values[0]()));
    				$$invalidate(1, loaded = true);
    			},
    			100
    		);
    	});

    	onDestroy(unsubscribe);
    	const writable_props = ['params', 'callback'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<Img> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => console.log("clickOnImg");

    	const click_handler_1 = () => {
    		const blob = new window.Blob([src], { type: "image/svg+xml" });

    		// create an URI pointing to that blob
    		const url = URL.createObjectURL(blob);

    		const win = window.open(url);

    		// so the Garbage Collector can collect the blob
    		win.onload = () => URL.revokeObjectURL(url);
    	};

    	const click_handler_2 = async () => {
    		$$invalidate(3, src = '');
    		await tick();
    		callback(false);
    	};

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(5, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: X,
    		onDestroy,
    		tick,
    		params,
    		callback,
    		loaded,
    		waiting,
    		src,
    		unsubscribe,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(5, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    		if ('loaded' in $$props) $$invalidate(1, loaded = $$props.loaded);
    		if ('waiting' in $$props) $$invalidate(2, waiting = $$props.waiting);
    		if ('src' in $$props) $$invalidate(3, src = $$props.src);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		callback,
    		loaded,
    		waiting,
    		src,
    		$_,
    		params,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Img extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { params: 5, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Img",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[5] === undefined && !('params' in props)) {
    			console_1$2.warn("<Img> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !('callback' in props)) {
    			console_1$2.warn("<Img> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Img>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Img>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Img>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Img>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/Shuffle.svelte generated by Svelte v3.44.3 */

    const { Object: Object_1$2 } = globals;
    const file$a = "src/components/dialogs/Shuffle.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    // (68:8) {#each groups as group}
    function create_each_block_1$1(ctx) {
    	let option;
    	let t_value = /*group*/ ctx[20] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*group*/ ctx[20];
    			option.value = option.__value;
    			add_location(option, file$a, 68, 10, 1909);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*groups*/ 16 && t_value !== (t_value = /*group*/ ctx[20] + "")) set_data_dev(t, t_value);

    			if (dirty & /*groups*/ 16 && option_value_value !== (option_value_value = /*group*/ ctx[20])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(68:8) {#each groups as group}",
    		ctx
    	});

    	return block;
    }

    // (76:4) {#each ["final", "fixed", "death"] as flag}
    function create_each_block$4(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*flag*/ ctx[17]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			attr_dev(img, "alt", /*flag*/ ctx[17]);
    			if (!src_url_equal(img.src, img_src_value = `./static/img/flags/${/*flag*/ ctx[17]}.png`)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "svelte-1ergg8");
    			add_location(img, file$a, 80, 8, 2233);
    			attr_dev(div, "class", "svelte-1ergg8");
    			toggle_class(div, "selected", /*flags*/ ctx[3][/*flag*/ ctx[17]]);
    			add_location(div, file$a, 76, 6, 2121);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*flags*/ 8) {
    				toggle_class(div, "selected", /*flags*/ ctx[3][/*flag*/ ctx[17]]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(76:4) {#each [\\\"final\\\", \\\"fixed\\\", \\\"death\\\"] as flag}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div2;
    	let h3;
    	let t0_value = /*$_*/ ctx[5]("dialogs.shuffle.title") + "";
    	let t0;
    	let t1;
    	let p;
    	let t2_value = /*$_*/ ctx[5]("dialogs.shuffle.hint") + "";
    	let t2;
    	let t3;
    	let h40;
    	let t4_value = /*$_*/ ctx[5]("dialogs.shuffle.group") + "";
    	let t4;
    	let t5;
    	let t6;
    	let div0;
    	let input;
    	let t7;
    	let span;
    	let select;
    	let option;
    	let t8_value = /*$_*/ ctx[5]('sidemenu.allgroup') + "";
    	let t8;
    	let t9;
    	let h41;
    	let t10_value = /*$_*/ ctx[5]("dialogs.shuffle.flags") + "";
    	let t10;
    	let t11;
    	let t12;
    	let div1;
    	let t13;
    	let button0;
    	let t14_value = /*$_*/ ctx[5]("dialogs.ok") + "";
    	let t14;
    	let t15;
    	let button1;
    	let t16_value = /*$_*/ ctx[5]('dialogs.shuffle.savecopy') + "";
    	let t16;
    	let t17;
    	let button2;
    	let t18_value = /*$_*/ ctx[5]("dialogs.cancel") + "";
    	let t18;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*groups*/ ctx[4];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let each_value = ["final", "fixed", "death"];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < 3; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			p = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			h40 = element("h4");
    			t4 = text(t4_value);
    			t5 = text(":");
    			t6 = space();
    			div0 = element("div");
    			input = element("input");
    			t7 = space();
    			span = element("span");
    			select = element("select");
    			option = element("option");
    			t8 = text(t8_value);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t9 = space();
    			h41 = element("h4");
    			t10 = text(t10_value);
    			t11 = text(":");
    			t12 = space();
    			div1 = element("div");

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].c();
    			}

    			t13 = space();
    			button0 = element("button");
    			t14 = text(t14_value);
    			t15 = space();
    			button1 = element("button");
    			t16 = text(t16_value);
    			t17 = space();
    			button2 = element("button");
    			t18 = text(t18_value);
    			add_location(h3, file$a, 59, 2, 1499);
    			add_location(p, file$a, 60, 2, 1540);
    			attr_dev(h40, "class", "svelte-1ergg8");
    			add_location(h40, file$a, 61, 2, 1580);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "class", "svelte-1ergg8");
    			add_location(input, file$a, 63, 4, 1646);
    			option.__value = "allgroupidtag";
    			option.value = option.__value;
    			add_location(option, file$a, 66, 8, 1802);
    			if (/*selectedGroup*/ ctx[1] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[10].call(select));
    			add_location(select, file$a, 65, 6, 1758);
    			attr_dev(span, "class", "select-dropdown svelte-1ergg8");
    			set_style(span, "margin-left", "5px");
    			add_location(span, file$a, 64, 4, 1697);
    			attr_dev(div0, "class", "input svelte-1ergg8");
    			add_location(div0, file$a, 62, 2, 1622);
    			attr_dev(h41, "class", "svelte-1ergg8");
    			add_location(h41, file$a, 73, 2, 2005);
    			attr_dev(div1, "class", "flags svelte-1ergg8");
    			add_location(div1, file$a, 74, 2, 2047);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$a, 84, 2, 2327);
    			attr_dev(button1, "class", "cancel");
    			add_location(button1, file$a, 90, 2, 2414);
    			attr_dev(button2, "class", "cancel");
    			add_location(button2, file$a, 92, 2, 2531);
    			attr_dev(div2, "class", "dialog svelte-1ergg8");
    			add_location(div2, file$a, 58, 0, 1476);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h3);
    			append_dev(h3, t0);
    			append_dev(div2, t1);
    			append_dev(div2, p);
    			append_dev(p, t2);
    			append_dev(div2, t3);
    			append_dev(div2, h40);
    			append_dev(h40, t4);
    			append_dev(h40, t5);
    			append_dev(div2, t6);
    			append_dev(div2, div0);
    			append_dev(div0, input);
    			set_input_value(input, /*groupFilter*/ ctx[2]);
    			append_dev(div0, t7);
    			append_dev(div0, span);
    			append_dev(span, select);
    			append_dev(select, option);
    			append_dev(option, t8);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select, null);
    			}

    			select_option(select, /*selectedGroup*/ ctx[1]);
    			append_dev(div2, t9);
    			append_dev(div2, h41);
    			append_dev(h41, t10);
    			append_dev(h41, t11);
    			append_dev(div2, t12);
    			append_dev(div2, div1);

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div2, t13);
    			append_dev(div2, button0);
    			append_dev(button0, t14);
    			append_dev(div2, t15);
    			append_dev(div2, button1);
    			append_dev(button1, t16);
    			append_dev(div2, t17);
    			append_dev(div2, button2);
    			append_dev(button2, t18);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[9]),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[10]),
    					listen_dev(button0, "click", /*shuffle*/ ctx[6], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[12], false, false, false),
    					listen_dev(button2, "click", /*click_handler_2*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 32 && t0_value !== (t0_value = /*$_*/ ctx[5]("dialogs.shuffle.title") + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$_*/ 32 && t2_value !== (t2_value = /*$_*/ ctx[5]("dialogs.shuffle.hint") + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*$_*/ 32 && t4_value !== (t4_value = /*$_*/ ctx[5]("dialogs.shuffle.group") + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*groupFilter*/ 4 && input.value !== /*groupFilter*/ ctx[2]) {
    				set_input_value(input, /*groupFilter*/ ctx[2]);
    			}

    			if (dirty & /*$_*/ 32 && t8_value !== (t8_value = /*$_*/ ctx[5]('sidemenu.allgroup') + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*groups*/ 16) {
    				each_value_1 = /*groups*/ ctx[4];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*selectedGroup, groups*/ 18) {
    				select_option(select, /*selectedGroup*/ ctx[1]);
    			}

    			if (dirty & /*$_*/ 32 && t10_value !== (t10_value = /*$_*/ ctx[5]("dialogs.shuffle.flags") + "")) set_data_dev(t10, t10_value);

    			if (dirty & /*flags*/ 8) {
    				each_value = ["final", "fixed", "death"];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < 3; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < 3; i += 1) {
    					each_blocks[i].d(1);
    				}
    			}

    			if (dirty & /*$_*/ 32 && t14_value !== (t14_value = /*$_*/ ctx[5]("dialogs.ok") + "")) set_data_dev(t14, t14_value);
    			if (dirty & /*$_*/ 32 && t16_value !== (t16_value = /*$_*/ ctx[5]('dialogs.shuffle.savecopy') + "")) set_data_dev(t16, t16_value);
    			if (dirty & /*$_*/ 32 && t18_value !== (t18_value = /*$_*/ ctx[5]("dialogs.cancel") + "")) set_data_dev(t18, t18_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let groups;
    	let $bookIndex;
    	let $isApp;
    	let $isFirebase;
    	let $newBook;
    	let $_;
    	validate_store(bookIndex, 'bookIndex');
    	component_subscribe($$self, bookIndex, $$value => $$invalidate(8, $bookIndex = $$value));
    	validate_store(isApp, 'isApp');
    	component_subscribe($$self, isApp, $$value => $$invalidate(14, $isApp = $$value));
    	validate_store(isFirebase, 'isFirebase');
    	component_subscribe($$self, isFirebase, $$value => $$invalidate(15, $isFirebase = $$value));
    	validate_store(newBook, 'newBook');
    	component_subscribe($$self, newBook, $$value => $$invalidate(16, $newBook = $$value));
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(5, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Shuffle', slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;

    	// Entity input bindings
    	let groupFilter = "";

    	let flags = { final: false, fixed: false, death: false };
    	let selectedGroup = 'allgroupidtag';

    	const shuffle = () => {
    		const selectedFlags = Object.keys(flags).filter(key => flags[key]);
    		const filter = groupFilter.split(',').map(s => s.trim()).filter(s => s);
    		newBook.flush();
    		const shuffled = shuffleBook($newBook, { selectedFlags, filter });

    		if ($isFirebase || $isApp) {
    			getEditor().setValue(shuffled, -1);
    			callback(false);
    			return;
    		}

    		session.open({
    			data: {
    				book: shuffled,
    				cursor: { row: 0, column: 0 },
    				title: $bookIndex.properties.title
    			}
    		});
    	};

    	const writable_props = ['params', 'callback'];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Shuffle> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		groupFilter = this.value;
    		($$invalidate(2, groupFilter), $$invalidate(1, selectedGroup));
    	}

    	function select_change_handler() {
    		selectedGroup = select_value(this);
    		($$invalidate(1, selectedGroup), $$invalidate(2, groupFilter));
    		($$invalidate(4, groups), $$invalidate(8, $bookIndex));
    	}

    	const click_handler = flag => $$invalidate(3, flags[flag] = !flags[flag], flags);
    	const click_handler_1 = () => download('md', newBook.flush());
    	const click_handler_2 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(7, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: X,
    		tick,
    		newBook,
    		bookIndex,
    		shuffleBook,
    		session,
    		download,
    		isFirebase,
    		isApp,
    		getEditor,
    		params,
    		callback,
    		groupFilter,
    		flags,
    		selectedGroup,
    		shuffle,
    		groups,
    		$bookIndex,
    		$isApp,
    		$isFirebase,
    		$newBook,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(7, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    		if ('groupFilter' in $$props) $$invalidate(2, groupFilter = $$props.groupFilter);
    		if ('flags' in $$props) $$invalidate(3, flags = $$props.flags);
    		if ('selectedGroup' in $$props) $$invalidate(1, selectedGroup = $$props.selectedGroup);
    		if ('groups' in $$props) $$invalidate(4, groups = $$props.groups);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$bookIndex*/ 256) {
    			$$invalidate(4, groups = [...$bookIndex.groups]);
    		}

    		if ($$self.$$.dirty & /*selectedGroup, groupFilter*/ 6) {
    			{
    				if (selectedGroup != 'allgroupidtag') {
    					$$invalidate(2, groupFilter += selectedGroup + ', ');

    					tick().then(() => {
    						$$invalidate(1, selectedGroup = 'allgroupidtag');
    					});
    				}
    			}
    		}
    	};

    	return [
    		callback,
    		selectedGroup,
    		groupFilter,
    		flags,
    		groups,
    		$_,
    		shuffle,
    		params,
    		$bookIndex,
    		input_input_handler,
    		select_change_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Shuffle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { params: 7, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Shuffle",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[7] === undefined && !('params' in props)) {
    			console.warn("<Shuffle> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !('callback' in props)) {
    			console.warn("<Shuffle> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Shuffle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Shuffle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Shuffle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Shuffle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/NewBook.svelte generated by Svelte v3.44.3 */
    const file$9 = "src/components/dialogs/NewBook.svelte";

    function create_fragment$9(ctx) {
    	let div;
    	let h3;
    	let t0_value = /*$_*/ ctx[1]('dialogs.newbook.new') + "";
    	let t0;
    	let t1;
    	let p;
    	let raw_value = /*$_*/ ctx[1]('dialogs.newbook.hint') + "";
    	let t2;
    	let button0;
    	let t3_value = /*$_*/ ctx[1]('dialogs.ok') + "";
    	let t3;
    	let t4;
    	let button1;
    	let t5_value = /*$_*/ ctx[1]('dialogs.cancel') + "";
    	let t5;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			p = element("p");
    			t2 = space();
    			button0 = element("button");
    			t3 = text(t3_value);
    			t4 = space();
    			button1 = element("button");
    			t5 = text(t5_value);
    			add_location(h3, file$9, 17, 2, 327);
    			set_style(p, "margin", "1rem 0");
    			add_location(p, file$9, 18, 2, 366);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$9, 19, 2, 433);
    			attr_dev(button1, "class", "cancel");
    			add_location(button1, file$9, 24, 2, 525);
    			attr_dev(div, "class", "dialog");
    			add_location(div, file$9, 16, 0, 304);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			append_dev(div, p);
    			p.innerHTML = raw_value;
    			append_dev(div, t2);
    			append_dev(div, button0);
    			append_dev(button0, t3);
    			append_dev(div, t4);
    			append_dev(div, button1);
    			append_dev(button1, t5);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[4], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 2 && t0_value !== (t0_value = /*$_*/ ctx[1]('dialogs.newbook.new') + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$_*/ 2 && raw_value !== (raw_value = /*$_*/ ctx[1]('dialogs.newbook.hint') + "")) p.innerHTML = raw_value;			if (dirty & /*$_*/ 2 && t3_value !== (t3_value = /*$_*/ ctx[1]('dialogs.ok') + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*$_*/ 2 && t5_value !== (t5_value = /*$_*/ ctx[1]('dialogs.cancel') + "")) set_data_dev(t5, t5_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NewBook', slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;

    	const newBook = () => session.open({
    		data: {
    			book: $_('books.local'),
    			cursor: { row: 0, column: 0 }
    		}
    	});

    	const writable_props = ['params', 'callback'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NewBook> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => newBook();
    	const click_handler_1 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(3, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: X,
    		session,
    		params,
    		callback,
    		newBook,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(3, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [callback, $_, newBook, params, click_handler, click_handler_1];
    }

    class NewBook extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { params: 3, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NewBook",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[3] === undefined && !('params' in props)) {
    			console.warn("<NewBook> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !('callback' in props)) {
    			console.warn("<NewBook> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<NewBook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<NewBook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<NewBook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<NewBook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/NewFirebook.svelte generated by Svelte v3.44.3 */
    const file$8 = "src/components/dialogs/NewFirebook.svelte";

    function create_fragment$8(ctx) {
    	let div3;
    	let form;
    	let h3;
    	let t0_value = /*$_*/ ctx[4]('dialogs.newfirebook.new') + "";
    	let t0;
    	let t1;
    	let div0;
    	let span0;
    	let t3;
    	let input0;
    	let t4;
    	let div1;
    	let span1;
    	let t6;
    	let input1;
    	let t7;
    	let div2;
    	let span2;
    	let t8_value = /*$_*/ ctx[4]('dialogs.newfirebook.book') + "";
    	let t8;
    	let t9;
    	let t10;
    	let input2;
    	let t11;
    	let p;
    	let raw_value = /*$_*/ ctx[4]('dialogs.newfirebook.getStarted') + "";
    	let t12;
    	let input3;
    	let input3_value_value;
    	let t13;
    	let button;
    	let t14_value = /*$_*/ ctx[4]('dialogs.cancel') + "";
    	let t14;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			form = element("form");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "apiKey:";
    			t3 = space();
    			input0 = element("input");
    			t4 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "databaseURL:";
    			t6 = space();
    			input1 = element("input");
    			t7 = space();
    			div2 = element("div");
    			span2 = element("span");
    			t8 = text(t8_value);
    			t9 = text(":");
    			t10 = space();
    			input2 = element("input");
    			t11 = space();
    			p = element("p");
    			t12 = space();
    			input3 = element("input");
    			t13 = space();
    			button = element("button");
    			t14 = text(t14_value);
    			add_location(h3, file$8, 27, 2, 651);
    			attr_dev(span0, "class", "svelte-1c6ktlb");
    			add_location(span0, file$8, 29, 4, 718);
    			attr_dev(input0, "name", "password");
    			attr_dev(input0, "type", "password");
    			attr_dev(input0, "class", "svelte-1c6ktlb");
    			add_location(input0, file$8, 30, 4, 743);
    			attr_dev(div0, "class", "input svelte-1c6ktlb");
    			add_location(div0, file$8, 28, 2, 694);
    			attr_dev(span1, "class", "svelte-1c6ktlb");
    			add_location(span1, file$8, 33, 4, 840);
    			attr_dev(input1, "name", "user");
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "class", "svelte-1c6ktlb");
    			add_location(input1, file$8, 34, 4, 870);
    			attr_dev(div1, "class", "input svelte-1c6ktlb");
    			add_location(div1, file$8, 32, 2, 816);
    			attr_dev(span2, "class", "svelte-1c6ktlb");
    			add_location(span2, file$8, 37, 4, 964);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "class", "svelte-1c6ktlb");
    			add_location(input2, file$8, 38, 4, 1015);
    			attr_dev(div2, "class", "input svelte-1c6ktlb");
    			add_location(div2, file$8, 36, 2, 940);
    			attr_dev(p, "class", "getstarted");
    			set_style(p, "margin", "1rem 0");
    			add_location(p, file$8, 40, 2, 1066);
    			attr_dev(input3, "type", "submit");
    			attr_dev(input3, "class", "ok");
    			input3.value = input3_value_value = /*$_*/ ctx[4]('dialogs.ok');
    			add_location(input3, file$8, 42, 2, 1163);
    			attr_dev(button, "class", "cancel");
    			add_location(button, file$8, 46, 2, 1262);
    			attr_dev(form, "method", "post");
    			attr_dev(form, "action", "/signin");
    			add_location(form, file$8, 26, 2, 586);
    			attr_dev(div3, "class", "dialog svelte-1c6ktlb");
    			add_location(div3, file$8, 25, 0, 563);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, form);
    			append_dev(form, h3);
    			append_dev(h3, t0);
    			append_dev(form, t1);
    			append_dev(form, div0);
    			append_dev(div0, span0);
    			append_dev(div0, t3);
    			append_dev(div0, input0);
    			set_input_value(input0, /*apiKey*/ ctx[1]);
    			append_dev(form, t4);
    			append_dev(form, div1);
    			append_dev(div1, span1);
    			append_dev(div1, t6);
    			append_dev(div1, input1);
    			set_input_value(input1, /*databaseURL*/ ctx[2]);
    			append_dev(form, t7);
    			append_dev(form, div2);
    			append_dev(div2, span2);
    			append_dev(span2, t8);
    			append_dev(span2, t9);
    			append_dev(div2, t10);
    			append_dev(div2, input2);
    			set_input_value(input2, /*book*/ ctx[3]);
    			append_dev(form, t11);
    			append_dev(form, p);
    			p.innerHTML = raw_value;
    			append_dev(form, t12);
    			append_dev(form, input3);
    			append_dev(form, t13);
    			append_dev(form, button);
    			append_dev(button, t14);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[8]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[10]),
    					listen_dev(input3, "click", /*click_handler*/ ctx[11], false, false, false),
    					listen_dev(button, "click", /*click_handler_1*/ ctx[12], false, false, false),
    					listen_dev(form, "submit", prevent_default(/*submit_handler*/ ctx[7]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 16 && t0_value !== (t0_value = /*$_*/ ctx[4]('dialogs.newfirebook.new') + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*apiKey*/ 2 && input0.value !== /*apiKey*/ ctx[1]) {
    				set_input_value(input0, /*apiKey*/ ctx[1]);
    			}

    			if (dirty & /*databaseURL*/ 4 && input1.value !== /*databaseURL*/ ctx[2]) {
    				set_input_value(input1, /*databaseURL*/ ctx[2]);
    			}

    			if (dirty & /*$_*/ 16 && t8_value !== (t8_value = /*$_*/ ctx[4]('dialogs.newfirebook.book') + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*book*/ 8 && input2.value !== /*book*/ ctx[3]) {
    				set_input_value(input2, /*book*/ ctx[3]);
    			}

    			if (dirty & /*$_*/ 16 && raw_value !== (raw_value = /*$_*/ ctx[4]('dialogs.newfirebook.getStarted') + "")) p.innerHTML = raw_value;
    			if (dirty & /*$_*/ 16 && input3_value_value !== (input3_value_value = /*$_*/ ctx[4]('dialogs.ok'))) {
    				prop_dev(input3, "value", input3_value_value);
    			}

    			if (dirty & /*$_*/ 16 && t14_value !== (t14_value = /*$_*/ ctx[4]('dialogs.cancel') + "")) set_data_dev(t14, t14_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(4, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NewFirebook', slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;

    	// Entity input bindings
    	let apiKey, databaseURL, book;

    	const newBook = () => {
    		const config = encodeURIComponent(btoa(JSON.stringify({
    			apiKey: apiKey.replaceAll('",', '').replaceAll('"', '').replaceAll('apiKey:', '').trim(),
    			databaseURL: databaseURL.replaceAll('",', '').replaceAll('"', '').replaceAll('databaseURL:', '').trim(),
    			book
    		})));

    		location.assign(`#fsession=${config}`);
    		location.reload();
    	};

    	const writable_props = ['params', 'callback'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NewFirebook> was created with unknown prop '${key}'`);
    	});

    	function submit_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input0_input_handler() {
    		apiKey = this.value;
    		$$invalidate(1, apiKey);
    	}

    	function input1_input_handler() {
    		databaseURL = this.value;
    		$$invalidate(2, databaseURL);
    	}

    	function input2_input_handler() {
    		book = this.value;
    		$$invalidate(3, book);
    	}

    	const click_handler = () => newBook();
    	const click_handler_1 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(6, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: X,
    		params,
    		callback,
    		apiKey,
    		databaseURL,
    		book,
    		newBook,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(6, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    		if ('apiKey' in $$props) $$invalidate(1, apiKey = $$props.apiKey);
    		if ('databaseURL' in $$props) $$invalidate(2, databaseURL = $$props.databaseURL);
    		if ('book' in $$props) $$invalidate(3, book = $$props.book);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		callback,
    		apiKey,
    		databaseURL,
    		book,
    		$_,
    		newBook,
    		params,
    		submit_handler,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		click_handler,
    		click_handler_1
    	];
    }

    class NewFirebook extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { params: 6, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NewFirebook",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[6] === undefined && !('params' in props)) {
    			console.warn("<NewFirebook> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !('callback' in props)) {
    			console.warn("<NewFirebook> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<NewFirebook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<NewFirebook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<NewFirebook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<NewFirebook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/Recover.svelte generated by Svelte v3.44.3 */
    const file$7 = "src/components/dialogs/Recover.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (1:0) <script>   import { _ }
    function create_catch_block$1(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$1.name,
    		type: "catch",
    		source: "(1:0) <script>   import { _ }",
    		ctx
    	});

    	return block;
    }

    // (16:2) {:then sessions}
    function create_then_block$1(ctx) {
    	let ul;
    	let each_value = /*sessions*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-1yawr3v");
    			add_location(ul, file$7, 16, 2, 284);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*previews*/ 0) {
    				each_value = /*sessions*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$1.name,
    		type: "then",
    		source: "(16:2) {:then sessions}",
    		ctx
    	});

    	return block;
    }

    // (18:4) {#each sessions as session}
    function create_each_block$3(ctx) {
    	let li;
    	let a;
    	let t0_value = /*session*/ ctx[5].name + "";
    	let t0;
    	let t1;
    	let span;
    	let t2_value = /*session*/ ctx[5].time.toLocaleDateString() + "";
    	let t2;
    	let t3;
    	let t4_value = /*session*/ ctx[5].time.toLocaleTimeString() + "";
    	let t4;

    	const block = {
    		c: function create() {
    			li = element("li");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			span = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			t4 = text(t4_value);
    			attr_dev(span, "class", "svelte-1yawr3v");
    			add_location(span, file$7, 19, 8, 388);
    			attr_dev(a, "href", '#msession=' + /*session*/ ctx[5].id);
    			attr_dev(a, "class", "svelte-1yawr3v");
    			add_location(a, file$7, 18, 8, 329);
    			attr_dev(li, "class", "svelte-1yawr3v");
    			add_location(li, file$7, 18, 4, 325);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, a);
    			append_dev(a, t0);
    			append_dev(a, t1);
    			append_dev(a, span);
    			append_dev(span, t2);
    			append_dev(span, t3);
    			append_dev(span, t4);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(18:4) {#each sessions as session}",
    		ctx
    	});

    	return block;
    }

    // (14:21)      Loading...   {:then sessions}
    function create_pending_block$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$1.name,
    		type: "pending",
    		source: "(14:21)      Loading...   {:then sessions}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div;
    	let h3;
    	let t0_value = /*$_*/ ctx[1]('navbar.file.recover') + "";
    	let t0;
    	let t1;
    	let t2;
    	let button;
    	let t3_value = /*$_*/ ctx[1]('dialogs.cancel') + "";
    	let t3;
    	let mounted;
    	let dispose;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block$1,
    		then: create_then_block$1,
    		catch: create_catch_block$1,
    		value: 4
    	};

    	handle_promise(previews(), info);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			info.block.c();
    			t2 = space();
    			button = element("button");
    			t3 = text(t3_value);
    			add_location(h3, file$7, 12, 2, 189);
    			attr_dev(button, "class", "cancel");
    			add_location(button, file$7, 23, 2, 515);
    			attr_dev(div, "class", "dialog");
    			add_location(div, file$7, 11, 0, 166);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			info.block.m(div, info.anchor = null);
    			info.mount = () => div;
    			info.anchor = t2;
    			append_dev(div, t2);
    			append_dev(div, button);
    			append_dev(button, t3);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*$_*/ 2 && t0_value !== (t0_value = /*$_*/ ctx[1]('navbar.file.recover') + "")) set_data_dev(t0, t0_value);
    			update_await_block_branch(info, ctx, dirty);
    			if (dirty & /*$_*/ 2 && t3_value !== (t3_value = /*$_*/ ctx[1]('dialogs.cancel') + "")) set_data_dev(t3, t3_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			info.block.d();
    			info.token = null;
    			info = null;
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(1, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Recover', slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;
    	const writable_props = ['params', 'callback'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Recover> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => callback(false);

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(2, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({ _: X, previews, params, callback, $_ });

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(2, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [callback, $_, params, click_handler];
    }

    class Recover extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { params: 2, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Recover",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[2] === undefined && !('params' in props)) {
    			console.warn("<Recover> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !('callback' in props)) {
    			console.warn("<Recover> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Recover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Recover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Recover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Recover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Navbar.svelte generated by Svelte v3.44.3 */
    const file$6 = "src/components/Navbar.svelte";

    // (45:6) {:else}
    function create_else_block$2(ctx) {
    	let p0;
    	let t0_value = /*$_*/ ctx[0]('navbar.file.new') + "";
    	let t0;
    	let t1;
    	let hr0;
    	let t2;
    	let p1;
    	let t3_value = /*$_*/ ctx[0]('navbar.file.newFire') + "";
    	let t3;
    	let t4;
    	let hr1;
    	let t5;
    	let input;
    	let t6;
    	let label;
    	let t7_value = /*$_*/ ctx[0]("navbar.file.open") + "";
    	let t7;
    	let t8;
    	let p2;
    	let t9_value = /*$_*/ ctx[0]('navbar.file.save') + "";
    	let t9;
    	let t10;
    	let p3;
    	let t11_value = /*$_*/ ctx[0]('navbar.file.recover') + "";
    	let t11;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			hr0 = element("hr");
    			t2 = space();
    			p1 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			hr1 = element("hr");
    			t5 = space();
    			input = element("input");
    			t6 = space();
    			label = element("label");
    			t7 = text(t7_value);
    			t8 = space();
    			p2 = element("p");
    			t9 = text(t9_value);
    			t10 = space();
    			p3 = element("p");
    			t11 = text(t11_value);
    			attr_dev(p0, "class", "svelte-1y4138q");
    			add_location(p0, file$6, 45, 8, 1382);
    			attr_dev(hr0, "class", "svelte-1y4138q");
    			add_location(hr0, file$6, 46, 8, 1454);
    			attr_dev(p1, "class", "svelte-1y4138q");
    			add_location(p1, file$6, 47, 8, 1467);
    			attr_dev(hr1, "class", "svelte-1y4138q");
    			add_location(hr1, file$6, 48, 8, 1547);
    			attr_dev(input, "type", "file");
    			attr_dev(input, "name", "open");
    			attr_dev(input, "id", "open");
    			attr_dev(input, "accept", ".xlgc,.md");
    			attr_dev(input, "class", "svelte-1y4138q");
    			add_location(input, file$6, 49, 8, 1560);
    			attr_dev(label, "for", "open");
    			attr_dev(label, "class", "svelte-1y4138q");
    			add_location(label, file$6, 52, 8, 1684);
    			attr_dev(p2, "class", "svelte-1y4138q");
    			add_location(p2, file$6, 53, 8, 1744);
    			attr_dev(p3, "class", "svelte-1y4138q");
    			add_location(p3, file$6, 54, 8, 1833);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			append_dev(p0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, hr0, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t3);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, hr1, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, input, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, label, anchor);
    			append_dev(label, t7);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, p2, anchor);
    			append_dev(p2, t9);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, p3, anchor);
    			append_dev(p3, t11);

    			if (!mounted) {
    				dispose = [
    					listen_dev(p0, "click", /*click_handler_1*/ ctx[6], false, false, false),
    					listen_dev(p1, "click", /*click_handler_2*/ ctx[7], false, false, false),
    					listen_dev(input, "change", /*change_handler*/ ctx[8], false, false, false),
    					listen_dev(p2, "click", /*click_handler_3*/ ctx[9], false, false, false),
    					listen_dev(p3, "click", /*click_handler_4*/ ctx[10], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$_*/ 1 && t0_value !== (t0_value = /*$_*/ ctx[0]('navbar.file.new') + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$_*/ 1 && t3_value !== (t3_value = /*$_*/ ctx[0]('navbar.file.newFire') + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*$_*/ 1 && t7_value !== (t7_value = /*$_*/ ctx[0]("navbar.file.open") + "")) set_data_dev(t7, t7_value);
    			if (dirty & /*$_*/ 1 && t9_value !== (t9_value = /*$_*/ ctx[0]('navbar.file.save') + "")) set_data_dev(t9, t9_value);
    			if (dirty & /*$_*/ 1 && t11_value !== (t11_value = /*$_*/ ctx[0]('navbar.file.recover') + "")) set_data_dev(t11, t11_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(hr0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(hr1);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(label);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(p3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(45:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (42:6) {#if $isApp}
    function create_if_block_2(ctx) {
    	let p0;
    	let t0_value = /*$_*/ ctx[0]('app.chooseother') + "";
    	let t0;
    	let t1;
    	let p1;
    	let t2_value = /*$_*/ ctx[0]('dialogs.shuffle.savecopy') + "";
    	let t2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			p1 = element("p");
    			t2 = text(t2_value);
    			attr_dev(p0, "class", "svelte-1y4138q");
    			add_location(p0, file$6, 42, 8, 1211);
    			attr_dev(p1, "class", "svelte-1y4138q");
    			add_location(p1, file$6, 43, 8, 1271);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			append_dev(p0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(p0, "click", appReload, false, false, false),
    					listen_dev(p1, "click", /*click_handler*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$_*/ 1 && t0_value !== (t0_value = /*$_*/ ctx[0]('app.chooseother') + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$_*/ 1 && t2_value !== (t2_value = /*$_*/ ctx[0]('dialogs.shuffle.savecopy') + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(42:6) {#if $isApp}",
    		ctx
    	});

    	return block;
    }

    // (59:2) {#if $isLoaded}
    function create_if_block_1$3(ctx) {
    	let div1;
    	let h10;
    	let t0_value = /*$_*/ ctx[0]('navbar.book.title') + "";
    	let t0;
    	let t1;
    	let div0;
    	let p0;
    	let t2_value = /*$_*/ ctx[0]('navbar.book.graph') + "";
    	let t2;
    	let t3;
    	let p1;
    	let t4_value = /*$_*/ ctx[0]('navbar.book.shuffle') + "";
    	let t4;
    	let t5;
    	let p2;
    	let t6_value = /*$_*/ ctx[0]('navbar.book.sort') + "";
    	let t6;
    	let t7;
    	let p3;
    	let t8_value = /*$_*/ ctx[0]('navbar.book.compact') + "";
    	let t8;
    	let t9;
    	let div3;
    	let h11;
    	let t10_value = /*$_*/ ctx[0]('navbar.export.title') + "";
    	let t10;
    	let t11;
    	let div2;
    	let p4;
    	let t12_value = /*$_*/ ctx[0]('navbar.export.docx') + "";
    	let t12;
    	let t13;
    	let p5;
    	let t14_value = /*$_*/ ctx[0]('navbar.export.fodt') + "";
    	let t14;
    	let t15;
    	let p6;
    	let t16_value = /*$_*/ ctx[0]('navbar.export.xlgc') + "";
    	let t16;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h10 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			p0 = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			p1 = element("p");
    			t4 = text(t4_value);
    			t5 = space();
    			p2 = element("p");
    			t6 = text(t6_value);
    			t7 = space();
    			p3 = element("p");
    			t8 = text(t8_value);
    			t9 = space();
    			div3 = element("div");
    			h11 = element("h1");
    			t10 = text(t10_value);
    			t11 = space();
    			div2 = element("div");
    			p4 = element("p");
    			t12 = text(t12_value);
    			t13 = space();
    			p5 = element("p");
    			t14 = text(t14_value);
    			t15 = space();
    			p6 = element("p");
    			t16 = text(t16_value);
    			attr_dev(h10, "class", "svelte-1y4138q");
    			add_location(h10, file$6, 60, 4, 1963);
    			attr_dev(p0, "class", "svelte-1y4138q");
    			add_location(p0, file$6, 62, 6, 2030);
    			attr_dev(p1, "class", "svelte-1y4138q");
    			add_location(p1, file$6, 63, 6, 2133);
    			attr_dev(p2, "class", "svelte-1y4138q");
    			add_location(p2, file$6, 64, 6, 2207);
    			attr_dev(p3, "class", "svelte-1y4138q");
    			add_location(p3, file$6, 67, 6, 2416);
    			attr_dev(div0, "class", "content svelte-1y4138q");
    			add_location(div0, file$6, 61, 4, 2002);
    			attr_dev(div1, "class", "svelte-1y4138q");
    			add_location(div1, file$6, 59, 2, 1953);
    			attr_dev(h11, "class", "svelte-1y4138q");
    			add_location(h11, file$6, 74, 4, 2663);
    			attr_dev(p4, "class", "svelte-1y4138q");
    			add_location(p4, file$6, 76, 6, 2732);
    			attr_dev(p5, "class", "svelte-1y4138q");
    			add_location(p5, file$6, 77, 6, 2823);
    			attr_dev(p6, "class", "svelte-1y4138q");
    			add_location(p6, file$6, 78, 6, 2914);
    			attr_dev(div2, "class", "content svelte-1y4138q");
    			add_location(div2, file$6, 75, 4, 2704);
    			attr_dev(div3, "class", "svelte-1y4138q");
    			add_location(div3, file$6, 73, 2, 2653);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h10);
    			append_dev(h10, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, p0);
    			append_dev(p0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, p1);
    			append_dev(p1, t4);
    			append_dev(div0, t5);
    			append_dev(div0, p2);
    			append_dev(p2, t6);
    			append_dev(div0, t7);
    			append_dev(div0, p3);
    			append_dev(p3, t8);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, h11);
    			append_dev(h11, t10);
    			append_dev(div3, t11);
    			append_dev(div3, div2);
    			append_dev(div2, p4);
    			append_dev(p4, t12);
    			append_dev(div2, t13);
    			append_dev(div2, p5);
    			append_dev(p5, t14);
    			append_dev(div2, t15);
    			append_dev(div2, p6);
    			append_dev(p6, t16);

    			if (!mounted) {
    				dispose = [
    					listen_dev(p0, "click", /*click_handler_5*/ ctx[11], false, false, false),
    					listen_dev(p1, "click", /*click_handler_6*/ ctx[12], false, false, false),
    					listen_dev(p2, "click", /*click_handler_7*/ ctx[13], false, false, false),
    					listen_dev(p3, "click", /*click_handler_8*/ ctx[14], false, false, false),
    					listen_dev(p4, "click", /*click_handler_9*/ ctx[15], false, false, false),
    					listen_dev(p5, "click", /*click_handler_10*/ ctx[16], false, false, false),
    					listen_dev(p6, "click", /*click_handler_11*/ ctx[17], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$_*/ 1 && t0_value !== (t0_value = /*$_*/ ctx[0]('navbar.book.title') + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$_*/ 1 && t2_value !== (t2_value = /*$_*/ ctx[0]('navbar.book.graph') + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*$_*/ 1 && t4_value !== (t4_value = /*$_*/ ctx[0]('navbar.book.shuffle') + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*$_*/ 1 && t6_value !== (t6_value = /*$_*/ ctx[0]('navbar.book.sort') + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*$_*/ 1 && t8_value !== (t8_value = /*$_*/ ctx[0]('navbar.book.compact') + "")) set_data_dev(t8, t8_value);
    			if (dirty & /*$_*/ 1 && t10_value !== (t10_value = /*$_*/ ctx[0]('navbar.export.title') + "")) set_data_dev(t10, t10_value);
    			if (dirty & /*$_*/ 1 && t12_value !== (t12_value = /*$_*/ ctx[0]('navbar.export.docx') + "")) set_data_dev(t12, t12_value);
    			if (dirty & /*$_*/ 1 && t14_value !== (t14_value = /*$_*/ ctx[0]('navbar.export.fodt') + "")) set_data_dev(t14, t14_value);
    			if (dirty & /*$_*/ 1 && t16_value !== (t16_value = /*$_*/ ctx[0]('navbar.export.xlgc') + "")) set_data_dev(t16, t16_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(59:2) {#if $isLoaded}",
    		ctx
    	});

    	return block;
    }

    // (99:2) {#if $isLoaded}
    function create_if_block$3(ctx) {
    	let div;
    	let span;
    	let span_aria_label_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			attr_dev(span, "aria-label", span_aria_label_value = /*$_*/ ctx[0]('sidemenu.toggle'));
    			attr_dev(span, "class", "dropbtn icon-menu svelte-1y4138q");
    			add_location(span, file$6, 100, 4, 3594);
    			attr_dev(div, "class", "sidemenu-button svelte-1y4138q");
    			add_location(div, file$6, 99, 2, 3560);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*click_handler_13*/ ctx[19], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$_*/ 1 && span_aria_label_value !== (span_aria_label_value = /*$_*/ ctx[0]('sidemenu.toggle'))) {
    				attr_dev(span, "aria-label", span_aria_label_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(99:2) {#if $isLoaded}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let nav;
    	let div1;
    	let h10;
    	let t0_value = /*$_*/ ctx[0]('navbar.file.title') + "";
    	let t0;
    	let t1;
    	let div0;
    	let t2;
    	let t3;
    	let div3;
    	let h11;
    	let t4_value = /*$_*/ ctx[0]('navbar.help.title') + "";
    	let t4;
    	let t5;
    	let div2;
    	let a0;
    	let t6_value = /*$_*/ ctx[0]('navbar.help.guide') + "";
    	let t6;
    	let a0_href_value;
    	let t7;
    	let a1;
    	let t8_value = /*$_*/ ctx[0]('navbar.help.forum') + "";
    	let t8;
    	let t9;
    	let p;
    	let t10_value = /*$_*/ ctx[0]('navbar.help.about') + "";
    	let t10;
    	let t11;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*$isApp*/ ctx[1]) return create_if_block_2;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*$isLoaded*/ ctx[2] && create_if_block_1$3(ctx);
    	let if_block2 = /*$isLoaded*/ ctx[2] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div1 = element("div");
    			h10 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			div3 = element("div");
    			h11 = element("h1");
    			t4 = text(t4_value);
    			t5 = space();
    			div2 = element("div");
    			a0 = element("a");
    			t6 = text(t6_value);
    			t7 = space();
    			a1 = element("a");
    			t8 = text(t8_value);
    			t9 = space();
    			p = element("p");
    			t10 = text(t10_value);
    			t11 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(h10, "class", "svelte-1y4138q");
    			add_location(h10, file$6, 39, 4, 1123);
    			attr_dev(div0, "class", "content svelte-1y4138q");
    			add_location(div0, file$6, 40, 4, 1162);
    			attr_dev(div1, "class", "svelte-1y4138q");
    			add_location(div1, file$6, 38, 2, 1113);
    			attr_dev(h11, "class", "svelte-1y4138q");
    			add_location(h11, file$6, 86, 4, 3106);
    			attr_dev(a0, "href", a0_href_value = /*$_*/ ctx[0]('navbar.help.guidefile'));
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "rel", "noopener");
    			attr_dev(a0, "class", "svelte-1y4138q");
    			add_location(a0, file$6, 88, 6, 3173);
    			attr_dev(a1, "href", "https://www.librogame.net/index.php/forum/topic?id=5182&p=1#p148583");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "rel", "noopener");
    			attr_dev(a1, "class", "svelte-1y4138q");
    			add_location(a1, file$6, 91, 6, 3294);
    			attr_dev(p, "class", "svelte-1y4138q");
    			add_location(p, file$6, 94, 6, 3455);
    			attr_dev(div2, "class", "content svelte-1y4138q");
    			add_location(div2, file$6, 87, 4, 3145);
    			attr_dev(div3, "class", "svelte-1y4138q");
    			add_location(div3, file$6, 85, 2, 3096);
    			attr_dev(nav, "class", "svelte-1y4138q");
    			add_location(nav, file$6, 37, 0, 1105);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div1);
    			append_dev(div1, h10);
    			append_dev(h10, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			if_block0.m(div0, null);
    			append_dev(nav, t2);
    			if (if_block1) if_block1.m(nav, null);
    			append_dev(nav, t3);
    			append_dev(nav, div3);
    			append_dev(div3, h11);
    			append_dev(h11, t4);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			append_dev(div2, a0);
    			append_dev(a0, t6);
    			append_dev(div2, t7);
    			append_dev(div2, a1);
    			append_dev(a1, t8);
    			append_dev(div2, t9);
    			append_dev(div2, p);
    			append_dev(p, t10);
    			append_dev(nav, t11);
    			if (if_block2) if_block2.m(nav, null);

    			if (!mounted) {
    				dispose = listen_dev(p, "click", /*click_handler_12*/ ctx[18], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 1 && t0_value !== (t0_value = /*$_*/ ctx[0]('navbar.file.title') + "")) set_data_dev(t0, t0_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			}

    			if (/*$isLoaded*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$3(ctx);
    					if_block1.c();
    					if_block1.m(nav, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*$_*/ 1 && t4_value !== (t4_value = /*$_*/ ctx[0]('navbar.help.title') + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*$_*/ 1 && t6_value !== (t6_value = /*$_*/ ctx[0]('navbar.help.guide') + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*$_*/ 1 && a0_href_value !== (a0_href_value = /*$_*/ ctx[0]('navbar.help.guidefile'))) {
    				attr_dev(a0, "href", a0_href_value);
    			}

    			if (dirty & /*$_*/ 1 && t8_value !== (t8_value = /*$_*/ ctx[0]('navbar.help.forum') + "")) set_data_dev(t8, t8_value);
    			if (dirty & /*$_*/ 1 && t10_value !== (t10_value = /*$_*/ ctx[0]('navbar.help.about') + "")) set_data_dev(t10, t10_value);

    			if (/*$isLoaded*/ ctx[2]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$3(ctx);
    					if_block2.c();
    					if_block2.m(nav, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let $_;
    	let $isApp;
    	let $isLoaded;
    	let $newBook;
    	let $showSidemenu;
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $_ = $$value));
    	validate_store(isApp, 'isApp');
    	component_subscribe($$self, isApp, $$value => $$invalidate(1, $isApp = $$value));
    	validate_store(isLoaded, 'isLoaded');
    	component_subscribe($$self, isLoaded, $$value => $$invalidate(2, $isLoaded = $$value));
    	validate_store(newBook, 'newBook');
    	component_subscribe($$self, newBook, $$value => $$invalidate(3, $newBook = $$value));
    	validate_store(showSidemenu, 'showSidemenu');
    	component_subscribe($$self, showSidemenu, $$value => $$invalidate(4, $showSidemenu = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Navbar', slots, []);

    	ctrlShortcuts({
    		'N': () => newClick(),
    		'S': () => download('md', newBook.flush()),
    		'O': () => document.getElementById('open').click()
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Navbar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => download('md', newBook.flush());
    	const click_handler_1 = () => dialog(NewBook);
    	const click_handler_2 = () => dialog(NewFirebook);
    	const change_handler = e => open$1(e.target);
    	const click_handler_3 = () => download('md', newBook.flush());
    	const click_handler_4 = () => dialog(Recover);
    	const click_handler_5 = () => dialog(Img, () => graphToImg(newBook.flush()));
    	const click_handler_6 = () => dialog(Shuffle);

    	const click_handler_7 = async () => {
    		if (await dialog(Confirm, $_('dialogs.confirm'), $_('dialogs.chapter.sort'), true)) getEditor().setValue(sortBook($newBook), -1);
    	};

    	const click_handler_8 = async () => {
    		if (await dialog(Confirm, $_('dialogs.confirm'), $_('dialogs.chapter.compact'), true)) getEditor().setValue(compactBook($newBook), -1);
    	};

    	const click_handler_9 = () => download('docx', newBook.flush());
    	const click_handler_10 = () => download('fodt', newBook.flush());
    	const click_handler_11 = () => download('xlgc', newBook.flush());
    	const click_handler_12 = () => dialog(About);
    	const click_handler_13 = () => set_store_value(showSidemenu, $showSidemenu = !$showSidemenu, $showSidemenu);

    	$$self.$capture_state = () => ({
    		_: X,
    		ctrlShortcuts,
    		graphToImg,
    		open: open$1,
    		download,
    		newBook,
    		isLoaded,
    		sortBook,
    		compactBook,
    		getEditor,
    		showSidemenu,
    		isApp,
    		appReload,
    		dialog,
    		About,
    		Confirm,
    		Img,
    		Shuffle,
    		NewBook,
    		NewFirebook,
    		Recover,
    		$_,
    		$isApp,
    		$isLoaded,
    		$newBook,
    		$showSidemenu
    	});

    	return [
    		$_,
    		$isApp,
    		$isLoaded,
    		$newBook,
    		$showSidemenu,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		change_handler,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10,
    		click_handler_11,
    		click_handler_12,
    		click_handler_13
    	];
    }

    class Navbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navbar",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    const firstAvaiableKey = ()  => {
      const $bookIndex = get_store_value(bookIndex);
      for(let i = 1; i < 10000; i++){
        if(!$bookIndex.chapters.has(String(i))) return String(i)
      }

      return 10000
    };


    const generateChapterText = ({spacelines = 2, key, title = '', group = '', flags = [], content}) => {
      let r = '\n'.repeat(spacelines);
      r += (title) ? `### ${title} {#${key}}` : `### ${key}`;
      if(flags && flags.length> 0)  r += "\n" + flags.map( flag => `![][flag-${flag}]`).join(' ');
      if(group) r+= `\n[group]:<> ("${group}")`;
      if(content) r+= `\n${content}`;

      return r
    };


    const isNatNumber = (n) => (n > 0 || String(n) === "0") && Math.floor(n) === +n;

    const getRightOrderKey = (key) => {
      const $currentChapterKey = get_store_value(currentChapterKey);
      const $bookIndex = get_store_value(bookIndex);

      if(!isNatNumber(key)) return $bookIndex.chapters.get(String($currentChapterKey)).contentEnd

      const n =  Math.floor(key);
      for(let i = n; i >= 0; i--){
        console.log(i);
        if($bookIndex.chapters.has(String(i))) return $bookIndex.chapters.get(String(i)).contentEnd
      }

      for(let i = n; i < 10000; i++){
        if($bookIndex.chapters.has(String(i))) return $bookIndex.chapters.get(String(i)).start - 1
      }
      return $bookIndex.chapters.get(String($currentChapterKey))
    };


    const addChapter = (key, text) => {
      newBook.flush();

      const index = getRightOrderKey(key);
      console.log("index", index);


      getEditor().session.replace(new ace.Range(index, Infinity, index, Infinity), '\n' + text);

      newBook.flush();
    };

    /* src/components/Editor.svelte generated by Svelte v3.44.3 */

    const { console: console_1$1 } = globals;
    const file$5 = "src/components/Editor.svelte";

    // (111:34) 
    function create_if_block_1$2(ctx) {
    	let div;
    	let i;

    	const block = {
    		c: function create() {
    			div = element("div");
    			i = element("i");
    			attr_dev(i, "class", "icon-arrows-cw animate-spin svelte-z4ie43");
    			set_style(i, "width", "fit-content");
    			add_location(i, file$5, 112, 6, 3113);
    			add_location(div, file$5, 111, 4, 3101);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, i);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(111:34) ",
    		ctx
    	});

    	return block;
    }

    // (109:4) {#if $isSynced === true}
    function create_if_block$2(ctx) {
    	let i;

    	const block = {
    		c: function create() {
    			i = element("i");
    			attr_dev(i, "class", "icon-ok svelte-z4ie43");
    			set_style(i, "color", "green");
    			add_location(i, file$5, 109, 6, 3016);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(109:4) {#if $isSynced === true}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let main;
    	let div5;
    	let h1;
    	let t0;
    	let t1;
    	let div0;
    	let span0;
    	let div0_title_value;
    	let t2;
    	let div1;
    	let span1;
    	let div1_title_value;
    	let t3;
    	let div2;
    	let span2;
    	let div2_title_value;
    	let t4;
    	let div3;
    	let span4;
    	let t5;
    	let span3;
    	let div3_title_value;
    	let t6;
    	let div4;
    	let t7;
    	let div4_title_value;
    	let t8;
    	let div6;
    	let t9;
    	let div7;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*$isSynced*/ ctx[3] === true) return create_if_block$2;
    		if (/*$isSynced*/ ctx[3] === false) return create_if_block_1$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			div5 = element("div");
    			h1 = element("h1");
    			t0 = text(/*$currentChapterFullTitle*/ ctx[1]);
    			t1 = space();
    			div0 = element("div");
    			span0 = element("span");
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			t3 = space();
    			div2 = element("div");
    			span2 = element("span");
    			t4 = space();
    			div3 = element("div");
    			span4 = element("span");
    			t5 = text("#");
    			span3 = element("span");
    			t6 = space();
    			div4 = element("div");
    			t7 = text("#L");
    			t8 = space();
    			div6 = element("div");
    			t9 = space();
    			div7 = element("div");
    			if (if_block) if_block.c();
    			attr_dev(h1, "title", /*$currentChapterFullTitle*/ ctx[1]);
    			attr_dev(h1, "class", "svelte-z4ie43");
    			add_location(h1, file$5, 81, 4, 2035);
    			attr_dev(span0, "class", "icon-search");
    			add_location(span0, file$5, 87, 41, 2302);
    			attr_dev(div0, "class", "only-desktop svelte-z4ie43");
    			attr_dev(div0, "title", div0_title_value = /*$_*/ ctx[2]('editor.buttons.find'));
    			add_location(div0, file$5, 85, 4, 2174);
    			attr_dev(span1, "class", "icon-ccw");
    			add_location(span1, file$5, 91, 41, 2469);
    			attr_dev(div1, "class", "only-desktop svelte-z4ie43");
    			attr_dev(div1, "title", div1_title_value = /*$_*/ ctx[2]('editor.buttons.undo'));
    			add_location(div1, file$5, 89, 4, 2341);
    			attr_dev(span2, "class", "icon-cw");
    			add_location(span2, file$5, 95, 41, 2633);
    			attr_dev(div2, "class", "only-desktop svelte-z4ie43");
    			attr_dev(div2, "title", div2_title_value = /*$_*/ ctx[2]('editor.buttons.redo'));
    			add_location(div2, file$5, 93, 4, 2505);
    			attr_dev(span3, "class", "icon-flash svelte-z4ie43");
    			add_location(span3, file$5, 98, 26, 2767);
    			attr_dev(span4, "class", "link");
    			add_location(span4, file$5, 98, 6, 2747);
    			attr_dev(div3, "title", div3_title_value = /*$_*/ ctx[2]('editor.buttons.quicklink'));
    			attr_dev(div3, "class", "svelte-z4ie43");
    			add_location(div3, file$5, 97, 4, 2672);
    			attr_dev(div4, "title", div4_title_value = /*$_*/ ctx[2]('editor.buttons.link'));
    			attr_dev(div4, "class", "svelte-z4ie43");
    			add_location(div4, file$5, 101, 4, 2817);
    			attr_dev(div5, "class", "toolbar svelte-z4ie43");
    			add_location(div5, file$5, 80, 2, 2009);
    			attr_dev(div6, "class", "textarea svelte-z4ie43");
    			attr_dev(div6, "id", editorComponentID);
    			add_location(div6, file$5, 104, 2, 2898);
    			attr_dev(div7, "class", "margin svelte-z4ie43");
    			add_location(div7, file$5, 107, 2, 2960);
    			attr_dev(main, "class", "editor svelte-z4ie43");
    			add_location(main, file$5, 79, 0, 1985);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div5);
    			append_dev(div5, h1);
    			append_dev(h1, t0);
    			append_dev(div5, t1);
    			append_dev(div5, div0);
    			append_dev(div0, span0);
    			append_dev(div5, t2);
    			append_dev(div5, div1);
    			append_dev(div1, span1);
    			append_dev(div5, t3);
    			append_dev(div5, div2);
    			append_dev(div2, span2);
    			append_dev(div5, t4);
    			append_dev(div5, div3);
    			append_dev(div3, span4);
    			append_dev(span4, t5);
    			append_dev(span4, span3);
    			append_dev(div5, t6);
    			append_dev(div5, div4);
    			append_dev(div4, t7);
    			append_dev(main, t8);
    			append_dev(main, div6);
    			append_dev(main, t9);
    			append_dev(main, div7);
    			if (if_block) if_block.m(div7, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(h1, "click", /*click_handler*/ ctx[6], false, false, false),
    					listen_dev(div0, "click", /*click_handler_1*/ ctx[7], false, false, false),
    					listen_dev(div1, "click", /*click_handler_2*/ ctx[8], false, false, false),
    					listen_dev(div2, "click", /*click_handler_3*/ ctx[9], false, false, false),
    					listen_dev(div3, "click", /*addQuickLink*/ ctx[5], false, false, false),
    					listen_dev(div4, "click", /*addLink*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$currentChapterFullTitle*/ 2) set_data_dev(t0, /*$currentChapterFullTitle*/ ctx[1]);

    			if (dirty & /*$currentChapterFullTitle*/ 2) {
    				attr_dev(h1, "title", /*$currentChapterFullTitle*/ ctx[1]);
    			}

    			if (dirty & /*$_*/ 4 && div0_title_value !== (div0_title_value = /*$_*/ ctx[2]('editor.buttons.find'))) {
    				attr_dev(div0, "title", div0_title_value);
    			}

    			if (dirty & /*$_*/ 4 && div1_title_value !== (div1_title_value = /*$_*/ ctx[2]('editor.buttons.undo'))) {
    				attr_dev(div1, "title", div1_title_value);
    			}

    			if (dirty & /*$_*/ 4 && div2_title_value !== (div2_title_value = /*$_*/ ctx[2]('editor.buttons.redo'))) {
    				attr_dev(div2, "title", div2_title_value);
    			}

    			if (dirty & /*$_*/ 4 && div3_title_value !== (div3_title_value = /*$_*/ ctx[2]('editor.buttons.quicklink'))) {
    				attr_dev(div3, "title", div3_title_value);
    			}

    			if (dirty & /*$_*/ 4 && div4_title_value !== (div4_title_value = /*$_*/ ctx[2]('editor.buttons.link'))) {
    				attr_dev(div4, "title", div4_title_value);
    			}

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div7, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);

    			if (if_block) {
    				if_block.d();
    			}

    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $currentChapterKey;
    	let $bookIndex;
    	let $cursorPosition;
    	let $isApp;
    	let $showSidemenu;
    	let $currentChapterFullTitle;
    	let $_;
    	let $isSynced;
    	validate_store(currentChapterKey, 'currentChapterKey');
    	component_subscribe($$self, currentChapterKey, $$value => $$invalidate(10, $currentChapterKey = $$value));
    	validate_store(bookIndex, 'bookIndex');
    	component_subscribe($$self, bookIndex, $$value => $$invalidate(11, $bookIndex = $$value));
    	validate_store(cursorPosition, 'cursorPosition');
    	component_subscribe($$self, cursorPosition, $$value => $$invalidate(12, $cursorPosition = $$value));
    	validate_store(isApp, 'isApp');
    	component_subscribe($$self, isApp, $$value => $$invalidate(13, $isApp = $$value));
    	validate_store(showSidemenu, 'showSidemenu');
    	component_subscribe($$self, showSidemenu, $$value => $$invalidate(0, $showSidemenu = $$value));
    	validate_store(currentChapterFullTitle, 'currentChapterFullTitle');
    	component_subscribe($$self, currentChapterFullTitle, $$value => $$invalidate(1, $currentChapterFullTitle = $$value));
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(2, $_ = $$value));
    	validate_store(isSynced, 'isSynced');
    	component_subscribe($$self, isSynced, $$value => $$invalidate(3, $isSynced = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Editor', slots, []);

    	onMount(() => {
    		if ($isApp) {
    			loadAppMode();
    			return;
    		}

    		session.load();
    	});

    	const addLink = () => {
    		const { row, column } = $cursorPosition;
    		getEditor().session.replace(new ace.Range(row, column, row, column), '[](#)');
    		getEditor().clearSelection();
    		getEditor().moveCursorTo(row, column + 4);
    		getEditor().focus();
    	};

    	const addQuickLink = () => {
    		let { row, column } = $cursorPosition;
    		const { contentStart, end } = $bookIndex.chapters.get($currentChapterKey);
    		const key = firstAvaiableKey();
    		const link = `[](#${firstAvaiableKey()})`;
    		console.log("contstar", contentStart, row);

    		if (contentStart != row) {
    			getEditor().session.replace(new ace.Range(row, column, row, column), link);
    			column += link.length;
    		} else {
    			// Special case: if is on same line of heading, create a new line skip
    			getEditor().session.replace(new ace.Range(row, column, row, column), '\n' + link);

    			row += 1;
    			column = link.length;
    		}

    		getEditor().clearSelection();
    		getEditor().moveCursorTo(row, column);
    		const order = getRightOrderKey(key);
    		addChapter(key, `\n\n### ${key}`);
    		console.log("order", order, contentStart);
    		if (order >= contentStart) getEditor().moveCursorTo(row, column);
    		getEditor().focus();
    	};

    	ctrlShortcuts({
    		'K': () => addQuickLink(),
    		'L': () => addLink()
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Editor> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => set_store_value(showSidemenu, $showSidemenu = !$showSidemenu, $showSidemenu);

    	const click_handler_1 = async () => {
    		getEditor().execCommand('find');
    	};

    	const click_handler_2 = async () => {
    		getEditor().execCommand('undo');
    	};

    	const click_handler_3 = async () => {
    		getEditor().execCommand('redo');
    	};

    	$$self.$capture_state = () => ({
    		_: X,
    		onMount,
    		session,
    		cursorPosition,
    		getEditor,
    		editorComponentID,
    		currentChapterFullTitle,
    		currentChapterKey,
    		bookIndex,
    		ctrlShortcuts,
    		showSidemenu,
    		isSynced,
    		firstAvaiableKey,
    		addChapter,
    		getRightOrderKey,
    		isApp,
    		loadAppMode,
    		addLink,
    		addQuickLink,
    		$currentChapterKey,
    		$bookIndex,
    		$cursorPosition,
    		$isApp,
    		$showSidemenu,
    		$currentChapterFullTitle,
    		$_,
    		$isSynced
    	});

    	return [
    		$showSidemenu,
    		$currentChapterFullTitle,
    		$_,
    		$isSynced,
    		addLink,
    		addQuickLink,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3
    	];
    }

    class Editor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Editor",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    const chapterHistory = [];
    const historyCanGoBack = writable(false); 

    const goToChapter = (key, updateHistory = true) => {
      const editor = getEditor();
      const $bookIndex = get_store_value(bookIndex);
      const $currentChapterKey = get_store_value(currentChapterKey);

      if(! $bookIndex.chapters.has(key)) {
        addChapter(key, generateChapterText({
          key,
          group: $currentChapterKey ? $bookIndex.chapters.get($currentChapterKey).group : ''
        }));
        newBook.flush();
      }
      if(updateHistory){
        chapterHistory.push($currentChapterKey);
        historyCanGoBack.set(true);
      }
      editor.gotoLine( $bookIndex.chapters.get(key).contentEnd, Infinity);
      showSidemenu.set(false);
      
      editor.focus();
      editor.scrollToLine($bookIndex.chapters.get(key).contentStart -1, false, true, function () {});

      editor.moveCursorTo( $bookIndex.chapters.get(key).contentEnd, Infinity);

    };

    const goBack = () => {
      if(chapterHistory.length == 0) return
      if(chapterHistory.length == 1) historyCanGoBack.set(false);

      console.log(chapterHistory.length);
      goToChapter(chapterHistory.pop(), false);
    };


    isLoaded.subscribe( value => {
      if(!value) return

      const onLinkClick = (e) => {
        if(!e.target.classList.contains('ace_underline')) return false
        const key = e.target.innerHTML.trim();
        if(!key.startsWith('#')) return false
        goToChapter(key.substring(1));

      };

      document.getElementById(editorComponentID).onclick = onLinkClick;
    });

    function t(t){return "object"==typeof t&&null!=t&&1===t.nodeType}function e(t,e){return (!e||"hidden"!==t)&&"visible"!==t&&"clip"!==t}function n(t,n){if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){var r=getComputedStyle(t,null);return e(r.overflowY,n)||e(r.overflowX,n)||function(t){var e=function(t){if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}}(t);return !!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)}(t)}return !1}function r(t,e,n,r,i,o,l,d){return o<t&&l>e||o>t&&l<e?0:o<=t&&d<=n||l>=e&&d>=n?o-t-r:l>e&&d<n||o<t&&d>n?l-e+i:0}function compute(e,i){var o=window,l=i.scrollMode,d=i.block,u=i.inline,h=i.boundary,a=i.skipOverflowHiddenElements,c="function"==typeof h?h:function(t){return t!==h};if(!t(e))throw new TypeError("Invalid target");for(var f=document.scrollingElement||document.documentElement,s=[],p=e;t(p)&&c(p);){if((p=p.parentElement)===f){s.push(p);break}null!=p&&p===document.body&&n(p)&&!n(document.documentElement)||null!=p&&n(p,a)&&s.push(p);}for(var m=o.visualViewport?o.visualViewport.width:innerWidth,g=o.visualViewport?o.visualViewport.height:innerHeight,w=window.scrollX||pageXOffset,v=window.scrollY||pageYOffset,W=e.getBoundingClientRect(),b=W.height,H=W.width,y=W.top,E=W.right,M=W.bottom,V=W.left,x="start"===d||"nearest"===d?y:"end"===d?M:y+b/2,I="center"===u?V+H/2:"end"===u?E:V,C=[],T=0;T<s.length;T++){var k=s[T],B=k.getBoundingClientRect(),D=B.height,O=B.width,R=B.top,X=B.right,Y=B.bottom,L=B.left;if("if-needed"===l&&y>=0&&V>=0&&M<=g&&E<=m&&y>=R&&M<=Y&&V>=L&&E<=X)return C;var S=getComputedStyle(k),j=parseInt(S.borderLeftWidth,10),q=parseInt(S.borderTopWidth,10),z=parseInt(S.borderRightWidth,10),A=parseInt(S.borderBottomWidth,10),F=0,G=0,J="offsetWidth"in k?k.offsetWidth-k.clientWidth-j-z:0,K="offsetHeight"in k?k.offsetHeight-k.clientHeight-q-A:0;if(f===k)F="start"===d?x:"end"===d?x-g:"nearest"===d?r(v,v+g,g,q,A,v+x,v+x+b,b):x-g/2,G="start"===u?I:"center"===u?I-m/2:"end"===u?I-m:r(w,w+m,m,j,z,w+I,w+I+H,H),F=Math.max(0,F+v),G=Math.max(0,G+w);else {F="start"===d?x-R-q:"end"===d?x-Y+A+K:"nearest"===d?r(R,Y,D,q,A+K,x,x+b,b):x-(R+D/2)+K/2,G="start"===u?I-L-j:"center"===u?I-(L+O/2)+J/2:"end"===u?I-X+z+J:r(L,X,O,j,z+J,I,I+H,H);var N=k.scrollLeft,P=k.scrollTop;x+=P-(F=Math.max(0,Math.min(P+F,k.scrollHeight-D+K))),I+=N-(G=Math.max(0,Math.min(N+G,k.scrollWidth-O+J)));}C.push({el:k,top:F,left:G});}return C}

    function isOptionsObject(options) {
      return options === Object(options) && Object.keys(options).length !== 0;
    }

    function defaultBehavior(actions, behavior) {
      if (behavior === void 0) {
        behavior = 'auto';
      }

      var canSmoothScroll = ('scrollBehavior' in document.body.style);
      actions.forEach(function (_ref) {
        var el = _ref.el,
            top = _ref.top,
            left = _ref.left;

        if (el.scroll && canSmoothScroll) {
          el.scroll({
            top: top,
            left: left,
            behavior: behavior
          });
        } else {
          el.scrollTop = top;
          el.scrollLeft = left;
        }
      });
    }

    function getOptions(options) {
      if (options === false) {
        return {
          block: 'end',
          inline: 'nearest'
        };
      }

      if (isOptionsObject(options)) {
        return options;
      }

      return {
        block: 'start',
        inline: 'nearest'
      };
    }

    function scrollIntoView$1(target, options) {
      var targetIsDetached = !target.ownerDocument.documentElement.contains(target);

      if (isOptionsObject(options) && typeof options.behavior === 'function') {
        return options.behavior(targetIsDetached ? [] : compute(target, options));
      }

      if (targetIsDetached) {
        return;
      }

      var computeOptions = getOptions(options);
      return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);
    }

    var memoizedNow;

    var now = function now() {
      if (!memoizedNow) {
        memoizedNow = 'performance' in window ? performance.now.bind(performance) : Date.now;
      }

      return memoizedNow();
    };

    function step(context) {
      var time = now();
      var elapsed = Math.min((time - context.startTime) / context.duration, 1);
      var value = context.ease(elapsed);
      var currentX = context.startX + (context.x - context.startX) * value;
      var currentY = context.startY + (context.y - context.startY) * value;
      context.method(currentX, currentY);

      if (currentX !== context.x || currentY !== context.y) {
        requestAnimationFrame(function () {
          return step(context);
        });
      } else {
        context.cb();
      }
    }

    function smoothScroll(el, x, y, duration, ease, cb) {
      if (duration === void 0) {
        duration = 600;
      }

      if (ease === void 0) {
        ease = function ease(t) {
          return 1 + --t * t * t * t * t;
        };
      }

      var scrollable;
      var startX;
      var startY;
      var method;
      scrollable = el;
      startX = el.scrollLeft;
      startY = el.scrollTop;

      method = function method(x, y) {
        el.scrollLeft = Math.ceil(x);
        el.scrollTop = Math.ceil(y);
      };

      step({
        scrollable: scrollable,
        method: method,
        startTime: now(),
        startX: startX,
        startY: startY,
        x: x,
        y: y,
        duration: duration,
        ease: ease,
        cb: cb
      });
    }

    var shouldSmoothScroll = function shouldSmoothScroll(options) {
      return options && !options.behavior || options.behavior === 'smooth';
    };

    function scroll(target, options) {
      var overrides = options || {};

      if (shouldSmoothScroll(overrides)) {
        return scrollIntoView$1(target, {
          block: overrides.block,
          inline: overrides.inline,
          scrollMode: overrides.scrollMode,
          boundary: overrides.boundary,
          behavior: function behavior(actions) {
            return Promise.all(actions.reduce(function (results, _ref) {
              var el = _ref.el,
                  left = _ref.left,
                  top = _ref.top;
              var startLeft = el.scrollLeft;
              var startTop = el.scrollTop;

              if (startLeft === left && startTop === top) {
                return results;
              }

              return [].concat(results, [new Promise(function (resolve) {
                return smoothScroll(el, left, top, overrides.duration, overrides.ease, function () {
                  return resolve({
                    el: el,
                    left: [startLeft, left],
                    top: [startTop, top]
                  });
                });
              })]);
            }, []));
          }
        });
      }

      return Promise.resolve(scrollIntoView$1(target, options));
    }

    var smoothScrollIntoView = scroll;
    var scrollIntoView = smoothScrollIntoView;

    /* src/components/dialogs/Chapter.svelte generated by Svelte v3.44.3 */

    const { Object: Object_1$1 } = globals;
    const file$4 = "src/components/dialogs/Chapter.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (39:4) {#each ['final', 'fixed', 'death'] as flag}
    function create_each_block$2(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[13](/*flag*/ ctx[17]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			attr_dev(img, "alt", /*flag*/ ctx[17]);
    			if (!src_url_equal(img.src, img_src_value = `./static/img/flags/${/*flag*/ ctx[17]}.png`)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "svelte-1h6v3vg");
    			add_location(img, file$4, 42, 8, 1221);
    			attr_dev(div, "class", "svelte-1h6v3vg");
    			toggle_class(div, "selected", /*flags*/ ctx[5][/*flag*/ ctx[17]]);
    			add_location(div, file$4, 39, 6, 1116);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*flags*/ 32) {
    				toggle_class(div, "selected", /*flags*/ ctx[5][/*flag*/ ctx[17]]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(39:4) {#each ['final', 'fixed', 'death'] as flag}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div4;
    	let h3;
    	let t0;
    	let t1;
    	let div0;
    	let span0;
    	let t2_value = /*$_*/ ctx[7]('dialogs.chapter.name') + "";
    	let t2;
    	let t3;
    	let input0;
    	let t4;
    	let div1;
    	let span1;
    	let t5_value = /*$_*/ ctx[7]('dialogs.chapter.title') + "";
    	let t5;
    	let t6;
    	let input1;
    	let t7;
    	let div2;
    	let span2;
    	let t8_value = /*$_*/ ctx[7]('dialogs.chapter.group') + "";
    	let t8;
    	let t9;
    	let input2;
    	let t10;
    	let div3;
    	let t11;
    	let p;
    	let t12_value = /*$_*/ ctx[7]('dialogs.chapter.hint') + "";
    	let t12;
    	let t13;
    	let button0;
    	let t14_value = /*$_*/ ctx[7]('dialogs.ok') + "";
    	let t14;
    	let t15;
    	let button1;
    	let t16_value = /*$_*/ ctx[7]('dialogs.cancel') + "";
    	let t16;
    	let mounted;
    	let dispose;
    	let each_value = ['final', 'fixed', 'death'];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < 3; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			h3 = element("h3");
    			t0 = text(/*dialogTitle*/ ctx[1]);
    			t1 = space();
    			div0 = element("div");
    			span0 = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			input0 = element("input");
    			t4 = space();
    			div1 = element("div");
    			span1 = element("span");
    			t5 = text(t5_value);
    			t6 = space();
    			input1 = element("input");
    			t7 = space();
    			div2 = element("div");
    			span2 = element("span");
    			t8 = text(t8_value);
    			t9 = space();
    			input2 = element("input");
    			t10 = space();
    			div3 = element("div");

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].c();
    			}

    			t11 = space();
    			p = element("p");
    			t12 = text(t12_value);
    			t13 = space();
    			button0 = element("button");
    			t14 = text(t14_value);
    			t15 = space();
    			button1 = element("button");
    			t16 = text(t16_value);
    			add_location(h3, file$4, 24, 2, 651);
    			attr_dev(span0, "class", "svelte-1h6v3vg");
    			add_location(span0, file$4, 26, 4, 700);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "class", "svelte-1h6v3vg");
    			add_location(input0, file$4, 27, 4, 746);
    			attr_dev(div0, "class", "input svelte-1h6v3vg");
    			add_location(div0, file$4, 25, 2, 676);
    			attr_dev(span1, "class", "svelte-1h6v3vg");
    			add_location(span1, file$4, 30, 4, 820);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "class", "svelte-1h6v3vg");
    			add_location(input1, file$4, 31, 4, 867);
    			attr_dev(div1, "class", "input svelte-1h6v3vg");
    			add_location(div1, file$4, 29, 2, 796);
    			attr_dev(span2, "class", "svelte-1h6v3vg");
    			add_location(span2, file$4, 34, 4, 943);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "class", "svelte-1h6v3vg");
    			add_location(input2, file$4, 35, 4, 990);
    			attr_dev(div2, "class", "input svelte-1h6v3vg");
    			add_location(div2, file$4, 33, 2, 919);
    			attr_dev(div3, "class", "flags svelte-1h6v3vg");
    			add_location(div3, file$4, 37, 2, 1042);
    			set_style(p, "font-size", "85%");
    			add_location(p, file$4, 46, 2, 1315);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$4, 47, 2, 1376);
    			attr_dev(button1, "class", "cancel");
    			add_location(button1, file$4, 55, 2, 1556);
    			attr_dev(div4, "class", "dialog");
    			add_location(div4, file$4, 23, 0, 628);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, h3);
    			append_dev(h3, t0);
    			append_dev(div4, t1);
    			append_dev(div4, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, input0);
    			set_input_value(input0, /*key*/ ctx[2]);
    			append_dev(div4, t4);
    			append_dev(div4, div1);
    			append_dev(div1, span1);
    			append_dev(span1, t5);
    			append_dev(div1, t6);
    			append_dev(div1, input1);
    			set_input_value(input1, /*title*/ ctx[4]);
    			append_dev(div4, t7);
    			append_dev(div4, div2);
    			append_dev(div2, span2);
    			append_dev(span2, t8);
    			append_dev(div2, t9);
    			append_dev(div2, input2);
    			set_input_value(input2, /*group*/ ctx[6]);
    			append_dev(div4, t10);
    			append_dev(div4, div3);

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].m(div3, null);
    			}

    			append_dev(div4, t11);
    			append_dev(div4, p);
    			append_dev(p, t12);
    			append_dev(div4, t13);
    			append_dev(div4, button0);
    			append_dev(button0, t14);
    			append_dev(div4, t15);
    			append_dev(div4, button1);
    			append_dev(button1, t16);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[10]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[11]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[12]),
    					listen_dev(button0, "click", /*click_handler_1*/ ctx[14], false, false, false),
    					listen_dev(button1, "click", /*click_handler_2*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dialogTitle*/ 2) set_data_dev(t0, /*dialogTitle*/ ctx[1]);
    			if (dirty & /*$_*/ 128 && t2_value !== (t2_value = /*$_*/ ctx[7]('dialogs.chapter.name') + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*key*/ 4 && input0.value !== /*key*/ ctx[2]) {
    				set_input_value(input0, /*key*/ ctx[2]);
    			}

    			if (dirty & /*$_*/ 128 && t5_value !== (t5_value = /*$_*/ ctx[7]('dialogs.chapter.title') + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*title*/ 16 && input1.value !== /*title*/ ctx[4]) {
    				set_input_value(input1, /*title*/ ctx[4]);
    			}

    			if (dirty & /*$_*/ 128 && t8_value !== (t8_value = /*$_*/ ctx[7]('dialogs.chapter.group') + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*group*/ 64 && input2.value !== /*group*/ ctx[6]) {
    				set_input_value(input2, /*group*/ ctx[6]);
    			}

    			if (dirty & /*flags*/ 32) {
    				each_value = ['final', 'fixed', 'death'];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < 3; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div3, null);
    					}
    				}

    				for (; i < 3; i += 1) {
    					each_blocks[i].d(1);
    				}
    			}

    			if (dirty & /*$_*/ 128 && t12_value !== (t12_value = /*$_*/ ctx[7]('dialogs.chapter.hint') + "")) set_data_dev(t12, t12_value);
    			if (dirty & /*$_*/ 128 && t14_value !== (t14_value = /*$_*/ ctx[7]('dialogs.ok') + "")) set_data_dev(t14, t14_value);
    			if (dirty & /*$_*/ 128 && t16_value !== (t16_value = /*$_*/ ctx[7]('dialogs.cancel') + "")) set_data_dev(t16, t16_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(7, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Chapter', slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;

    	// Entity input bindings
    	let dialogTitle, key, value, title, flags, group;

    	const filterFlags = () => Object.keys(flags).filter(key => flags[key]);

    	const unsubscribe = params.subscribe(p => {
    		$$invalidate(1, [dialogTitle, key, value] = p, dialogTitle, $$invalidate(2, key), $$invalidate(3, value));
    		$$invalidate(4, { title = '', group = '' } = value, title, $$invalidate(6, group));
    		const flagProps = value.flags || [];

    		$$invalidate(5, flags = {
    			final: flagProps.includes('final'),
    			fixed: flagProps.includes('fixed'),
    			death: flagProps.includes('death')
    		});
    	});

    	onDestroy(unsubscribe);
    	const writable_props = ['params', 'callback'];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Chapter> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		key = this.value;
    		$$invalidate(2, key);
    	}

    	function input1_input_handler() {
    		title = this.value;
    		$$invalidate(4, title);
    	}

    	function input2_input_handler() {
    		group = this.value;
    		$$invalidate(6, group);
    	}

    	const click_handler = flag => $$invalidate(5, flags[flag] = !flags[flag], flags);

    	const click_handler_1 = () => callback({
    		key,
    		value: {
    			...value,
    			title,
    			group,
    			flags: filterFlags()
    		}
    	});

    	const click_handler_2 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(9, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: X,
    		onDestroy,
    		params,
    		callback,
    		dialogTitle,
    		key,
    		value,
    		title,
    		flags,
    		group,
    		filterFlags,
    		unsubscribe,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(9, params = $$props.params);
    		if ('callback' in $$props) $$invalidate(0, callback = $$props.callback);
    		if ('dialogTitle' in $$props) $$invalidate(1, dialogTitle = $$props.dialogTitle);
    		if ('key' in $$props) $$invalidate(2, key = $$props.key);
    		if ('value' in $$props) $$invalidate(3, value = $$props.value);
    		if ('title' in $$props) $$invalidate(4, title = $$props.title);
    		if ('flags' in $$props) $$invalidate(5, flags = $$props.flags);
    		if ('group' in $$props) $$invalidate(6, group = $$props.group);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		callback,
    		dialogTitle,
    		key,
    		value,
    		title,
    		flags,
    		group,
    		$_,
    		filterFlags,
    		params,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Chapter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { params: 9, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Chapter",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[9] === undefined && !('params' in props)) {
    			console.warn("<Chapter> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !('callback' in props)) {
    			console.warn("<Chapter> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Chapter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Chapter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Chapter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Chapter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ActionButtons.svelte generated by Svelte v3.44.3 */

    const { console: console_1 } = globals;
    const file$3 = "src/components/ActionButtons.svelte";

    function create_fragment$3(ctx) {
    	let div4;
    	let div0;
    	let div0_title_value;
    	let div0_disabled_value;
    	let t0;
    	let div1;
    	let div1_title_value;
    	let t1;
    	let div2;
    	let div2_title_value;
    	let div2_disabled_value;
    	let t2;
    	let div3;
    	let div3_title_value;
    	let div3_disabled_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			div3 = element("div");
    			attr_dev(div0, "class", "icon-back svelte-1d3smbs");
    			attr_dev(div0, "title", div0_title_value = /*$_*/ ctx[0]('sidemenu.actions.goback'));
    			attr_dev(div0, "disabled", div0_disabled_value = !/*$historyCanGoBack*/ ctx[2]);
    			add_location(div0, file$3, 95, 2, 2915);
    			attr_dev(div1, "class", "icon-plus svelte-1d3smbs");
    			attr_dev(div1, "title", div1_title_value = /*$_*/ ctx[0]('sidemenu.actions.add'));
    			add_location(div1, file$3, 96, 2, 3029);
    			attr_dev(div2, "class", "icon-pencil svelte-1d3smbs");
    			attr_dev(div2, "title", div2_title_value = /*$_*/ ctx[0]('sidemenu.actions.edit'));
    			attr_dev(div2, "disabled", div2_disabled_value = /*$currentChapterKey*/ ctx[1] == "");
    			add_location(div2, file$3, 97, 2, 3107);
    			attr_dev(div3, "class", "icon-trash svelte-1d3smbs");
    			attr_dev(div3, "title", div3_title_value = /*$_*/ ctx[0]('sidemenu.actions.delete'));
    			attr_dev(div3, "disabled", div3_disabled_value = /*$currentChapterKey*/ ctx[1] == "");
    			add_location(div3, file$3, 98, 2, 3226);
    			attr_dev(div4, "class", "buttons svelte-1d3smbs");
    			add_location(div4, file$3, 94, 0, 2891);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div4, t0);
    			append_dev(div4, div1);
    			append_dev(div4, t1);
    			append_dev(div4, div2);
    			append_dev(div4, t2);
    			append_dev(div4, div3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", goBack, false, false, false),
    					listen_dev(div1, "click", /*add*/ ctx[3], false, false, false),
    					listen_dev(div2, "click", /*edit*/ ctx[4], false, false, false),
    					listen_dev(div3, "click", /*del*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 1 && div0_title_value !== (div0_title_value = /*$_*/ ctx[0]('sidemenu.actions.goback'))) {
    				attr_dev(div0, "title", div0_title_value);
    			}

    			if (dirty & /*$historyCanGoBack*/ 4 && div0_disabled_value !== (div0_disabled_value = !/*$historyCanGoBack*/ ctx[2])) {
    				attr_dev(div0, "disabled", div0_disabled_value);
    			}

    			if (dirty & /*$_*/ 1 && div1_title_value !== (div1_title_value = /*$_*/ ctx[0]('sidemenu.actions.add'))) {
    				attr_dev(div1, "title", div1_title_value);
    			}

    			if (dirty & /*$_*/ 1 && div2_title_value !== (div2_title_value = /*$_*/ ctx[0]('sidemenu.actions.edit'))) {
    				attr_dev(div2, "title", div2_title_value);
    			}

    			if (dirty & /*$currentChapterKey*/ 2 && div2_disabled_value !== (div2_disabled_value = /*$currentChapterKey*/ ctx[1] == "")) {
    				attr_dev(div2, "disabled", div2_disabled_value);
    			}

    			if (dirty & /*$_*/ 1 && div3_title_value !== (div3_title_value = /*$_*/ ctx[0]('sidemenu.actions.delete'))) {
    				attr_dev(div3, "title", div3_title_value);
    			}

    			if (dirty & /*$currentChapterKey*/ 2 && div3_disabled_value !== (div3_disabled_value = /*$currentChapterKey*/ ctx[1] == "")) {
    				attr_dev(div3, "disabled", div3_disabled_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $showSidemenu;
    	let $bookIndex;
    	let $_;
    	let $currentChapterKey;
    	let $historyCanGoBack;
    	validate_store(showSidemenu, 'showSidemenu');
    	component_subscribe($$self, showSidemenu, $$value => $$invalidate(6, $showSidemenu = $$value));
    	validate_store(bookIndex, 'bookIndex');
    	component_subscribe($$self, bookIndex, $$value => $$invalidate(7, $bookIndex = $$value));
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(0, $_ = $$value));
    	validate_store(currentChapterKey, 'currentChapterKey');
    	component_subscribe($$self, currentChapterKey, $$value => $$invalidate(1, $currentChapterKey = $$value));
    	validate_store(historyCanGoBack, 'historyCanGoBack');
    	component_subscribe($$self, historyCanGoBack, $$value => $$invalidate(2, $historyCanGoBack = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ActionButtons', slots, []);

    	const add = async () => {
    		const result = await dialog(Chapter, $_('dialogs.chapter.add'), firstAvaiableKey(), {
    			title: "",
    			group: $currentChapterKey == ''
    			? ''
    			: $bookIndex.chapters.get($currentChapterKey).group || '',
    			flags: [],
    			text: ""
    		});

    		if (!result) return;
    		let { key, value } = result;
    		key = sanitizeKey(key);
    		value.group = sanitizeKey(value.group || '');
    		if (!key) return;

    		addChapter(key, generateChapterText({
    			spacelines: 2,
    			key,
    			title: value.title || '',
    			group: value.group,
    			flags: value.flags || []
    		}));

    		set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);
    		newBook.flush();
    		goToChapter(key);
    	};

    	const edit = async () => {
    		const cKey = $currentChapterKey;
    		if (cKey == '') return;
    		const result = await dialog(Chapter, $_('dialogs.chapter.edit'), cKey, $bookIndex.chapters.get(cKey));
    		if (!result) return;
    		let { key, value } = result;
    		key = sanitizeKey(key);
    		value.group = sanitizeKey(value.group || '');
    		if (!key) return;
    		const chapter = $bookIndex.chapters.get(cKey);
    		const content = getEditor().session.doc.getTextRange(new ace.Range(chapter.contentStart + 1, 0, chapter.contentEnd + 1, 0)).split('\n').filter(line => !(line.includes('[group]:<>') || line.includes('![flag-'))).join('\n').trim();
    		getEditor().session.replace(new ace.Range(chapter.start, 0, chapter.contentEnd + 1, 0), "");
    		newBook.flush();

    		addChapter(key, generateChapterText({
    			spacelines: 2,
    			key,
    			title: value.title || '',
    			group: value.group,
    			flags: value.flags || [],
    			content
    		}));

    		newBook.flush();
    		goToChapter(key);
    		set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);
    	};

    	const del = async () => {
    		const key = $currentChapterKey;
    		if (key == '') return;

    		if (await dialog(Confirm, $_('dialogs.confirm'), $_(`dialogs.chapter.delete`).replace("%1", key))) {
    			const chapter = $bookIndex.chapters.get(key);
    			console.log("maigd", chapter);
    			getEditor().session.replace(new ace.Range(chapter.start, 0, chapter.contentEnd + 1, 0), "");
    			set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);
    		}
    	};

    	ctrlShortcuts({
    		'R': () => add(),
    		'E': () => edit(),
    		'D': () => del()
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<ActionButtons> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		_: X,
    		sanitizeKey,
    		bookIndex,
    		newBook,
    		currentChapterKey,
    		getEditor,
    		showSidemenu,
    		firstAvaiableKey,
    		addChapter,
    		generateChapterText,
    		historyCanGoBack,
    		goBack,
    		goToChapter,
    		ctrlShortcuts,
    		dialog,
    		Chapter,
    		Confirm,
    		add,
    		edit,
    		del,
    		$showSidemenu,
    		$bookIndex,
    		$_,
    		$currentChapterKey,
    		$historyCanGoBack
    	});

    	return [$_, $currentChapterKey, $historyCanGoBack, add, edit, del];
    }

    class ActionButtons extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ActionButtons",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src/components/Sidebar.svelte generated by Svelte v3.44.3 */
    const file$2 = "src/components/Sidebar.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i][0];
    	child_ctx[19] = list[i][1];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[24] = list[i];
    	return child_ctx;
    }

    // (89:8) {#each [...($bookIndex.groups)] as group}
    function create_each_block_4(ctx) {
    	let option;
    	let t_value = /*group*/ ctx[24] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*group*/ ctx[24];
    			option.value = option.__value;
    			add_location(option, file$2, 89, 10, 2874);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$bookIndex*/ 8 && t_value !== (t_value = /*group*/ ctx[24] + "")) set_data_dev(t, t_value);

    			if (dirty & /*$bookIndex*/ 8 && option_value_value !== (option_value_value = /*group*/ ctx[24])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(89:8) {#each [...($bookIndex.groups)] as group}",
    		ctx
    	});

    	return block;
    }

    // (103:6) {#each chapter.flags || [] as flag}
    function create_each_block_3(ctx) {
    	let img;
    	let img_src_value;
    	let img_alt_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = `./static/img/flags/${/*flag*/ ctx[16]}.png`)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*flag*/ ctx[16]);
    			add_location(img, file$2, 103, 8, 3250);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*filterChapters*/ 16 && !src_url_equal(img.src, img_src_value = `./static/img/flags/${/*flag*/ ctx[16]}.png`)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*filterChapters*/ 16 && img_alt_value !== (img_alt_value = /*flag*/ ctx[16])) {
    				attr_dev(img, "alt", img_alt_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(103:6) {#each chapter.flags || [] as flag}",
    		ctx
    	});

    	return block;
    }

    // (97:4) {#each filterChapters as [key, chapter]}
    function create_each_block_2(ctx) {
    	let li;
    	let t0_value = /*key*/ ctx[13] + "";
    	let t0;
    	let t1;
    	let b;
    	let t2_value = (/*chapter*/ ctx[19].title || '') + "";
    	let t2;
    	let t3;
    	let t4;
    	let span;
    	let raw_value = /*chapterErrors*/ ctx[7](/*key*/ ctx[13], /*chapter*/ ctx[19]) + "";
    	let t5;
    	let mounted;
    	let dispose;
    	let each_value_3 = /*chapter*/ ctx[19].flags || [];
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[10](/*key*/ ctx[13]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space();
    			b = element("b");
    			t2 = text(t2_value);
    			t3 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			span = element("span");
    			t5 = space();
    			attr_dev(b, "class", "svelte-1m2jr2d");
    			add_location(b, file$2, 101, 6, 3171);
    			attr_dev(span, "class", "errors svelte-1m2jr2d");
    			add_location(span, file$2, 105, 6, 3327);
    			attr_dev(li, "class", "svelte-1m2jr2d");
    			toggle_class(li, "selected", /*key*/ ctx[13] === /*$currentChapterKey*/ ctx[2]);
    			add_location(li, file$2, 97, 4, 3058);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			append_dev(li, b);
    			append_dev(b, t2);
    			append_dev(li, t3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(li, null);
    			}

    			append_dev(li, t4);
    			append_dev(li, span);
    			span.innerHTML = raw_value;
    			append_dev(li, t5);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*filterChapters*/ 16 && t0_value !== (t0_value = /*key*/ ctx[13] + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*filterChapters*/ 16 && t2_value !== (t2_value = (/*chapter*/ ctx[19].title || '') + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*filterChapters*/ 16) {
    				each_value_3 = /*chapter*/ ctx[19].flags || [];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(li, t4);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}

    			if (dirty & /*filterChapters*/ 16 && raw_value !== (raw_value = /*chapterErrors*/ ctx[7](/*key*/ ctx[13], /*chapter*/ ctx[19]) + "")) span.innerHTML = raw_value;
    			if (dirty & /*filterChapters, $currentChapterKey*/ 20) {
    				toggle_class(li, "selected", /*key*/ ctx[13] === /*$currentChapterKey*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(97:4) {#each filterChapters as [key, chapter]}",
    		ctx
    	});

    	return block;
    }

    // (118:6) {#each $bookIndex.chapters.get(key).flags || [] as flag}
    function create_each_block_1(ctx) {
    	let img;
    	let img_src_value;
    	let img_alt_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = `./static/img/flags/${/*flag*/ ctx[16]}.png`)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*flag*/ ctx[16]);
    			add_location(img, file$2, 118, 8, 3775);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$bookIndex, linksHere*/ 10 && !src_url_equal(img.src, img_src_value = `./static/img/flags/${/*flag*/ ctx[16]}.png`)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*$bookIndex, linksHere*/ 10 && img_alt_value !== (img_alt_value = /*flag*/ ctx[16])) {
    				attr_dev(img, "alt", img_alt_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(118:6) {#each $bookIndex.chapters.get(key).flags || [] as flag}",
    		ctx
    	});

    	return block;
    }

    // (112:4) {#each linksHere as key}
    function create_each_block$1(ctx) {
    	let li;
    	let t0_value = /*key*/ ctx[13] + "";
    	let t0;
    	let t1;
    	let b;
    	let t2_value = (/*$bookIndex*/ ctx[3].chapters.get(/*key*/ ctx[13]).title || '') + "";
    	let t2;
    	let t3;
    	let t4;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*$bookIndex*/ ctx[3].chapters.get(/*key*/ ctx[13]).flags || [];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[11](/*key*/ ctx[13]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space();
    			b = element("b");
    			t2 = text(t2_value);
    			t3 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			attr_dev(b, "class", "svelte-1m2jr2d");
    			add_location(b, file$2, 116, 6, 3654);
    			attr_dev(li, "class", "svelte-1m2jr2d");
    			toggle_class(li, "selected", /*key*/ ctx[13] === /*$currentChapterKey*/ ctx[2]);
    			add_location(li, file$2, 112, 4, 3541);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			append_dev(li, b);
    			append_dev(b, t2);
    			append_dev(li, t3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(li, null);
    			}

    			append_dev(li, t4);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*linksHere*/ 2 && t0_value !== (t0_value = /*key*/ ctx[13] + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$bookIndex, linksHere*/ 10 && t2_value !== (t2_value = (/*$bookIndex*/ ctx[3].chapters.get(/*key*/ ctx[13]).title || '') + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*$bookIndex, linksHere*/ 10) {
    				each_value_1 = /*$bookIndex*/ ctx[3].chapters.get(/*key*/ ctx[13]).flags || [];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(li, t4);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty & /*linksHere, $currentChapterKey*/ 6) {
    				toggle_class(li, "selected", /*key*/ ctx[13] === /*$currentChapterKey*/ ctx[2]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(112:4) {#each linksHere as key}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div;
    	let div_class_value;
    	let t0;
    	let aside;
    	let h10;
    	let span;
    	let select;
    	let option0;
    	let t1_value = /*$_*/ ctx[6]('sidemenu.allgroup') + "";
    	let t1;
    	let option1;
    	let t2_value = /*$_*/ ctx[6]('sidemenu.allgrouperrors') + "";
    	let t2;
    	let t3;
    	let actionbuttons;
    	let t4;
    	let ul0;
    	let t5;
    	let h11;
    	let t6_value = /*$_*/ ctx[6]("sidemenu.linkshere") + "";
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let ul1;
    	let aside_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_4 = [.../*$bookIndex*/ ctx[3].groups];
    	validate_each_argument(each_value_4);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks_2[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	actionbuttons = new ActionButtons({ $$inline: true });
    	let each_value_2 = /*filterChapters*/ ctx[4];
    	validate_each_argument(each_value_2);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let each_value = /*linksHere*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space();
    			aside = element("aside");
    			h10 = element("h1");
    			span = element("span");
    			select = element("select");
    			option0 = element("option");
    			t1 = text(t1_value);
    			option1 = element("option");
    			t2 = text(t2_value);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t3 = space();
    			create_component(actionbuttons.$$.fragment);
    			t4 = space();
    			ul0 = element("ul");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t5 = space();
    			h11 = element("h1");
    			t6 = text(t6_value);
    			t7 = space();
    			t8 = text(/*$currentChapterKey*/ ctx[2]);
    			t9 = text(":");
    			t10 = space();
    			ul1 = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(`mask ${/*$showSidemenu*/ ctx[5] ? 'foreground' : ''}`) + " svelte-1m2jr2d"));
    			add_location(div, file$2, 76, 0, 2417);
    			option0.__value = "allgroupidtag";
    			option0.value = option0.__value;
    			add_location(option0, file$2, 86, 8, 2664);
    			option1.__value = "allgrouperrorsidtag";
    			option1.value = option1.__value;
    			add_location(option1, file$2, 87, 8, 2737);
    			attr_dev(select, "class", "svelte-1m2jr2d");
    			if (/*selectedGroup*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[9].call(select));
    			add_location(select, file$2, 85, 6, 2620);
    			attr_dev(span, "class", "select-dropdown");
    			add_location(span, file$2, 84, 4, 2583);
    			attr_dev(h10, "class", "svelte-1m2jr2d");
    			add_location(h10, file$2, 83, 2, 2574);
    			attr_dev(ul0, "class", "chapters svelte-1m2jr2d");
    			add_location(ul0, file$2, 95, 2, 2987);
    			attr_dev(h11, "class", "svelte-1m2jr2d");
    			add_location(h11, file$2, 109, 2, 3424);
    			attr_dev(ul1, "class", "links-here svelte-1m2jr2d");
    			add_location(ul1, file$2, 110, 2, 3484);
    			attr_dev(aside, "class", aside_class_value = "" + (null_to_empty(/*$showSidemenu*/ ctx[5] ? 'foreground' : '') + " svelte-1m2jr2d"));
    			add_location(aside, file$2, 82, 0, 2522);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, aside, anchor);
    			append_dev(aside, h10);
    			append_dev(h10, span);
    			append_dev(span, select);
    			append_dev(select, option0);
    			append_dev(option0, t1);
    			append_dev(select, option1);
    			append_dev(option1, t2);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(select, null);
    			}

    			select_option(select, /*selectedGroup*/ ctx[0]);
    			append_dev(aside, t3);
    			mount_component(actionbuttons, aside, null);
    			append_dev(aside, t4);
    			append_dev(aside, ul0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(ul0, null);
    			}

    			append_dev(aside, t5);
    			append_dev(aside, h11);
    			append_dev(h11, t6);
    			append_dev(h11, t7);
    			append_dev(h11, t8);
    			append_dev(h11, t9);
    			append_dev(aside, t10);
    			append_dev(aside, ul1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", /*click_handler*/ ctx[8], false, false, false),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[9])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*$showSidemenu*/ 32 && div_class_value !== (div_class_value = "" + (null_to_empty(`mask ${/*$showSidemenu*/ ctx[5] ? 'foreground' : ''}`) + " svelte-1m2jr2d"))) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if ((!current || dirty & /*$_*/ 64) && t1_value !== (t1_value = /*$_*/ ctx[6]('sidemenu.allgroup') + "")) set_data_dev(t1, t1_value);
    			if ((!current || dirty & /*$_*/ 64) && t2_value !== (t2_value = /*$_*/ ctx[6]('sidemenu.allgrouperrors') + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*$bookIndex*/ 8) {
    				each_value_4 = [.../*$bookIndex*/ ctx[3].groups];
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_4(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_4.length;
    			}

    			if (dirty & /*selectedGroup, $bookIndex*/ 9) {
    				select_option(select, /*selectedGroup*/ ctx[0]);
    			}

    			if (dirty & /*filterChapters, $currentChapterKey, goToChapter, chapterErrors*/ 148) {
    				each_value_2 = /*filterChapters*/ ctx[4];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(ul0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_2.length;
    			}

    			if ((!current || dirty & /*$_*/ 64) && t6_value !== (t6_value = /*$_*/ ctx[6]("sidemenu.linkshere") + "")) set_data_dev(t6, t6_value);
    			if (!current || dirty & /*$currentChapterKey*/ 4) set_data_dev(t8, /*$currentChapterKey*/ ctx[2]);

    			if (dirty & /*linksHere, $currentChapterKey, goToChapter, $bookIndex*/ 14) {
    				each_value = /*linksHere*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty & /*$showSidemenu*/ 32 && aside_class_value !== (aside_class_value = "" + (null_to_empty(/*$showSidemenu*/ ctx[5] ? 'foreground' : '') + " svelte-1m2jr2d"))) {
    				attr_dev(aside, "class", aside_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(actionbuttons.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(actionbuttons.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(aside);
    			destroy_each(each_blocks_2, detaching);
    			destroy_component(actionbuttons);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let filterChapters;
    	let linksHere;
    	let $currentChapterKey;
    	let $bookIndex;
    	let $showSidemenu;
    	let $_;
    	validate_store(currentChapterKey, 'currentChapterKey');
    	component_subscribe($$self, currentChapterKey, $$value => $$invalidate(2, $currentChapterKey = $$value));
    	validate_store(bookIndex, 'bookIndex');
    	component_subscribe($$self, bookIndex, $$value => $$invalidate(3, $bookIndex = $$value));
    	validate_store(showSidemenu, 'showSidemenu');
    	component_subscribe($$self, showSidemenu, $$value => $$invalidate(5, $showSidemenu = $$value));
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(6, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sidebar', slots, []);
    	let selectedGroup = 'allgroupidtag';

    	const setBookKey = key => {
    		book.update(() => ({ key }));
    		set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);
    	};

    	const chapterErrors = (key, chapter) => {
    		const linksHere = $bookIndex.linksToChapter.get(key);
    		const hasEntering = linksHere && linksHere.size > 0;
    		const hasExiting = chapter.links && chapter.links.size > 0 || chapter.flags && chapter.flags.length > 0;

    		return (hasEntering ? '' : '<i class="icon-help"></i>') + (hasEntering && hasExiting
    		? ''
    		: '<i class="icon-right"></i>') + (hasExiting ? '' : '<i class="icon-help"></i>');
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sidebar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);

    	function select_change_handler() {
    		selectedGroup = select_value(this);
    		($$invalidate(0, selectedGroup), $$invalidate(3, $bookIndex));
    	}

    	const click_handler_1 = key => goToChapter(key);
    	const click_handler_2 = key => goToChapter(key);

    	$$self.$capture_state = () => ({
    		_: X,
    		tick,
    		bookIndex,
    		currentChapterKey,
    		goToChapter,
    		scrollIntoView,
    		showSidemenu,
    		ActionButtons,
    		selectedGroup,
    		setBookKey,
    		chapterErrors,
    		linksHere,
    		filterChapters,
    		$currentChapterKey,
    		$bookIndex,
    		$showSidemenu,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedGroup' in $$props) $$invalidate(0, selectedGroup = $$props.selectedGroup);
    		if ('linksHere' in $$props) $$invalidate(1, linksHere = $$props.linksHere);
    		if ('filterChapters' in $$props) $$invalidate(4, filterChapters = $$props.filterChapters);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$currentChapterKey*/ 4) {
    			{
    				if ($currentChapterKey != '') {
    					(async () => {
    						await tick();

    						try {
    							scrollIntoView(document.querySelector('aside ul.chapters li.selected'), {
    								behavior: 'smooth',
    								scrollMode: 'if-needed'
    							});
    						} catch(e) {
    							
    						}
    					})();
    				} else {
    					(async () => {
    						await tick();

    						try {
    							scrollIntoView(document.querySelector('aside ul.chapters li'), {
    								behavior: 'smooth',
    								scrollMode: 'if-needed'
    							});
    						} catch(e) {
    							
    						}
    					})();
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*$bookIndex, selectedGroup*/ 9) {
    			{
    				if (![...$bookIndex.groups, 'allgroupidtag', 'allgrouperrorsidtag'].includes(selectedGroup)) {
    					$$invalidate(0, selectedGroup = 'allgroupidtag');
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*$bookIndex, selectedGroup*/ 9) {
    			$$invalidate(4, filterChapters = [...$bookIndex.chapters].filter(([key, chapter]) => {
    				if (!selectedGroup || selectedGroup == 'allgroupidtag') return true;

    				if (selectedGroup == 'allgrouperrorsidtag') {
    					const linksHere = $bookIndex.linksToChapter.get(key);
    					const hasEntering = linksHere && linksHere.size > 0;
    					const hasExiting = chapter.links && chapter.links.size > 0 || chapter.flags && chapter.flags.length > 0;
    					return !hasEntering || !hasExiting;
    				}

    				const group = chapter.group;
    				return group && group == selectedGroup;
    			}));
    		}

    		if ($$self.$$.dirty & /*$bookIndex, $currentChapterKey*/ 12) {
    			// Regex per matchare i link in markdown
    			$$invalidate(1, linksHere = [...$bookIndex.linksToChapter.get($currentChapterKey) || new Set()]);
    		}
    	};

    	return [
    		selectedGroup,
    		linksHere,
    		$currentChapterKey,
    		$bookIndex,
    		filterChapters,
    		$showSidemenu,
    		$_,
    		chapterErrors,
    		click_handler,
    		select_change_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Sidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sidebar",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/components/LocalOnboarding.svelte generated by Svelte v3.44.3 */

    const { Object: Object_1 } = globals;
    const file$1 = "src/components/LocalOnboarding.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (40:0) {:else}
    function create_else_block$1(ctx) {
    	let div3;
    	let div1;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;
    	let button;
    	let t1_value = /*$_*/ ctx[3]('app.openlocal') + "";
    	let t1;
    	let br;
    	let t2;
    	let t3;
    	let div2;
    	let t4;
    	let p;
    	let mounted;
    	let dispose;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 11,
    		error: 12
    	};

    	handle_promise(window.appGetVersion(), info);
    	let each_value = /*recentParsed*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div1 = element("div");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			button = element("button");
    			t1 = text(t1_value);
    			br = element("br");
    			t2 = space();
    			info.block.c();
    			t3 = space();
    			div2 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			p = element("p");
    			p.textContent = `Magebook editor - v ${manifest.version}`;
    			if (!src_url_equal(img.src, img_src_value = "./static/img/logo.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "logo");
    			attr_dev(img, "class", "svelte-6rjfbb");
    			add_location(img, file$1, 42, 4, 888);
    			attr_dev(button, "class", "ok");
    			add_location(button, file$1, 44, 6, 974);
    			add_location(br, file$1, 44, 74, 1042);
    			set_style(div0, "margin-left", "50px");
    			add_location(div0, file$1, 43, 4, 937);
    			set_style(div1, "display", "flex");
    			set_style(div1, "align-items", "center");
    			set_style(div1, "margin-top", "20px");
    			add_location(div1, file$1, 41, 2, 817);
    			attr_dev(div2, "class", "card-container svelte-6rjfbb");
    			add_location(div2, file$1, 60, 2, 1467);
    			add_location(p, file$1, 74, 2, 1975);
    			attr_dev(div3, "class", "dialog-container svelte-6rjfbb");
    			add_location(div3, file$1, 40, 0, 784);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div1);
    			append_dev(div1, img);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(button, t1);
    			append_dev(div0, br);
    			append_dev(div0, t2);
    			info.block.m(div0, info.anchor = null);
    			info.mount = () => div0;
    			info.anchor = null;
    			append_dev(div3, t3);
    			append_dev(div3, div2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div2, null);
    			}

    			append_dev(div3, t4);
    			append_dev(div3, p);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*newFile*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*$_*/ 8 && t1_value !== (t1_value = /*$_*/ ctx[3]('app.openlocal') + "")) set_data_dev(t1, t1_value);
    			update_await_block_branch(info, ctx, dirty);

    			if (dirty & /*appPath, recentParsed, Date*/ 4) {
    				each_value = /*recentParsed*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			info.block.d();
    			info.token = null;
    			info = null;
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(40:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (33:0) {#if updating}
    function create_if_block$1(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let p;
    	let t1;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			p = element("p");
    			t1 = text(/*updatingMsg*/ ctx[1]);
    			attr_dev(div0, "class", "spinner-1 svelte-6rjfbb");
    			add_location(div0, file$1, 35, 4, 707);
    			add_location(p, file$1, 36, 4, 741);
    			attr_dev(div1, "class", "dialog-container svelte-6rjfbb");
    			add_location(div1, file$1, 34, 2, 672);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t0);
    			append_dev(div1, p);
    			append_dev(p, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*updatingMsg*/ 2) set_data_dev(t1, /*updatingMsg*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(33:0) {#if updating}",
    		ctx
    	});

    	return block;
    }

    // (55:6) {:catch error}
    function create_catch_block(ctx) {
    	let p;
    	let t_value = /*error*/ ctx[12].message + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			set_style(p, "color", "red");
    			add_location(p, file$1, 55, 8, 1387);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(55:6) {:catch error}",
    		ctx
    	});

    	return block;
    }

    // (48:6) {:then version}
    function create_then_block(ctx) {
    	let if_block_anchor;
    	let if_block = /*version*/ ctx[11] != manifest.version && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*version*/ ctx[11] != manifest.version) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(48:6) {:then version}",
    		ctx
    	});

    	return block;
    }

    // (49:8) {#if version != manifest.version}
    function create_if_block_1$1(ctx) {
    	let button;
    	let t0;
    	let t1_value = /*version*/ ctx[11] + "";
    	let t1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			t0 = text("Update to v ");
    			t1 = text(t1_value);
    			attr_dev(button, "class", "error");
    			add_location(button, file$1, 49, 10, 1176);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(49:8) {#if version != manifest.version}",
    		ctx
    	});

    	return block;
    }

    // (46:37)          <!-- -->       {:then version}
    function create_pending_block(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(46:37)          <!-- -->       {:then version}",
    		ctx
    	});

    	return block;
    }

    // (62:4) {#each recentParsed as recentBook}
    function create_each_block(ctx) {
    	let div6;
    	let div2;
    	let div0;
    	let t0_value = (/*recentBook*/ ctx[8].title || "") + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2_value = /*recentBook*/ ctx[8].path + "";
    	let t2;
    	let t3;
    	let div5;
    	let div3;
    	let t4_value = new Date(/*recentBook*/ ctx[8].timestamp * 1000).toLocaleDateString() + "";
    	let t4;
    	let t5;
    	let div4;
    	let t6_value = new Date(/*recentBook*/ ctx[8].timestamp * 1000).toLocaleTimeString() + "";
    	let t6;
    	let t7;
    	let mounted;
    	let dispose;

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[7](/*recentBook*/ ctx[8]);
    	}

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			div5 = element("div");
    			div3 = element("div");
    			t4 = text(t4_value);
    			t5 = space();
    			div4 = element("div");
    			t6 = text(t6_value);
    			t7 = space();
    			set_style(div0, "font-weight", "bold");
    			add_location(div0, file$1, 64, 8, 1644);
    			add_location(div1, file$1, 65, 8, 1714);
    			set_style(div2, "flex-grow", "1");
    			add_location(div2, file$1, 63, 6, 1609);
    			add_location(div3, file$1, 68, 8, 1776);
    			add_location(div4, file$1, 69, 8, 1856);
    			add_location(div5, file$1, 67, 6, 1762);
    			attr_dev(div6, "class", "card svelte-6rjfbb");
    			add_location(div6, file$1, 62, 4, 1539);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div2);
    			append_dev(div2, div0);
    			append_dev(div0, t0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, t2);
    			append_dev(div6, t3);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div3, t4);
    			append_dev(div5, t5);
    			append_dev(div5, div4);
    			append_dev(div4, t6);
    			append_dev(div6, t7);

    			if (!mounted) {
    				dispose = listen_dev(div6, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*recentParsed*/ 4 && t0_value !== (t0_value = (/*recentBook*/ ctx[8].title || "") + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*recentParsed*/ 4 && t2_value !== (t2_value = /*recentBook*/ ctx[8].path + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*recentParsed*/ 4 && t4_value !== (t4_value = new Date(/*recentBook*/ ctx[8].timestamp * 1000).toLocaleDateString() + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*recentParsed*/ 4 && t6_value !== (t6_value = new Date(/*recentBook*/ ctx[8].timestamp * 1000).toLocaleTimeString() + "")) set_data_dev(t6, t6_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(62:4) {#each recentParsed as recentBook}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*updating*/ ctx[0]) return create_if_block$1;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $recentFiles;
    	let $_;
    	validate_store(recentFiles, 'recentFiles');
    	component_subscribe($$self, recentFiles, $$value => $$invalidate(5, $recentFiles = $$value));
    	validate_store(X, '_');
    	component_subscribe($$self, X, $$value => $$invalidate(3, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LocalOnboarding', slots, []);
    	let updating = false;
    	let updatingMsg = "Updating";

    	const newFile = async () => {
    		appPath.set(await window.dialogFile($_('app.openlocal')));
    	};

    	let recentParsed = [];
    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LocalOnboarding> was created with unknown prop '${key}'`);
    	});

    	const click_handler = async () => {
    		$$invalidate(0, updating = true);
    		$$invalidate(1, updatingMsg = await window.appUpdate());
    	};

    	const click_handler_1 = recentBook => appPath.set(recentBook.path);

    	$$self.$capture_state = () => ({
    		appPath,
    		recentFiles,
    		_: X,
    		manifest,
    		updating,
    		updatingMsg,
    		newFile,
    		recentParsed,
    		$recentFiles,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ('updating' in $$props) $$invalidate(0, updating = $$props.updating);
    		if ('updatingMsg' in $$props) $$invalidate(1, updatingMsg = $$props.updatingMsg);
    		if ('recentParsed' in $$props) $$invalidate(2, recentParsed = $$props.recentParsed);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$recentFiles*/ 32) {
    			{
    				let recent = [];

    				if ($recentFiles) {
    					Object.entries($recentFiles).forEach(([key, val]) => {
    						const data = JSON.parse(val.Data);

    						recent.push({
    							path: decodeURIComponent(key),
    							title: data.title,
    							timestamp: val.Timestamp
    						});
    					});

    					$$invalidate(2, recentParsed = recent.sort((a, b) => b.timestamp - a.timestamp));
    				}
    			}
    		}
    	};

    	return [
    		updating,
    		updatingMsg,
    		recentParsed,
    		$_,
    		newFile,
    		$recentFiles,
    		click_handler,
    		click_handler_1
    	];
    }

    class LocalOnboarding extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LocalOnboarding",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.44.3 */
    const file = "src/App.svelte";

    // (31:0) {:else}
    function create_else_block(ctx) {
    	let t0;
    	let dialogs;
    	let t1;
    	let navbar;
    	let t2;
    	let sidebar;
    	let t3;
    	let editor;
    	let current;
    	let if_block = !/*$isLoaded*/ ctx[2] && create_if_block_1(ctx);
    	dialogs = new Dialogs({ $$inline: true });
    	navbar = new Navbar({ $$inline: true });
    	sidebar = new Sidebar({ $$inline: true });
    	editor = new Editor({ $$inline: true });

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			t0 = space();
    			create_component(dialogs.$$.fragment);
    			t1 = space();
    			create_component(navbar.$$.fragment);
    			t2 = space();
    			create_component(sidebar.$$.fragment);
    			t3 = space();
    			create_component(editor.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(dialogs, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(navbar, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(sidebar, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(editor, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (!/*$isLoaded*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1(ctx);
    					if_block.c();
    					if_block.m(t0.parentNode, t0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dialogs.$$.fragment, local);
    			transition_in(navbar.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			transition_in(editor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dialogs.$$.fragment, local);
    			transition_out(navbar.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			transition_out(editor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(dialogs, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(navbar, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(sidebar, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(editor, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(31:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (29:0) {#if $isApp && $appPath == ''}
    function create_if_block(ctx) {
    	let localonboarding;
    	let current;
    	localonboarding = new LocalOnboarding({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(localonboarding.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(localonboarding, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(localonboarding.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(localonboarding.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(localonboarding, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(29:0) {#if $isApp && $appPath == ''}",
    		ctx
    	});

    	return block;
    }

    // (32:2) {#if !$isLoaded}
    function create_if_block_1(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let t0;
    	let p;
    	let t1;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			p = element("p");
    			t1 = text(/*$initError*/ ctx[3]);
    			attr_dev(div0, "class", "spinner-1");
    			add_location(div0, file, 34, 8, 1158);
    			set_style(p, "color", "white");
    			add_location(p, file, 35, 8, 1196);
    			attr_dev(div1, "class", "dialog");
    			set_style(div1, "text-align", "center");
    			set_style(div1, "margin-top", "10vh");
    			add_location(div1, file, 33, 6, 1084);
    			attr_dev(div2, "class", "loading-mask svelte-129291h");
    			add_location(div2, file, 32, 4, 1051);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div1, t0);
    			append_dev(div1, p);
    			append_dev(p, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$initError*/ 8) set_data_dev(t1, /*$initError*/ ctx[3]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(32:2) {#if !$isLoaded}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$isApp*/ ctx[0] && /*$appPath*/ ctx[1] == '') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window, "keydown", handleShortcuts, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $bookIndex;
    	let $isApp;
    	let $appPath;
    	let $isLoaded;
    	let $initError;
    	validate_store(bookIndex, 'bookIndex');
    	component_subscribe($$self, bookIndex, $$value => $$invalidate(4, $bookIndex = $$value));
    	validate_store(isApp, 'isApp');
    	component_subscribe($$self, isApp, $$value => $$invalidate(0, $isApp = $$value));
    	validate_store(appPath, 'appPath');
    	component_subscribe($$self, appPath, $$value => $$invalidate(1, $appPath = $$value));
    	validate_store(isLoaded, 'isLoaded');
    	component_subscribe($$self, isLoaded, $$value => $$invalidate(2, $isLoaded = $$value));
    	validate_store(initError, 'initError');
    	component_subscribe($$self, initError, $$value => $$invalidate(3, $initError = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		_: X,
    		Dialogs,
    		Navbar,
    		Editor,
    		Sidebar,
    		LocalOnboarding,
    		bookIndex,
    		isLoaded,
    		handleShortcuts,
    		isApp,
    		appPath,
    		initError,
    		$bookIndex,
    		$isApp,
    		$appPath,
    		$isLoaded,
    		$initError
    	});

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$bookIndex*/ 16) {
    			{
    				if (!(/bot|google|baidu|bing|msn|duckduckbot|teoma|slurp|yandex/i).test(navigator.userAgent)) {
    					if ($bookIndex && $bookIndex.properties.title) {
    						document.title = $bookIndex.properties.title + " - Magebook";
    					}
    				}
    			}
    		}
    	};

    	return [$isApp, $appPath, $isLoaded, $initError, $bookIndex];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const dialogs$1 = {
    	confirm: "Confirm?",
    	error: "Error",
    	ok: "Ok",
    	cancel: "Cancel",
    	chapter: {
    		add: "Add chapter",
    		edit: "Edit chapter",
    		"delete": "Chapter “%1” will be deleted",
    		exists: "Chapter already exists",
    		sort: "Chapters will be sorted. This will change the book structure permanently.",
    		compact: "Chapters will be renamed so no number will be missing in the middle. This will change the book structure permanently.",
    		name: "Key*",
    		title: "Title",
    		group: "Group*",
    		hint: "*Key and Group should contain only alphanumeric characters (a-z,A-Z,0-9)"
    	},
    	newbook: {
    		"new": "Create a New Book",
    		title: "Title",
    		author: "Author",
    		hint: "You can recover the previous book with <b>File -> Recent sessions</b>"
    	},
    	newfirebook: {
    		"new": "Create or load a New Book",
    		book: "Book name",
    		getStarted: "Con questa funzione puoi collegare Magebook al tuo account Google, così da creare libri che si possono modificare in simultanea, proprio come i Documenti Google.<br>Prima di iniziare, dovrai collegare Magebook al tuo account <a href=\"../docs/it/index.html#/?id=progetti-collaborativi\">seguendo questa guida</a>."
    	},
    	shuffle: {
    		title: "Shuffle",
    		hint: "Shuffle chapters with numeric key. You may choose to shuffle only chapters belonging to some groups, or to exclude chapters based on their flags. You should save a copy of your book before shuffling.",
    		group: "Group filter",
    		flags: "Exclude flags",
    		savecopy: "Save a copy"
    	},
    	lock: {
    		title: "Warning",
    		text: "Another tab has written changes on this local session. If you overwrite, those changes will be lost. You can open a new session instead, and recover the other session with the <br><b>File -> Recent sessions</b> tool.",
    		"new": "Open in new session",
    		overwrite: "Overwrite"
    	},
    	graph: {
    		loading: "Loading graph...",
    		open: "Open in new tab"
    	}
    };
    const navbar$1 = {
    	file: {
    		title: "File",
    		"new": "New",
    		newFire: "New collaborative",
    		share: "Share",
    		open: "Open...",
    		save: "Save",
    		recover: "Recent sessions"
    	},
    	book: {
    		title: "Book",
    		graph: "View graph",
    		shuffle: "Shuffle",
    		sort: "Sort chapters",
    		compact: "Compact chapters"
    	},
    	"export": {
    		title: "Export",
    		docx: "Word (.docx)",
    		fodt: "Libreoffice (.fodt)",
    		xlgc: "LibroGameCreator 3",
    		json: "Json",
    		vuejs: "Vue.js"
    	},
    	help: {
    		title: "Help",
    		guide: "Guide",
    		guidefile: "https://librogamesland.github.io/magebook",
    		forum: "Lgl forum",
    		about: "About"
    	}
    };
    const sidemenu$1 = {
    	toggle: "Toggle sidemenu",
    	chapters: "Chapters",
    	allgroup: "All chapters",
    	allgrouperrors: "Without links from/to",
    	linkshere: "Links to",
    	actions: {
    		goback: "Go back",
    		add: "Add entity (ctrl+R)",
    		edit: "Edit entity (ctrl+E)",
    		"delete": "Delete entity (ctrl+D)"
    	}
    };
    const editor$1 = {
    	buttons: {
    		find: "Find (ctrl+F)",
    		undo: "Undo last change (ctrl+Z)",
    		redo: "Redo last change (ctrl+shift+Z)",
    		quicklink: "Link to the first avaiable chapter (ctrl+K)",
    		link: "Add link (ctrl+L)"
    	}
    };
    const about$1 = {
    	contact: "Contact me",
    	text: "Magebook is a gamebook web editor developed by <b>Luca Fabbian</b> with support of Lgl community,\ninspired by LibroGameCreator3 by <b>Matteo Poropat</b>."
    };
    const books$1 = {
    	local: "# Book title\nauthor: Name and Surname\n\n\n### 1\nChapter example. You may edit this chapter thanks to the buttons on the right sidemenu.\nThis is a link going to [](#2). Links are done with [Text](#chapter), where text may be blank (it will be filled automagically).\n\n\n### Chapter with a long title {#2}\nThis is the second chapter. Chapters may include *italic* or **bold** text. <b>Bold</b>, <i>italic</i>, and <u>underline</u> are fine as well.\n",
    	fire: "# %1\nauthor: Name and Surname\n\n\n### 1\nQuesto è un libro collaborativo memorizzato sul tuo account Google e che può essere modificato da più persone contemporaneamente. Salva questa pagina fra i segnalibri del tuo browser e inviala a chi vuoi, vedrai le modifiche sincronizzate in tempo reale.\n"
    };
    const app$1 = {
    	openlocal: "Create or open local file",
    	openfire: "Create or access collaborative book",
    	chooseother: "Choose another book"
    };
    var en = {
    	dialogs: dialogs$1,
    	navbar: navbar$1,
    	sidemenu: sidemenu$1,
    	editor: editor$1,
    	about: about$1,
    	books: books$1,
    	app: app$1
    };

    const dialogs = {
    	confirm: "Confermi?",
    	error: "Errore",
    	ok: "Ok",
    	cancel: "Annulla",
    	chapter: {
    		add: "Aggiungi paragrafo",
    		edit: "Modifica paragrafo",
    		"delete": "Il paragrafo “%1” verrà eliminato",
    		exist: "Questo paragrafo esiste già",
    		sort: "I paragrafi saranno spostati così da rispettare l'ordine di numero.",
    		compact: "I paragrafi verranno rinominati in modo da avere numeri consecutivi, senza buchi in mezzo.",
    		name: "Key*",
    		title: "Titolo",
    		group: "Gruppo*",
    		hint: "*Key e Gruppo dovrebbero contenere solo caratteri alfanumerici (a-z, A-Z, 0-9)"
    	},
    	newbook: {
    		"new": "Crea un nuovo Libro",
    		title: "Titolo",
    		author: "Autore",
    		hint: "Puoi recuperare il libro precedente da <b>File -> Sessioni recenti</b>"
    	},
    	newfirebook: {
    		"new": "Crea o accedi a un Libro Collaborativo",
    		book: "Nome libro",
    		getStarted: "Con questa funzione puoi collegare Magebook al tuo account Google, così da creare libri che si possono modificare in simultanea, proprio come i Documenti Google.<br>Prima di iniziare, dovrai collegare Magebook al tuo account <a target=\"_blank\" href=\"https://librogamesland.github.io/magebook/#/?id=progetti-collaborativi\">seguendo questa guida</a>."
    	},
    	shuffle: {
    		title: "Rimescola",
    		hint: "Rimescola i paragrafi con chiave numerica. Puoi scegliere di mescolare solo i paragrafi che fanno parte di alcuni gruppi, o di escludere i paragrafi con determinati simboli. Per sicurezza, dovresti salvare una copia del libro prima di mescolare.",
    		group: "Filtro gruppi",
    		flags: "Escludi simboli",
    		savecopy: "Salva una copia"
    	},
    	lock: {
    		title: "Attenzione",
    		text: "Un'altra tab ha modificato i dati di questa sessione. Se sovrascrivi, quei cambiamenti verranno persi. Se vuoi mantenere entrambe le versioni, puoi creare una nuova sessione e recuperare quella vecchia con <br><b>File -> Sessioni recenti</b>.",
    		"new": "Apri nuova sessione",
    		overwrite: "Sovrascrivi"
    	},
    	graph: {
    		loading: "Caricamento grafo...",
    		open: "Apri un una nuova pagina"
    	}
    };
    const navbar = {
    	file: {
    		title: "File",
    		"new": "Nuovo",
    		newFire: "Nuovo collaborativo",
    		share: "Condividi",
    		open: "Apri...",
    		save: "Salva",
    		recover: "Sessioni recenti"
    	},
    	book: {
    		title: "Libro",
    		graph: "Visualizza grafico",
    		shuffle: "Rimescola",
    		sort: "Riordina paragrafi",
    		compact: "Compatta paragrafi"
    	},
    	"export": {
    		title: "Esporta",
    		docx: "Word (.docx)",
    		fodt: "Libreoffice (.fodt)",
    		xlgc: "LibroGameCreator 3",
    		json: "Json",
    		vuejs: "Vue.js"
    	},
    	help: {
    		title: "Aiuto",
    		guide: "Guida",
    		guidefile: "https://librogamesland.github.io/magebook",
    		forum: "Forum Lgl",
    		about: "Info"
    	}
    };
    const sidemenu = {
    	toggle: "Apri menu laterale",
    	chapters: "Paragrafi",
    	allgroup: "Tutti i paragrafi",
    	allgrouperrors: "Senza entrata/uscita",
    	linkshere: "Link al par.",
    	actions: {
    		goback: "Vai indietro",
    		add: "Aggiungi entità (ctrl+R)",
    		edit: "Modifica entità (ctrl+E)",
    		"delete": "Elimina entità (ctrl+D)"
    	}
    };
    const editor = {
    	buttons: {
    		find: "Cerca (ctrl+F)",
    		undo: "Annulla ultimo cambiamento (ctrl+Z)",
    		redo: "Ripristina ultimo cambiamento (ctrl+shift+Z)",
    		quicklink: "Link al primo paragrafo disponibile (ctrl+K)",
    		link: "Aggiungi link (ctrl+L)"
    	}
    };
    const about = {
    	contact: "Contattami",
    	text: "Magebook è un editor di librogame sviluppato da <b>Luca Fabbian</b> con il supporto della community di Lgl,\nispirato a LibroGameCreator3 di <b>Matteo Poropat</b>."
    };
    const books = {
    	local: "# Titolo\nauthor: Nome e Cognome\n\n\n### 1\nEsempio di paragrafo. Puoi modificarlo sfruttando i tasti a destra.\nQuesto è un link verso il paragrafo [](#2). I link sono nel formato [Testo](#paragrafo), dove Testo è opzionale.\n\n\n### Paragrafo con titolo {#2}\nQuesto è il secondo paragrafo. I paragrafi possono contenere anche testo in *corsivo* o **grassetto**.  Puoi anche usare <b>grassetto</b>, <i>corsivo</i>, o <u>sottolineato</u>.\n",
    	fire: "# %1\nauthor: Nome e Cognome\n\n\n### 1\nQuesto è un libro collaborativo memorizzato sul tuo account Google e che può essere modificato da più persone contemporaneamente. Salva questa pagina fra i segnalibri del tuo browser e inviala a chi vuoi, vedrai le modifiche sincronizzate in tempo reale.\n"
    };
    const app = {
    	openlocal: "Crea o apri file",
    	openfire: "Crea o accedi a un libro collaborativo",
    	chooseother: "Apri un altro"
    };
    var it = {
    	dialogs,
    	navbar,
    	sidemenu,
    	editor,
    	about,
    	books,
    	app
    };

    /* Punto d'ingresso dell'applicazione
     Importa App.svelte, aggiunge supporto multilingua e offline
     @Luca Fabbian - v1.0 */

    const locale = I().split('-')[0];
    m('en', en);
    m('it', it);
    $({ fallbackLocale: 'en', initialLocale: locale });  



    // Offline support
    if ('serviceWorker' in navigator && !get_store_value(isApp)) {
      // Use the window load event to keep the page load performant
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('./sw.js');
      });
    }

    new App({
      target: document.body,
    });

})();
//# sourceMappingURL=bundle.js.map
