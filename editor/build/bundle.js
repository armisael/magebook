(function () {
    'use strict';

    function noop() { }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value = ret) {
        store.set(value);
        return ret;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty$1() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function self$1(fn) {
        return function (event) {
            // @ts-ignore
            if (event.target === this)
                fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.35.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    var isMergeableObject = function isMergeableObject(value) {
    	return isNonNullObject(value)
    		&& !isSpecial(value)
    };

    function isNonNullObject(value) {
    	return !!value && typeof value === 'object'
    }

    function isSpecial(value) {
    	var stringValue = Object.prototype.toString.call(value);

    	return stringValue === '[object RegExp]'
    		|| stringValue === '[object Date]'
    		|| isReactElement(value)
    }

    // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
    var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

    function isReactElement(value) {
    	return value.$$typeof === REACT_ELEMENT_TYPE
    }

    function emptyTarget(val) {
    	return Array.isArray(val) ? [] : {}
    }

    function cloneUnlessOtherwiseSpecified(value, options) {
    	return (options.clone !== false && options.isMergeableObject(value))
    		? deepmerge(emptyTarget(value), value, options)
    		: value
    }

    function defaultArrayMerge(target, source, options) {
    	return target.concat(source).map(function(element) {
    		return cloneUnlessOtherwiseSpecified(element, options)
    	})
    }

    function getMergeFunction(key, options) {
    	if (!options.customMerge) {
    		return deepmerge
    	}
    	var customMerge = options.customMerge(key);
    	return typeof customMerge === 'function' ? customMerge : deepmerge
    }

    function getEnumerableOwnPropertySymbols(target) {
    	return Object.getOwnPropertySymbols
    		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    			return target.propertyIsEnumerable(symbol)
    		})
    		: []
    }

    function getKeys(target) {
    	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
    }

    function propertyIsOnObject(object, property) {
    	try {
    		return property in object
    	} catch(_) {
    		return false
    	}
    }

    // Protects from prototype poisoning and unexpected merging up the prototype chain.
    function propertyIsUnsafe(target, key) {
    	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
    		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
    			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
    }

    function mergeObject(target, source, options) {
    	var destination = {};
    	if (options.isMergeableObject(target)) {
    		getKeys(target).forEach(function(key) {
    			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    		});
    	}
    	getKeys(source).forEach(function(key) {
    		if (propertyIsUnsafe(target, key)) {
    			return
    		}

    		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
    			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    		} else {
    			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    		}
    	});
    	return destination
    }

    function deepmerge(target, source, options) {
    	options = options || {};
    	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    	// implementations can use it. The caller may not replace it.
    	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

    	var sourceIsArray = Array.isArray(source);
    	var targetIsArray = Array.isArray(target);
    	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    	if (!sourceAndTargetTypesMatch) {
    		return cloneUnlessOtherwiseSpecified(source, options)
    	} else if (sourceIsArray) {
    		return options.arrayMerge(target, source, options)
    	} else {
    		return mergeObject(target, source, options)
    	}
    }

    deepmerge.all = function deepmergeAll(array, options) {
    	if (!Array.isArray(array)) {
    		throw new Error('first argument should be an array')
    	}

    	return array.reduce(function(prev, next) {
    		return deepmerge(prev, next, options)
    	}, {})
    };

    var deepmerge_1 = deepmerge;

    var cjs = deepmerge_1;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$1 = function() {
        __assign$1 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };

    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }

    var TYPE;
    (function (TYPE) {
        /**
         * Raw text
         */
        TYPE[TYPE["literal"] = 0] = "literal";
        /**
         * Variable w/o any format, e.g `var` in `this is a {var}`
         */
        TYPE[TYPE["argument"] = 1] = "argument";
        /**
         * Variable w/ number format
         */
        TYPE[TYPE["number"] = 2] = "number";
        /**
         * Variable w/ date format
         */
        TYPE[TYPE["date"] = 3] = "date";
        /**
         * Variable w/ time format
         */
        TYPE[TYPE["time"] = 4] = "time";
        /**
         * Variable w/ select format
         */
        TYPE[TYPE["select"] = 5] = "select";
        /**
         * Variable w/ plural format
         */
        TYPE[TYPE["plural"] = 6] = "plural";
        /**
         * Only possible within plural argument.
         * This is the `#` symbol that will be substituted with the count.
         */
        TYPE[TYPE["pound"] = 7] = "pound";
        /**
         * XML-like tag
         */
        TYPE[TYPE["tag"] = 8] = "tag";
    })(TYPE || (TYPE = {}));
    var SKELETON_TYPE;
    (function (SKELETON_TYPE) {
        SKELETON_TYPE[SKELETON_TYPE["number"] = 0] = "number";
        SKELETON_TYPE[SKELETON_TYPE["dateTime"] = 1] = "dateTime";
    })(SKELETON_TYPE || (SKELETON_TYPE = {}));
    /**
     * Type Guards
     */
    function isLiteralElement(el) {
        return el.type === TYPE.literal;
    }
    function isArgumentElement(el) {
        return el.type === TYPE.argument;
    }
    function isNumberElement(el) {
        return el.type === TYPE.number;
    }
    function isDateElement(el) {
        return el.type === TYPE.date;
    }
    function isTimeElement(el) {
        return el.type === TYPE.time;
    }
    function isSelectElement(el) {
        return el.type === TYPE.select;
    }
    function isPluralElement(el) {
        return el.type === TYPE.plural;
    }
    function isPoundElement(el) {
        return el.type === TYPE.pound;
    }
    function isTagElement(el) {
        return el.type === TYPE.tag;
    }
    function isNumberSkeleton(el) {
        return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);
    }
    function isDateTimeSkeleton(el) {
        return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);
    }

    /**
     * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
     * with some tweaks
     */
    var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
    /**
     * Parse Date time skeleton into Intl.DateTimeFormatOptions
     * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * @public
     * @param skeleton skeleton string
     */
    function parseDateTimeSkeleton(skeleton) {
        var result = {};
        skeleton.replace(DATE_TIME_REGEX, function (match) {
            var len = match.length;
            switch (match[0]) {
                // Era
                case 'G':
                    result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
                    break;
                // Year
                case 'y':
                    result.year = len === 2 ? '2-digit' : 'numeric';
                    break;
                case 'Y':
                case 'u':
                case 'U':
                case 'r':
                    throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
                // Quarter
                case 'q':
                case 'Q':
                    throw new RangeError('`q/Q` (quarter) patterns are not supported');
                // Month
                case 'M':
                case 'L':
                    result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
                    break;
                // Week
                case 'w':
                case 'W':
                    throw new RangeError('`w/W` (week) patterns are not supported');
                case 'd':
                    result.day = ['numeric', '2-digit'][len - 1];
                    break;
                case 'D':
                case 'F':
                case 'g':
                    throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
                // Weekday
                case 'E':
                    result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
                    break;
                case 'e':
                    if (len < 4) {
                        throw new RangeError('`e..eee` (weekday) patterns are not supported');
                    }
                    result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                    break;
                case 'c':
                    if (len < 4) {
                        throw new RangeError('`c..ccc` (weekday) patterns are not supported');
                    }
                    result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
                    break;
                // Period
                case 'a': // AM, PM
                    result.hour12 = true;
                    break;
                case 'b': // am, pm, noon, midnight
                case 'B': // flexible day periods
                    throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
                // Hour
                case 'h':
                    result.hourCycle = 'h12';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'H':
                    result.hourCycle = 'h23';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'K':
                    result.hourCycle = 'h11';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'k':
                    result.hourCycle = 'h24';
                    result.hour = ['numeric', '2-digit'][len - 1];
                    break;
                case 'j':
                case 'J':
                case 'C':
                    throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
                // Minute
                case 'm':
                    result.minute = ['numeric', '2-digit'][len - 1];
                    break;
                // Second
                case 's':
                    result.second = ['numeric', '2-digit'][len - 1];
                    break;
                case 'S':
                case 'A':
                    throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');
                // Zone
                case 'z': // 1..3, 4: specific non-location format
                    result.timeZoneName = len < 4 ? 'short' : 'long';
                    break;
                case 'Z': // 1..3, 4, 5: The ISO8601 varios formats
                case 'O': // 1, 4: miliseconds in day short, long
                case 'v': // 1, 4: generic non-location format
                case 'V': // 1, 2, 3, 4: time zone ID or city
                case 'X': // 1, 2, 3, 4: The ISO8601 varios formats
                case 'x': // 1, 2, 3, 4: The ISO8601 varios formats
                    throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');
            }
            return '';
        });
        return result;
    }
    function icuUnitToEcma(unit) {
        return unit.replace(/^(.*?)-/, '');
    }
    var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
    var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?$/g;
    var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
    var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
    function parseSignificantPrecision(str) {
        var result = {};
        str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
            // @@@ case
            if (typeof g2 !== 'string') {
                result.minimumSignificantDigits = g1.length;
                result.maximumSignificantDigits = g1.length;
            }
            // @@@+ case
            else if (g2 === '+') {
                result.minimumSignificantDigits = g1.length;
            }
            // .### case
            else if (g1[0] === '#') {
                result.maximumSignificantDigits = g1.length;
            }
            // .@@## or .@@@ case
            else {
                result.minimumSignificantDigits = g1.length;
                result.maximumSignificantDigits =
                    g1.length + (typeof g2 === 'string' ? g2.length : 0);
            }
            return '';
        });
        return result;
    }
    function parseSign(str) {
        switch (str) {
            case 'sign-auto':
                return {
                    signDisplay: 'auto',
                };
            case 'sign-accounting':
            case '()':
                return {
                    currencySign: 'accounting',
                };
            case 'sign-always':
            case '+!':
                return {
                    signDisplay: 'always',
                };
            case 'sign-accounting-always':
            case '()!':
                return {
                    signDisplay: 'always',
                    currencySign: 'accounting',
                };
            case 'sign-except-zero':
            case '+?':
                return {
                    signDisplay: 'exceptZero',
                };
            case 'sign-accounting-except-zero':
            case '()?':
                return {
                    signDisplay: 'exceptZero',
                    currencySign: 'accounting',
                };
            case 'sign-never':
            case '+_':
                return {
                    signDisplay: 'never',
                };
        }
    }
    function parseConciseScientificAndEngineeringStem(stem) {
        // Engineering
        var result;
        if (stem[0] === 'E' && stem[1] === 'E') {
            result = {
                notation: 'engineering',
            };
            stem = stem.slice(2);
        }
        else if (stem[0] === 'E') {
            result = {
                notation: 'scientific',
            };
            stem = stem.slice(1);
        }
        if (result) {
            var signDisplay = stem.slice(0, 2);
            if (signDisplay === '+!') {
                result.signDisplay = 'always';
                stem = stem.slice(2);
            }
            else if (signDisplay === '+?') {
                result.signDisplay = 'exceptZero';
                stem = stem.slice(2);
            }
            if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
                throw new Error('Malformed concise eng/scientific notation');
            }
            result.minimumIntegerDigits = stem.length;
        }
        return result;
    }
    function parseNotationOptions(opt) {
        var result = {};
        var signOpts = parseSign(opt);
        if (signOpts) {
            return signOpts;
        }
        return result;
    }
    /**
     * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
     */
    function parseNumberSkeleton(tokens) {
        var result = {};
        for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
            var token = tokens_1[_i];
            switch (token.stem) {
                case 'percent':
                case '%':
                    result.style = 'percent';
                    continue;
                case '%x100':
                    result.style = 'percent';
                    result.scale = 100;
                    continue;
                case 'currency':
                    result.style = 'currency';
                    result.currency = token.options[0];
                    continue;
                case 'group-off':
                case ',_':
                    result.useGrouping = false;
                    continue;
                case 'precision-integer':
                case '.':
                    result.maximumFractionDigits = 0;
                    continue;
                case 'measure-unit':
                case 'unit':
                    result.style = 'unit';
                    result.unit = icuUnitToEcma(token.options[0]);
                    continue;
                case 'compact-short':
                case 'K':
                    result.notation = 'compact';
                    result.compactDisplay = 'short';
                    continue;
                case 'compact-long':
                case 'KK':
                    result.notation = 'compact';
                    result.compactDisplay = 'long';
                    continue;
                case 'scientific':
                    result = __assign$1(__assign$1(__assign$1({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign$1(__assign$1({}, all), parseNotationOptions(opt))); }, {}));
                    continue;
                case 'engineering':
                    result = __assign$1(__assign$1(__assign$1({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign$1(__assign$1({}, all), parseNotationOptions(opt))); }, {}));
                    continue;
                case 'notation-simple':
                    result.notation = 'standard';
                    continue;
                // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h
                case 'unit-width-narrow':
                    result.currencyDisplay = 'narrowSymbol';
                    result.unitDisplay = 'narrow';
                    continue;
                case 'unit-width-short':
                    result.currencyDisplay = 'code';
                    result.unitDisplay = 'short';
                    continue;
                case 'unit-width-full-name':
                    result.currencyDisplay = 'name';
                    result.unitDisplay = 'long';
                    continue;
                case 'unit-width-iso-code':
                    result.currencyDisplay = 'symbol';
                    continue;
                case 'scale':
                    result.scale = parseFloat(token.options[0]);
                    continue;
                // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
                case 'integer-width':
                    if (token.options.length > 1) {
                        throw new RangeError('integer-width stems only accept a single optional option');
                    }
                    token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {
                        if (g1) {
                            result.minimumIntegerDigits = g2.length;
                        }
                        else if (g3 && g4) {
                            throw new Error('We currently do not support maximum integer digits');
                        }
                        else if (g5) {
                            throw new Error('We currently do not support exact integer digits');
                        }
                        return '';
                    });
                    continue;
            }
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width
            if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
                result.minimumIntegerDigits = token.stem.length;
                continue;
            }
            if (FRACTION_PRECISION_REGEX.test(token.stem)) {
                // Precision
                // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
                // precision-integer case
                if (token.options.length > 1) {
                    throw new RangeError('Fraction-precision stems only accept a single optional option');
                }
                token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {
                    // .000* case (before ICU67 it was .000+)
                    if (g2 === '*') {
                        result.minimumFractionDigits = g1.length;
                    }
                    // .### case
                    else if (g3 && g3[0] === '#') {
                        result.maximumFractionDigits = g3.length;
                    }
                    // .00## case
                    else if (g4 && g5) {
                        result.minimumFractionDigits = g4.length;
                        result.maximumFractionDigits = g4.length + g5.length;
                    }
                    else {
                        result.minimumFractionDigits = g1.length;
                        result.maximumFractionDigits = g1.length;
                    }
                    return '';
                });
                if (token.options.length) {
                    result = __assign$1(__assign$1({}, result), parseSignificantPrecision(token.options[0]));
                }
                continue;
            }
            // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision
            if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
                result = __assign$1(__assign$1({}, result), parseSignificantPrecision(token.stem));
                continue;
            }
            var signOpts = parseSign(token.stem);
            if (signOpts) {
                result = __assign$1(__assign$1({}, result), signOpts);
            }
            var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
            if (conciseScientificAndEngineeringOpts) {
                result = __assign$1(__assign$1({}, result), conciseScientificAndEngineeringOpts);
            }
        }
        return result;
    }

    // @ts-nocheck
    var SyntaxError$1 = /** @class */ (function (_super) {
        __extends(SyntaxError, _super);
        function SyntaxError(message, expected, found, location) {
            var _this = _super.call(this) || this;
            _this.message = message;
            _this.expected = expected;
            _this.found = found;
            _this.location = location;
            _this.name = "SyntaxError";
            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(_this, SyntaxError);
            }
            return _this;
        }
        SyntaxError.buildMessage = function (expected, found) {
            function hex(ch) {
                return ch.charCodeAt(0).toString(16).toUpperCase();
            }
            function literalEscape(s) {
                return s
                    .replace(/\\/g, "\\\\")
                    .replace(/"/g, "\\\"")
                    .replace(/\0/g, "\\0")
                    .replace(/\t/g, "\\t")
                    .replace(/\n/g, "\\n")
                    .replace(/\r/g, "\\r")
                    .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
            }
            function classEscape(s) {
                return s
                    .replace(/\\/g, "\\\\")
                    .replace(/\]/g, "\\]")
                    .replace(/\^/g, "\\^")
                    .replace(/-/g, "\\-")
                    .replace(/\0/g, "\\0")
                    .replace(/\t/g, "\\t")
                    .replace(/\n/g, "\\n")
                    .replace(/\r/g, "\\r")
                    .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                    .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
            }
            function describeExpectation(expectation) {
                switch (expectation.type) {
                    case "literal":
                        return "\"" + literalEscape(expectation.text) + "\"";
                    case "class":
                        var escapedParts = expectation.parts.map(function (part) {
                            return Array.isArray(part)
                                ? classEscape(part[0]) + "-" + classEscape(part[1])
                                : classEscape(part);
                        });
                        return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                    case "any":
                        return "any character";
                    case "end":
                        return "end of input";
                    case "other":
                        return expectation.description;
                }
            }
            function describeExpected(expected1) {
                var descriptions = expected1.map(describeExpectation);
                var i;
                var j;
                descriptions.sort();
                if (descriptions.length > 0) {
                    for (i = 1, j = 1; i < descriptions.length; i++) {
                        if (descriptions[i - 1] !== descriptions[i]) {
                            descriptions[j] = descriptions[i];
                            j++;
                        }
                    }
                    descriptions.length = j;
                }
                switch (descriptions.length) {
                    case 1:
                        return descriptions[0];
                    case 2:
                        return descriptions[0] + " or " + descriptions[1];
                    default:
                        return descriptions.slice(0, -1).join(", ")
                            + ", or "
                            + descriptions[descriptions.length - 1];
                }
            }
            function describeFound(found1) {
                return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
            }
            return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
        };
        return SyntaxError;
    }(Error));
    function peg$parse(input, options) {
        options = options !== undefined ? options : {};
        var peg$FAILED = {};
        var peg$startRuleFunctions = { start: peg$parsestart };
        var peg$startRuleFunction = peg$parsestart;
        var peg$c0 = function () { return !ignoreTag; };
        var peg$c1 = function (x) { return x; };
        var peg$c2 = function () { return ignoreTag; };
        var peg$c3 = "<";
        var peg$c4 = peg$literalExpectation("<", false);
        var peg$c5 = function (parts) {
            return parts.join('');
        };
        var peg$c6 = function () { return '<'; };
        var peg$c7 = function (messageText) {
            return __assign$1({ type: TYPE.literal, value: messageText }, insertLocation());
        };
        var peg$c8 = "#";
        var peg$c9 = peg$literalExpectation("#", false);
        var peg$c10 = function () {
            return __assign$1({ type: TYPE.pound }, insertLocation());
        };
        var peg$c11 = peg$otherExpectation("tagElement");
        var peg$c12 = function (open, children, close) {
            if (open !== close) {
                error("Mismatch tag \"" + open + "\" !== \"" + close + "\"", location());
            }
            return __assign$1({ type: TYPE.tag, value: open, children: children }, insertLocation());
        };
        var peg$c13 = "/>";
        var peg$c14 = peg$literalExpectation("/>", false);
        var peg$c15 = function (value) {
            return __assign$1({ type: TYPE.literal, value: value.join('') }, insertLocation());
        };
        var peg$c16 = ">";
        var peg$c17 = peg$literalExpectation(">", false);
        var peg$c18 = function (tag) { return tag; };
        var peg$c19 = "</";
        var peg$c20 = peg$literalExpectation("</", false);
        var peg$c21 = peg$otherExpectation("argumentElement");
        var peg$c22 = "{";
        var peg$c23 = peg$literalExpectation("{", false);
        var peg$c24 = "}";
        var peg$c25 = peg$literalExpectation("}", false);
        var peg$c26 = function (value) {
            return __assign$1({ type: TYPE.argument, value: value }, insertLocation());
        };
        var peg$c27 = peg$otherExpectation("numberSkeletonId");
        var peg$c28 = /^['\/{}]/;
        var peg$c29 = peg$classExpectation(["'", "/", "{", "}"], false, false);
        var peg$c30 = peg$anyExpectation();
        var peg$c31 = peg$otherExpectation("numberSkeletonTokenOption");
        var peg$c32 = "/";
        var peg$c33 = peg$literalExpectation("/", false);
        var peg$c34 = function (option) { return option; };
        var peg$c35 = peg$otherExpectation("numberSkeletonToken");
        var peg$c36 = function (stem, options) {
            return { stem: stem, options: options };
        };
        var peg$c37 = function (tokens) {
            return __assign$1({ type: SKELETON_TYPE.number, tokens: tokens, parsedOptions: shouldParseSkeleton ? parseNumberSkeleton(tokens) : {} }, insertLocation());
        };
        var peg$c38 = "::";
        var peg$c39 = peg$literalExpectation("::", false);
        var peg$c40 = function (skeleton) { return skeleton; };
        var peg$c41 = function () { messageCtx.push('numberArgStyle'); return true; };
        var peg$c42 = function (style) {
            messageCtx.pop();
            return style.replace(/\s*$/, '');
        };
        var peg$c43 = ",";
        var peg$c44 = peg$literalExpectation(",", false);
        var peg$c45 = "number";
        var peg$c46 = peg$literalExpectation("number", false);
        var peg$c47 = function (value, type, style) {
            return __assign$1({ type: type === 'number' ? TYPE.number : type === 'date' ? TYPE.date : TYPE.time, style: style && style[2], value: value }, insertLocation());
        };
        var peg$c48 = "'";
        var peg$c49 = peg$literalExpectation("'", false);
        var peg$c50 = /^[^']/;
        var peg$c51 = peg$classExpectation(["'"], true, false);
        var peg$c52 = /^[^a-zA-Z'{}]/;
        var peg$c53 = peg$classExpectation([["a", "z"], ["A", "Z"], "'", "{", "}"], true, false);
        var peg$c54 = /^[a-zA-Z]/;
        var peg$c55 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
        var peg$c56 = function (pattern) {
            return __assign$1({ type: SKELETON_TYPE.dateTime, pattern: pattern, parsedOptions: shouldParseSkeleton ? parseDateTimeSkeleton(pattern) : {} }, insertLocation());
        };
        var peg$c57 = function () { messageCtx.push('dateOrTimeArgStyle'); return true; };
        var peg$c58 = "date";
        var peg$c59 = peg$literalExpectation("date", false);
        var peg$c60 = "time";
        var peg$c61 = peg$literalExpectation("time", false);
        var peg$c62 = "plural";
        var peg$c63 = peg$literalExpectation("plural", false);
        var peg$c64 = "selectordinal";
        var peg$c65 = peg$literalExpectation("selectordinal", false);
        var peg$c66 = "offset:";
        var peg$c67 = peg$literalExpectation("offset:", false);
        var peg$c68 = function (value, pluralType, offset, options) {
            return __assign$1({ type: TYPE.plural, pluralType: pluralType === 'plural' ? 'cardinal' : 'ordinal', value: value, offset: offset ? offset[2] : 0, options: options.reduce(function (all, _a) {
                    var id = _a.id, value = _a.value, optionLocation = _a.location;
                    if (id in all) {
                        error("Duplicate option \"" + id + "\" in plural element: \"" + text() + "\"", location());
                    }
                    all[id] = {
                        value: value,
                        location: optionLocation
                    };
                    return all;
                }, {}) }, insertLocation());
        };
        var peg$c69 = "select";
        var peg$c70 = peg$literalExpectation("select", false);
        var peg$c71 = function (value, options) {
            return __assign$1({ type: TYPE.select, value: value, options: options.reduce(function (all, _a) {
                    var id = _a.id, value = _a.value, optionLocation = _a.location;
                    if (id in all) {
                        error("Duplicate option \"" + id + "\" in select element: \"" + text() + "\"", location());
                    }
                    all[id] = {
                        value: value,
                        location: optionLocation
                    };
                    return all;
                }, {}) }, insertLocation());
        };
        var peg$c72 = "=";
        var peg$c73 = peg$literalExpectation("=", false);
        var peg$c74 = function (id) { messageCtx.push('select'); return true; };
        var peg$c75 = function (id, value) {
            messageCtx.pop();
            return __assign$1({ id: id,
                value: value }, insertLocation());
        };
        var peg$c76 = function (id) { messageCtx.push('plural'); return true; };
        var peg$c77 = function (id, value) {
            messageCtx.pop();
            return __assign$1({ id: id,
                value: value }, insertLocation());
        };
        var peg$c78 = peg$otherExpectation("whitespace");
        var peg$c79 = /^[\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
        var peg$c80 = peg$classExpectation([["\t", "\r"], " ", "\x85", "\xA0", "\u1680", ["\u2000", "\u200A"], "\u2028", "\u2029", "\u202F", "\u205F", "\u3000"], false, false);
        var peg$c81 = peg$otherExpectation("syntax pattern");
        var peg$c82 = /^[!-\/:-@[-\^`{-~\xA1-\xA7\xA9\xAB\xAC\xAE\xB0\xB1\xB6\xBB\xBF\xD7\xF7\u2010-\u2027\u2030-\u203E\u2041-\u2053\u2055-\u205E\u2190-\u245F\u2500-\u2775\u2794-\u2BFF\u2E00-\u2E7F\u3001-\u3003\u3008-\u3020\u3030\uFD3E\uFD3F\uFE45\uFE46]/;
        var peg$c83 = peg$classExpectation([["!", "/"], [":", "@"], ["[", "^"], "`", ["{", "~"], ["\xA1", "\xA7"], "\xA9", "\xAB", "\xAC", "\xAE", "\xB0", "\xB1", "\xB6", "\xBB", "\xBF", "\xD7", "\xF7", ["\u2010", "\u2027"], ["\u2030", "\u203E"], ["\u2041", "\u2053"], ["\u2055", "\u205E"], ["\u2190", "\u245F"], ["\u2500", "\u2775"], ["\u2794", "\u2BFF"], ["\u2E00", "\u2E7F"], ["\u3001", "\u3003"], ["\u3008", "\u3020"], "\u3030", "\uFD3E", "\uFD3F", "\uFE45", "\uFE46"], false, false);
        var peg$c84 = peg$otherExpectation("optional whitespace");
        var peg$c85 = peg$otherExpectation("number");
        var peg$c86 = "-";
        var peg$c87 = peg$literalExpectation("-", false);
        var peg$c88 = function (negative, num) {
            return num
                ? negative
                    ? -num
                    : num
                : 0;
        };
        var peg$c90 = peg$otherExpectation("double apostrophes");
        var peg$c91 = "''";
        var peg$c92 = peg$literalExpectation("''", false);
        var peg$c93 = function () { return "'"; };
        var peg$c94 = function (escapedChar, quotedChars) {
            return escapedChar + quotedChars.replace("''", "'");
        };
        var peg$c95 = function (x) {
            return (x !== '<' &&
                x !== '{' &&
                !(isInPluralOption() && x === '#') &&
                !(isNestedMessageText() && x === '}'));
        };
        var peg$c96 = "\n";
        var peg$c97 = peg$literalExpectation("\n", false);
        var peg$c98 = function (x) {
            return x === '<' || x === '>' || x === '{' || x === '}' || (isInPluralOption() && x === '#');
        };
        var peg$c99 = peg$otherExpectation("argNameOrNumber");
        var peg$c100 = peg$otherExpectation("validTag");
        var peg$c101 = peg$otherExpectation("argNumber");
        var peg$c102 = "0";
        var peg$c103 = peg$literalExpectation("0", false);
        var peg$c104 = function () { return 0; };
        var peg$c105 = /^[1-9]/;
        var peg$c106 = peg$classExpectation([["1", "9"]], false, false);
        var peg$c107 = /^[0-9]/;
        var peg$c108 = peg$classExpectation([["0", "9"]], false, false);
        var peg$c109 = function (digits) {
            return parseInt(digits.join(''), 10);
        };
        var peg$c110 = peg$otherExpectation("argName");
        var peg$c111 = peg$otherExpectation("tagName");
        var peg$currPos = 0;
        var peg$savedPos = 0;
        var peg$posDetailsCache = [{ line: 1, column: 1 }];
        var peg$maxFailPos = 0;
        var peg$maxFailExpected = [];
        var peg$silentFails = 0;
        var peg$result;
        if (options.startRule !== undefined) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
            return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
            return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function error(message, location1) {
            location1 = location1 !== undefined
                ? location1
                : peg$computeLocation(peg$savedPos, peg$currPos);
            throw peg$buildSimpleError(message, location1);
        }
        function peg$literalExpectation(text1, ignoreCase) {
            return { type: "literal", text: text1, ignoreCase: ignoreCase };
        }
        function peg$classExpectation(parts, inverted, ignoreCase) {
            return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
        }
        function peg$anyExpectation() {
            return { type: "any" };
        }
        function peg$endExpectation() {
            return { type: "end" };
        }
        function peg$otherExpectation(description) {
            return { type: "other", description: description };
        }
        function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos];
            var p;
            if (details) {
                return details;
            }
            else {
                p = pos - 1;
                while (!peg$posDetailsCache[p]) {
                    p--;
                }
                details = peg$posDetailsCache[p];
                details = {
                    line: details.line,
                    column: details.column
                };
                while (p < pos) {
                    if (input.charCodeAt(p) === 10) {
                        details.line++;
                        details.column = 1;
                    }
                    else {
                        details.column++;
                    }
                    p++;
                }
                peg$posDetailsCache[pos] = details;
                return details;
            }
        }
        function peg$computeLocation(startPos, endPos) {
            var startPosDetails = peg$computePosDetails(startPos);
            var endPosDetails = peg$computePosDetails(endPos);
            return {
                start: {
                    offset: startPos,
                    line: startPosDetails.line,
                    column: startPosDetails.column
                },
                end: {
                    offset: endPos,
                    line: endPosDetails.line,
                    column: endPosDetails.column
                }
            };
        }
        function peg$fail(expected1) {
            if (peg$currPos < peg$maxFailPos) {
                return;
            }
            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected1);
        }
        function peg$buildSimpleError(message, location1) {
            return new SyntaxError$1(message, [], "", location1);
        }
        function peg$buildStructuredError(expected1, found, location1) {
            return new SyntaxError$1(SyntaxError$1.buildMessage(expected1, found), expected1, found, location1);
        }
        function peg$parsestart() {
            var s0;
            s0 = peg$parsemessage();
            return s0;
        }
        function peg$parsemessage() {
            var s0, s1;
            s0 = [];
            s1 = peg$parsemessageElement();
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$parsemessageElement();
            }
            return s0;
        }
        function peg$parsemessageElement() {
            var s0, s1, s2;
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$c0();
            if (s1) {
                s1 = undefined;
            }
            else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsetagElement();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c1(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseliteralElement();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseargumentElement();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsesimpleFormatElement();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsepluralElement();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseselectElement();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parsepoundElement();
                                }
                            }
                        }
                    }
                }
            }
            return s0;
        }
        function peg$parsemessageText() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            peg$savedPos = peg$currPos;
            s1 = peg$c2();
            if (s1) {
                s1 = undefined;
            }
            else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsedoubleApostrophes();
                if (s3 === peg$FAILED) {
                    s3 = peg$parsequotedString();
                    if (s3 === peg$FAILED) {
                        s3 = peg$parseunquotedString();
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 60) {
                                s3 = peg$c3;
                                peg$currPos++;
                            }
                            else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c4);
                                }
                            }
                        }
                    }
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsedoubleApostrophes();
                        if (s3 === peg$FAILED) {
                            s3 = peg$parsequotedString();
                            if (s3 === peg$FAILED) {
                                s3 = peg$parseunquotedString();
                                if (s3 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 60) {
                                        s3 = peg$c3;
                                        peg$currPos++;
                                    }
                                    else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c4);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c5(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsedoubleApostrophes();
                if (s2 === peg$FAILED) {
                    s2 = peg$parsequotedString();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseunquotedString();
                        if (s2 === peg$FAILED) {
                            s2 = peg$parsenonTagStartingAngleBracket();
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parsedoubleApostrophes();
                        if (s2 === peg$FAILED) {
                            s2 = peg$parsequotedString();
                            if (s2 === peg$FAILED) {
                                s2 = peg$parseunquotedString();
                                if (s2 === peg$FAILED) {
                                    s2 = peg$parsenonTagStartingAngleBracket();
                                }
                            }
                        }
                    }
                }
                else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c5(s1);
                }
                s0 = s1;
            }
            return s0;
        }
        function peg$parsenonTagStartingAngleBracket() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            s2 = peg$parseopeningTag();
            if (s2 === peg$FAILED) {
                s2 = peg$parseclosingTag();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseselfClosingTag();
                }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
                s1 = undefined;
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                    s2 = peg$c3;
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c4);
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c6();
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseliteralElement() {
            var s0, s1;
            s0 = peg$currPos;
            s1 = peg$parsemessageText();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c7(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parsepoundElement() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
                s1 = peg$c8;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c10();
            }
            s0 = s1;
            return s0;
        }
        function peg$parsetagElement() {
            var s0, s1, s2, s3;
            peg$silentFails++;
            s0 = peg$parseselfClosingTag();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseopeningTag();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsemessage();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseclosingTag();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c12(s1, s2, s3);
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c11);
                }
            }
            return s0;
        }
        function peg$parseselfClosingTag() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 60) {
                s2 = peg$c3;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c4);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parsevalidTag();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c13) {
                            s5 = peg$c13;
                            peg$currPos += 2;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c14);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s2 = [s2, s3, s4, s5];
                            s1 = s2;
                        }
                        else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseopeningTag() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 60) {
                s1 = peg$c3;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c4);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsevalidTag();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                        s3 = peg$c16;
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c17);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c18(s2);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseclosingTag() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c19) {
                s1 = peg$c19;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c20);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsevalidTag();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                        s3 = peg$c16;
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c17);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c18(s2);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseargumentElement() {
            var s0, s1, s2, s3, s4, s5;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c22;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c23);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseargNameOrNumber();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s5 = peg$c24;
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c25);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c26(s3);
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c21);
                }
            }
            return s0;
        }
        function peg$parsenumberSkeletonId() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parsewhiteSpace();
            if (s4 === peg$FAILED) {
                if (peg$c28.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c29);
                    }
                }
            }
            peg$silentFails--;
            if (s4 === peg$FAILED) {
                s3 = undefined;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c30);
                    }
                }
                if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$currPos;
                    s3 = peg$currPos;
                    peg$silentFails++;
                    s4 = peg$parsewhiteSpace();
                    if (s4 === peg$FAILED) {
                        if (peg$c28.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c29);
                            }
                        }
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                        s3 = undefined;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c30);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s3 = [s3, s4];
                            s2 = s3;
                        }
                        else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
            }
            else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            }
            else {
                s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c27);
                }
            }
            return s0;
        }
        function peg$parsenumberSkeletonTokenOption() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 47) {
                s1 = peg$c32;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c33);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsenumberSkeletonId();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c34(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c31);
                }
            }
            return s0;
        }
        function peg$parsenumberSkeletonToken() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsenumberSkeletonId();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsenumberSkeletonTokenOption();
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$parsenumberSkeletonTokenOption();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c36(s2, s3);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c35);
                }
            }
            return s0;
        }
        function peg$parsenumberSkeleton() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsenumberSkeletonToken();
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parsenumberSkeletonToken();
                }
            }
            else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c37(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parsenumberArgStyle() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c38) {
                s1 = peg$c38;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c39);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsenumberSkeleton();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c40(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                peg$savedPos = peg$currPos;
                s1 = peg$c41();
                if (s1) {
                    s1 = undefined;
                }
                else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsemessageText();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c42(s2);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            return s0;
        }
        function peg$parsenumberFormatElement() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c22;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c23);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseargNameOrNumber();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c43;
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c44);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse_();
                                if (s6 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c45) {
                                        s7 = peg$c45;
                                        peg$currPos += 6;
                                    }
                                    else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c46);
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parse_();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 44) {
                                                s10 = peg$c43;
                                                peg$currPos++;
                                            }
                                            else {
                                                s10 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c44);
                                                }
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parse_();
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parsenumberArgStyle();
                                                    if (s12 !== peg$FAILED) {
                                                        s10 = [s10, s11, s12];
                                                        s9 = s10;
                                                    }
                                                    else {
                                                        peg$currPos = s9;
                                                        s9 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s9;
                                                    s9 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s9;
                                                s9 = peg$FAILED;
                                            }
                                            if (s9 === peg$FAILED) {
                                                s9 = null;
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parse_();
                                                if (s10 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 125) {
                                                        s11 = peg$c24;
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s11 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c25);
                                                        }
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c47(s3, s7, s9);
                                                        s0 = s1;
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parsedateTimeSkeletonLiteral() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c48;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c49);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsedoubleApostrophes();
                if (s3 === peg$FAILED) {
                    if (peg$c50.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c51);
                        }
                    }
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsedoubleApostrophes();
                        if (s3 === peg$FAILED) {
                            if (peg$c50.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c51);
                                }
                            }
                        }
                    }
                }
                else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                        s3 = peg$c48;
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c49);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s1 = [s1, s2, s3];
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = [];
                s1 = peg$parsedoubleApostrophes();
                if (s1 === peg$FAILED) {
                    if (peg$c52.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c53);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    while (s1 !== peg$FAILED) {
                        s0.push(s1);
                        s1 = peg$parsedoubleApostrophes();
                        if (s1 === peg$FAILED) {
                            if (peg$c52.test(input.charAt(peg$currPos))) {
                                s1 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c53);
                                }
                            }
                        }
                    }
                }
                else {
                    s0 = peg$FAILED;
                }
            }
            return s0;
        }
        function peg$parsedateTimeSkeletonPattern() {
            var s0, s1;
            s0 = [];
            if (peg$c54.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c55);
                }
            }
            if (s1 !== peg$FAILED) {
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    if (peg$c54.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c55);
                        }
                    }
                }
            }
            else {
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parsedateTimeSkeleton() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = [];
            s3 = peg$parsedateTimeSkeletonLiteral();
            if (s3 === peg$FAILED) {
                s3 = peg$parsedateTimeSkeletonPattern();
            }
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsedateTimeSkeletonLiteral();
                    if (s3 === peg$FAILED) {
                        s3 = peg$parsedateTimeSkeletonPattern();
                    }
                }
            }
            else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s1 = input.substring(s1, peg$currPos);
            }
            else {
                s1 = s2;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c56(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parsedateOrTimeArgStyle() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c38) {
                s1 = peg$c38;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c39);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsedateTimeSkeleton();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c40(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                peg$savedPos = peg$currPos;
                s1 = peg$c57();
                if (s1) {
                    s1 = undefined;
                }
                else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsemessageText();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c42(s2);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            return s0;
        }
        function peg$parsedateOrTimeFormatElement() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c22;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c23);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseargNameOrNumber();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c43;
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c44);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse_();
                                if (s6 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 4) === peg$c58) {
                                        s7 = peg$c58;
                                        peg$currPos += 4;
                                    }
                                    else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c59);
                                        }
                                    }
                                    if (s7 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 4) === peg$c60) {
                                            s7 = peg$c60;
                                            peg$currPos += 4;
                                        }
                                        else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c61);
                                            }
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parse_();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$currPos;
                                            if (input.charCodeAt(peg$currPos) === 44) {
                                                s10 = peg$c43;
                                                peg$currPos++;
                                            }
                                            else {
                                                s10 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c44);
                                                }
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parse_();
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parsedateOrTimeArgStyle();
                                                    if (s12 !== peg$FAILED) {
                                                        s10 = [s10, s11, s12];
                                                        s9 = s10;
                                                    }
                                                    else {
                                                        peg$currPos = s9;
                                                        s9 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s9;
                                                    s9 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s9;
                                                s9 = peg$FAILED;
                                            }
                                            if (s9 === peg$FAILED) {
                                                s9 = null;
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parse_();
                                                if (s10 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 125) {
                                                        s11 = peg$c24;
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s11 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c25);
                                                        }
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c47(s3, s7, s9);
                                                        s0 = s1;
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parsesimpleFormatElement() {
            var s0;
            s0 = peg$parsenumberFormatElement();
            if (s0 === peg$FAILED) {
                s0 = peg$parsedateOrTimeFormatElement();
            }
            return s0;
        }
        function peg$parsepluralElement() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c22;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c23);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseargNameOrNumber();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c43;
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c44);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse_();
                                if (s6 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c62) {
                                        s7 = peg$c62;
                                        peg$currPos += 6;
                                    }
                                    else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c63);
                                        }
                                    }
                                    if (s7 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 13) === peg$c64) {
                                            s7 = peg$c64;
                                            peg$currPos += 13;
                                        }
                                        else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c65);
                                            }
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parse_();
                                        if (s8 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 44) {
                                                s9 = peg$c43;
                                                peg$currPos++;
                                            }
                                            else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c44);
                                                }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parse_();
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$currPos;
                                                    if (input.substr(peg$currPos, 7) === peg$c66) {
                                                        s12 = peg$c66;
                                                        peg$currPos += 7;
                                                    }
                                                    else {
                                                        s12 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c67);
                                                        }
                                                    }
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parse_();
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = peg$parsenumber();
                                                            if (s14 !== peg$FAILED) {
                                                                s12 = [s12, s13, s14];
                                                                s11 = s12;
                                                            }
                                                            else {
                                                                peg$currPos = s11;
                                                                s11 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s11;
                                                            s11 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s11;
                                                        s11 = peg$FAILED;
                                                    }
                                                    if (s11 === peg$FAILED) {
                                                        s11 = null;
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parse_();
                                                        if (s12 !== peg$FAILED) {
                                                            s13 = [];
                                                            s14 = peg$parsepluralOption();
                                                            if (s14 !== peg$FAILED) {
                                                                while (s14 !== peg$FAILED) {
                                                                    s13.push(s14);
                                                                    s14 = peg$parsepluralOption();
                                                                }
                                                            }
                                                            else {
                                                                s13 = peg$FAILED;
                                                            }
                                                            if (s13 !== peg$FAILED) {
                                                                s14 = peg$parse_();
                                                                if (s14 !== peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 125) {
                                                                        s15 = peg$c24;
                                                                        peg$currPos++;
                                                                    }
                                                                    else {
                                                                        s15 = peg$FAILED;
                                                                        if (peg$silentFails === 0) {
                                                                            peg$fail(peg$c25);
                                                                        }
                                                                    }
                                                                    if (s15 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c68(s3, s7, s11, s13);
                                                                        s0 = s1;
                                                                    }
                                                                    else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                }
                                                                else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseselectElement() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c22;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c23);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseargNameOrNumber();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s5 = peg$c43;
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c44);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse_();
                                if (s6 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 6) === peg$c69) {
                                        s7 = peg$c69;
                                        peg$currPos += 6;
                                    }
                                    else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c70);
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parse_();
                                        if (s8 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 44) {
                                                s9 = peg$c43;
                                                peg$currPos++;
                                            }
                                            else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c44);
                                                }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parse_();
                                                if (s10 !== peg$FAILED) {
                                                    s11 = [];
                                                    s12 = peg$parseselectOption();
                                                    if (s12 !== peg$FAILED) {
                                                        while (s12 !== peg$FAILED) {
                                                            s11.push(s12);
                                                            s12 = peg$parseselectOption();
                                                        }
                                                    }
                                                    else {
                                                        s11 = peg$FAILED;
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parse_();
                                                        if (s12 !== peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 125) {
                                                                s13 = peg$c24;
                                                                peg$currPos++;
                                                            }
                                                            else {
                                                                s13 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c25);
                                                                }
                                                            }
                                                            if (s13 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$c71(s3, s11);
                                                                s0 = s1;
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parsepluralRuleSelectValue() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c72;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c73);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parsenumber();
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            }
            else {
                s0 = s1;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseargName();
            }
            return s0;
        }
        function peg$parseselectOption() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseargName();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 123) {
                            s4 = peg$c22;
                            peg$currPos++;
                        }
                        else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c23);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = peg$currPos;
                            s5 = peg$c74();
                            if (s5) {
                                s5 = undefined;
                            }
                            else {
                                s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsemessage();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 125) {
                                        s7 = peg$c24;
                                        peg$currPos++;
                                    }
                                    else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c25);
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c75(s2, s6);
                                        s0 = s1;
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parsepluralOption() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parsepluralRuleSelectValue();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 123) {
                            s4 = peg$c22;
                            peg$currPos++;
                        }
                        else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c23);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = peg$currPos;
                            s5 = peg$c76();
                            if (s5) {
                                s5 = undefined;
                            }
                            else {
                                s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsemessage();
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 125) {
                                        s7 = peg$c24;
                                        peg$currPos++;
                                    }
                                    else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c25);
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c77(s2, s6);
                                        s0 = s1;
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parsewhiteSpace() {
            var s0;
            peg$silentFails++;
            if (peg$c79.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c80);
                }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                if (peg$silentFails === 0) {
                    peg$fail(peg$c78);
                }
            }
            return s0;
        }
        function peg$parsepatternSyntax() {
            var s0;
            peg$silentFails++;
            if (peg$c82.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c83);
                }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                if (peg$silentFails === 0) {
                    peg$fail(peg$c81);
                }
            }
            return s0;
        }
        function peg$parse_() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsewhiteSpace();
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parsewhiteSpace();
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            }
            else {
                s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c84);
                }
            }
            return s0;
        }
        function peg$parsenumber() {
            var s0, s1, s2;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
                s1 = peg$c86;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c87);
                }
            }
            if (s1 === peg$FAILED) {
                s1 = null;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseargNumber();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c88(s1, s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c85);
                }
            }
            return s0;
        }
        function peg$parsedoubleApostrophes() {
            var s0, s1;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c91) {
                s1 = peg$c91;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c92);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c93();
            }
            s0 = s1;
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c90);
                }
            }
            return s0;
        }
        function peg$parsequotedString() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c48;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c49);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseescapedChar();
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = [];
                    if (input.substr(peg$currPos, 2) === peg$c91) {
                        s5 = peg$c91;
                        peg$currPos += 2;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c92);
                        }
                    }
                    if (s5 === peg$FAILED) {
                        if (peg$c50.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c51);
                            }
                        }
                    }
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (input.substr(peg$currPos, 2) === peg$c91) {
                            s5 = peg$c91;
                            peg$currPos += 2;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c92);
                            }
                        }
                        if (s5 === peg$FAILED) {
                            if (peg$c50.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c51);
                                }
                            }
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = input.substring(s3, peg$currPos);
                    }
                    else {
                        s3 = s4;
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                            s4 = peg$c48;
                            peg$currPos++;
                        }
                        else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c49);
                            }
                        }
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c94(s2, s3);
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseunquotedString() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c30);
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s3 = peg$c95(s2);
                if (s3) {
                    s3 = undefined;
                }
                else {
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 10) {
                    s1 = peg$c96;
                    peg$currPos++;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c97);
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            }
            else {
                s0 = s1;
            }
            return s0;
        }
        function peg$parseescapedChar() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.length > peg$currPos) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c30);
                }
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s3 = peg$c98(s2);
                if (s3) {
                    s3 = undefined;
                }
                else {
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            }
            else {
                s0 = s1;
            }
            return s0;
        }
        function peg$parseargNameOrNumber() {
            var s0, s1;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseargNumber();
            if (s1 === peg$FAILED) {
                s1 = peg$parseargName();
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            }
            else {
                s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c99);
                }
            }
            return s0;
        }
        function peg$parsevalidTag() {
            var s0, s1;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = peg$parseargNumber();
            if (s1 === peg$FAILED) {
                s1 = peg$parsetagName();
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            }
            else {
                s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c100);
                }
            }
            return s0;
        }
        function peg$parseargNumber() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 48) {
                s1 = peg$c102;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c103);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c104();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$currPos;
                if (peg$c105.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c106);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (peg$c107.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c108);
                        }
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        if (peg$c107.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c108);
                            }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    }
                    else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c109(s1);
                }
                s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c101);
                }
            }
            return s0;
        }
        function peg$parseargName() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parsewhiteSpace();
            if (s4 === peg$FAILED) {
                s4 = peg$parsepatternSyntax();
            }
            peg$silentFails--;
            if (s4 === peg$FAILED) {
                s3 = undefined;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c30);
                    }
                }
                if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$currPos;
                    s3 = peg$currPos;
                    peg$silentFails++;
                    s4 = peg$parsewhiteSpace();
                    if (s4 === peg$FAILED) {
                        s4 = peg$parsepatternSyntax();
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                        s3 = undefined;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c30);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s3 = [s3, s4];
                            s2 = s3;
                        }
                        else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
            }
            else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            }
            else {
                s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c110);
                }
            }
            return s0;
        }
        function peg$parsetagName() {
            var s0, s1, s2, s3, s4;
            peg$silentFails++;
            s0 = peg$currPos;
            s1 = [];
            if (input.charCodeAt(peg$currPos) === 45) {
                s2 = peg$c86;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c87);
                }
            }
            if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$currPos;
                peg$silentFails++;
                s4 = peg$parsewhiteSpace();
                if (s4 === peg$FAILED) {
                    s4 = peg$parsepatternSyntax();
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                    s3 = undefined;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c30);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (input.charCodeAt(peg$currPos) === 45) {
                        s2 = peg$c86;
                        peg$currPos++;
                    }
                    else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c87);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$currPos;
                        peg$silentFails++;
                        s4 = peg$parsewhiteSpace();
                        if (s4 === peg$FAILED) {
                            s4 = peg$parsepatternSyntax();
                        }
                        peg$silentFails--;
                        if (s4 === peg$FAILED) {
                            s3 = undefined;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c30);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                            }
                            else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                }
            }
            else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s0 = input.substring(s0, peg$currPos);
            }
            else {
                s0 = s1;
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c111);
                }
            }
            return s0;
        }
        var messageCtx = ['root'];
        function isNestedMessageText() {
            return messageCtx.length > 1;
        }
        function isInPluralOption() {
            return messageCtx[messageCtx.length - 1] === 'plural';
        }
        function insertLocation() {
            return options && options.captureLocation ? {
                location: location()
            } : {};
        }
        var ignoreTag = options && options.ignoreTag;
        var shouldParseSkeleton = options && options.shouldParseSkeleton;
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        }
        else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail(peg$endExpectation());
            }
            throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
                ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
                : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
    }
    var pegParse = peg$parse;

    var PLURAL_HASHTAG_REGEX = /(^|[^\\])#/g;
    /**
     * Whether to convert `#` in plural rule options
     * to `{var, number}`
     * @param el AST Element
     * @param pluralStack current plural stack
     */
    function normalizeHashtagInPlural(els) {
        els.forEach(function (el) {
            // If we're encountering a plural el
            if (!isPluralElement(el) && !isSelectElement(el)) {
                return;
            }
            // Go down the options and search for # in any literal element
            Object.keys(el.options).forEach(function (id) {
                var _a;
                var opt = el.options[id];
                // If we got a match, we have to split this
                // and inject a NumberElement in the middle
                var matchingLiteralElIndex = -1;
                var literalEl = undefined;
                for (var i = 0; i < opt.value.length; i++) {
                    var el_1 = opt.value[i];
                    if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {
                        matchingLiteralElIndex = i;
                        literalEl = el_1;
                        break;
                    }
                }
                if (literalEl) {
                    var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, "$1{" + el.value + ", number}");
                    var newEls = pegParse(newValue);
                    (_a = opt.value).splice.apply(_a, __spreadArray([matchingLiteralElIndex, 1], newEls));
                }
                normalizeHashtagInPlural(opt.value);
            });
        });
    }

    function parse(input, opts) {
        opts = __assign$1({ normalizeHashtagInPlural: true, shouldParseSkeleton: true }, (opts || {}));
        var els = pegParse(input, opts);
        if (opts.normalizeHashtagInPlural) {
            normalizeHashtagInPlural(els);
        }
        return els;
    }

    //
    // Main
    //

    function memoize (fn, options) {
      var cache = options && options.cache
        ? options.cache
        : cacheDefault;

      var serializer = options && options.serializer
        ? options.serializer
        : serializerDefault;

      var strategy = options && options.strategy
        ? options.strategy
        : strategyDefault;

      return strategy(fn, {
        cache: cache,
        serializer: serializer
      })
    }

    //
    // Strategy
    //

    function isPrimitive (value) {
      return value == null || typeof value === 'number' || typeof value === 'boolean' // || typeof value === "string" 'unsafe' primitive for our needs
    }

    function monadic (fn, cache, serializer, arg) {
      var cacheKey = isPrimitive(arg) ? arg : serializer(arg);

      var computedValue = cache.get(cacheKey);
      if (typeof computedValue === 'undefined') {
        computedValue = fn.call(this, arg);
        cache.set(cacheKey, computedValue);
      }

      return computedValue
    }

    function variadic (fn, cache, serializer) {
      var args = Array.prototype.slice.call(arguments, 3);
      var cacheKey = serializer(args);

      var computedValue = cache.get(cacheKey);
      if (typeof computedValue === 'undefined') {
        computedValue = fn.apply(this, args);
        cache.set(cacheKey, computedValue);
      }

      return computedValue
    }

    function assemble (fn, context, strategy, cache, serialize) {
      return strategy.bind(
        context,
        fn,
        cache,
        serialize
      )
    }

    function strategyDefault (fn, options) {
      var strategy = fn.length === 1 ? monadic : variadic;

      return assemble(
        fn,
        this,
        strategy,
        options.cache.create(),
        options.serializer
      )
    }

    function strategyVariadic (fn, options) {
      var strategy = variadic;

      return assemble(
        fn,
        this,
        strategy,
        options.cache.create(),
        options.serializer
      )
    }

    function strategyMonadic (fn, options) {
      var strategy = monadic;

      return assemble(
        fn,
        this,
        strategy,
        options.cache.create(),
        options.serializer
      )
    }

    //
    // Serializer
    //

    function serializerDefault () {
      return JSON.stringify(arguments)
    }

    //
    // Cache
    //

    function ObjectWithoutPrototypeCache () {
      this.cache = Object.create(null);
    }

    ObjectWithoutPrototypeCache.prototype.has = function (key) {
      return (key in this.cache)
    };

    ObjectWithoutPrototypeCache.prototype.get = function (key) {
      return this.cache[key]
    };

    ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
      this.cache[key] = value;
    };

    var cacheDefault = {
      create: function create () {
        return new ObjectWithoutPrototypeCache()
      }
    };

    //
    // API
    //

    var src = memoize;
    var strategies = {
      variadic: strategyVariadic,
      monadic: strategyMonadic
    };
    src.strategies = strategies;

    var memoize$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), src, {
        'default': src,
        strategies: strategies
    }));

    var ErrorCode;
    (function (ErrorCode) {
        // When we have a placeholder but no value to format
        ErrorCode["MISSING_VALUE"] = "MISSING_VALUE";
        // When value supplied is invalid
        ErrorCode["INVALID_VALUE"] = "INVALID_VALUE";
        // When we need specific Intl API but it's not available
        ErrorCode["MISSING_INTL_API"] = "MISSING_INTL_API";
    })(ErrorCode || (ErrorCode = {}));
    var FormatError = /** @class */ (function (_super) {
        __extends(FormatError, _super);
        function FormatError(msg, code, originalMessage) {
            var _this = _super.call(this, msg) || this;
            _this.code = code;
            _this.originalMessage = originalMessage;
            return _this;
        }
        FormatError.prototype.toString = function () {
            return "[formatjs Error: " + this.code + "] " + this.message;
        };
        return FormatError;
    }(Error));
    var InvalidValueError = /** @class */ (function (_super) {
        __extends(InvalidValueError, _super);
        function InvalidValueError(variableId, value, options, originalMessage) {
            return _super.call(this, "Invalid values for \"" + variableId + "\": \"" + value + "\". Options are \"" + Object.keys(options).join('", "') + "\"", ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueError;
    }(FormatError));
    var InvalidValueTypeError = /** @class */ (function (_super) {
        __extends(InvalidValueTypeError, _super);
        function InvalidValueTypeError(value, type, originalMessage) {
            return _super.call(this, "Value for \"" + value + "\" must be of type " + type, ErrorCode.INVALID_VALUE, originalMessage) || this;
        }
        return InvalidValueTypeError;
    }(FormatError));
    var MissingValueError = /** @class */ (function (_super) {
        __extends(MissingValueError, _super);
        function MissingValueError(variableId, originalMessage) {
            return _super.call(this, "The intl string context variable \"" + variableId + "\" was not provided to the string \"" + originalMessage + "\"", ErrorCode.MISSING_VALUE, originalMessage) || this;
        }
        return MissingValueError;
    }(FormatError));

    var PART_TYPE;
    (function (PART_TYPE) {
        PART_TYPE[PART_TYPE["literal"] = 0] = "literal";
        PART_TYPE[PART_TYPE["object"] = 1] = "object";
    })(PART_TYPE || (PART_TYPE = {}));
    function mergeLiteral(parts) {
        if (parts.length < 2) {
            return parts;
        }
        return parts.reduce(function (all, part) {
            var lastPart = all[all.length - 1];
            if (!lastPart ||
                lastPart.type !== PART_TYPE.literal ||
                part.type !== PART_TYPE.literal) {
                all.push(part);
            }
            else {
                lastPart.value += part.value;
            }
            return all;
        }, []);
    }
    function isFormatXMLElementFn(el) {
        return typeof el === 'function';
    }
    // TODO(skeleton): add skeleton support
    function formatToParts(els, locales, formatters, formats, values, currentPluralValue, 
    // For debugging
    originalMessage) {
        // Hot path for straight simple msg translations
        if (els.length === 1 && isLiteralElement(els[0])) {
            return [
                {
                    type: PART_TYPE.literal,
                    value: els[0].value,
                },
            ];
        }
        var result = [];
        for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
            var el = els_1[_i];
            // Exit early for string parts.
            if (isLiteralElement(el)) {
                result.push({
                    type: PART_TYPE.literal,
                    value: el.value,
                });
                continue;
            }
            // TODO: should this part be literal type?
            // Replace `#` in plural rules with the actual numeric value.
            if (isPoundElement(el)) {
                if (typeof currentPluralValue === 'number') {
                    result.push({
                        type: PART_TYPE.literal,
                        value: formatters.getNumberFormat(locales).format(currentPluralValue),
                    });
                }
                continue;
            }
            var varName = el.value;
            // Enforce that all required values are provided by the caller.
            if (!(values && varName in values)) {
                throw new MissingValueError(varName, originalMessage);
            }
            var value = values[varName];
            if (isArgumentElement(el)) {
                if (!value || typeof value === 'string' || typeof value === 'number') {
                    value =
                        typeof value === 'string' || typeof value === 'number'
                            ? String(value)
                            : '';
                }
                result.push({
                    type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                    value: value,
                });
                continue;
            }
            // Recursively format plural and select parts' option — which can be a
            // nested pattern structure. The choosing of the option to use is
            // abstracted-by and delegated-to the part helper object.
            if (isDateElement(el)) {
                var style = typeof el.style === 'string'
                    ? formats.date[el.style]
                    : isDateTimeSkeleton(el.style)
                        ? el.style.parsedOptions
                        : undefined;
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters
                        .getDateTimeFormat(locales, style)
                        .format(value),
                });
                continue;
            }
            if (isTimeElement(el)) {
                var style = typeof el.style === 'string'
                    ? formats.time[el.style]
                    : isDateTimeSkeleton(el.style)
                        ? el.style.parsedOptions
                        : undefined;
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters
                        .getDateTimeFormat(locales, style)
                        .format(value),
                });
                continue;
            }
            if (isNumberElement(el)) {
                var style = typeof el.style === 'string'
                    ? formats.number[el.style]
                    : isNumberSkeleton(el.style)
                        ? el.style.parsedOptions
                        : undefined;
                if (style && style.scale) {
                    value =
                        value *
                            (style.scale || 1);
                }
                result.push({
                    type: PART_TYPE.literal,
                    value: formatters
                        .getNumberFormat(locales, style)
                        .format(value),
                });
                continue;
            }
            if (isTagElement(el)) {
                var children = el.children, value_1 = el.value;
                var formatFn = values[value_1];
                if (!isFormatXMLElementFn(formatFn)) {
                    throw new InvalidValueTypeError(value_1, 'function', originalMessage);
                }
                var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
                var chunks = formatFn(parts.map(function (p) { return p.value; }));
                if (!Array.isArray(chunks)) {
                    chunks = [chunks];
                }
                result.push.apply(result, chunks.map(function (c) {
                    return {
                        type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,
                        value: c,
                    };
                }));
            }
            if (isSelectElement(el)) {
                var opt = el.options[value] || el.options.other;
                if (!opt) {
                    throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
                }
                result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
                continue;
            }
            if (isPluralElement(el)) {
                var opt = el.options["=" + value];
                if (!opt) {
                    if (!Intl.PluralRules) {
                        throw new FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n", ErrorCode.MISSING_INTL_API, originalMessage);
                    }
                    var rule = formatters
                        .getPluralRules(locales, { type: el.pluralType })
                        .select(value - (el.offset || 0));
                    opt = el.options[rule] || el.options.other;
                }
                if (!opt) {
                    throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
                }
                result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
                continue;
            }
        }
        return mergeLiteral(result);
    }

    /*
    Copyright (c) 2014, Yahoo! Inc. All rights reserved.
    Copyrights licensed under the New BSD License.
    See the accompanying LICENSE file for terms.
    */
    // -- MessageFormat --------------------------------------------------------
    function mergeConfig(c1, c2) {
        if (!c2) {
            return c1;
        }
        return __assign$1(__assign$1(__assign$1({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {
            all[k] = __assign$1(__assign$1({}, c1[k]), (c2[k] || {}));
            return all;
        }, {}));
    }
    function mergeConfigs(defaultConfig, configs) {
        if (!configs) {
            return defaultConfig;
        }
        return Object.keys(defaultConfig).reduce(function (all, k) {
            all[k] = mergeConfig(defaultConfig[k], configs[k]);
            return all;
        }, __assign$1({}, defaultConfig));
    }
    function createFastMemoizeCache(store) {
        return {
            create: function () {
                return {
                    has: function (key) {
                        return key in store;
                    },
                    get: function (key) {
                        return store[key];
                    },
                    set: function (key, value) {
                        store[key] = value;
                    },
                };
            },
        };
    }
    // @ts-ignore this is to deal with rollup's default import shenanigans
    var _memoizeIntl = src || memoize$1;
    var memoizeIntl = _memoizeIntl;
    function createDefaultFormatters(cache) {
        if (cache === void 0) { cache = {
            number: {},
            dateTime: {},
            pluralRules: {},
        }; }
        return {
            getNumberFormat: memoizeIntl(function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args)))();
            }, {
                cache: createFastMemoizeCache(cache.number),
                strategy: memoizeIntl.strategies.variadic,
            }),
            getDateTimeFormat: memoizeIntl(function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args)))();
            }, {
                cache: createFastMemoizeCache(cache.dateTime),
                strategy: memoizeIntl.strategies.variadic,
            }),
            getPluralRules: memoizeIntl(function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args)))();
            }, {
                cache: createFastMemoizeCache(cache.pluralRules),
                strategy: memoizeIntl.strategies.variadic,
            }),
        };
    }
    var IntlMessageFormat = /** @class */ (function () {
        function IntlMessageFormat(message, locales, overrideFormats, opts) {
            var _this = this;
            if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }
            this.formatterCache = {
                number: {},
                dateTime: {},
                pluralRules: {},
            };
            this.format = function (values) {
                var parts = _this.formatToParts(values);
                // Hot path for straight simple msg translations
                if (parts.length === 1) {
                    return parts[0].value;
                }
                var result = parts.reduce(function (all, part) {
                    if (!all.length ||
                        part.type !== PART_TYPE.literal ||
                        typeof all[all.length - 1] !== 'string') {
                        all.push(part.value);
                    }
                    else {
                        all[all.length - 1] += part.value;
                    }
                    return all;
                }, []);
                if (result.length <= 1) {
                    return result[0] || '';
                }
                return result;
            };
            this.formatToParts = function (values) {
                return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
            };
            this.resolvedOptions = function () { return ({
                locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],
            }); };
            this.getAst = function () { return _this.ast; };
            if (typeof message === 'string') {
                this.message = message;
                if (!IntlMessageFormat.__parse) {
                    throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
                }
                // Parse string messages into an AST.
                this.ast = IntlMessageFormat.__parse(message, {
                    normalizeHashtagInPlural: false,
                    ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
                });
            }
            else {
                this.ast = message;
            }
            if (!Array.isArray(this.ast)) {
                throw new TypeError('A message must be provided as a String or AST.');
            }
            // Creates a new object with the specified `formats` merged with the default
            // formats.
            this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);
            // Defined first because it's used to build the format pattern.
            this.locales = locales;
            this.formatters =
                (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);
        }
        Object.defineProperty(IntlMessageFormat, "defaultLocale", {
            get: function () {
                if (!IntlMessageFormat.memoizedDefaultLocale) {
                    IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
                }
                return IntlMessageFormat.memoizedDefaultLocale;
            },
            enumerable: false,
            configurable: true
        });
        IntlMessageFormat.memoizedDefaultLocale = null;
        IntlMessageFormat.__parse = parse;
        // Default format options used as the prototype of the `formats` provided to the
        // constructor. These are used when constructing the internal Intl.NumberFormat
        // and Intl.DateTimeFormat instances.
        IntlMessageFormat.formats = {
            number: {
                currency: {
                    style: 'currency',
                },
                percent: {
                    style: 'percent',
                },
            },
            date: {
                short: {
                    month: 'numeric',
                    day: 'numeric',
                    year: '2-digit',
                },
                medium: {
                    month: 'short',
                    day: 'numeric',
                    year: 'numeric',
                },
                long: {
                    month: 'long',
                    day: 'numeric',
                    year: 'numeric',
                },
                full: {
                    weekday: 'long',
                    month: 'long',
                    day: 'numeric',
                    year: 'numeric',
                },
            },
            time: {
                short: {
                    hour: 'numeric',
                    minute: 'numeric',
                },
                medium: {
                    hour: 'numeric',
                    minute: 'numeric',
                    second: 'numeric',
                },
                long: {
                    hour: 'numeric',
                    minute: 'numeric',
                    second: 'numeric',
                    timeZoneName: 'short',
                },
                full: {
                    hour: 'numeric',
                    minute: 'numeric',
                    second: 'numeric',
                    timeZoneName: 'short',
                },
            },
        };
        return IntlMessageFormat;
    }());

    const r$1={},i=(e,n)=>{if(null==n)return;const t=function(e,n){if(!c(e))return null;const t=function(e){return l[e]||null}(e);return function(e,n){if(n in e)return e[n];const t=n.split(".");let o=e;for(let e=0;e<t.length;e++)if("object"==typeof o){if(e>0){const n=t.slice(e,t.length).join(".");if(n in o){o=o[n];break}}o=o[t[e]];}else o=void 0;return o}(t,n)}(n,e);return t||i(e,D(n))},a$1=(e,n)=>{if(n in r$1&&e in r$1[n])return r$1[n][e];const t=i(e,n);return t?((e,n,t)=>t?(n in r$1||(r$1[n]={}),e in r$1[n]||(r$1[n][e]=t),t):t)(e,n,t):void 0};let l;const s=writable({});function c(e){return e in l}function u(e){return null==e||c(e)?e:u(D(e))}function m(e,...n){delete r$1[e],s.update((o=>(o[e]=cjs.all([o[e]||{},...n]),o)));}derived([s],(([e])=>Object.keys(e)));s.subscribe((e=>l=e));const d={};function g(e){return d[e]}function w(e){return M(e).reverse().some((e=>{var n;return null===(n=g(e))||void 0===n?void 0:n.size}))}function h(e,n){return Promise.all(n.map((n=>(function(e,n){d[e].delete(n),0===d[e].size&&delete d[e];}(e,n),n().then((e=>e.default||e)))))).then((n=>m(e,...n)))}const p={};function b(e){if(!w(e))return e in p?p[e]:void 0;const n=function(e){return M(e).reverse().map((e=>{const n=g(e);return [e,n?[...n]:[]]})).filter((([,e])=>e.length>0))}(e);return p[e]=Promise.all(n.map((([e,n])=>h(e,n)))).then((()=>{if(w(e))return b(e);delete p[e];})),p[e]}/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function v(e,n){var t={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&n.indexOf(o)<0&&(t[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)n.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(t[o[r]]=e[o[r]]);}return t}const O={fallbackLocale:null,initialLocale:null,loadingDelay:200,formats:{number:{scientific:{notation:"scientific"},engineering:{notation:"engineering"},compactLong:{notation:"compact",compactDisplay:"long"},compactShort:{notation:"compact",compactDisplay:"short"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},warnOnMissingMessages:!0,ignoreTag:!0};function j(){return O}function k(e){const{formats:n}=e,t=v(e,["formats"]),o=e.initialLocale||e.fallbackLocale;return Object.assign(O,t,{initialLocale:o}),n&&("number"in n&&Object.assign(O.formats.number,n.number),"date"in n&&Object.assign(O.formats.date,n.date),"time"in n&&Object.assign(O.formats.time,n.time)),x.set(o)}const L=writable(!1);let $;const x=writable(null);function T(e,n){return 0===n.indexOf(e)&&e!==n}function E(e,n){return e===n||T(e,n)||T(n,e)}function D(e){const n=e.lastIndexOf("-");if(n>0)return e.slice(0,n);const{fallbackLocale:t}=j();return t&&!E(e,t)?t:null}function M(e){const n=e.split("-").map(((e,n,t)=>t.slice(0,n+1).join("-"))),{fallbackLocale:t}=j();return t&&!E(e,t)?n.concat(M(t)):n}function I(){return $}x.subscribe((e=>{$=e,"undefined"!=typeof window&&document.documentElement.setAttribute("lang",e);}));const N=x.set;x.set=e=>{if(u(e)&&w(e)){const{loadingDelay:n}=j();let t;return "undefined"!=typeof window&&null!=I()&&n?t=window.setTimeout((()=>L.set(!0)),n):L.set(!0),b(e).then((()=>{N(e);})).finally((()=>{clearTimeout(t),L.set(!1);}))}return N(e)},x.update=e=>N(e($));const z=()=>"undefined"==typeof window?null:window.navigator.language||window.navigator.languages[0],G=e=>{const n=Object.create(null);return t=>{const o=JSON.stringify(t);return o in n?n[o]:n[o]=e(t)}},J=(e,n)=>{const{formats:t}=j();if(e in t&&n in t[e])return t[e][n];throw new Error(`[svelte-i18n] Unknown "${n}" ${e} format.`)},U=G((e=>{var{locale:n,format:t}=e,o=v(e,["locale","format"]);if(null==n)throw new Error('[svelte-i18n] A "locale" must be set to format numbers');return t&&(o=J("number",t)),new Intl.NumberFormat(n,o)})),_=G((e=>{var{locale:n,format:t}=e,o=v(e,["locale","format"]);if(null==n)throw new Error('[svelte-i18n] A "locale" must be set to format dates');return t?o=J("date",t):0===Object.keys(o).length&&(o=J("date","short")),new Intl.DateTimeFormat(n,o)})),q=G((e=>{var{locale:n,format:t}=e,o=v(e,["locale","format"]);if(null==n)throw new Error('[svelte-i18n] A "locale" must be set to format time values');return t?o=J("time",t):0===Object.keys(o).length&&(o=J("time","short")),new Intl.DateTimeFormat(n,o)})),B=(e={})=>{var{locale:n=I()}=e,t=v(e,["locale"]);return U(Object.assign({locale:n},t))},H=(e={})=>{var{locale:n=I()}=e,t=v(e,["locale"]);return _(Object.assign({locale:n},t))},K=(e={})=>{var{locale:n=I()}=e,t=v(e,["locale"]);return q(Object.assign({locale:n},t))},Q=G(((e,n=I())=>new IntlMessageFormat(e,n,j().formats,{ignoreTag:j().ignoreTag}))),R=(e,n={})=>{"object"==typeof e&&(e=(n=e).id);const{values:t,locale:o=I(),default:r}=n;if(null==o)throw new Error("[svelte-i18n] Cannot format a message without first setting the initial locale.");let i=a$1(e,o);if(i){if("string"!=typeof i)return console.warn(`[svelte-i18n] Message with id "${e}" must be of type "string", found: "${typeof i}". Gettin its value through the "$format" method is deprecated; use the "json" method instead.`),i}else j().warnOnMissingMessages&&console.warn(`[svelte-i18n] The message "${e}" was not found in "${M(o).join('", "')}".${w(I())?"\n\nNote: there are at least one loader still registered to this locale that wasn't executed.":""}`),i=r||e;if(!t)return i;let l=i;try{l=Q(i,o).format(t);}catch(n){console.warn(`[svelte-i18n] Message "${e}" has syntax error:`,n.message);}return l},V=(e,n)=>K(n).format(e),W=(e,n)=>H(n).format(e),X=(e,n)=>B(n).format(e),Y=(e,n=I())=>a$1(e,n),ee=derived([x,s],(()=>R));derived([x],(()=>V));derived([x],(()=>W));derived([x],(()=>X));derived([x,s],(()=>Y));

    /* src/components/Dialogs.svelte generated by Svelte v3.35.0 */
    const file$d = "src/components/Dialogs.svelte";

    // (46:0) {#if lock}
    function create_if_block_1$1(ctx) {
    	let div0;
    	let t0;
    	let div2;
    	let div1;
    	let h3;
    	let t1_value = /*$_*/ ctx[5]("dialogs.lock.title") + "";
    	let t1;
    	let t2;
    	let p;
    	let raw_value = /*$_*/ ctx[5]("dialogs.lock.text") + "";
    	let t3;
    	let button0;
    	let t4_value = /*$_*/ ctx[5]("dialogs.lock.new") + "";
    	let t4;
    	let t5;
    	let button1;
    	let t6_value = /*$_*/ ctx[5]("dialogs.lock.overwrite") + "";
    	let t6;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			h3 = element("h3");
    			t1 = text(t1_value);
    			t2 = space();
    			p = element("p");
    			t3 = space();
    			button0 = element("button");
    			t4 = text(t4_value);
    			t5 = space();
    			button1 = element("button");
    			t6 = text(t6_value);
    			attr_dev(div0, "class", "dialog-mask");
    			add_location(div0, file$d, 46, 2, 969);
    			add_location(h3, file$d, 49, 6, 1065);
    			add_location(p, file$d, 50, 6, 1107);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$d, 51, 6, 1152);
    			attr_dev(button1, "class", "error");
    			add_location(button1, file$d, 52, 6, 1248);
    			attr_dev(div1, "class", "dialog lock svelte-z5ego9");
    			add_location(div1, file$d, 48, 4, 1033);
    			attr_dev(div2, "class", "dialog-container");
    			add_location(div2, file$d, 47, 2, 998);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, h3);
    			append_dev(h3, t1);
    			append_dev(div1, t2);
    			append_dev(div1, p);
    			p.innerHTML = raw_value;
    			append_dev(div1, t3);
    			append_dev(div1, button0);
    			append_dev(button0, t4);
    			append_dev(div1, t5);
    			append_dev(div1, button1);
    			append_dev(button1, t6);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[6], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$_*/ 32 && t1_value !== (t1_value = /*$_*/ ctx[5]("dialogs.lock.title") + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*$_*/ 32 && raw_value !== (raw_value = /*$_*/ ctx[5]("dialogs.lock.text") + "")) p.innerHTML = raw_value;			if (dirty & /*$_*/ 32 && t4_value !== (t4_value = /*$_*/ ctx[5]("dialogs.lock.new") + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*$_*/ 32 && t6_value !== (t6_value = /*$_*/ ctx[5]("dialogs.lock.overwrite") + "")) set_data_dev(t6, t6_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(46:0) {#if lock}",
    		ctx
    	});

    	return block;
    }

    // (58:0) {#if component}
    function create_if_block$1(ctx) {
    	let div0;
    	let t;
    	let div1;
    	let switch_instance;
    	let current;
    	let mounted;
    	let dispose;
    	var switch_value = /*component*/ ctx[2];

    	function switch_props(ctx) {
    		return {
    			props: {
    				params: /*params*/ ctx[4],
    				callback: /*callback*/ ctx[3]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			t = space();
    			div1 = element("div");
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			attr_dev(div0, "class", "dialog-mask");
    			add_location(div0, file$d, 58, 2, 1387);
    			attr_dev(div1, "class", "dialog-container");
    			add_location(div1, file$d, 59, 2, 1454);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div1, anchor);

    			if (switch_instance) {
    				mount_component(switch_instance, div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", self$1(/*click_handler_2*/ ctx[8]), false, false, false),
    					listen_dev(div1, "click", self$1(/*click_handler_3*/ ctx[9]), false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty & /*params*/ 16) switch_instance_changes.params = /*params*/ ctx[4];
    			if (dirty & /*callback*/ 8) switch_instance_changes.callback = /*callback*/ ctx[3];

    			if (switch_value !== (switch_value = /*component*/ ctx[2])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, div1, null);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div1);
    			if (switch_instance) destroy_component(switch_instance);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(58:0) {#if component}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let t;
    	let if_block1_anchor;
    	let current;
    	let if_block0 = /*lock*/ ctx[0] && create_if_block_1$1(ctx);
    	let if_block1 = /*component*/ ctx[2] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*lock*/ ctx[0]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$1(ctx);
    					if_block0.c();
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*component*/ ctx[2]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*component*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const dialogStore = writable({});
    const lockStore = writable(false);

    const dialog = (component, ...params) => new Promise(resolve => dialogStore.set({
    		component,
    		callback(...args) {
    			dialogStore.set({});
    			resolve(...args);
    		},
    		params: writable(params)
    	}));

    function instance$e($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(5, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Dialogs", slots, []);
    	let lock = false, session, component, callback, params;
    	lockStore.subscribe(data => $$invalidate(0, { lock, session } = data, lock, $$invalidate(1, session)));

    	dialogStore.subscribe(async data => {
    		// Retrieve basic info
    		

    		$$invalidate(2, { component, callback, params } = data, component, $$invalidate(3, callback), $$invalidate(4, params));
    		await tick();
    		const button = document.querySelector("button.ok");
    		if (button) button.focus();
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Dialogs> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => session.duplicate();
    	const click_handler_1 = () => session.lock();
    	const click_handler_2 = () => callback(false);
    	const click_handler_3 = () => callback(false);

    	$$self.$capture_state = () => ({
    		writable,
    		dialogStore,
    		lockStore,
    		dialog,
    		_: ee,
    		tick,
    		lock,
    		session,
    		component,
    		callback,
    		params,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ("lock" in $$props) $$invalidate(0, lock = $$props.lock);
    		if ("session" in $$props) $$invalidate(1, session = $$props.session);
    		if ("component" in $$props) $$invalidate(2, component = $$props.component);
    		if ("callback" in $$props) $$invalidate(3, callback = $$props.callback);
    		if ("params" in $$props) $$invalidate(4, params = $$props.params);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		lock,
    		session,
    		component,
    		callback,
    		params,
    		$_,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3
    	];
    }

    class Dialogs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dialogs",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    const shortcutsList = {
      'O': () => console.log('ciao')
    };

    const ctrlShortcuts = (shortcuts) => Object.assign(shortcutsList, shortcuts);

    const handleShortcuts = function(e) {
      if (e.ctrlKey){
        const key = String.fromCharCode(e.keyCode).toUpperCase();
        if(key in shortcutsList){
          shortcutsList[key]();
          e.stopPropagation();
          e.stopImmediatePropagation();
          e.preventDefault();
        }
      }
    };

    // Random string generator
    const randomString = (length) => {
      let   result           = '';
      const characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
      const charactersLength = characters.length;
      for ( let i = 0; i < length; i++ ) {
         result += characters.charAt(Math.floor(Math.random() * charactersLength));
      }
      return result;
    };


    // https://javascript.info/task/shuffle
    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i

        // swap elements array[i] and array[j]
        // we use "destructuring assignment" syntax to achieve that
        // you'll find more details about that syntax in later chapters
        // same can be written as:
        // let t = array[i]; array[i] = array[j]; array[j] = t
        [array[i], array[j]] = [array[j], array[i]];
      }
    }


    const isNumber = n => /^-?\d+$/.test(n);

    const empty = {
      key: "1",
      properties: {},
      chapters: {
        "1": {title: "", group: "", flags:[], text: ""},
      }
    };

    // Book constructor
    const Book = function(data = empty){
      const beforeCallbacks = [];
      const beforeUpdate    = (callback) => beforeCallbacks.push(callback);

      const {set, subscribe} = new writable(data);



      const newChapter = () => ({title: "", group: "", flags:[], text: ""});
      const sanitizeKey = key => key.replace(/[^a-z0-9]/gi,'');

      const update = (callback) => {
        const callbacks = [...beforeCallbacks, callback];
        callbacks.forEach( (fun) => {
          data = {...data, ...fun(data)};
        });
        if(!data.chapters || Object.keys(data.chapters).length == 0){
          data.chapters = { "1": newChapter() };
        }
        if(!(data.chapters[data.key])){
          console.warn("Key not found, rewriting with first key");
          data.key = Object.keys(data.chapters)[0];
        }
        set(data); 
      };



      const availableKey = () => {
        for (let i = 1; i < 5000; i++) {
          const key = String(i);
          if (data.chapters[key]) continue
          return key
        }
      };

      // Something like "01 - Title"
      const fullTitle = (chapterKey) => chapterKey + (data.chapters[chapterKey].title ? ' - ' + data.chapters[chapterKey].title : '');

      const linksTo = (chapterKey) => {
        const escapeRegex = (string) => string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        const keyRegex =     new RegExp(String.raw`\[([^\[]*)\](\(\s*\#${escapeRegex(chapterKey)}\s*\))`, '');
        return Object.keys(data.chapters).filter( key => keyRegex.test(data.chapters[key].text) )
      };

      const get = () => {
        update(()=> {});
        return JSON.parse(JSON.stringify(data))
      };

      const sortedKeys = (chapters = data.chapters) => Object.keys(chapters).sort( (a, b) => {
        const aIsNumber = isNumber(a);
        const bIsNumber = isNumber(b);

        if(!aIsNumber && bIsNumber) return -1
        if(aIsNumber && !bIsNumber) return +1
        if(!aIsNumber && !bIsNumber) return a.localeCompare(b)
        if(aIsNumber && bIsNumber) return  parseInt(a, 10) - parseInt(b, 10)
      });

      const refresh = (increaseRevision = false) => update(({properties}) => {
        if(increaseRevision){
          let revision = Number(properties.revision || "0");
          properties.revision = String(revision + 1);
          return {properties}
        }
        return {}
      });

      const shuffle = (selectedFlags = [], groupsFilter = [], increaseRevision = false) => {
        const toShuffle = [];
        const toNotShuffle = [];

        // Divide le chiavi in due gruppi, da mescolare e da non mescolare
        Object.entries(data.chapters).forEach( ([key, value]) => {
          if(!isNumber(key)){
            toNotShuffle.push(key);
            return 
          }
          // Se la flag era fra quelle fisse, allora aggiungi la chiave a quella da non mischiare
          if(value.flags && value.flags.some( flag => selectedFlags.includes(flag))){
            toNotShuffle.push(key);
            return
          }
          if(groupsFilter.length > 0){
            if(!(value.group && groupsFilter.includes(value.group) )){
              toNotShuffle.push(key);
              return   
            }
          }
          toShuffle.push(key);
        });
        // Mescola le chiavi e crea un dizionario
        const shuffledKeys = JSON.parse(JSON.stringify(toShuffle));  // Obj copy
        shuffleArray(shuffledKeys);
        const shuffled    = Object.fromEntries( toShuffle.map((k, i) =>[k, shuffledKeys[i]]));
        const shuffledRev = Object.fromEntries( toShuffle.map((k, i) =>[shuffledKeys[i], k]));
        const getShuffledKey = key => toNotShuffle.includes(key) ? key : shuffled[key];

        shuffleArray(toShuffle);
        const newData = get();
        if(increaseRevision){
          let revision = Number(newData.properties.revision || "0");
          newData.properties.revision = String(revision + 1);
        }
        newData.key = getShuffledKey(data.key);

        Object.keys(data.chapters).forEach( (oldKey) => {
          const newKey = toNotShuffle.includes(oldKey) ? oldKey : shuffledRev[oldKey];
          newData.chapters[oldKey] = JSON.parse(JSON.stringify(data.chapters[newKey]));
          newData.chapters[oldKey].text =  newData.chapters[oldKey].text
            .replace(/\[([^\[]*)\](\(\s*#(\w+)\s*\))/g, (...all) => `[${all[1]}](#${getShuffledKey(all[3])})`); 

        });

        return newData
      };


      Object.defineProperty(this, "data", {
        get : () => get(),
        set: (value) => update( ()=> value)
      });

      // Return
      Object.assign(this, {
        "__is_book": true,
        beforeUpdate,
        update, 
        refresh,
        subscribe,
        get,
        newChapter,
        availableKey,
        sanitizeKey,
        sortedKeys,
        linksTo,
        fullTitle,
        shuffle,
      });
    };

    const mimetype$2 = 'text/markdown';

    const decode$3 = (file) => {
      let result = {
        properties: {},
        chapters: {},
      };

      let key = '';

      const sanitizeLastChapter = () => {
        result.chapters[key].text = result.chapters[key].text.replace(/[\n\s]+$/, "");
      };

      file.split('\n').forEach( (oLine, i) => { 
        const line = oLine.trim();
      
        // Parsing dell'header
        if(key === '' && !line.startsWith('### ')) {
          if(line.startsWith('# ')) {
            result.properties['title'] = line.replace(/\#/g, '').trim();
            return
          }
          const semicolon = line.indexOf(':');
          if(semicolon !== -1){
            result.properties[line.substr(0, semicolon)] = line.substr(semicolon + 1);
          }
          return
        }
      
        // Parsing del testo
        if(line.startsWith('### ')){
          // crea nuova entità
          if(key !== '') sanitizeLastChapter();
          key = line.substr(4).trim();
          let title = '';
          const index = key.indexOf('{#');
          if(index != -1){
            title = key.substr(0, index - 1).trim();
            key = key.substr(index + 2,  key.lastIndexOf('}') - 2 - index).trim();
          }
          result.chapters[key] = {
            title,
            text: '',
            group: '',
            flags: []
          };
          return
        }
      
        if(line.includes('![flag-')){
    ['final', 'fixed', 'death'].forEach( (flag) => {
            if(line.includes(`![flag-${flag}]`)) result.chapters[key].flags.push(flag);
          });
          return
        }
        const groupIndex = line.indexOf('[group]:<> ("');
        if(groupIndex != -1){
          result.chapters[key].group = line.substr(groupIndex + 13, line.lastIndexOf('")') - groupIndex - 13);
          if(line.replaceAll(/\[group\]:<>[ ]*\([ ]*"[^"]*"[ ]*\)/g, '').trim() == '') return
        }
        result.chapters[key].text += oLine + '\n';
      });
      sanitizeLastChapter();

      result.key = String(result.properties['last_edited'] || Object.keys(result.chapters)[0]).trim();
      return result
    };


    const encode$3 = (book) => {
      if(!book["__is_book"]) book = new Book(book);
      const {key : currentKey, chapters, properties} = book.get();
      let s = `# ${properties.title}\n`;
      Object.entries({
        ...properties,
        'last_edited': currentKey,
      }).forEach(([key, value]) => {
        if(key !== 'title')  s+=`${key}: ${value}\n`;
      });
      s+='\n\n\n';

      book.sortedKeys(chapters).forEach( key => {
        const chapter = chapters[key];
        s+= chapter.title ? `### ${chapter.title} {#${key}}\n` : `### ${key}\n`;
        if(chapter.flags && chapter.flags.length){
          const flags = {
            'death': '![flag-death](https://librogamesland.github.io/lgcjs/release/static/flags/death.png)',
            'final': '![flag-final](https://librogamesland.github.io/lgcjs/release/static/flags/final.png)',
            'fixed': '![flag-fixed](https://librogamesland.github.io/lgcjs/release/static/flags/fixed.png)',
          };
          s+= chapter.flags.map( key => flags[key]).join(' ') + '\n';
        }
        if(chapter.group){
          s+=`[group]:<> ("${chapter.group}")\n`;
        }
        s+= chapter.text.replace(/\n+$/, "") + '\n\n\n';
      });

      return s
    };



    var md = {mimetype: mimetype$2, decode: decode$3, encode: encode$3};

    const hpccWasm = window["@hpcc-js/wasm"];


    const sanitizeLabel = (text) => text.replace(/\//g, "\\").replace(/\"/g, '\"');

    const generateGraph = (book) => {
      book = new Book(md.decode(book));
      const data = book.get();
      let s = `digraph{
    graph [fontname="arial", fontsize=10]; 
    node [fontname="arial", fontsize=12, style="rounded,filled", shape=box];
    edge [fontname="arial", fontsize=12];
`;
      book.sortedKeys(data.chapters).forEach(key => {
        s += `${key} [label="${sanitizeLabel(book.fullTitle(key))}"]\n`;
        book.linksTo(key).forEach(otherKey => {
          s += `${otherKey} -> ${key}\n`;
        });
      });
      return s + '}'
    };


    // Return the src attribute of an img tag
    const graphToImg = (book) => {
      console.log("generating graph..");
      return hpccWasm.graphviz.layout(generateGraph(book), "svg", "dot")
    };

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    /**
     * marked - a markdown parser
     * Copyright (c) 2011-2021, Christopher Jeffrey. (MIT Licensed)
     * https://github.com/markedjs/marked
     */

    var marked = createCommonjsModule(function (module, exports) {
    /**
     * DO NOT EDIT THIS FILE
     * The code in this file is generated from files in ./src/
     */

    (function (global, factory) {
      module.exports = factory() ;
    }(commonjsGlobal, (function () {
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

        return arr2;
      }

      function _createForOfIteratorHelperLoose(o, allowArrayLike) {
        var it;

        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            return function () {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            };
          }

          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        it = o[Symbol.iterator]();
        return it.next.bind(it);
      }

      function createCommonjsModule(fn) {
        var module = { exports: {} };
      	return fn(module, module.exports), module.exports;
      }

      var defaults = createCommonjsModule(function (module) {
        function getDefaults() {
          return {
            baseUrl: null,
            breaks: false,
            gfm: true,
            headerIds: true,
            headerPrefix: '',
            highlight: null,
            langPrefix: 'language-',
            mangle: true,
            pedantic: false,
            renderer: null,
            sanitize: false,
            sanitizer: null,
            silent: false,
            smartLists: false,
            smartypants: false,
            tokenizer: null,
            walkTokens: null,
            xhtml: false
          };
        }

        function changeDefaults(newDefaults) {
          module.exports.defaults = newDefaults;
        }

        module.exports = {
          defaults: getDefaults(),
          getDefaults: getDefaults,
          changeDefaults: changeDefaults
        };
      });

      /**
       * Helpers
       */
      var escapeTest = /[&<>"']/;
      var escapeReplace = /[&<>"']/g;
      var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
      var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
      var escapeReplacements = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };

      var getEscapeReplacement = function getEscapeReplacement(ch) {
        return escapeReplacements[ch];
      };

      function escape(html, encode) {
        if (encode) {
          if (escapeTest.test(html)) {
            return html.replace(escapeReplace, getEscapeReplacement);
          }
        } else {
          if (escapeTestNoEncode.test(html)) {
            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
          }
        }

        return html;
      }

      var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;

      function unescape(html) {
        // explicitly match decimal, hex, and named HTML entities
        return html.replace(unescapeTest, function (_, n) {
          n = n.toLowerCase();
          if (n === 'colon') return ':';

          if (n.charAt(0) === '#') {
            return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
          }

          return '';
        });
      }

      var caret = /(^|[^\[])\^/g;

      function edit(regex, opt) {
        regex = regex.source || regex;
        opt = opt || '';
        var obj = {
          replace: function replace(name, val) {
            val = val.source || val;
            val = val.replace(caret, '$1');
            regex = regex.replace(name, val);
            return obj;
          },
          getRegex: function getRegex() {
            return new RegExp(regex, opt);
          }
        };
        return obj;
      }

      var nonWordAndColonTest = /[^\w:]/g;
      var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;

      function cleanUrl(sanitize, base, href) {
        if (sanitize) {
          var prot;

          try {
            prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();
          } catch (e) {
            return null;
          }

          if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
            return null;
          }
        }

        if (base && !originIndependentUrl.test(href)) {
          href = resolveUrl(base, href);
        }

        try {
          href = encodeURI(href).replace(/%25/g, '%');
        } catch (e) {
          return null;
        }

        return href;
      }

      var baseUrls = {};
      var justDomain = /^[^:]+:\/*[^/]*$/;
      var protocol = /^([^:]+:)[\s\S]*$/;
      var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;

      function resolveUrl(base, href) {
        if (!baseUrls[' ' + base]) {
          // we can ignore everything in base after the last slash of its path component,
          // but we might need to add _that_
          // https://tools.ietf.org/html/rfc3986#section-3
          if (justDomain.test(base)) {
            baseUrls[' ' + base] = base + '/';
          } else {
            baseUrls[' ' + base] = rtrim(base, '/', true);
          }
        }

        base = baseUrls[' ' + base];
        var relativeBase = base.indexOf(':') === -1;

        if (href.substring(0, 2) === '//') {
          if (relativeBase) {
            return href;
          }

          return base.replace(protocol, '$1') + href;
        } else if (href.charAt(0) === '/') {
          if (relativeBase) {
            return href;
          }

          return base.replace(domain, '$1') + href;
        } else {
          return base + href;
        }
      }

      var noopTest = {
        exec: function noopTest() {}
      };

      function merge(obj) {
        var i = 1,
            target,
            key;

        for (; i < arguments.length; i++) {
          target = arguments[i];

          for (key in target) {
            if (Object.prototype.hasOwnProperty.call(target, key)) {
              obj[key] = target[key];
            }
          }
        }

        return obj;
      }

      function splitCells(tableRow, count) {
        // ensure that every cell-delimiting pipe has a space
        // before it to distinguish it from an escaped pipe
        var row = tableRow.replace(/\|/g, function (match, offset, str) {
          var escaped = false,
              curr = offset;

          while (--curr >= 0 && str[curr] === '\\') {
            escaped = !escaped;
          }

          if (escaped) {
            // odd number of slashes means | is escaped
            // so we leave it alone
            return '|';
          } else {
            // add space before unescaped |
            return ' |';
          }
        }),
            cells = row.split(/ \|/);
        var i = 0;

        if (cells.length > count) {
          cells.splice(count);
        } else {
          while (cells.length < count) {
            cells.push('');
          }
        }

        for (; i < cells.length; i++) {
          // leading or trailing whitespace is ignored per the gfm spec
          cells[i] = cells[i].trim().replace(/\\\|/g, '|');
        }

        return cells;
      } // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
      // /c*$/ is vulnerable to REDOS.
      // invert: Remove suffix of non-c chars instead. Default falsey.


      function rtrim(str, c, invert) {
        var l = str.length;

        if (l === 0) {
          return '';
        } // Length of suffix matching the invert condition.


        var suffLen = 0; // Step left until we fail to match the invert condition.

        while (suffLen < l) {
          var currChar = str.charAt(l - suffLen - 1);

          if (currChar === c && !invert) {
            suffLen++;
          } else if (currChar !== c && invert) {
            suffLen++;
          } else {
            break;
          }
        }

        return str.substr(0, l - suffLen);
      }

      function findClosingBracket(str, b) {
        if (str.indexOf(b[1]) === -1) {
          return -1;
        }

        var l = str.length;
        var level = 0,
            i = 0;

        for (; i < l; i++) {
          if (str[i] === '\\') {
            i++;
          } else if (str[i] === b[0]) {
            level++;
          } else if (str[i] === b[1]) {
            level--;

            if (level < 0) {
              return i;
            }
          }
        }

        return -1;
      }

      function checkSanitizeDeprecation(opt) {
        if (opt && opt.sanitize && !opt.silent) {
          console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
        }
      } // copied from https://stackoverflow.com/a/5450113/806777


      function repeatString(pattern, count) {
        if (count < 1) {
          return '';
        }

        var result = '';

        while (count > 1) {
          if (count & 1) {
            result += pattern;
          }

          count >>= 1;
          pattern += pattern;
        }

        return result + pattern;
      }

      var helpers = {
        escape: escape,
        unescape: unescape,
        edit: edit,
        cleanUrl: cleanUrl,
        resolveUrl: resolveUrl,
        noopTest: noopTest,
        merge: merge,
        splitCells: splitCells,
        rtrim: rtrim,
        findClosingBracket: findClosingBracket,
        checkSanitizeDeprecation: checkSanitizeDeprecation,
        repeatString: repeatString
      };

      var defaults$1 = defaults.defaults;
      var rtrim$1 = helpers.rtrim,
          splitCells$1 = helpers.splitCells,
          _escape = helpers.escape,
          findClosingBracket$1 = helpers.findClosingBracket;

      function outputLink(cap, link, raw) {
        var href = link.href;
        var title = link.title ? _escape(link.title) : null;
        var text = cap[1].replace(/\\([\[\]])/g, '$1');

        if (cap[0].charAt(0) !== '!') {
          return {
            type: 'link',
            raw: raw,
            href: href,
            title: title,
            text: text
          };
        } else {
          return {
            type: 'image',
            raw: raw,
            href: href,
            title: title,
            text: _escape(text)
          };
        }
      }

      function indentCodeCompensation(raw, text) {
        var matchIndentToCode = raw.match(/^(\s+)(?:```)/);

        if (matchIndentToCode === null) {
          return text;
        }

        var indentToCode = matchIndentToCode[1];
        return text.split('\n').map(function (node) {
          var matchIndentInNode = node.match(/^\s+/);

          if (matchIndentInNode === null) {
            return node;
          }

          var indentInNode = matchIndentInNode[0];

          if (indentInNode.length >= indentToCode.length) {
            return node.slice(indentToCode.length);
          }

          return node;
        }).join('\n');
      }
      /**
       * Tokenizer
       */


      var Tokenizer_1 = /*#__PURE__*/function () {
        function Tokenizer(options) {
          this.options = options || defaults$1;
        }

        var _proto = Tokenizer.prototype;

        _proto.space = function space(src) {
          var cap = this.rules.block.newline.exec(src);

          if (cap) {
            if (cap[0].length > 1) {
              return {
                type: 'space',
                raw: cap[0]
              };
            }

            return {
              raw: '\n'
            };
          }
        };

        _proto.code = function code(src) {
          var cap = this.rules.block.code.exec(src);

          if (cap) {
            var text = cap[0].replace(/^ {1,4}/gm, '');
            return {
              type: 'code',
              raw: cap[0],
              codeBlockStyle: 'indented',
              text: !this.options.pedantic ? rtrim$1(text, '\n') : text
            };
          }
        };

        _proto.fences = function fences(src) {
          var cap = this.rules.block.fences.exec(src);

          if (cap) {
            var raw = cap[0];
            var text = indentCodeCompensation(raw, cap[3] || '');
            return {
              type: 'code',
              raw: raw,
              lang: cap[2] ? cap[2].trim() : cap[2],
              text: text
            };
          }
        };

        _proto.heading = function heading(src) {
          var cap = this.rules.block.heading.exec(src);

          if (cap) {
            var text = cap[2].trim(); // remove trailing #s

            if (/#$/.test(text)) {
              var trimmed = rtrim$1(text, '#');

              if (this.options.pedantic) {
                text = trimmed.trim();
              } else if (!trimmed || / $/.test(trimmed)) {
                // CommonMark requires space before trailing #s
                text = trimmed.trim();
              }
            }

            return {
              type: 'heading',
              raw: cap[0],
              depth: cap[1].length,
              text: text
            };
          }
        };

        _proto.nptable = function nptable(src) {
          var cap = this.rules.block.nptable.exec(src);

          if (cap) {
            var item = {
              type: 'table',
              header: splitCells$1(cap[1].replace(/^ *| *\| *$/g, '')),
              align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
              cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : [],
              raw: cap[0]
            };

            if (item.header.length === item.align.length) {
              var l = item.align.length;
              var i;

              for (i = 0; i < l; i++) {
                if (/^ *-+: *$/.test(item.align[i])) {
                  item.align[i] = 'right';
                } else if (/^ *:-+: *$/.test(item.align[i])) {
                  item.align[i] = 'center';
                } else if (/^ *:-+ *$/.test(item.align[i])) {
                  item.align[i] = 'left';
                } else {
                  item.align[i] = null;
                }
              }

              l = item.cells.length;

              for (i = 0; i < l; i++) {
                item.cells[i] = splitCells$1(item.cells[i], item.header.length);
              }

              return item;
            }
          }
        };

        _proto.hr = function hr(src) {
          var cap = this.rules.block.hr.exec(src);

          if (cap) {
            return {
              type: 'hr',
              raw: cap[0]
            };
          }
        };

        _proto.blockquote = function blockquote(src) {
          var cap = this.rules.block.blockquote.exec(src);

          if (cap) {
            var text = cap[0].replace(/^ *> ?/gm, '');
            return {
              type: 'blockquote',
              raw: cap[0],
              text: text
            };
          }
        };

        _proto.list = function list(src) {
          var cap = this.rules.block.list.exec(src);

          if (cap) {
            var raw = cap[0];
            var bull = cap[2];
            var isordered = bull.length > 1;
            var list = {
              type: 'list',
              raw: raw,
              ordered: isordered,
              start: isordered ? +bull.slice(0, -1) : '',
              loose: false,
              items: []
            }; // Get each top-level item.

            var itemMatch = cap[0].match(this.rules.block.item);
            var next = false,
                item,
                space,
                bcurr,
                bnext,
                addBack,
                loose,
                istask,
                ischecked,
                endMatch;
            var l = itemMatch.length;
            bcurr = this.rules.block.listItemStart.exec(itemMatch[0]);

            for (var i = 0; i < l; i++) {
              item = itemMatch[i];
              raw = item;

              if (!this.options.pedantic) {
                // Determine if current item contains the end of the list
                endMatch = item.match(new RegExp('\\n\\s*\\n {0,' + (bcurr[0].length - 1) + '}\\S'));

                if (endMatch) {
                  addBack = item.length - endMatch.index + itemMatch.slice(i + 1).join('\n').length;
                  list.raw = list.raw.substring(0, list.raw.length - addBack);
                  item = item.substring(0, endMatch.index);
                  raw = item;
                  l = i + 1;
                }
              } // Determine whether the next list item belongs here.
              // Backpedal if it does not belong in this list.


              if (i !== l - 1) {
                bnext = this.rules.block.listItemStart.exec(itemMatch[i + 1]);

                if (!this.options.pedantic ? bnext[1].length >= bcurr[0].length || bnext[1].length > 3 : bnext[1].length > bcurr[1].length) {
                  // nested list or continuation
                  itemMatch.splice(i, 2, itemMatch[i] + (!this.options.pedantic && bnext[1].length < bcurr[0].length && !itemMatch[i].match(/\n$/) ? '' : '\n') + itemMatch[i + 1]);
                  i--;
                  l--;
                  continue;
                } else if ( // different bullet style
                !this.options.pedantic || this.options.smartLists ? bnext[2][bnext[2].length - 1] !== bull[bull.length - 1] : isordered === (bnext[2].length === 1)) {
                  addBack = itemMatch.slice(i + 1).join('\n').length;
                  list.raw = list.raw.substring(0, list.raw.length - addBack);
                  i = l - 1;
                }

                bcurr = bnext;
              } // Remove the list item's bullet
              // so it is seen as the next token.


              space = item.length;
              item = item.replace(/^ *([*+-]|\d+[.)]) ?/, ''); // Outdent whatever the
              // list item contains. Hacky.

              if (~item.indexOf('\n ')) {
                space -= item.length;
                item = !this.options.pedantic ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '') : item.replace(/^ {1,4}/gm, '');
              } // trim item newlines at end


              item = rtrim$1(item, '\n');

              if (i !== l - 1) {
                raw = raw + '\n';
              } // Determine whether item is loose or not.
              // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
              // for discount behavior.


              loose = next || /\n\n(?!\s*$)/.test(raw);

              if (i !== l - 1) {
                next = raw.slice(-2) === '\n\n';
                if (!loose) loose = next;
              }

              if (loose) {
                list.loose = true;
              } // Check for task list items


              if (this.options.gfm) {
                istask = /^\[[ xX]\] /.test(item);
                ischecked = undefined;

                if (istask) {
                  ischecked = item[1] !== ' ';
                  item = item.replace(/^\[[ xX]\] +/, '');
                }
              }

              list.items.push({
                type: 'list_item',
                raw: raw,
                task: istask,
                checked: ischecked,
                loose: loose,
                text: item
              });
            }

            return list;
          }
        };

        _proto.html = function html(src) {
          var cap = this.rules.block.html.exec(src);

          if (cap) {
            return {
              type: this.options.sanitize ? 'paragraph' : 'html',
              raw: cap[0],
              pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
              text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
            };
          }
        };

        _proto.def = function def(src) {
          var cap = this.rules.block.def.exec(src);

          if (cap) {
            if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
            var tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
            return {
              tag: tag,
              raw: cap[0],
              href: cap[2],
              title: cap[3]
            };
          }
        };

        _proto.table = function table(src) {
          var cap = this.rules.block.table.exec(src);

          if (cap) {
            var item = {
              type: 'table',
              header: splitCells$1(cap[1].replace(/^ *| *\| *$/g, '')),
              align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
              cells: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
            };

            if (item.header.length === item.align.length) {
              item.raw = cap[0];
              var l = item.align.length;
              var i;

              for (i = 0; i < l; i++) {
                if (/^ *-+: *$/.test(item.align[i])) {
                  item.align[i] = 'right';
                } else if (/^ *:-+: *$/.test(item.align[i])) {
                  item.align[i] = 'center';
                } else if (/^ *:-+ *$/.test(item.align[i])) {
                  item.align[i] = 'left';
                } else {
                  item.align[i] = null;
                }
              }

              l = item.cells.length;

              for (i = 0; i < l; i++) {
                item.cells[i] = splitCells$1(item.cells[i].replace(/^ *\| *| *\| *$/g, ''), item.header.length);
              }

              return item;
            }
          }
        };

        _proto.lheading = function lheading(src) {
          var cap = this.rules.block.lheading.exec(src);

          if (cap) {
            return {
              type: 'heading',
              raw: cap[0],
              depth: cap[2].charAt(0) === '=' ? 1 : 2,
              text: cap[1]
            };
          }
        };

        _proto.paragraph = function paragraph(src) {
          var cap = this.rules.block.paragraph.exec(src);

          if (cap) {
            return {
              type: 'paragraph',
              raw: cap[0],
              text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1]
            };
          }
        };

        _proto.text = function text(src) {
          var cap = this.rules.block.text.exec(src);

          if (cap) {
            return {
              type: 'text',
              raw: cap[0],
              text: cap[0]
            };
          }
        };

        _proto.escape = function escape(src) {
          var cap = this.rules.inline.escape.exec(src);

          if (cap) {
            return {
              type: 'escape',
              raw: cap[0],
              text: _escape(cap[1])
            };
          }
        };

        _proto.tag = function tag(src, inLink, inRawBlock) {
          var cap = this.rules.inline.tag.exec(src);

          if (cap) {
            if (!inLink && /^<a /i.test(cap[0])) {
              inLink = true;
            } else if (inLink && /^<\/a>/i.test(cap[0])) {
              inLink = false;
            }

            if (!inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
              inRawBlock = true;
            } else if (inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
              inRawBlock = false;
            }

            return {
              type: this.options.sanitize ? 'text' : 'html',
              raw: cap[0],
              inLink: inLink,
              inRawBlock: inRawBlock,
              text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0]
            };
          }
        };

        _proto.link = function link(src) {
          var cap = this.rules.inline.link.exec(src);

          if (cap) {
            var trimmedUrl = cap[2].trim();

            if (!this.options.pedantic && /^</.test(trimmedUrl)) {
              // commonmark requires matching angle brackets
              if (!/>$/.test(trimmedUrl)) {
                return;
              } // ending angle bracket cannot be escaped


              var rtrimSlash = rtrim$1(trimmedUrl.slice(0, -1), '\\');

              if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
                return;
              }
            } else {
              // find closing parenthesis
              var lastParenIndex = findClosingBracket$1(cap[2], '()');

              if (lastParenIndex > -1) {
                var start = cap[0].indexOf('!') === 0 ? 5 : 4;
                var linkLen = start + cap[1].length + lastParenIndex;
                cap[2] = cap[2].substring(0, lastParenIndex);
                cap[0] = cap[0].substring(0, linkLen).trim();
                cap[3] = '';
              }
            }

            var href = cap[2];
            var title = '';

            if (this.options.pedantic) {
              // split pedantic href and title
              var link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

              if (link) {
                href = link[1];
                title = link[3];
              }
            } else {
              title = cap[3] ? cap[3].slice(1, -1) : '';
            }

            href = href.trim();

            if (/^</.test(href)) {
              if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
                // pedantic allows starting angle bracket without ending angle bracket
                href = href.slice(1);
              } else {
                href = href.slice(1, -1);
              }
            }

            return outputLink(cap, {
              href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
              title: title ? title.replace(this.rules.inline._escapes, '$1') : title
            }, cap[0]);
          }
        };

        _proto.reflink = function reflink(src, links) {
          var cap;

          if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
            var link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
            link = links[link.toLowerCase()];

            if (!link || !link.href) {
              var text = cap[0].charAt(0);
              return {
                type: 'text',
                raw: text,
                text: text
              };
            }

            return outputLink(cap, link, cap[0]);
          }
        };

        _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {
          if (prevChar === void 0) {
            prevChar = '';
          }

          var match = this.rules.inline.emStrong.lDelim.exec(src);
          if (!match) return;
          if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/)) return; // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well

          var nextChar = match[1] || match[2] || '';

          if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {
            var lLength = match[0].length - 1;
            var rDelim,
                rLength,
                delimTotal = lLength,
                midDelimTotal = 0;
            var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
            endReg.lastIndex = 0;
            maskedSrc = maskedSrc.slice(-1 * src.length + lLength); // Bump maskedSrc to same section of string as src (move to lexer?)

            while ((match = endReg.exec(maskedSrc)) != null) {
              rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
              if (!rDelim) continue; // matched the first alternative in rules.js (skip the * in __abc*abc__)

              rLength = rDelim.length;

              if (match[3] || match[4]) {
                // found another Left Delim
                delimTotal += rLength;
                continue;
              } else if (match[5] || match[6]) {
                // either Left or Right Delim
                if (lLength % 3 && !((lLength + rLength) % 3)) {
                  midDelimTotal += rLength;
                  continue; // CommonMark Emphasis Rules 9-10
                }
              }

              delimTotal -= rLength;
              if (delimTotal > 0) continue; // Haven't found enough closing delimiters
              // If this is the last rDelimiter, remove extra characters. *a*** -> *a*

              if (delimTotal + midDelimTotal - rLength <= 0 && !maskedSrc.slice(endReg.lastIndex).match(endReg)) {
                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
              }

              if (Math.min(lLength, rLength) % 2) {
                return {
                  type: 'em',
                  raw: src.slice(0, lLength + match.index + rLength + 1),
                  text: src.slice(1, lLength + match.index + rLength)
                };
              }

              if (Math.min(lLength, rLength) % 2 === 0) {
                return {
                  type: 'strong',
                  raw: src.slice(0, lLength + match.index + rLength + 1),
                  text: src.slice(2, lLength + match.index + rLength - 1)
                };
              }
            }
          }
        };

        _proto.codespan = function codespan(src) {
          var cap = this.rules.inline.code.exec(src);

          if (cap) {
            var text = cap[2].replace(/\n/g, ' ');
            var hasNonSpaceChars = /[^ ]/.test(text);
            var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);

            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
              text = text.substring(1, text.length - 1);
            }

            text = _escape(text, true);
            return {
              type: 'codespan',
              raw: cap[0],
              text: text
            };
          }
        };

        _proto.br = function br(src) {
          var cap = this.rules.inline.br.exec(src);

          if (cap) {
            return {
              type: 'br',
              raw: cap[0]
            };
          }
        };

        _proto.del = function del(src) {
          var cap = this.rules.inline.del.exec(src);

          if (cap) {
            return {
              type: 'del',
              raw: cap[0],
              text: cap[2]
            };
          }
        };

        _proto.autolink = function autolink(src, mangle) {
          var cap = this.rules.inline.autolink.exec(src);

          if (cap) {
            var text, href;

            if (cap[2] === '@') {
              text = _escape(this.options.mangle ? mangle(cap[1]) : cap[1]);
              href = 'mailto:' + text;
            } else {
              text = _escape(cap[1]);
              href = text;
            }

            return {
              type: 'link',
              raw: cap[0],
              text: text,
              href: href,
              tokens: [{
                type: 'text',
                raw: text,
                text: text
              }]
            };
          }
        };

        _proto.url = function url(src, mangle) {
          var cap;

          if (cap = this.rules.inline.url.exec(src)) {
            var text, href;

            if (cap[2] === '@') {
              text = _escape(this.options.mangle ? mangle(cap[0]) : cap[0]);
              href = 'mailto:' + text;
            } else {
              // do extended autolink path validation
              var prevCapZero;

              do {
                prevCapZero = cap[0];
                cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
              } while (prevCapZero !== cap[0]);

              text = _escape(cap[0]);

              if (cap[1] === 'www.') {
                href = 'http://' + text;
              } else {
                href = text;
              }
            }

            return {
              type: 'link',
              raw: cap[0],
              text: text,
              href: href,
              tokens: [{
                type: 'text',
                raw: text,
                text: text
              }]
            };
          }
        };

        _proto.inlineText = function inlineText(src, inRawBlock, smartypants) {
          var cap = this.rules.inline.text.exec(src);

          if (cap) {
            var text;

            if (inRawBlock) {
              text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : _escape(cap[0]) : cap[0];
            } else {
              text = _escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
            }

            return {
              type: 'text',
              raw: cap[0],
              text: text
            };
          }
        };

        return Tokenizer;
      }();

      var noopTest$1 = helpers.noopTest,
          edit$1 = helpers.edit,
          merge$1 = helpers.merge;
      /**
       * Block-Level Grammar
       */

      var block = {
        newline: /^(?: *(?:\n|$))+/,
        code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
        fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,
        hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
        heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
        blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
        list: /^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?! {0,3}bull )\n*|\s*$)/,
        html: '^ {0,3}(?:' // optional indentation
        + '<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
        + '|comment[^\\n]*(\\n+|$)' // (2)
        + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' // (3)
        + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' // (4)
        + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' // (5)
        + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)' // (6)
        + '|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) open tag
        + '|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)' // (7) closing tag
        + ')',
        def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
        nptable: noopTest$1,
        table: noopTest$1,
        lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
        // regex template, placeholders will be replaced according to different paragraph
        // interruption rules of commonmark and the original markdown spec:
        _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html| +\n)[^\n]+)*)/,
        text: /^[^\n]+/
      };
      block._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
      block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
      block.def = edit$1(block.def).replace('label', block._label).replace('title', block._title).getRegex();
      block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
      block.item = /^( *)(bull) ?[^\n]*(?:\n(?! *bull ?)[^\n]*)*/;
      block.item = edit$1(block.item, 'gm').replace(/bull/g, block.bullet).getRegex();
      block.listItemStart = edit$1(/^( *)(bull) */).replace('bull', block.bullet).getRegex();
      block.list = edit$1(block.list).replace(/bull/g, block.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block.def.source + ')').getRegex();
      block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';
      block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
      block.html = edit$1(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
      block.paragraph = edit$1(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
      .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
      .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
      .getRegex();
      block.blockquote = edit$1(block.blockquote).replace('paragraph', block.paragraph).getRegex();
      /**
       * Normal Block Grammar
       */

      block.normal = merge$1({}, block);
      /**
       * GFM Block Grammar
       */

      block.gfm = merge$1({}, block.normal, {
        nptable: '^ *([^|\\n ].*\\|.*)\\n' // Header
        + ' {0,3}([-:]+ *\\|[-| :]*)' // Align
        + '(?:\\n((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)',
        // Cells
        table: '^ *\\|(.+)\\n' // Header
        + ' {0,3}\\|?( *[-:]+[-| :]*)' // Align
        + '(?:\\n *((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)' // Cells

      });
      block.gfm.nptable = edit$1(block.gfm.nptable).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
      .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
      .getRegex();
      block.gfm.table = edit$1(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
      .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
      .getRegex();
      /**
       * Pedantic grammar (original John Gruber's loose markdown specification)
       */

      block.pedantic = merge$1({}, block.normal, {
        html: edit$1('^ *(?:comment *(?:\\n|\\s*$)' + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
        + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b').getRegex(),
        def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
        heading: /^(#{1,6})(.*)(?:\n+|$)/,
        fences: noopTest$1,
        // fences not supported
        paragraph: edit$1(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()
      });
      /**
       * Inline-Level Grammar
       */

      var inline = {
        escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
        autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
        url: noopTest$1,
        tag: '^comment' + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
        + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
        + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
        + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
        + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>',
        // CDATA section
        link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
        reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
        nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
        reflinkSearch: 'reflink|nolink(?!\\()',
        emStrong: {
          lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
          //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
          //        () Skip other delimiter (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
          rDelimAst: /\_\_[^_]*?\*[^_]*?\_\_|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
          rDelimUnd: /\*\*[^*]*?\_[^*]*?\*\*|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/ // ^- Not allowed for _

        },
        code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
        br: /^( {2,}|\\)\n(?!\s*$)/,
        del: noopTest$1,
        text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
        punctuation: /^([\spunctuation])/
      }; // list of punctuation marks from CommonMark spec
      // without * and _ to handle the different emphasis markers * and _

      inline._punctuation = '!"#$%&\'()+\\-.,/:;<=>?@\\[\\]`^{|}~';
      inline.punctuation = edit$1(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>

      inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
      inline.escapedEmSt = /\\\*|\\_/g;
      inline._comment = edit$1(block._comment).replace('(?:-->|$)', '-->').getRegex();
      inline.emStrong.lDelim = edit$1(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
      inline.emStrong.rDelimAst = edit$1(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();
      inline.emStrong.rDelimUnd = edit$1(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();
      inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
      inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
      inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
      inline.autolink = edit$1(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();
      inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
      inline.tag = edit$1(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();
      inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
      inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
      inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
      inline.link = edit$1(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();
      inline.reflink = edit$1(inline.reflink).replace('label', inline._label).getRegex();
      inline.reflinkSearch = edit$1(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();
      /**
       * Normal Inline Grammar
       */

      inline.normal = merge$1({}, inline);
      /**
       * Pedantic Inline Grammar
       */

      inline.pedantic = merge$1({}, inline.normal, {
        strong: {
          start: /^__|\*\*/,
          middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
          endAst: /\*\*(?!\*)/g,
          endUnd: /__(?!_)/g
        },
        em: {
          start: /^_|\*/,
          middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
          endAst: /\*(?!\*)/g,
          endUnd: /_(?!_)/g
        },
        link: edit$1(/^!?\[(label)\]\((.*?)\)/).replace('label', inline._label).getRegex(),
        reflink: edit$1(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', inline._label).getRegex()
      });
      /**
       * GFM Inline Grammar
       */

      inline.gfm = merge$1({}, inline.normal, {
        escape: edit$1(inline.escape).replace('])', '~|])').getRegex(),
        _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
        url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
        _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
        del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
        text: /^([`~]+|[^`~])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/
      });
      inline.gfm.url = edit$1(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();
      /**
       * GFM + Line Breaks Inline Grammar
       */

      inline.breaks = merge$1({}, inline.gfm, {
        br: edit$1(inline.br).replace('{2,}', '*').getRegex(),
        text: edit$1(inline.gfm.text).replace('\\b_', '\\b_| {2,}\\n').replace(/\{2,\}/g, '*').getRegex()
      });
      var rules = {
        block: block,
        inline: inline
      };

      var defaults$2 = defaults.defaults;
      var block$1 = rules.block,
          inline$1 = rules.inline;
      var repeatString$1 = helpers.repeatString;
      /**
       * smartypants text replacement
       */

      function smartypants(text) {
        return text // em-dashes
        .replace(/---/g, "\u2014") // en-dashes
        .replace(/--/g, "\u2013") // opening singles
        .replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018") // closing singles & apostrophes
        .replace(/'/g, "\u2019") // opening doubles
        .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C") // closing doubles
        .replace(/"/g, "\u201D") // ellipses
        .replace(/\.{3}/g, "\u2026");
      }
      /**
       * mangle email addresses
       */


      function mangle(text) {
        var out = '',
            i,
            ch;
        var l = text.length;

        for (i = 0; i < l; i++) {
          ch = text.charCodeAt(i);

          if (Math.random() > 0.5) {
            ch = 'x' + ch.toString(16);
          }

          out += '&#' + ch + ';';
        }

        return out;
      }
      /**
       * Block Lexer
       */


      var Lexer_1 = /*#__PURE__*/function () {
        function Lexer(options) {
          this.tokens = [];
          this.tokens.links = Object.create(null);
          this.options = options || defaults$2;
          this.options.tokenizer = this.options.tokenizer || new Tokenizer_1();
          this.tokenizer = this.options.tokenizer;
          this.tokenizer.options = this.options;
          var rules = {
            block: block$1.normal,
            inline: inline$1.normal
          };

          if (this.options.pedantic) {
            rules.block = block$1.pedantic;
            rules.inline = inline$1.pedantic;
          } else if (this.options.gfm) {
            rules.block = block$1.gfm;

            if (this.options.breaks) {
              rules.inline = inline$1.breaks;
            } else {
              rules.inline = inline$1.gfm;
            }
          }

          this.tokenizer.rules = rules;
        }
        /**
         * Expose Rules
         */


        /**
         * Static Lex Method
         */
        Lexer.lex = function lex(src, options) {
          var lexer = new Lexer(options);
          return lexer.lex(src);
        }
        /**
         * Static Lex Inline Method
         */
        ;

        Lexer.lexInline = function lexInline(src, options) {
          var lexer = new Lexer(options);
          return lexer.inlineTokens(src);
        }
        /**
         * Preprocessing
         */
        ;

        var _proto = Lexer.prototype;

        _proto.lex = function lex(src) {
          src = src.replace(/\r\n|\r/g, '\n').replace(/\t/g, '    ');
          this.blockTokens(src, this.tokens, true);
          this.inline(this.tokens);
          return this.tokens;
        }
        /**
         * Lexing
         */
        ;

        _proto.blockTokens = function blockTokens(src, tokens, top) {
          if (tokens === void 0) {
            tokens = [];
          }

          if (top === void 0) {
            top = true;
          }

          if (this.options.pedantic) {
            src = src.replace(/^ +$/gm, '');
          }

          var token, i, l, lastToken;

          while (src) {
            // newline
            if (token = this.tokenizer.space(src)) {
              src = src.substring(token.raw.length);

              if (token.type) {
                tokens.push(token);
              }

              continue;
            } // code


            if (token = this.tokenizer.code(src)) {
              src = src.substring(token.raw.length);
              lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.

              if (lastToken && lastToken.type === 'paragraph') {
                lastToken.raw += '\n' + token.raw;
                lastToken.text += '\n' + token.text;
              } else {
                tokens.push(token);
              }

              continue;
            } // fences


            if (token = this.tokenizer.fences(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // heading


            if (token = this.tokenizer.heading(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // table no leading pipe (gfm)


            if (token = this.tokenizer.nptable(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // hr


            if (token = this.tokenizer.hr(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // blockquote


            if (token = this.tokenizer.blockquote(src)) {
              src = src.substring(token.raw.length);
              token.tokens = this.blockTokens(token.text, [], top);
              tokens.push(token);
              continue;
            } // list


            if (token = this.tokenizer.list(src)) {
              src = src.substring(token.raw.length);
              l = token.items.length;

              for (i = 0; i < l; i++) {
                token.items[i].tokens = this.blockTokens(token.items[i].text, [], false);
              }

              tokens.push(token);
              continue;
            } // html


            if (token = this.tokenizer.html(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // def


            if (top && (token = this.tokenizer.def(src))) {
              src = src.substring(token.raw.length);

              if (!this.tokens.links[token.tag]) {
                this.tokens.links[token.tag] = {
                  href: token.href,
                  title: token.title
                };
              }

              continue;
            } // table (gfm)


            if (token = this.tokenizer.table(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // lheading


            if (token = this.tokenizer.lheading(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // top-level paragraph


            if (top && (token = this.tokenizer.paragraph(src))) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // text


            if (token = this.tokenizer.text(src)) {
              src = src.substring(token.raw.length);
              lastToken = tokens[tokens.length - 1];

              if (lastToken && lastToken.type === 'text') {
                lastToken.raw += '\n' + token.raw;
                lastToken.text += '\n' + token.text;
              } else {
                tokens.push(token);
              }

              continue;
            }

            if (src) {
              var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

              if (this.options.silent) {
                console.error(errMsg);
                break;
              } else {
                throw new Error(errMsg);
              }
            }
          }

          return tokens;
        };

        _proto.inline = function inline(tokens) {
          var i, j, k, l2, row, token;
          var l = tokens.length;

          for (i = 0; i < l; i++) {
            token = tokens[i];

            switch (token.type) {
              case 'paragraph':
              case 'text':
              case 'heading':
                {
                  token.tokens = [];
                  this.inlineTokens(token.text, token.tokens);
                  break;
                }

              case 'table':
                {
                  token.tokens = {
                    header: [],
                    cells: []
                  }; // header

                  l2 = token.header.length;

                  for (j = 0; j < l2; j++) {
                    token.tokens.header[j] = [];
                    this.inlineTokens(token.header[j], token.tokens.header[j]);
                  } // cells


                  l2 = token.cells.length;

                  for (j = 0; j < l2; j++) {
                    row = token.cells[j];
                    token.tokens.cells[j] = [];

                    for (k = 0; k < row.length; k++) {
                      token.tokens.cells[j][k] = [];
                      this.inlineTokens(row[k], token.tokens.cells[j][k]);
                    }
                  }

                  break;
                }

              case 'blockquote':
                {
                  this.inline(token.tokens);
                  break;
                }

              case 'list':
                {
                  l2 = token.items.length;

                  for (j = 0; j < l2; j++) {
                    this.inline(token.items[j].tokens);
                  }

                  break;
                }
            }
          }

          return tokens;
        }
        /**
         * Lexing/Compiling
         */
        ;

        _proto.inlineTokens = function inlineTokens(src, tokens, inLink, inRawBlock) {
          if (tokens === void 0) {
            tokens = [];
          }

          if (inLink === void 0) {
            inLink = false;
          }

          if (inRawBlock === void 0) {
            inRawBlock = false;
          }

          var token, lastToken; // String with links masked to avoid interference with em and strong

          var maskedSrc = src;
          var match;
          var keepPrevChar, prevChar; // Mask out reflinks

          if (this.tokens.links) {
            var links = Object.keys(this.tokens.links);

            if (links.length > 0) {
              while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
                if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
                  maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString$1('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
                }
              }
            }
          } // Mask out other blocks


          while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString$1('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
          } // Mask out escaped em & strong delimiters


          while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
          }

          while (src) {
            if (!keepPrevChar) {
              prevChar = '';
            }

            keepPrevChar = false; // escape

            if (token = this.tokenizer.escape(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // tag


            if (token = this.tokenizer.tag(src, inLink, inRawBlock)) {
              src = src.substring(token.raw.length);
              inLink = token.inLink;
              inRawBlock = token.inRawBlock;
              var _lastToken = tokens[tokens.length - 1];

              if (_lastToken && token.type === 'text' && _lastToken.type === 'text') {
                _lastToken.raw += token.raw;
                _lastToken.text += token.text;
              } else {
                tokens.push(token);
              }

              continue;
            } // link


            if (token = this.tokenizer.link(src)) {
              src = src.substring(token.raw.length);

              if (token.type === 'link') {
                token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);
              }

              tokens.push(token);
              continue;
            } // reflink, nolink


            if (token = this.tokenizer.reflink(src, this.tokens.links)) {
              src = src.substring(token.raw.length);
              var _lastToken2 = tokens[tokens.length - 1];

              if (token.type === 'link') {
                token.tokens = this.inlineTokens(token.text, [], true, inRawBlock);
                tokens.push(token);
              } else if (_lastToken2 && token.type === 'text' && _lastToken2.type === 'text') {
                _lastToken2.raw += token.raw;
                _lastToken2.text += token.text;
              } else {
                tokens.push(token);
              }

              continue;
            } // em & strong


            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
              src = src.substring(token.raw.length);
              token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
              tokens.push(token);
              continue;
            } // code


            if (token = this.tokenizer.codespan(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // br


            if (token = this.tokenizer.br(src)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // del (gfm)


            if (token = this.tokenizer.del(src)) {
              src = src.substring(token.raw.length);
              token.tokens = this.inlineTokens(token.text, [], inLink, inRawBlock);
              tokens.push(token);
              continue;
            } // autolink


            if (token = this.tokenizer.autolink(src, mangle)) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // url (gfm)


            if (!inLink && (token = this.tokenizer.url(src, mangle))) {
              src = src.substring(token.raw.length);
              tokens.push(token);
              continue;
            } // text


            if (token = this.tokenizer.inlineText(src, inRawBlock, smartypants)) {
              src = src.substring(token.raw.length);

              if (token.raw.slice(-1) !== '_') {
                // Track prevChar before string of ____ started
                prevChar = token.raw.slice(-1);
              }

              keepPrevChar = true;
              lastToken = tokens[tokens.length - 1];

              if (lastToken && lastToken.type === 'text') {
                lastToken.raw += token.raw;
                lastToken.text += token.text;
              } else {
                tokens.push(token);
              }

              continue;
            }

            if (src) {
              var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

              if (this.options.silent) {
                console.error(errMsg);
                break;
              } else {
                throw new Error(errMsg);
              }
            }
          }

          return tokens;
        };

        _createClass(Lexer, null, [{
          key: "rules",
          get: function get() {
            return {
              block: block$1,
              inline: inline$1
            };
          }
        }]);

        return Lexer;
      }();

      var defaults$3 = defaults.defaults;
      var cleanUrl$1 = helpers.cleanUrl,
          escape$1 = helpers.escape;
      /**
       * Renderer
       */

      var Renderer_1 = /*#__PURE__*/function () {
        function Renderer(options) {
          this.options = options || defaults$3;
        }

        var _proto = Renderer.prototype;

        _proto.code = function code(_code, infostring, escaped) {
          var lang = (infostring || '').match(/\S*/)[0];

          if (this.options.highlight) {
            var out = this.options.highlight(_code, lang);

            if (out != null && out !== _code) {
              escaped = true;
              _code = out;
            }
          }

          _code = _code.replace(/\n$/, '') + '\n';

          if (!lang) {
            return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
          }

          return '<pre><code class="' + this.options.langPrefix + escape$1(lang, true) + '">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\n';
        };

        _proto.blockquote = function blockquote(quote) {
          return '<blockquote>\n' + quote + '</blockquote>\n';
        };

        _proto.html = function html(_html) {
          return _html;
        };

        _proto.heading = function heading(text, level, raw, slugger) {
          if (this.options.headerIds) {
            return '<h' + level + ' id="' + this.options.headerPrefix + slugger.slug(raw) + '">' + text + '</h' + level + '>\n';
          } // ignore IDs


          return '<h' + level + '>' + text + '</h' + level + '>\n';
        };

        _proto.hr = function hr() {
          return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
        };

        _proto.list = function list(body, ordered, start) {
          var type = ordered ? 'ol' : 'ul',
              startatt = ordered && start !== 1 ? ' start="' + start + '"' : '';
          return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
        };

        _proto.listitem = function listitem(text) {
          return '<li>' + text + '</li>\n';
        };

        _proto.checkbox = function checkbox(checked) {
          return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox"' + (this.options.xhtml ? ' /' : '') + '> ';
        };

        _proto.paragraph = function paragraph(text) {
          return '<p>' + text + '</p>\n';
        };

        _proto.table = function table(header, body) {
          if (body) body = '<tbody>' + body + '</tbody>';
          return '<table>\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
        };

        _proto.tablerow = function tablerow(content) {
          return '<tr>\n' + content + '</tr>\n';
        };

        _proto.tablecell = function tablecell(content, flags) {
          var type = flags.header ? 'th' : 'td';
          var tag = flags.align ? '<' + type + ' align="' + flags.align + '">' : '<' + type + '>';
          return tag + content + '</' + type + '>\n';
        } // span level renderer
        ;

        _proto.strong = function strong(text) {
          return '<strong>' + text + '</strong>';
        };

        _proto.em = function em(text) {
          return '<em>' + text + '</em>';
        };

        _proto.codespan = function codespan(text) {
          return '<code>' + text + '</code>';
        };

        _proto.br = function br() {
          return this.options.xhtml ? '<br/>' : '<br>';
        };

        _proto.del = function del(text) {
          return '<del>' + text + '</del>';
        };

        _proto.link = function link(href, title, text) {
          href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);

          if (href === null) {
            return text;
          }

          var out = '<a href="' + escape$1(href) + '"';

          if (title) {
            out += ' title="' + title + '"';
          }

          out += '>' + text + '</a>';
          return out;
        };

        _proto.image = function image(href, title, text) {
          href = cleanUrl$1(this.options.sanitize, this.options.baseUrl, href);

          if (href === null) {
            return text;
          }

          var out = '<img src="' + href + '" alt="' + text + '"';

          if (title) {
            out += ' title="' + title + '"';
          }

          out += this.options.xhtml ? '/>' : '>';
          return out;
        };

        _proto.text = function text(_text) {
          return _text;
        };

        return Renderer;
      }();

      /**
       * TextRenderer
       * returns only the textual part of the token
       */
      var TextRenderer_1 = /*#__PURE__*/function () {
        function TextRenderer() {}

        var _proto = TextRenderer.prototype;

        // no need for block level renderers
        _proto.strong = function strong(text) {
          return text;
        };

        _proto.em = function em(text) {
          return text;
        };

        _proto.codespan = function codespan(text) {
          return text;
        };

        _proto.del = function del(text) {
          return text;
        };

        _proto.html = function html(text) {
          return text;
        };

        _proto.text = function text(_text) {
          return _text;
        };

        _proto.link = function link(href, title, text) {
          return '' + text;
        };

        _proto.image = function image(href, title, text) {
          return '' + text;
        };

        _proto.br = function br() {
          return '';
        };

        return TextRenderer;
      }();

      /**
       * Slugger generates header id
       */
      var Slugger_1 = /*#__PURE__*/function () {
        function Slugger() {
          this.seen = {};
        }

        var _proto = Slugger.prototype;

        _proto.serialize = function serialize(value) {
          return value.toLowerCase().trim() // remove html tags
          .replace(/<[!\/a-z].*?>/ig, '') // remove unwanted chars
          .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '').replace(/\s/g, '-');
        }
        /**
         * Finds the next safe (unique) slug to use
         */
        ;

        _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {
          var slug = originalSlug;
          var occurenceAccumulator = 0;

          if (this.seen.hasOwnProperty(slug)) {
            occurenceAccumulator = this.seen[originalSlug];

            do {
              occurenceAccumulator++;
              slug = originalSlug + '-' + occurenceAccumulator;
            } while (this.seen.hasOwnProperty(slug));
          }

          if (!isDryRun) {
            this.seen[originalSlug] = occurenceAccumulator;
            this.seen[slug] = 0;
          }

          return slug;
        }
        /**
         * Convert string to unique id
         * @param {object} options
         * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.
         */
        ;

        _proto.slug = function slug(value, options) {
          if (options === void 0) {
            options = {};
          }

          var slug = this.serialize(value);
          return this.getNextSafeSlug(slug, options.dryrun);
        };

        return Slugger;
      }();

      var defaults$4 = defaults.defaults;
      var unescape$1 = helpers.unescape;
      /**
       * Parsing & Compiling
       */

      var Parser_1 = /*#__PURE__*/function () {
        function Parser(options) {
          this.options = options || defaults$4;
          this.options.renderer = this.options.renderer || new Renderer_1();
          this.renderer = this.options.renderer;
          this.renderer.options = this.options;
          this.textRenderer = new TextRenderer_1();
          this.slugger = new Slugger_1();
        }
        /**
         * Static Parse Method
         */


        Parser.parse = function parse(tokens, options) {
          var parser = new Parser(options);
          return parser.parse(tokens);
        }
        /**
         * Static Parse Inline Method
         */
        ;

        Parser.parseInline = function parseInline(tokens, options) {
          var parser = new Parser(options);
          return parser.parseInline(tokens);
        }
        /**
         * Parse Loop
         */
        ;

        var _proto = Parser.prototype;

        _proto.parse = function parse(tokens, top) {
          if (top === void 0) {
            top = true;
          }

          var out = '',
              i,
              j,
              k,
              l2,
              l3,
              row,
              cell,
              header,
              body,
              token,
              ordered,
              start,
              loose,
              itemBody,
              item,
              checked,
              task,
              checkbox;
          var l = tokens.length;

          for (i = 0; i < l; i++) {
            token = tokens[i];

            switch (token.type) {
              case 'space':
                {
                  continue;
                }

              case 'hr':
                {
                  out += this.renderer.hr();
                  continue;
                }

              case 'heading':
                {
                  out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape$1(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
                  continue;
                }

              case 'code':
                {
                  out += this.renderer.code(token.text, token.lang, token.escaped);
                  continue;
                }

              case 'table':
                {
                  header = ''; // header

                  cell = '';
                  l2 = token.header.length;

                  for (j = 0; j < l2; j++) {
                    cell += this.renderer.tablecell(this.parseInline(token.tokens.header[j]), {
                      header: true,
                      align: token.align[j]
                    });
                  }

                  header += this.renderer.tablerow(cell);
                  body = '';
                  l2 = token.cells.length;

                  for (j = 0; j < l2; j++) {
                    row = token.tokens.cells[j];
                    cell = '';
                    l3 = row.length;

                    for (k = 0; k < l3; k++) {
                      cell += this.renderer.tablecell(this.parseInline(row[k]), {
                        header: false,
                        align: token.align[k]
                      });
                    }

                    body += this.renderer.tablerow(cell);
                  }

                  out += this.renderer.table(header, body);
                  continue;
                }

              case 'blockquote':
                {
                  body = this.parse(token.tokens);
                  out += this.renderer.blockquote(body);
                  continue;
                }

              case 'list':
                {
                  ordered = token.ordered;
                  start = token.start;
                  loose = token.loose;
                  l2 = token.items.length;
                  body = '';

                  for (j = 0; j < l2; j++) {
                    item = token.items[j];
                    checked = item.checked;
                    task = item.task;
                    itemBody = '';

                    if (item.task) {
                      checkbox = this.renderer.checkbox(checked);

                      if (loose) {
                        if (item.tokens.length > 0 && item.tokens[0].type === 'text') {
                          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;

                          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
                            item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
                          }
                        } else {
                          item.tokens.unshift({
                            type: 'text',
                            text: checkbox
                          });
                        }
                      } else {
                        itemBody += checkbox;
                      }
                    }

                    itemBody += this.parse(item.tokens, loose);
                    body += this.renderer.listitem(itemBody, task, checked);
                  }

                  out += this.renderer.list(body, ordered, start);
                  continue;
                }

              case 'html':
                {
                  // TODO parse inline content if parameter markdown=1
                  out += this.renderer.html(token.text);
                  continue;
                }

              case 'paragraph':
                {
                  out += this.renderer.paragraph(this.parseInline(token.tokens));
                  continue;
                }

              case 'text':
                {
                  body = token.tokens ? this.parseInline(token.tokens) : token.text;

                  while (i + 1 < l && tokens[i + 1].type === 'text') {
                    token = tokens[++i];
                    body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
                  }

                  out += top ? this.renderer.paragraph(body) : body;
                  continue;
                }

              default:
                {
                  var errMsg = 'Token with "' + token.type + '" type was not found.';

                  if (this.options.silent) {
                    console.error(errMsg);
                    return;
                  } else {
                    throw new Error(errMsg);
                  }
                }
            }
          }

          return out;
        }
        /**
         * Parse Inline Tokens
         */
        ;

        _proto.parseInline = function parseInline(tokens, renderer) {
          renderer = renderer || this.renderer;
          var out = '',
              i,
              token;
          var l = tokens.length;

          for (i = 0; i < l; i++) {
            token = tokens[i];

            switch (token.type) {
              case 'escape':
                {
                  out += renderer.text(token.text);
                  break;
                }

              case 'html':
                {
                  out += renderer.html(token.text);
                  break;
                }

              case 'link':
                {
                  out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
                  break;
                }

              case 'image':
                {
                  out += renderer.image(token.href, token.title, token.text);
                  break;
                }

              case 'strong':
                {
                  out += renderer.strong(this.parseInline(token.tokens, renderer));
                  break;
                }

              case 'em':
                {
                  out += renderer.em(this.parseInline(token.tokens, renderer));
                  break;
                }

              case 'codespan':
                {
                  out += renderer.codespan(token.text);
                  break;
                }

              case 'br':
                {
                  out += renderer.br();
                  break;
                }

              case 'del':
                {
                  out += renderer.del(this.parseInline(token.tokens, renderer));
                  break;
                }

              case 'text':
                {
                  out += renderer.text(token.text);
                  break;
                }

              default:
                {
                  var errMsg = 'Token with "' + token.type + '" type was not found.';

                  if (this.options.silent) {
                    console.error(errMsg);
                    return;
                  } else {
                    throw new Error(errMsg);
                  }
                }
            }
          }

          return out;
        };

        return Parser;
      }();

      var merge$2 = helpers.merge,
          checkSanitizeDeprecation$1 = helpers.checkSanitizeDeprecation,
          escape$2 = helpers.escape;
      var getDefaults = defaults.getDefaults,
          changeDefaults = defaults.changeDefaults,
          defaults$5 = defaults.defaults;
      /**
       * Marked
       */

      function marked(src, opt, callback) {
        // throw error in case of non string input
        if (typeof src === 'undefined' || src === null) {
          throw new Error('marked(): input parameter is undefined or null');
        }

        if (typeof src !== 'string') {
          throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
        }

        if (typeof opt === 'function') {
          callback = opt;
          opt = null;
        }

        opt = merge$2({}, marked.defaults, opt || {});
        checkSanitizeDeprecation$1(opt);

        if (callback) {
          var highlight = opt.highlight;
          var tokens;

          try {
            tokens = Lexer_1.lex(src, opt);
          } catch (e) {
            return callback(e);
          }

          var done = function done(err) {
            var out;

            if (!err) {
              try {
                out = Parser_1.parse(tokens, opt);
              } catch (e) {
                err = e;
              }
            }

            opt.highlight = highlight;
            return err ? callback(err) : callback(null, out);
          };

          if (!highlight || highlight.length < 3) {
            return done();
          }

          delete opt.highlight;
          if (!tokens.length) return done();
          var pending = 0;
          marked.walkTokens(tokens, function (token) {
            if (token.type === 'code') {
              pending++;
              setTimeout(function () {
                highlight(token.text, token.lang, function (err, code) {
                  if (err) {
                    return done(err);
                  }

                  if (code != null && code !== token.text) {
                    token.text = code;
                    token.escaped = true;
                  }

                  pending--;

                  if (pending === 0) {
                    done();
                  }
                });
              }, 0);
            }
          });

          if (pending === 0) {
            done();
          }

          return;
        }

        try {
          var _tokens = Lexer_1.lex(src, opt);

          if (opt.walkTokens) {
            marked.walkTokens(_tokens, opt.walkTokens);
          }

          return Parser_1.parse(_tokens, opt);
        } catch (e) {
          e.message += '\nPlease report this to https://github.com/markedjs/marked.';

          if (opt.silent) {
            return '<p>An error occurred:</p><pre>' + escape$2(e.message + '', true) + '</pre>';
          }

          throw e;
        }
      }
      /**
       * Options
       */


      marked.options = marked.setOptions = function (opt) {
        merge$2(marked.defaults, opt);
        changeDefaults(marked.defaults);
        return marked;
      };

      marked.getDefaults = getDefaults;
      marked.defaults = defaults$5;
      /**
       * Use Extension
       */

      marked.use = function (extension) {
        var opts = merge$2({}, extension);

        if (extension.renderer) {
          (function () {
            var renderer = marked.defaults.renderer || new Renderer_1();

            var _loop = function _loop(prop) {
              var prevRenderer = renderer[prop];

              renderer[prop] = function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                var ret = extension.renderer[prop].apply(renderer, args);

                if (ret === false) {
                  ret = prevRenderer.apply(renderer, args);
                }

                return ret;
              };
            };

            for (var prop in extension.renderer) {
              _loop(prop);
            }

            opts.renderer = renderer;
          })();
        }

        if (extension.tokenizer) {
          (function () {
            var tokenizer = marked.defaults.tokenizer || new Tokenizer_1();

            var _loop2 = function _loop2(prop) {
              var prevTokenizer = tokenizer[prop];

              tokenizer[prop] = function () {
                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  args[_key2] = arguments[_key2];
                }

                var ret = extension.tokenizer[prop].apply(tokenizer, args);

                if (ret === false) {
                  ret = prevTokenizer.apply(tokenizer, args);
                }

                return ret;
              };
            };

            for (var prop in extension.tokenizer) {
              _loop2(prop);
            }

            opts.tokenizer = tokenizer;
          })();
        }

        if (extension.walkTokens) {
          var walkTokens = marked.defaults.walkTokens;

          opts.walkTokens = function (token) {
            extension.walkTokens(token);

            if (walkTokens) {
              walkTokens(token);
            }
          };
        }

        marked.setOptions(opts);
      };
      /**
       * Run callback for every token
       */


      marked.walkTokens = function (tokens, callback) {
        for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {
          var token = _step.value;
          callback(token);

          switch (token.type) {
            case 'table':
              {
                for (var _iterator2 = _createForOfIteratorHelperLoose(token.tokens.header), _step2; !(_step2 = _iterator2()).done;) {
                  var cell = _step2.value;
                  marked.walkTokens(cell, callback);
                }

                for (var _iterator3 = _createForOfIteratorHelperLoose(token.tokens.cells), _step3; !(_step3 = _iterator3()).done;) {
                  var row = _step3.value;

                  for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {
                    var _cell = _step4.value;
                    marked.walkTokens(_cell, callback);
                  }
                }

                break;
              }

            case 'list':
              {
                marked.walkTokens(token.items, callback);
                break;
              }

            default:
              {
                if (token.tokens) {
                  marked.walkTokens(token.tokens, callback);
                }
              }
          }
        }
      };
      /**
       * Parse Inline
       */


      marked.parseInline = function (src, opt) {
        // throw error in case of non string input
        if (typeof src === 'undefined' || src === null) {
          throw new Error('marked.parseInline(): input parameter is undefined or null');
        }

        if (typeof src !== 'string') {
          throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
        }

        opt = merge$2({}, marked.defaults, opt || {});
        checkSanitizeDeprecation$1(opt);

        try {
          var tokens = Lexer_1.lexInline(src, opt);

          if (opt.walkTokens) {
            marked.walkTokens(tokens, opt.walkTokens);
          }

          return Parser_1.parseInline(tokens, opt);
        } catch (e) {
          e.message += '\nPlease report this to https://github.com/markedjs/marked.';

          if (opt.silent) {
            return '<p>An error occurred:</p><pre>' + escape$2(e.message + '', true) + '</pre>';
          }

          throw e;
        }
      };
      /**
       * Expose
       */


      marked.Parser = Parser_1;
      marked.parser = Parser_1.parse;
      marked.Renderer = Renderer_1;
      marked.TextRenderer = TextRenderer_1;
      marked.Lexer = Lexer_1;
      marked.lexer = Lexer_1.lex;
      marked.Tokenizer = Tokenizer_1;
      marked.Slugger = Slugger_1;
      marked.parse = marked;
      var marked_1 = marked;

      return marked_1;

    })));
    });

    if(typeof DOMParser === 'undefined'){
      const JSDOM = global.JSDOM || require("jsdom").JSDOM;
      global.DOMParser = new JSDOM().window.DOMParser;
      global.document = new JSDOM().window.document;
    }

    const a = document.createElement('p');
    const raw    = t => (a.innerHTML = t, a.textContent);
    const mangle = t => (a.textContent = t, a.innerHTML);


    const tokenizer = {
      heading(src){},
      nptable(src){},
      hr(src){},
      blockquote(src){},
      code(src){},
      list(src){},
      def(src){},
      table(src){},
      lheading(src){},

    };

    marked.use({ tokenizer });


    const defaultHTMLRenderer = {
      html:      text => mangle(text),
      paragraph: text => `${text}<br>`,
      strong:    text => `<b>${text}</b>`,
      em:        text => `<i>${text}</i>`,
      codespan:  text => raw(text),
      code:      text => '',
    };

    const encodeToHTML = (text, renderer = defaultHTMLRenderer) => {  
      marked.use({renderer: new marked.Renderer()});
      marked.use({ 
        renderer:{
          ...renderer,
          code: (text, ...all) => renderer.code(text.replace(/\n\n/g, '\n').replace('\n', ''), ...all)
        } 
      });
      return marked(text.replace(/\n/g, '\n\n'))
    };

    const mimetype$1 = 'application/xml';



    const decode$2 = xlgc => {
      const properties = {}, chapters = {};
      let key = '';

      const attributesWhitelist = [
        'lgc_version',
        'title',
        'author',
        'version',
        'revision',
        'table_of_contents',
        'editing_action',
        'editing_chapter',
      ];
      // Usa un DOMParser per interpretare il file xml
      const xmlDoc = new DOMParser().parseFromString(xlgc, 'text/xml')
      ;[...(xmlDoc.documentElement.children ||xmlDoc.documentElement.childNodes) ].forEach(entity => {
        const id = entity.getAttribute('name');
        const type = entity.getAttribute('type');
        const group = entity.getAttribute('group');

        // L'entità game è quella contenente i metadati come autore, revisioni, ...
        // Queste informazioni vengono memorizzate all'interno di info con la stessa chiave
        if (type === 'entity' && id === 'game') {
    [...entity.children].forEach(node => {
            const nodeName = node.getAttribute('name');
            const nodeValue = node.innerHTML.substring(9, node.innerHTML.length - 3);
            if(nodeName == 'editing_chapter') {
              key = nodeValue;
            } else if (attributesWhitelist.includes(nodeName)){
              properties[nodeName] = nodeValue;
            }
          });
          return // Termina qui, non aggiunge questa entità a section
        }

        if (type === 'entity' && id === 'map_data') {
    [...entity.children].forEach(node => {
            const nodeName = node.getAttribute('name');
            const nodeValue = node.innerHTML.substring(9, node.innerHTML.length - 3);
            if (nodeName === 'map_file') properties.map = nodeValue;
          });
          return // Termina qui, non aggiunge questa entità a section
        }

        let chapter = {
          title: '',
          text: '',
          flags: []
        };
        if (group) chapter.group = group
          // Itera i nodi figli dell'entity alla ricerca di flag, titolo e contenuto
        ;[...entity.children].forEach(node => {
          const nodeName = node.getAttribute('name');
          const nodeValue = node.innerHTML.substring(9, node.innerHTML.length - 3);
          if (nodeName === 'chapter_title' && nodeValue) chapter.title = nodeValue;
          if (nodeName === 'description') chapter.text = nodeValue;
          if (nodeName === 'map_position') chapter.map = nodeValue;
          if (nodeName.startsWith('flag_') && nodeValue === 'true') {
            chapter.flags.push(nodeName.substring(5)); // Aggiunge la flag
          }
        });
        // Inserisce nel jlgc l'oggetto section appena creato
        chapter.text =  raw(chapter.text.replace(/\<\/\p\>/g,'\n').replace(/\<\p\>/g,'')
          .replace(/\<b\>(\s*)<i\>(\s*)/g,'$1$2***').replace(/(\s*)\<\/i\>(\s*)\<\/b\>/g,'**$1$2')
          .replace(/\<i\>(\s*)<b\>(\s*)/g,'$1$2***').replace(/(\s*)\<\/b\>(\s*)\<\/i\>/g,'**$1$2')
          .replace(/\<b\>(\s*)/g,'$1**').replace(/(\s*)\<\/b\>/g,'**$1')
          .replace(/\<i\>(\s*)/g,'$1*').replace(/(\s*)\<\/i\>/g,'*$1')
          .replace(/{link (\w+):([^\}\{]+)}/g, (...all) =>`[${all[2].trim() == '@T' ? '': all[2]}](#${all[1]})`  )
          .replace(/[\n\s]+$/, ""));
        chapters[id] = chapter;
      });

      return { properties, chapters, key }
    };



    /* ENCODING */
    const renderer$2 = {
      html:      text => mangle(text),
      paragraph: text => `<p>${text}</p>`,
      strong:    text => `<b>${text}</b>`,
      em:        text => `<i>${text}</i>`,
      codespan:  text => '`' + text + '`',
      code: (code, lang) => '<p>```' + lang + mangle(code).replace(/\n/g, '</p><p>') + '```</p>',
      link: (href,i, text) => `{link ${href.replace('#', '')}:${text || '@T'}}`
    };

    // Crea la sezione "game" con i metadati in info
    const encodeProperties = (properties, key) =>
      `<entity group="setup" name="game" type="entity">` +
        `<attribute name="description" type="string"><![CDATA[<p></p>]]></attribute>` +
        `<attribute name="chapter_title" type="string"/>` +
        `<attribute name="lgc_version" type="string"><![CDATA[${properties.lgc_version || ''}]]></attribute>` +
        `<attribute name="title" type="string"><![CDATA[${properties.title     || ''}]]></attribute>` +
        `<attribute name="author" type="string"><![CDATA[${properties.author   || ''}]]></attribute>` +
        `<attribute name="version" type="string"><![CDATA[${properties.version || ''}]]></attribute>` +
        `<attribute name="revision" type="integer"><![CDATA[${properties.revision || '1'}]]></attribute>` +
        `<attribute name="editing_action" type="string"><![CDATA[${properties.editing_action ||  'WRITING'}]]></attribute>` +
        `<attribute name="table_of_contents" type="string"><![CDATA[${properties.table_of_contents || 'P(ALL)'}]]></attribute>` +
        `<attribute name="editing_chapter" type="string"><![CDATA[${key || '1'}]]></attribute>` +
      `</entity>`;

    const encodeMap = properties => !properties.map ? '' : 
      `<entity group="setup" name="map_data" type="entity">` +
        `<attribute name="description" type="string"><![CDATA[<p></p>]]></attribute>` +
        `<attribute name="chapter_title" type="string"/>` +
        `<attribute name="map_file" type="string"><![CDATA[${properties.map}]]></attribute>` +
      `</entity>`;

    // Crea una sezione/paragrafo
    const encodeEntity = (key, entity) =>
      `<entity group="${entity.group || ''}" name="${key}" type="${isNumber(key) ? 'chapter' : 'section'}">` +
      `<attribute name="description" type="string"><![CDATA[${encodeToHTML(entity.text,renderer$2) || '<p></p>'}]]></attribute>` +
      `<attribute name="chapter_title" type="string"><![CDATA[${entity.title ||  ''}]]></attribute>` +
      `${ entity.type && entity.type !== 'chapter'  ? '' : 
    `<attribute name="flag_final" type="boolean"><![CDATA[${ entity.flags && entity.flags.includes('final') ? 'true' : 'false'}]]></attribute>` +
    `<attribute name="flag_fixed" type="boolean"><![CDATA[${ entity.flags && entity.flags.includes('fixed') ? 'true' : 'false'}]]></attribute>` +
    `<attribute name="flag_death" type="boolean"><![CDATA[${ entity.flags && entity.flags.includes('death') ? 'true' : 'false'}]]></attribute>`
  }` + (!entity.map ? '' : 
        `<attribute name="map_position" type="string"><![CDATA[${entity.map || ''}]]></attribute>`) +
      `</entity>`;

    // Codifica il libro
    const encode$2 = book => {
      if(!book["__is_book"]) book = new Book(book);
      const {key : currentKey, chapters, properties} = book.get();
      return `<?xml version="1.0" encoding="UTF-8"?><entities>${
      encodeProperties(properties, currentKey) +
      encodeMap(properties) +
      book.sortedKeys().reduce((acc, key) => acc + encodeEntity(key, chapters[key]), '')
    }</entities>`
    };


    var xlgc = { decode: decode$2, encode: encode$2, mimetype: mimetype$1 };

    const customStyles = `
  <style:style style:name="right" style:family="paragraph" style:parent-style-name="Standard">
    <style:paragraph-properties fo:text-align="end" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="center" style:family="paragraph" style:parent-style-name="Standard">
    <style:paragraph-properties fo:text-align="center" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="justify" style:family="paragraph" style:parent-style-name="Standard">
    <style:paragraph-properties fo:text-align="justify" style:justify-single-word="false"/>
  </style:style>
  <style:style style:name="break" style:family="paragraph" style:parent-style-name="Standard">
    <style:paragraph-properties fo:break-after="page"/>
  </style:style>
  <style:style style:name="bold" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="underline" style:family="text">
    <style:text-properties style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color"/>
  </style:style>
  <style:style style:name="italic" style:family="text">
    <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>`;

    const template =  (content) =>
`<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:css3t="http://www.w3.org/TR/css3-text/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ooo="http://openoffice.org/2004/office" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:officeooo="http://openoffice.org/2009/office" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:rpt="http://openoffice.org/2005/report" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><meta:creation-date>2017-01-01T14:28:30.863048091</meta:creation-date><meta:generator>LibreOffice/6.4.1.2$Linux_X86_64 LibreOffice_project/e1ad903d8acbc5f5b474f1d8ec3defef24b8c46b</meta:generator><meta:editing-cycles>0</meta:editing-cycles><meta:editing-duration>P0D</meta:editing-duration><meta:document-statistic meta:table-count="0" meta:image-count="0" meta:object-count="0" meta:page-count="2" meta:paragraph-count="14" meta:word-count="48" meta:character-count="272" meta:non-whitespace-character-count="237"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">7895</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">33413</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">15162</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">16095</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">7869</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">7895</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">33412</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">23056</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">140</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">true</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">1031266</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedOnlyUsedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">false</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveThumbnail" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="EmbedComplexScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DisableOffPagePositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedAsianScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">1168269</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedLatinScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ContinuousEndnotes" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmptyDbFieldHidesPara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">false</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="FreeSans1" svg:font-family="FreeSans" style:font-family-generic="swiss"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Times New Roman" svg:font-family="&apos;Times New Roman&apos;" style:font-adornments="Normale" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="FreeSans" svg:font-family="FreeSans" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans CJK SC Regular" svg:font-family="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.3cm" draw:shadow-offset-y="0.3cm" draw:start-line-spacing-horizontal="0.283cm" draw:start-line-spacing-vertical="0.283cm" draw:end-line-spacing-horizontal="0.283cm" draw:end-line-spacing-vertical="0.283cm" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:orphans="2" fo:widows="2" fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="1.251cm" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Noto Sans CJK SC Regular" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="FreeSans" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2" loext:hyphenation-no-caps="false"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text">
   <style:paragraph-properties fo:line-height="115%" style:page-number="auto"/>
   <style:text-properties style:font-name="Times New Roman" fo:font-family="&apos;Times New Roman&apos;" style:font-style-name="Normale" style:font-family-generic="roman" style:font-pitch="variable" fo:language="zxx" fo:country="none"/>
  </style:style>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.423cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Noto Sans CJK SC Regular" style:font-family-asian="&apos;Noto Sans CJK SC Regular&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="FreeSans" style:font-family-complex="FreeSans" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0cm" fo:margin-bottom="0.247cm" loext:contextual-spacing="false" fo:line-height="120%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.212cm" fo:margin-bottom="0.212cm" loext:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="FreeSans1" style:font-family-complex="FreeSans" style:font-family-generic-complex="swiss"/>
  </style:style>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Visited_20_Internet_20_Link" style:display-name="Visited Internet Link" style:family="text">
   <style:text-properties fo:color="#800000" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.499cm" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>${customStyles}
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="14.801cm" fo:page-height="21.001cm" style:num-format="1" style:print-orientation="portrait" fo:margin-top="2.499cm" fo:margin-bottom="2cm" fo:margin-left="2cm" fo:margin-right="2cm" style:writing-mode="lr-tb" style:layout-grid-color="#c0c0c0" style:layout-grid-lines="20" style:layout-grid-base-height="0.706cm" style:layout-grid-ruby-height="0.353cm" style:layout-grid-mode="none" style:layout-grid-ruby-below="false" style:layout-grid-print="false" style:layout-grid-display="false" style:footnote-max-height="0cm">
    <style:footnote-sep style:width="0.018cm" style:distance-before-sep="0.101cm" style:distance-after-sep="0.101cm" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <office:forms form:automatic-focus="false" form:apply-design-mode="false"/>
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Figure"/>
   </text:sequence-decls>${content}
  </office:text>
 </office:body>
</office:document>`;

    const mimetype = 'application/vnd.oasis.opendocument.text';



    const renderer$1 = (chapters) => ({
      html:      text => mangle(text),
      paragraph: text => `<text:p text:style-name="Standard">${text}</text:p>`,
      strong:    text => `<text:span text:style-name="bold">${text}</text:span>`,
      em:        text => `<text:span text:style-name="italic">${text}</text:span>`,
      codespan:  () => '',
      code:      () => '',
      link: (key, i, text) => `<text:a xlink:type="simple" xlink:href="#mage${key.replace('#', '')}" text:style-name="Internet_20_link" text:visited-style-name="Visited_20_Internet_20_Link">${
    text.trim() || chapters[key.replace('#', '')].title.trim() || key.replace('#', '')
  }</text:a>`,
    });

    const bookmark = (key, text) =>
`<text:span text:style-name="bold"><text:bookmark-start text:name="mage${key}"/>${text}<text:bookmark-end text:name="mage${key}"/></text:span>`;


    const encodeChapter = (key, chapters) => {
      let result = '';
      const isNumeric = isNumber(key);

      if(!isNumeric) result+= `<text:p text:style-name="center">${bookmark(key, chapters[key].title.trim() || key)}</text:p>`;
      result += encodeToHTML(chapters[key].text, renderer$1(chapters));
      result = result.trim() || `<text:p text:style-name="justify"> </text:p>`;
      if(isNumeric) result = result.replace('>', '>' + bookmark(key, (chapters[key].title.trim() || key) + '. '));

      result += `<text:p text:style-name="${!isNumeric ? 'break' : 'Standard'}"/>`;
      return result
    };


    const encode$1 = (book) => {
      if(!book["__is_book"]) book = new Book(book);
      const {chapters} = book.get();
      return template(book.sortedKeys().reduce( (acc, key) => acc + encodeChapter(key, chapters), ''))
    };

    var fodt = { encode: encode$1, mimetype };

    var build = createCommonjsModule(function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
    	module.exports = factory();
    })(typeof self !== 'undefined' ? self : commonjsGlobal, function() {
    return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
    /******/
    /******/ 		// Check if module is in cache
    /******/ 		if(installedModules[moduleId]) {
    /******/ 			return installedModules[moduleId].exports;
    /******/ 		}
    /******/ 		// Create a new module (and put it into the cache)
    /******/ 		var module = installedModules[moduleId] = {
    /******/ 			i: moduleId,
    /******/ 			l: false,
    /******/ 			exports: {}
    /******/ 		};
    /******/
    /******/ 		// Execute the module function
    /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ 		// Flag the module as loaded
    /******/ 		module.l = true;
    /******/
    /******/ 		// Return the exports of the module
    /******/ 		return module.exports;
    /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
    /******/ 		if(!__webpack_require__.o(exports, name)) {
    /******/ 			Object.defineProperty(exports, name, {
    /******/ 				configurable: false,
    /******/ 				enumerable: true,
    /******/ 				get: getter
    /******/ 			});
    /******/ 		}
    /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
    /******/ 		var getter = module && module.__esModule ?
    /******/ 			function getDefault() { return module['default']; } :
    /******/ 			function getModuleExports() { return module; };
    /******/ 		__webpack_require__.d(getter, 'a', getter);
    /******/ 		return getter;
    /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 139);
    /******/ })
    /************************************************************************/
    /******/ ([
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(140));
    __export(__webpack_require__(141));
    __export(__webpack_require__(53));
    __export(__webpack_require__(142));
    __export(__webpack_require__(158));
    __export(__webpack_require__(159));
    __export(__webpack_require__(25));


    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(51));
    __export(__webpack_require__(216));
    __export(__webpack_require__(21));
    __export(__webpack_require__(3));
    __export(__webpack_require__(37));
    __export(__webpack_require__(231));


    /***/ }),
    /* 2 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(89));
    __export(__webpack_require__(90));
    __export(__webpack_require__(91));
    __export(__webpack_require__(92));
    __export(__webpack_require__(93));
    __export(__webpack_require__(239));
    __export(__webpack_require__(94));


    /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(17));
    __export(__webpack_require__(9));
    __export(__webpack_require__(162));
    __export(__webpack_require__(163));
    __export(__webpack_require__(165));
    __export(__webpack_require__(34));
    __export(__webpack_require__(213));
    __export(__webpack_require__(19));
    __export(__webpack_require__(33));
    __export(__webpack_require__(215));


    /***/ }),
    /* 4 */
    /***/ (function(module, exports) {

    var g;

    // This works in non-strict mode
    g = (function() {
    	return this;
    })();

    try {
    	// This works if eval is allowed (see CSP)
    	g = g || Function("return this")() || (1,eval)("this");
    } catch(e) {
    	// This works if the window reference is available
    	if(typeof window === "object")
    		g = window;
    }

    // g can still be undefined, but nothing to do about it...
    // We return undefined, instead of nothing here, so it's
    // easier to handle this case. if(!global) { ...}

    module.exports = g;


    /***/ }),
    /* 5 */
    /***/ (function(module, exports, __webpack_require__) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // a duplex stream is just a stream that is both readable and writable.
    // Since JS doesn't have multiple prototypal inheritance, this class
    // prototypally inherits from Readable, and then parasitically from
    // Writable.



    /*<replacement>*/

    var pna = __webpack_require__(15);
    /*</replacement>*/

    /*<replacement>*/
    var objectKeys = Object.keys || function (obj) {
      var keys = [];
      for (var key in obj) {
        keys.push(key);
      }return keys;
    };
    /*</replacement>*/

    module.exports = Duplex;

    /*<replacement>*/
    var util = __webpack_require__(14);
    util.inherits = __webpack_require__(7);
    /*</replacement>*/

    var Readable = __webpack_require__(57);
    var Writable = __webpack_require__(29);

    util.inherits(Duplex, Readable);

    {
      // avoid scope creep, the keys array can then be collected
      var keys = objectKeys(Writable.prototype);
      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }
    }

    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);

      Readable.call(this, options);
      Writable.call(this, options);

      if (options && options.readable === false) this.readable = false;

      if (options && options.writable === false) this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

      this.once('end', onend);
    }

    Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function () {
        return this._writableState.highWaterMark;
      }
    });

    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      pna.nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    Object.defineProperty(Duplex.prototype, 'destroyed', {
      get: function () {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        }

        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });

    Duplex.prototype._destroy = function (err, cb) {
      this.push(null);
      this.end();

      pna.nextTick(cb, err);
    };

    /***/ }),
    /* 6 */
    /***/ (function(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function(global) {/*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */
    /* eslint-disable no-proto */



    var base64 = __webpack_require__(144);
    var ieee754 = __webpack_require__(145);
    var isArray = __webpack_require__(55);

    exports.Buffer = Buffer;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
      ? global.TYPED_ARRAY_SUPPORT
      : typedArraySupport();

    /*
     * Export kMaxLength after typed array support is determined.
     */
    exports.kMaxLength = kMaxLength();

    function typedArraySupport () {
      try {
        var arr = new Uint8Array(1);
        arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }};
        return arr.foo() === 42 && // typed array instances can be augmented
            typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
            arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
      } catch (e) {
        return false
      }
    }

    function kMaxLength () {
      return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
      if (typeof Symbol !== 'undefined' && Symbol.species &&
          Buffer[Symbol.species] === Buffer) {
        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
        Object.defineProperty(Buffer, Symbol.species, {
          value: null,
          configurable: true
        });
      }
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer.alloc(+length)
    }

    Buffer.isBuffer = function isBuffer (b) {
      return !!(b != null && b._isBuffer)
    };

    Buffer.compare = function compare (a, b) {
      if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!Buffer.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (Buffer.isBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.equals = function equals (b) {
      if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = exports.INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!Buffer.isBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf)
      } else {
        return base64.fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer.isBuffer(val)
          ? val
          : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }

    function base64ToBytes (str) {
      return base64.toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }

    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)));

    /***/ }),
    /* 7 */
    /***/ (function(module, exports) {

    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }


    /***/ }),
    /* 8 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    (function (SpaceType) {
        SpaceType["DEFAULT"] = "default";
        SpaceType["PRESERVE"] = "preserve";
    })(exports.SpaceType || (exports.SpaceType = {}));


    /***/ }),
    /* 9 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const emphasis_mark_1 = __webpack_require__(33);
    const formatting_1 = __webpack_require__(68);
    const run_fonts_1 = __webpack_require__(34);
    const script_1 = __webpack_require__(69);
    const style_1 = __webpack_require__(70);
    const underline_1 = __webpack_require__(19);
    class RunProperties extends xml_components_1.IgnoreIfEmptyXmlComponent {
        constructor(options) {
            super("w:rPr");
            if (!options) {
                return;
            }
            if (options.bold) {
                this.push(new formatting_1.Bold());
            }
            if ((options.boldComplexScript === undefined && options.bold) || options.boldComplexScript) {
                this.push(new formatting_1.BoldComplexScript());
            }
            if (options.italics) {
                this.push(new formatting_1.Italics());
            }
            if ((options.italicsComplexScript === undefined && options.italics) || options.italicsComplexScript) {
                this.push(new formatting_1.ItalicsComplexScript());
            }
            if (options.underline) {
                this.push(new underline_1.Underline(options.underline.type, options.underline.color));
            }
            if (options.emphasisMark) {
                this.push(new emphasis_mark_1.EmphasisMark(options.emphasisMark.type));
            }
            if (options.color) {
                this.push(new formatting_1.Color(options.color));
            }
            if (options.size) {
                this.push(new formatting_1.Size(options.size));
            }
            const szCs = options.sizeComplexScript === undefined || options.sizeComplexScript === true ? options.size : options.sizeComplexScript;
            if (szCs) {
                this.push(new formatting_1.SizeComplexScript(szCs));
            }
            if (options.rightToLeft) {
                this.push(new formatting_1.RightToLeft());
            }
            if (options.smallCaps) {
                this.push(new formatting_1.SmallCaps());
            }
            if (options.allCaps) {
                this.push(new formatting_1.Caps());
            }
            if (options.strike) {
                this.push(new formatting_1.Strike());
            }
            if (options.doubleStrike) {
                this.push(new formatting_1.DoubleStrike());
            }
            if (options.subScript) {
                this.push(new script_1.SubScript());
            }
            if (options.superScript) {
                this.push(new script_1.SuperScript());
            }
            if (options.style) {
                this.push(new style_1.Style(options.style));
            }
            if (options.font) {
                if (typeof options.font === "string") {
                    this.push(new run_fonts_1.RunFonts(options.font));
                }
                else if ("name" in options.font) {
                    this.push(new run_fonts_1.RunFonts(options.font.name, options.font.hint));
                }
                else {
                    this.push(new run_fonts_1.RunFonts(options.font));
                }
            }
            if (options.highlight) {
                this.push(new formatting_1.Highlight(options.highlight));
            }
            const highlightCs = options.highlightComplexScript === undefined || options.highlightComplexScript === true
                ? options.highlight
                : options.highlightComplexScript;
            if (highlightCs) {
                this.push(new formatting_1.HighlightComplexScript(highlightCs));
            }
            if (options.characterSpacing) {
                this.push(new formatting_1.CharacterSpacing(options.characterSpacing));
            }
            const shading = options.shading || options.shadow;
            if (shading) {
                this.push(new formatting_1.Shading(shading.type, shading.fill, shading.color));
            }
            const shdCs = options.shadingComplexScript === undefined || options.shadingComplexScript === true ? shading : options.shadingComplexScript;
            if (shdCs) {
                this.push(new formatting_1.ShadowComplexScript(shdCs.type, shdCs.fill, shdCs.color));
            }
        }
        push(item) {
            this.root.push(item);
        }
    }
    exports.RunProperties = RunProperties;


    /***/ }),
    /* 10 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(265));
    __export(__webpack_require__(38));


    /***/ }),
    /* 11 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class DocumentAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                wpc: "xmlns:wpc",
                mc: "xmlns:mc",
                o: "xmlns:o",
                r: "xmlns:r",
                m: "xmlns:m",
                v: "xmlns:v",
                wp14: "xmlns:wp14",
                wp: "xmlns:wp",
                w10: "xmlns:w10",
                w: "xmlns:w",
                w14: "xmlns:w14",
                w15: "xmlns:w15",
                wpg: "xmlns:wpg",
                wpi: "xmlns:wpi",
                wne: "xmlns:wne",
                wps: "xmlns:wps",
                Ignorable: "mc:Ignorable",
                cp: "xmlns:cp",
                dc: "xmlns:dc",
                dcterms: "xmlns:dcterms",
                dcmitype: "xmlns:dcmitype",
                xsi: "xmlns:xsi",
                type: "xsi:type",
            };
        }
    }
    exports.DocumentAttributes = DocumentAttributes;


    /***/ }),
    /* 12 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(1));
    __export(__webpack_require__(262));
    __export(__webpack_require__(280));
    __export(__webpack_require__(339));
    __export(__webpack_require__(133));
    __export(__webpack_require__(50));
    __export(__webpack_require__(72));
    __export(__webpack_require__(114));
    __export(__webpack_require__(23));
    __export(__webpack_require__(340));
    __export(__webpack_require__(0));
    __export(__webpack_require__(49));
    __export(__webpack_require__(46));
    __export(__webpack_require__(132));
    __export(__webpack_require__(131));
    __export(__webpack_require__(347));


    /***/ }),
    /* 13 */
    /***/ (function(module, exports) {

    // shim for using process in browser
    var process = module.exports = {};

    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    (function () {
        try {
            if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            } else {
                cachedSetTimeout = defaultSetTimout;
            }
        } catch (e) {
            cachedSetTimeout = defaultSetTimout;
        }
        try {
            if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            } else {
                cachedClearTimeout = defaultClearTimeout;
            }
        } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
        }
    } ());
    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) { return [] };

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };


    /***/ }),
    /* 14 */
    /***/ (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.

    function isArray(arg) {
      if (Array.isArray) {
        return Array.isArray(arg);
      }
      return objectToString(arg) === '[object Array]';
    }
    exports.isArray = isArray;

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }
    exports.isBoolean = isBoolean;

    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;

    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;

    function isNumber(arg) {
      return typeof arg === 'number';
    }
    exports.isNumber = isNumber;

    function isString(arg) {
      return typeof arg === 'string';
    }
    exports.isString = isString;

    function isSymbol(arg) {
      return typeof arg === 'symbol';
    }
    exports.isSymbol = isSymbol;

    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;

    function isRegExp(re) {
      return objectToString(re) === '[object RegExp]';
    }
    exports.isRegExp = isRegExp;

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }
    exports.isObject = isObject;

    function isDate(d) {
      return objectToString(d) === '[object Date]';
    }
    exports.isDate = isDate;

    function isError(e) {
      return (objectToString(e) === '[object Error]' || e instanceof Error);
    }
    exports.isError = isError;

    function isFunction(arg) {
      return typeof arg === 'function';
    }
    exports.isFunction = isFunction;

    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }
    exports.isPrimitive = isPrimitive;

    exports.isBuffer = Buffer.isBuffer;

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).Buffer));

    /***/ }),
    /* 15 */
    /***/ (function(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function(process) {

    if (typeof process === 'undefined' ||
        !process.version ||
        process.version.indexOf('v0.') === 0 ||
        process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
      module.exports = { nextTick: nextTick };
    } else {
      module.exports = process;
    }

    function nextTick(fn, arg1, arg2, arg3) {
      if (typeof fn !== 'function') {
        throw new TypeError('"callback" argument must be a function');
      }
      var len = arguments.length;
      var args, i;
      switch (len) {
      case 0:
      case 1:
        return process.nextTick(fn);
      case 2:
        return process.nextTick(function afterTickOne() {
          fn.call(null, arg1);
        });
      case 3:
        return process.nextTick(function afterTickTwo() {
          fn.call(null, arg1, arg2);
        });
      case 4:
        return process.nextTick(function afterTickThree() {
          fn.call(null, arg1, arg2, arg3);
        });
      default:
        args = new Array(len - 1);
        i = 0;
        while (i < args.length) {
          args[i++] = arguments[i];
        }
        return process.nextTick(function afterTick() {
          fn.apply(null, args);
        });
      }
    }


    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)));

    /***/ }),
    /* 16 */
    /***/ (function(module, exports, __webpack_require__) {

    /* eslint-disable node/no-deprecated-api */
    var buffer = __webpack_require__(6);
    var Buffer = buffer.Buffer;

    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    };


    /***/ }),
    /* 17 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const break_1 = __webpack_require__(67);
    const field_1 = __webpack_require__(18);
    const page_number_1 = __webpack_require__(161);
    const properties_1 = __webpack_require__(9);
    const text_1 = __webpack_require__(71);
    var PageNumber;
    (function (PageNumber) {
        PageNumber["CURRENT"] = "CURRENT";
        PageNumber["TOTAL_PAGES"] = "TOTAL_PAGES";
        PageNumber["TOTAL_PAGES_IN_SECTION"] = "TOTAL_PAGES_IN_SECTION";
    })(PageNumber = exports.PageNumber || (exports.PageNumber = {}));
    class Run extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:r");
            this.properties = new properties_1.RunProperties(options);
            this.root.push(this.properties);
            if (options.children) {
                for (const child of options.children) {
                    if (typeof child === "string") {
                        switch (child) {
                            case PageNumber.CURRENT:
                                this.root.push(new field_1.Begin());
                                this.root.push(new page_number_1.Page());
                                this.root.push(new field_1.Separate());
                                this.root.push(new field_1.End());
                                break;
                            case PageNumber.TOTAL_PAGES:
                                this.root.push(new field_1.Begin());
                                this.root.push(new page_number_1.NumberOfPages());
                                this.root.push(new field_1.Separate());
                                this.root.push(new field_1.End());
                                break;
                            case PageNumber.TOTAL_PAGES_IN_SECTION:
                                this.root.push(new field_1.Begin());
                                this.root.push(new page_number_1.NumberOfPagesSection());
                                this.root.push(new field_1.Separate());
                                this.root.push(new field_1.End());
                                break;
                            default:
                                this.root.push(new text_1.Text(child));
                                break;
                        }
                        continue;
                    }
                    this.root.push(child);
                }
            }
            else if (options.text) {
                this.root.push(new text_1.Text(options.text));
            }
            if (options.break) {
                for (let i = 0; i < options.break; i++) {
                    this.root.splice(1, 0, new break_1.Break());
                }
            }
        }
    }
    exports.Run = Run;


    /***/ }),
    /* 18 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    var FieldCharacterType;
    (function (FieldCharacterType) {
        FieldCharacterType["BEGIN"] = "begin";
        FieldCharacterType["END"] = "end";
        FieldCharacterType["SEPARATE"] = "separate";
    })(FieldCharacterType || (FieldCharacterType = {}));
    class FidCharAttrs extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { type: "w:fldCharType", dirty: "w:dirty" };
        }
    }
    class Begin extends xml_components_1.XmlComponent {
        constructor(dirty) {
            super("w:fldChar");
            this.root.push(new FidCharAttrs({ type: FieldCharacterType.BEGIN, dirty }));
        }
    }
    exports.Begin = Begin;
    class Separate extends xml_components_1.XmlComponent {
        constructor(dirty) {
            super("w:fldChar");
            this.root.push(new FidCharAttrs({ type: FieldCharacterType.SEPARATE, dirty }));
        }
    }
    exports.Separate = Separate;
    class End extends xml_components_1.XmlComponent {
        constructor(dirty) {
            super("w:fldChar");
            this.root.push(new FidCharAttrs({ type: FieldCharacterType.END, dirty }));
        }
    }
    exports.End = End;


    /***/ }),
    /* 19 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    var UnderlineType;
    (function (UnderlineType) {
        UnderlineType["SINGLE"] = "single";
        UnderlineType["WORDS"] = "words";
        UnderlineType["DOUBLE"] = "double";
        UnderlineType["THICK"] = "thick";
        UnderlineType["DOTTED"] = "dotted";
        UnderlineType["DOTTEDHEAVY"] = "dottedHeavy";
        UnderlineType["DASH"] = "dash";
        UnderlineType["DASHEDHEAVY"] = "dashedHeavy";
        UnderlineType["DASHLONG"] = "dashLong";
        UnderlineType["DASHLONGHEAVY"] = "dashLongHeavy";
        UnderlineType["DOTDASH"] = "dotDash";
        UnderlineType["DASHDOTHEAVY"] = "dashDotHeavy";
        UnderlineType["DOTDOTDASH"] = "dotDotDash";
        UnderlineType["DASHDOTDOTHEAVY"] = "dashDotDotHeavy";
        UnderlineType["WAVE"] = "wave";
        UnderlineType["WAVYHEAVY"] = "wavyHeavy";
        UnderlineType["WAVYDOUBLE"] = "wavyDouble";
    })(UnderlineType = exports.UnderlineType || (exports.UnderlineType = {}));
    class BaseUnderline extends xml_components_1.XmlComponent {
        constructor(underlineType, color) {
            super("w:u");
            this.root.push(new xml_components_1.Attributes({
                val: underlineType,
                color: color,
            }));
        }
    }
    exports.BaseUnderline = BaseUnderline;
    class Underline extends BaseUnderline {
        constructor(underlineType = UnderlineType.SINGLE, color) {
            super(underlineType, color);
        }
    }
    exports.Underline = Underline;
    class DashUnderline extends BaseUnderline {
        constructor() {
            super("dash");
        }
    }
    exports.DashUnderline = DashUnderline;
    class DashDotDotHeavyUnderline extends BaseUnderline {
        constructor() {
            super("dashDotDotHeavy");
        }
    }
    exports.DashDotDotHeavyUnderline = DashDotDotHeavyUnderline;
    class DashDotHeavyUnderline extends BaseUnderline {
        constructor() {
            super("dashDotHeavy");
        }
    }
    exports.DashDotHeavyUnderline = DashDotHeavyUnderline;
    class DashLongUnderline extends BaseUnderline {
        constructor() {
            super("dashLong");
        }
    }
    exports.DashLongUnderline = DashLongUnderline;
    class DashLongHeavyUnderline extends BaseUnderline {
        constructor() {
            super("dashLongHeavy");
        }
    }
    exports.DashLongHeavyUnderline = DashLongHeavyUnderline;
    class DotDashUnderline extends BaseUnderline {
        constructor() {
            super("dotDash");
        }
    }
    exports.DotDashUnderline = DotDashUnderline;
    class DotDotDashUnderline extends BaseUnderline {
        constructor() {
            super("dotDotDash");
        }
    }
    exports.DotDotDashUnderline = DotDotDashUnderline;
    class DottedUnderline extends BaseUnderline {
        constructor() {
            super("dotted");
        }
    }
    exports.DottedUnderline = DottedUnderline;
    class DottedHeavyUnderline extends BaseUnderline {
        constructor() {
            super("dottedHeavy");
        }
    }
    exports.DottedHeavyUnderline = DottedHeavyUnderline;
    class DoubleUnderline extends BaseUnderline {
        constructor() {
            super("double");
        }
    }
    exports.DoubleUnderline = DoubleUnderline;
    class SingleUnderline extends BaseUnderline {
        constructor() {
            super("single");
        }
    }
    exports.SingleUnderline = SingleUnderline;
    class ThickUnderline extends BaseUnderline {
        constructor() {
            super("thick");
        }
    }
    exports.ThickUnderline = ThickUnderline;
    class WaveUnderline extends BaseUnderline {
        constructor() {
            super("wave");
        }
    }
    exports.WaveUnderline = WaveUnderline;
    class WavyDoubleUnderline extends BaseUnderline {
        constructor() {
            super("wavyDouble");
        }
    }
    exports.WavyDoubleUnderline = WavyDoubleUnderline;
    class WavyHeavyUnderline extends BaseUnderline {
        constructor() {
            super("wavyHeavy");
        }
    }
    exports.WavyHeavyUnderline = WavyHeavyUnderline;
    class WordsUnderline extends BaseUnderline {
        constructor() {
            super("words");
        }
    }
    exports.WordsUnderline = WordsUnderline;


    /***/ }),
    /* 20 */
    /***/ (function(module, exports, __webpack_require__) {


    var randomFromSeed = __webpack_require__(221);

    var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
    var alphabet;
    var previousSeed;

    var shuffled;

    function reset() {
        shuffled = false;
    }

    function setCharacters(_alphabet_) {
        if (!_alphabet_) {
            if (alphabet !== ORIGINAL) {
                alphabet = ORIGINAL;
                reset();
            }
            return;
        }

        if (_alphabet_ === alphabet) {
            return;
        }

        if (_alphabet_.length !== ORIGINAL.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
        }

        var unique = _alphabet_.split('').filter(function(item, ind, arr){
           return ind !== arr.lastIndexOf(item);
        });

        if (unique.length) {
            throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
        }

        alphabet = _alphabet_;
        reset();
    }

    function characters(_alphabet_) {
        setCharacters(_alphabet_);
        return alphabet;
    }

    function setSeed(seed) {
        randomFromSeed.seed(seed);
        if (previousSeed !== seed) {
            reset();
            previousSeed = seed;
        }
    }

    function shuffle() {
        if (!alphabet) {
            setCharacters(ORIGINAL);
        }

        var sourceArray = alphabet.split('');
        var targetArray = [];
        var r = randomFromSeed.nextValue();
        var characterIndex;

        while (sourceArray.length > 0) {
            r = randomFromSeed.nextValue();
            characterIndex = Math.floor(r * sourceArray.length);
            targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
        }
        return targetArray.join('');
    }

    function getShuffled() {
        if (shuffled) {
            return shuffled;
        }
        shuffled = shuffle();
        return shuffled;
    }

    /**
     * lookup shuffled letter
     * @param index
     * @returns {string}
     */
    function lookup(index) {
        var alphabetShuffled = getShuffled();
        return alphabetShuffled[index];
    }

    function get () {
      return alphabet || ORIGINAL;
    }

    module.exports = {
        get: get,
        characters: characters,
        seed: setSeed,
        lookup: lookup,
        shuffled: getShuffled
    };


    /***/ }),
    /* 21 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const alignment_1 = __webpack_require__(52);
    const bidirectional_1 = __webpack_require__(230);
    const border_1 = __webpack_require__(63);
    const indent_1 = __webpack_require__(64);
    const keep_1 = __webpack_require__(65);
    const page_break_1 = __webpack_require__(66);
    const spacing_1 = __webpack_require__(82);
    const style_1 = __webpack_require__(83);
    const tab_stop_1 = __webpack_require__(84);
    const unordered_list_1 = __webpack_require__(85);
    const links_1 = __webpack_require__(37);
    const formatting_1 = __webpack_require__(68);
    class ParagraphProperties extends xml_components_1.IgnoreIfEmptyXmlComponent {
        constructor(options) {
            super("w:pPr");
            if (!options) {
                return;
            }
            if (options.border) {
                this.push(new border_1.Border(options.border));
            }
            if (options.spacing) {
                this.push(new spacing_1.Spacing(options.spacing));
            }
            if (options.outlineLevel !== undefined) {
                this.push(new links_1.OutlineLevel(options.outlineLevel));
            }
            if (options.alignment) {
                this.push(new alignment_1.Alignment(options.alignment));
            }
            if (options.heading) {
                this.push(new style_1.Style(options.heading));
            }
            if (options.bidirectional) {
                this.push(new bidirectional_1.Bidirectional());
            }
            if (options.thematicBreak) {
                this.push(new border_1.ThematicBreak());
            }
            if (options.pageBreakBefore) {
                this.push(new page_break_1.PageBreakBefore());
            }
            if (options.contextualSpacing) {
                this.push(new spacing_1.ContextualSpacing(options.contextualSpacing));
            }
            if (options.indent) {
                this.push(new indent_1.Indent(options.indent));
            }
            if (options.keepLines) {
                this.push(new keep_1.KeepLines());
            }
            if (options.keepNext) {
                this.push(new keep_1.KeepNext());
            }
            if (options.tabStops) {
                for (const tabStop of options.tabStops) {
                    this.push(new tab_stop_1.TabStop(tabStop.type, tabStop.position, tabStop.leader));
                }
            }
            if (options.style) {
                this.push(new style_1.Style(options.style));
            }
            if (options.bullet) {
                this.push(new style_1.Style("ListParagraph"));
                this.push(new unordered_list_1.NumberProperties(1, options.bullet.level));
            }
            if (options.numbering) {
                if (!options.numbering.custom) {
                    this.push(new style_1.Style("ListParagraph"));
                }
                this.push(new unordered_list_1.NumberProperties(options.numbering.reference, options.numbering.level));
            }
            if (options.rightTabStop) {
                this.push(new tab_stop_1.TabStop(tab_stop_1.TabStopType.RIGHT, options.rightTabStop));
            }
            if (options.leftTabStop) {
                this.push(new tab_stop_1.TabStop(tab_stop_1.TabStopType.LEFT, options.leftTabStop));
            }
            if (options.shading) {
                this.push(new formatting_1.Shading(options.shading.type, options.shading.fill, options.shading.color));
            }
        }
        push(item) {
            this.root.push(item);
        }
    }
    exports.ParagraphProperties = ParagraphProperties;


    /***/ }),
    /* 22 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const math_beginning_character_1 = __webpack_require__(257);
    const math_ending_char_1 = __webpack_require__(258);
    class MathBracketProperties extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:dPr");
            if (!!options) {
                this.root.push(new math_beginning_character_1.MathBeginningCharacter(options.beginningCharacter));
                this.root.push(new math_ending_char_1.MathEndingCharacter(options.endingCharacter));
            }
        }
    }
    exports.MathBracketProperties = MathBracketProperties;


    /***/ }),
    /* 23 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(271));
    __export(__webpack_require__(43));
    __export(__webpack_require__(42));
    __export(__webpack_require__(106));


    /***/ }),
    /* 24 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const formatting_1 = __webpack_require__(51);
    const properties_1 = __webpack_require__(21);
    const properties_2 = __webpack_require__(9);
    (function (LevelFormat) {
        LevelFormat["BULLET"] = "bullet";
        LevelFormat["CARDINAL_TEXT"] = "cardinalText";
        LevelFormat["CHICAGO"] = "chicago";
        LevelFormat["DECIMAL"] = "decimal";
        LevelFormat["DECIMAL_ENCLOSED_CIRCLE"] = "decimalEnclosedCircle";
        LevelFormat["DECIMAL_ENCLOSED_FULLSTOP"] = "decimalEnclosedFullstop";
        LevelFormat["DECIMAL_ENCLOSED_PARENTHESES"] = "decimalEnclosedParen";
        LevelFormat["DECIMAL_ZERO"] = "decimalZero";
        LevelFormat["LOWER_LETTER"] = "lowerLetter";
        LevelFormat["LOWER_ROMAN"] = "lowerRoman";
        LevelFormat["NONE"] = "none";
        LevelFormat["ORDINAL_TEXT"] = "ordinalText";
        LevelFormat["UPPER_LETTER"] = "upperLetter";
        LevelFormat["UPPER_ROMAN"] = "upperRoman";
    })(exports.LevelFormat || (exports.LevelFormat = {}));
    class LevelAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                ilvl: "w:ilvl",
                tentative: "w15:tentative",
            };
        }
    }
    class Start extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:start");
            this.root.push(new xml_components_1.Attributes({
                val: value,
            }));
        }
    }
    class NumberFormat extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:numFmt");
            this.root.push(new xml_components_1.Attributes({
                val: value,
            }));
        }
    }
    class LevelText extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:lvlText");
            this.root.push(new xml_components_1.Attributes({
                val: value,
            }));
        }
    }
    class LevelJc extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:lvlJc");
            this.root.push(new xml_components_1.Attributes({
                val: value,
            }));
        }
    }
    (function (LevelSuffix) {
        LevelSuffix["NOTHING"] = "nothing";
        LevelSuffix["SPACE"] = "space";
        LevelSuffix["TAB"] = "tab";
    })(exports.LevelSuffix || (exports.LevelSuffix = {}));
    class Suffix extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:suff");
            this.root.push(new xml_components_1.Attributes({
                val: value,
            }));
        }
    }
    class LevelBase extends xml_components_1.XmlComponent {
        constructor({ level, format, text, alignment = formatting_1.AlignmentType.START, start = 1, style, suffix }) {
            super("w:lvl");
            this.root.push(new LevelAttributes({
                ilvl: level,
                tentative: 1,
            }));
            this.root.push(new Start(start));
            this.root.push(new LevelJc(alignment));
            if (format) {
                this.root.push(new NumberFormat(format));
            }
            if (text) {
                this.root.push(new LevelText(text));
            }
            this.paragraphProperties = new properties_1.ParagraphProperties(style && style.paragraph);
            this.runProperties = new properties_2.RunProperties(style && style.run);
            this.root.push(this.paragraphProperties);
            this.root.push(this.runProperties);
            if (suffix) {
                this.root.push(new Suffix(suffix));
            }
        }
    }
    exports.LevelBase = LevelBase;
    class Level extends LevelBase {
        constructor(options) {
            super(options);
        }
    }
    exports.Level = Level;
    class LevelForOverride extends LevelBase {
    }
    exports.LevelForOverride = LevelForOverride;


    /***/ }),
    /* 25 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    class BaseXmlComponent {
        constructor(rootKey) {
            this.deleted = false;
            this.rootKey = rootKey;
        }
        get IsDeleted() {
            return this.deleted;
        }
    }
    exports.BaseXmlComponent = BaseXmlComponent;


    /***/ }),
    /* 26 */
    /***/ (function(module, exports, __webpack_require__) {

    /*jslint node:true */

    var xml2js = __webpack_require__(54);
    var xml2json = __webpack_require__(156);
    var js2xml = __webpack_require__(62);
    var json2xml = __webpack_require__(157);

    module.exports = {
      xml2js: xml2js,
      xml2json: xml2json,
      js2xml: js2xml,
      json2xml: json2xml
    };


    /***/ }),
    /* 27 */
    /***/ (function(module, exports, __webpack_require__) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.



    var R = typeof Reflect === 'object' ? Reflect : null;
    var ReflectApply = R && typeof R.apply === 'function'
      ? R.apply
      : function ReflectApply(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      };

    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === 'function') {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target)
          .concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
      };
    }

    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }

    var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
      return value !== value;
    };

    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;

    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    var defaultMaxListeners = 10;

    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }
        defaultMaxListeners = arg;
      }
    });

    EventEmitter.init = function() {

      if (this._events === undefined ||
          this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
      }
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };

    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = (type === 'error');

      var events = this._events;
      if (events !== undefined)
        doError = (doError && events.error === undefined);
      else if (!doError)
        return false;

      // If there is no 'error' event listener then throw.
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          // Note: The comments on the `throw` lines are intentional, they show
          // up in Node's output if this results in an unhandled exception.
          throw er; // Unhandled 'error' event
        }
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
      }

      var handler = events[type];

      if (handler === undefined)
        return false;

      if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = target._events;
      if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] =
            prepend ? [listener, existing] : [existing, listener];
          // If we've already got an array, just append.
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }

        // Check for listener leak
        m = $getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          // No error code for this since it is a Warning
          // eslint-disable-next-line no-restricted-syntax
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + String(type) + ' listeners ' +
                              'added. Use emitter.setMaxListeners() to ' +
                              'increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function onceWrapper() {
      var args = [];
      for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        ReflectApply(this.listener, this.target, args);
      }
    }

    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          if (typeof listener !== 'function') {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
          }
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // Emits a 'removeListener' event if and only if the listener was removed.
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          if (typeof listener !== 'function') {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
          }

          events = this._events;
          if (events === undefined)
            return this;

          list = events[type];
          if (list === undefined)
            return this;

          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (position === 0)
              list.shift();
            else {
              spliceOne(list, position);
            }

            if (list.length === 1)
              events[type] = list[0];

            if (events.removeListener !== undefined)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };

    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events, i;

          events = this._events;
          if (events === undefined)
            return this;

          // not listening for removeListener, no need to emit
          if (events.removeListener === undefined) {
            if (arguments.length === 0) {
              this._events = Object.create(null);
              this._eventsCount = 0;
            } else if (events[type] !== undefined) {
              if (--this._eventsCount === 0)
                this._events = Object.create(null);
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = Object.create(null);
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners !== undefined) {
            // LIFO order
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }

          return this;
        };

    function _listeners(target, type, unwrap) {
      var events = target._events;

      if (events === undefined)
        return [];

      var evlistener = events[type];
      if (evlistener === undefined)
        return [];

      if (typeof evlistener === 'function')
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];

      return unwrap ?
        unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;

      if (events !== undefined) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener !== undefined) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };

    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }

    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }


    /***/ }),
    /* 28 */
    /***/ (function(module, exports, __webpack_require__) {

    exports = module.exports = __webpack_require__(57);
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = __webpack_require__(29);
    exports.Duplex = __webpack_require__(5);
    exports.Transform = __webpack_require__(61);
    exports.PassThrough = __webpack_require__(151);


    /***/ }),
    /* 29 */
    /***/ (function(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // A bit simpler than readable streams.
    // Implement an async ._write(chunk, encoding, cb), and it'll handle all
    // the drain event emission and buffering.



    /*<replacement>*/

    var pna = __webpack_require__(15);
    /*</replacement>*/

    module.exports = Writable;

    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;
      this.finish = function () {
        onCorkedFinish(_this, state);
      };
    }
    /* </replacement> */

    /*<replacement>*/
    var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
    /*</replacement>*/

    /*<replacement>*/
    var Duplex;
    /*</replacement>*/

    Writable.WritableState = WritableState;

    /*<replacement>*/
    var util = __webpack_require__(14);
    util.inherits = __webpack_require__(7);
    /*</replacement>*/

    /*<replacement>*/
    var internalUtil = {
      deprecate: __webpack_require__(150)
    };
    /*</replacement>*/

    /*<replacement>*/
    var Stream = __webpack_require__(58);
    /*</replacement>*/

    /*<replacement>*/

    var Buffer = __webpack_require__(16).Buffer;
    var OurUint8Array = global.Uint8Array || function () {};
    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }

    /*</replacement>*/

    var destroyImpl = __webpack_require__(59);

    util.inherits(Writable, Stream);

    function nop() {}

    function WritableState(options, stream) {
      Duplex = Duplex || __webpack_require__(5);

      options = options || {};

      // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.
      var isDuplex = stream instanceof Duplex;

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;

      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var writableHwm = options.writableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;

      if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

      // cast to ints.
      this.highWaterMark = Math.floor(this.highWaterMark);

      // if _final has been called
      this.finalCalled = false;

      // drain event flag.
      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // has it been destroyed
      this.destroyed = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;

      this.bufferedRequest = null;
      this.lastBufferedRequest = null;

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;

      // count buffered requests
      this.bufferedRequestCount = 0;

      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };

    (function () {
      try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
          get: internalUtil.deprecate(function () {
            return this.getBuffer();
          }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
        });
      } catch (_) {}
    })();

    // Test _writableState for inheritance to account for Duplex streams,
    // whose prototype chain only points to Readable.
    var realHasInstance;
    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function (object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable) return false;

          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function (object) {
        return object instanceof this;
      };
    }

    function Writable(options) {
      Duplex = Duplex || __webpack_require__(5);

      // Writable ctor is applied to Duplexes, too.
      // `realHasInstance` is necessary because using plain `instanceof`
      // would return false, as no `_writableState` property is attached.

      // Trying to use the custom `instanceof` for Writable here will also break the
      // Node.js LazyTransform implementation, which has a non-trivial getter for
      // `_writableState` that would lead to infinite recursion.
      if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
        return new Writable(options);
      }

      this._writableState = new WritableState(options, this);

      // legacy.
      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;

        if (typeof options.writev === 'function') this._writev = options.writev;

        if (typeof options.destroy === 'function') this._destroy = options.destroy;

        if (typeof options.final === 'function') this._final = options.final;
      }

      Stream.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };

    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      pna.nextTick(cb, er);
    }

    // Checks that a user-supplied chunk is valid, especially for the particular
    // mode the stream is in. Currently this means that `null` is never accepted
    // and undefined/non-string values are only allowed in object mode.
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;

      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      if (er) {
        stream.emit('error', er);
        pna.nextTick(cb, er);
        valid = false;
      }
      return valid;
    }

    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);

      if (isBuf && !Buffer.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

      if (typeof cb !== 'function') cb = nop;

      if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }

      return ret;
    };

    Writable.prototype.cork = function () {
      var state = this._writableState;

      state.corked++;
    };

    Writable.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;

        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }
      return chunk;
    }

    Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function () {
        return this._writableState.highWaterMark;
      }
    });

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = 'buffer';
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;

      state.length += len;

      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk: chunk,
          encoding: encoding,
          isBuf: isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;

      if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        pna.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        pna.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        stream.emit('error', er);
      } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        stream.emit('error', er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
      }
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;

      onwriteStateUpdate(state);

      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          /*<replacement>*/
          asyncWrite(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }

    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;

        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;

        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;

          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('_write() is not implemented'));
    };

    Writable.prototype._writev = null;

    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function (err) {
        state.pendingcb--;
        if (err) {
          stream.emit('error', err);
        }
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function') {
          state.pendingcb++;
          state.finalCalled = true;
          pna.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit('finish');
        }
      }
      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }

    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = corkReq;
      } else {
        state.corkedRequestsFree = corkReq;
      }
    }

    Object.defineProperty(Writable.prototype, 'destroyed', {
      get: function () {
        if (this._writableState === undefined) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
          return;
        }

        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
      }
    });

    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function (err, cb) {
      this.end();
      cb(err);
    };
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13), __webpack_require__(60).setImmediate, __webpack_require__(4)));

    /***/ }),
    /* 30 */
    /***/ (function(module, exports, __webpack_require__) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.



    /*<replacement>*/

    var Buffer = __webpack_require__(16).Buffer;
    /*</replacement>*/

    var isEncoding = Buffer.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;
        default:
          return false;
      }
    };

    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    }
    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }

    StringDecoder.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };

    StringDecoder.prototype.end = utf8End;

    // Returns only complete characters in a Buffer
    StringDecoder.prototype.text = utf8Text;

    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };

    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.
    function utf8CheckByte(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    }

    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }

    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd';
          }
        }
      }
    }

    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }

    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }

    // For UTF-8, a replacement character is added when ending on a partial
    // character.
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd';
      return r;
    }

    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }

    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }

    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }

    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }

    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }

    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }

    /***/ }),
    /* 31 */
    /***/ (function(module, exports, __webpack_require__) {

    var isArray = __webpack_require__(32).isArray;

    module.exports = {

      copyOptions: function (options) {
        var key, copy = {};
        for (key in options) {
          if (options.hasOwnProperty(key)) {
            copy[key] = options[key];
          }
        }
        return copy;
      },

      ensureFlagExists: function (item, options) {
        if (!(item in options) || typeof options[item] !== 'boolean') {
          options[item] = false;
        }
      },

      ensureSpacesExists: function (options) {
        if (!('spaces' in options) || (typeof options.spaces !== 'number' && typeof options.spaces !== 'string')) {
          options.spaces = 0;
        }
      },

      ensureAlwaysArrayExists: function (options) {
        if (!('alwaysArray' in options) || (typeof options.alwaysArray !== 'boolean' && !isArray(options.alwaysArray))) {
          options.alwaysArray = false;
        }
      },

      ensureKeyExists: function (key, options) {
        if (!(key + 'Key' in options) || typeof options[key + 'Key'] !== 'string') {
          options[key + 'Key'] = options.compact ? '_' + key : key;
        }
      },

      checkFnExists: function (key, options) {
        return key + 'Fn' in options;
      }

    };


    /***/ }),
    /* 32 */
    /***/ (function(module, exports) {

    module.exports = {

      isArray: function(value) {
        if (Array.isArray) {
          return Array.isArray(value);
        }
        // fallback for older browsers like  IE 8
        return Object.prototype.toString.call( value ) === '[object Array]';
      }

    };


    /***/ }),
    /* 33 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    var EmphasisMarkType;
    (function (EmphasisMarkType) {
        EmphasisMarkType["DOT"] = "dot";
    })(EmphasisMarkType = exports.EmphasisMarkType || (exports.EmphasisMarkType = {}));
    class BaseEmphasisMark extends xml_components_1.XmlComponent {
        constructor(emphasisMarkType) {
            super("w:em");
            this.root.push(new xml_components_1.Attributes({
                val: emphasisMarkType,
            }));
        }
    }
    exports.BaseEmphasisMark = BaseEmphasisMark;
    class EmphasisMark extends BaseEmphasisMark {
        constructor(emphasisMarkType = EmphasisMarkType.DOT) {
            super(emphasisMarkType);
        }
    }
    exports.EmphasisMark = EmphasisMark;
    class DotEmphasisMark extends BaseEmphasisMark {
        constructor() {
            super(EmphasisMarkType.DOT);
        }
    }
    exports.DotEmphasisMark = DotEmphasisMark;


    /***/ }),
    /* 34 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class RunFontAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                ascii: "w:ascii",
                cs: "w:cs",
                eastAsia: "w:eastAsia",
                hAnsi: "w:hAnsi",
                hint: "w:hint",
            };
        }
    }
    class RunFonts extends xml_components_1.XmlComponent {
        constructor(nameOrAttrs, hint) {
            super("w:rFonts");
            if (typeof nameOrAttrs === "string") {
                const name = nameOrAttrs;
                this.root.push(new RunFontAttributes({
                    ascii: name,
                    cs: name,
                    eastAsia: name,
                    hAnsi: name,
                    hint: hint,
                }));
            }
            else {
                const attrs = nameOrAttrs;
                this.root.push(new RunFontAttributes(attrs));
            }
        }
    }
    exports.RunFonts = RunFonts;


    /***/ }),
    /* 35 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    (function (HorizontalPositionRelativeFrom) {
        HorizontalPositionRelativeFrom["CHARACTER"] = "character";
        HorizontalPositionRelativeFrom["COLUMN"] = "column";
        HorizontalPositionRelativeFrom["INSIDE_MARGIN"] = "insideMargin";
        HorizontalPositionRelativeFrom["LEFT_MARGIN"] = "leftMargin";
        HorizontalPositionRelativeFrom["MARGIN"] = "margin";
        HorizontalPositionRelativeFrom["OUTSIDE_MARGIN"] = "outsideMargin";
        HorizontalPositionRelativeFrom["PAGE"] = "page";
        HorizontalPositionRelativeFrom["RIGHT_MARGIN"] = "rightMargin";
    })(exports.HorizontalPositionRelativeFrom || (exports.HorizontalPositionRelativeFrom = {}));
    (function (VerticalPositionRelativeFrom) {
        VerticalPositionRelativeFrom["BOTTOM_MARGIN"] = "bottomMargin";
        VerticalPositionRelativeFrom["INSIDE_MARGIN"] = "insideMargin";
        VerticalPositionRelativeFrom["LINE"] = "line";
        VerticalPositionRelativeFrom["MARGIN"] = "margin";
        VerticalPositionRelativeFrom["OUTSIDE_MARGIN"] = "outsideMargin";
        VerticalPositionRelativeFrom["PAGE"] = "page";
        VerticalPositionRelativeFrom["PARAGRAPH"] = "paragraph";
        VerticalPositionRelativeFrom["TOP_MARGIN"] = "topMargin";
    })(exports.VerticalPositionRelativeFrom || (exports.VerticalPositionRelativeFrom = {}));
    (function (HorizontalPositionAlign) {
        HorizontalPositionAlign["CENTER"] = "center";
        HorizontalPositionAlign["INSIDE"] = "inside";
        HorizontalPositionAlign["LEFT"] = "left";
        HorizontalPositionAlign["OUTSIDE"] = "outside";
        HorizontalPositionAlign["RIGHT"] = "right";
    })(exports.HorizontalPositionAlign || (exports.HorizontalPositionAlign = {}));
    (function (VerticalPositionAlign) {
        VerticalPositionAlign["BOTTOM"] = "bottom";
        VerticalPositionAlign["CENTER"] = "center";
        VerticalPositionAlign["INSIDE"] = "inside";
        VerticalPositionAlign["OUTSIDE"] = "outside";
        VerticalPositionAlign["TOP"] = "top";
    })(exports.VerticalPositionAlign || (exports.VerticalPositionAlign = {}));


    /***/ }),
    /* 36 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(200));
    __export(__webpack_require__(201));
    __export(__webpack_require__(202));
    __export(__webpack_require__(203));
    __export(__webpack_require__(204));


    /***/ }),
    /* 37 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(217));
    __export(__webpack_require__(219));
    __export(__webpack_require__(229));


    /***/ }),
    /* 38 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class CellBorderAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { style: "w:val", size: "w:sz", color: "w:color" };
        }
    }
    class BaseTableCellBorder extends xml_components_1.XmlComponent {
        setProperties(style, size, color) {
            const attrs = new CellBorderAttributes({
                style: style,
                size: size,
                color: color,
            });
            this.root.push(attrs);
            return this;
        }
    }
    class TableCellBorders extends xml_components_1.IgnoreIfEmptyXmlComponent {
        constructor() {
            super("w:tcBorders");
        }
        addTopBorder(style, size, color) {
            const top = new BaseTableCellBorder("w:top");
            top.setProperties(style, size, color);
            this.root.push(top);
            return this;
        }
        addStartBorder(style, size, color) {
            const start = new BaseTableCellBorder("w:start");
            start.setProperties(style, size, color);
            this.root.push(start);
            return this;
        }
        addBottomBorder(style, size, color) {
            const bottom = new BaseTableCellBorder("w:bottom");
            bottom.setProperties(style, size, color);
            this.root.push(bottom);
            return this;
        }
        addEndBorder(style, size, color) {
            const end = new BaseTableCellBorder("w:end");
            end.setProperties(style, size, color);
            this.root.push(end);
            return this;
        }
        addLeftBorder(style, size, color) {
            const left = new BaseTableCellBorder("w:left");
            left.setProperties(style, size, color);
            this.root.push(left);
            return this;
        }
        addRightBorder(style, size, color) {
            const right = new BaseTableCellBorder("w:right");
            right.setProperties(style, size, color);
            this.root.push(right);
            return this;
        }
    }
    exports.TableCellBorders = TableCellBorders;
    class GridSpanAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class GridSpan extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:gridSpan");
            this.root.push(new GridSpanAttributes({
                val: value,
            }));
        }
    }
    exports.GridSpan = GridSpan;
    (function (VerticalMergeType) {
        VerticalMergeType["CONTINUE"] = "continue";
        VerticalMergeType["RESTART"] = "restart";
    })(exports.VerticalMergeType || (exports.VerticalMergeType = {}));
    class VerticalMergeAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class VerticalMerge extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:vMerge");
            this.root.push(new VerticalMergeAttributes({
                val: value,
            }));
        }
    }
    exports.VerticalMerge = VerticalMerge;
    (function (VerticalAlign) {
        VerticalAlign["BOTTOM"] = "bottom";
        VerticalAlign["CENTER"] = "center";
        VerticalAlign["TOP"] = "top";
    })(exports.VerticalAlign || (exports.VerticalAlign = {}));
    class VAlignAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class VAlign extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:vAlign");
            this.root.push(new VAlignAttributes({
                val: value,
            }));
        }
    }
    exports.VAlign = VAlign;
    (function (TextDirection) {
        TextDirection["BOTTOM_TO_TOP_LEFT_TO_RIGHT"] = "btLr";
        TextDirection["LEFT_TO_RIGHT_TOP_TO_BOTTOM"] = "lrTb";
        TextDirection["TOP_TO_BOTTOM_RIGHT_TO_LEFT"] = "tbRl";
    })(exports.TextDirection || (exports.TextDirection = {}));
    class TDirectionAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class TDirection extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:textDirection");
            this.root.push(new TDirectionAttributes({
                val: value,
            }));
        }
    }
    exports.TDirection = TDirection;
    (function (WidthType) {
        WidthType["AUTO"] = "auto";
        WidthType["DXA"] = "dxa";
        WidthType["NIL"] = "nil";
        WidthType["PERCENTAGE"] = "pct";
    })(exports.WidthType || (exports.WidthType = {}));
    class TableCellWidthAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { width: "w:w", type: "w:type" };
        }
    }
    class TableCellWidth extends xml_components_1.XmlComponent {
        constructor(value, type) {
            super("w:tcW");
            this.root.push(new TableCellWidthAttributes({
                width: value,
                type: type,
            }));
        }
    }
    exports.TableCellWidth = TableCellWidth;


    /***/ }),
    /* 39 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(267));


    /***/ }),
    /* 40 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const components_1 = __webpack_require__(41);
    class StyleAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                type: "w:type",
                styleId: "w:styleId",
                default: "w:default",
                customStyle: "w:customStyle",
            };
        }
    }
    class Style extends xml_components_1.XmlComponent {
        constructor(attributes, name) {
            super("w:style");
            this.root.push(new StyleAttributes(attributes));
            if (name) {
                this.root.push(new components_1.Name(name));
            }
        }
    }
    exports.Style = Style;


    /***/ }),
    /* 41 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class ComponentAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class Name extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:name");
            this.root.push(new ComponentAttributes({ val: value }));
        }
    }
    exports.Name = Name;
    class BasedOn extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:basedOn");
            this.root.push(new ComponentAttributes({ val: value }));
        }
    }
    exports.BasedOn = BasedOn;
    class Next extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:next");
            this.root.push(new ComponentAttributes({ val: value }));
        }
    }
    exports.Next = Next;
    class Link extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:link");
            this.root.push(new ComponentAttributes({ val: value }));
        }
    }
    exports.Link = Link;
    class UiPriority extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:uiPriority");
            this.root.push(new ComponentAttributes({ val: value }));
        }
    }
    exports.UiPriority = UiPriority;
    class UnhideWhenUsed extends xml_components_1.XmlComponent {
        constructor() {
            super("w:unhideWhenUsed");
        }
    }
    exports.UnhideWhenUsed = UnhideWhenUsed;
    class QuickFormat extends xml_components_1.XmlComponent {
        constructor() {
            super("w:qFormat");
        }
    }
    exports.QuickFormat = QuickFormat;
    class TableProperties extends xml_components_1.XmlComponent {
    }
    exports.TableProperties = TableProperties;
    class RsId extends xml_components_1.XmlComponent {
    }
    exports.RsId = RsId;
    class SemiHidden extends xml_components_1.XmlComponent {
        constructor() {
            super("w:semiHidden");
        }
    }
    exports.SemiHidden = SemiHidden;


    /***/ }),
    /* 42 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const paragraph_1 = __webpack_require__(1);
    const properties_1 = __webpack_require__(9);
    const components_1 = __webpack_require__(41);
    const style_1 = __webpack_require__(40);
    class StyleForParagraph extends style_1.Style {
        constructor(options) {
            super({ type: "paragraph", styleId: options.id }, options.name);
            this.paragraphProperties = new paragraph_1.ParagraphProperties(options.paragraph);
            this.runProperties = new properties_1.RunProperties(options.run);
            this.root.push(this.paragraphProperties);
            this.root.push(this.runProperties);
            if (options.basedOn) {
                this.root.push(new components_1.BasedOn(options.basedOn));
            }
            if (options.next) {
                this.root.push(new components_1.Next(options.next));
            }
            if (options.quickFormat) {
                this.root.push(new components_1.QuickFormat());
            }
            if (options.link) {
                this.root.push(new components_1.Link(options.link));
            }
            if (options.semiHidden) {
                this.root.push(new components_1.SemiHidden());
            }
            if (options.uiPriority) {
                this.root.push(new components_1.UiPriority(options.uiPriority));
            }
            if (options.unhideWhenUsed) {
                this.root.push(new components_1.UnhideWhenUsed());
            }
        }
    }
    exports.StyleForParagraph = StyleForParagraph;


    /***/ }),
    /* 43 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const properties_1 = __webpack_require__(9);
    const components_1 = __webpack_require__(41);
    const style_1 = __webpack_require__(40);
    class StyleForCharacter extends style_1.Style {
        constructor(options) {
            super({ type: "character", styleId: options.id }, options.name);
            this.runProperties = new properties_1.RunProperties(options.run);
            this.root.push(this.runProperties);
            this.root.push(new components_1.UiPriority(99));
            this.root.push(new components_1.UnhideWhenUsed());
            if (options.basedOn) {
                this.root.push(new components_1.BasedOn(options.basedOn));
            }
            if (options.link) {
                this.root.push(new components_1.Link(options.link));
            }
            if (options.semiHidden) {
                this.root.push(new components_1.SemiHidden());
            }
        }
    }
    exports.StyleForCharacter = StyleForCharacter;


    /***/ }),
    /* 44 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertMillimetersToTwip = (millimeters) => {
        return Math.floor((millimeters / 25.4) * 72 * 20);
    };
    exports.convertInchesToTwip = (inches) => {
        return Math.floor(inches * 72 * 20);
    };


    /***/ }),
    /* 45 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (PageOrientation) {
        PageOrientation["PORTRAIT"] = "portrait";
        PageOrientation["LANDSCAPE"] = "landscape";
    })(exports.PageOrientation || (exports.PageOrientation = {}));
    class PageSizeAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                width: "w:w",
                height: "w:h",
                orientation: "w:orient",
            };
        }
    }
    exports.PageSizeAttributes = PageSizeAttributes;


    /***/ }),
    /* 46 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const footer_1 = __webpack_require__(308);
    const relationships_1 = __webpack_require__(47);
    class FooterWrapper {
        constructor(media, referenceId, initContent) {
            this.media = media;
            this.footer = new footer_1.Footer(referenceId, initContent);
            this.relationships = new relationships_1.Relationships();
        }
        add(item) {
            this.footer.add(item);
        }
        addChildElement(childElement) {
            this.footer.addChildElement(childElement);
        }
        get Footer() {
            return this.footer;
        }
        get Relationships() {
            return this.relationships;
        }
        get Media() {
            return this.media;
        }
    }
    exports.FooterWrapper = FooterWrapper;


    /***/ }),
    /* 47 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(310));


    /***/ }),
    /* 48 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const relationship_attributes_1 = __webpack_require__(312);
    (function (TargetModeType) {
        TargetModeType["EXTERNAL"] = "External";
    })(exports.TargetModeType || (exports.TargetModeType = {}));
    class Relationship extends xml_components_1.XmlComponent {
        constructor(id, type, target, targetMode) {
            super("Relationship");
            this.root.push(new relationship_attributes_1.RelationshipAttributes({
                id,
                type,
                target,
                targetMode,
            }));
        }
    }
    exports.Relationship = Relationship;


    /***/ }),
    /* 49 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const header_1 = __webpack_require__(326);
    const relationships_1 = __webpack_require__(47);
    class HeaderWrapper {
        constructor(media, referenceId, initContent) {
            this.media = media;
            this.header = new header_1.Header(referenceId, initContent);
            this.relationships = new relationships_1.Relationships();
        }
        add(item) {
            this.header.add(item);
            return this;
        }
        addChildElement(childElement) {
            this.header.addChildElement(childElement);
        }
        get Header() {
            return this.header;
        }
        get Relationships() {
            return this.relationships;
        }
        get Media() {
            return this.media;
        }
    }
    exports.HeaderWrapper = HeaderWrapper;


    /***/ }),
    /* 50 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(328));
    __export(__webpack_require__(329));


    /***/ }),
    /* 51 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(52));
    __export(__webpack_require__(63));
    __export(__webpack_require__(64));
    __export(__webpack_require__(65));
    __export(__webpack_require__(66));
    __export(__webpack_require__(82));
    __export(__webpack_require__(83));
    __export(__webpack_require__(84));
    __export(__webpack_require__(85));


    /***/ }),
    /* 52 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (AlignmentType) {
        AlignmentType["START"] = "start";
        AlignmentType["END"] = "end";
        AlignmentType["CENTER"] = "center";
        AlignmentType["BOTH"] = "both";
        AlignmentType["JUSTIFIED"] = "both";
        AlignmentType["DISTRIBUTE"] = "distribute";
        AlignmentType["LEFT"] = "left";
        AlignmentType["RIGHT"] = "right";
    })(exports.AlignmentType || (exports.AlignmentType = {}));
    class AlignmentAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    exports.AlignmentAttributes = AlignmentAttributes;
    class Alignment extends xml_components_1.XmlComponent {
        constructor(type) {
            super("w:jc");
            this.root.push(new AlignmentAttributes({ val: type }));
        }
    }
    exports.Alignment = Alignment;


    /***/ }),
    /* 53 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const base_1 = __webpack_require__(25);
    class XmlAttributeComponent extends base_1.BaseXmlComponent {
        constructor(properties) {
            super("_attr");
            this.root = properties;
        }
        prepForXml() {
            const attrs = {};
            Object.keys(this.root).forEach((key) => {
                const value = this.root[key];
                if (value !== undefined) {
                    const newKey = (this.xmlKeys && this.xmlKeys[key]) || key;
                    attrs[newKey] = value;
                }
            });
            return { _attr: attrs };
        }
        set(properties) {
            this.root = properties;
        }
    }
    exports.XmlAttributeComponent = XmlAttributeComponent;


    /***/ }),
    /* 54 */
    /***/ (function(module, exports, __webpack_require__) {

    var sax = __webpack_require__(143);
    var helper = __webpack_require__(31);
    var isArray = __webpack_require__(32).isArray;

    var options;
    var currentElement;

    function validateOptions(userOptions) {
      options = helper.copyOptions(userOptions);
      helper.ensureFlagExists('ignoreDeclaration', options);
      helper.ensureFlagExists('ignoreInstruction', options);
      helper.ensureFlagExists('ignoreAttributes', options);
      helper.ensureFlagExists('ignoreText', options);
      helper.ensureFlagExists('ignoreComment', options);
      helper.ensureFlagExists('ignoreCdata', options);
      helper.ensureFlagExists('ignoreDoctype', options);
      helper.ensureFlagExists('compact', options);
      helper.ensureFlagExists('alwaysChildren', options);
      helper.ensureFlagExists('addParent', options);
      helper.ensureFlagExists('trim', options);
      helper.ensureFlagExists('nativeType', options);
      helper.ensureFlagExists('nativeTypeAttributes', options);
      helper.ensureFlagExists('sanitize', options);
      helper.ensureFlagExists('instructionHasAttributes', options);
      helper.ensureFlagExists('captureSpacesBetweenElements', options);
      helper.ensureAlwaysArrayExists(options);
      helper.ensureKeyExists('declaration', options);
      helper.ensureKeyExists('instruction', options);
      helper.ensureKeyExists('attributes', options);
      helper.ensureKeyExists('text', options);
      helper.ensureKeyExists('comment', options);
      helper.ensureKeyExists('cdata', options);
      helper.ensureKeyExists('doctype', options);
      helper.ensureKeyExists('type', options);
      helper.ensureKeyExists('name', options);
      helper.ensureKeyExists('elements', options);
      helper.ensureKeyExists('parent', options);
      helper.checkFnExists('doctype', options);
      helper.checkFnExists('instruction', options);
      helper.checkFnExists('cdata', options);
      helper.checkFnExists('comment', options);
      helper.checkFnExists('text', options);
      helper.checkFnExists('instructionName', options);
      helper.checkFnExists('elementName', options);
      helper.checkFnExists('attributeName', options);
      helper.checkFnExists('attributeValue', options);
      helper.checkFnExists('attributes', options);
      return options;
    }

    function nativeType(value) {
      var nValue = Number(value);
      if (!isNaN(nValue)) {
        return nValue;
      }
      var bValue = value.toLowerCase();
      if (bValue === 'true') {
        return true;
      } else if (bValue === 'false') {
        return false;
      }
      return value;
    }

    function addField(type, value) {
      var key;
      if (options.compact) {
        if (
          !currentElement[options[type + 'Key']] &&
          (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(options[type + 'Key']) !== -1 : options.alwaysArray)
        ) {
          currentElement[options[type + 'Key']] = [];
        }
        if (currentElement[options[type + 'Key']] && !isArray(currentElement[options[type + 'Key']])) {
          currentElement[options[type + 'Key']] = [currentElement[options[type + 'Key']]];
        }
        if (type + 'Fn' in options && typeof value === 'string') {
          value = options[type + 'Fn'](value, currentElement);
        }
        if (type === 'instruction' && ('instructionFn' in options || 'instructionNameFn' in options)) {
          for (key in value) {
            if (value.hasOwnProperty(key)) {
              if ('instructionFn' in options) {
                value[key] = options.instructionFn(value[key], key, currentElement);
              } else {
                var temp = value[key];
                delete value[key];
                value[options.instructionNameFn(key, temp, currentElement)] = temp;
              }
            }
          }
        }
        if (isArray(currentElement[options[type + 'Key']])) {
          currentElement[options[type + 'Key']].push(value);
        } else {
          currentElement[options[type + 'Key']] = value;
        }
      } else {
        if (!currentElement[options.elementsKey]) {
          currentElement[options.elementsKey] = [];
        }
        var element = {};
        element[options.typeKey] = type;
        if (type === 'instruction') {
          for (key in value) {
            if (value.hasOwnProperty(key)) {
              break;
            }
          }
          element[options.nameKey] = 'instructionNameFn' in options ? options.instructionNameFn(key, value, currentElement) : key;
          if (options.instructionHasAttributes) {
            element[options.attributesKey] = value[key][options.attributesKey];
            if ('instructionFn' in options) {
              element[options.attributesKey] = options.instructionFn(element[options.attributesKey], key, currentElement);
            }
          } else {
            if ('instructionFn' in options) {
              value[key] = options.instructionFn(value[key], key, currentElement);
            }
            element[options.instructionKey] = value[key];
          }
        } else {
          if (type + 'Fn' in options) {
            value = options[type + 'Fn'](value, currentElement);
          }
          element[options[type + 'Key']] = value;
        }
        if (options.addParent) {
          element[options.parentKey] = currentElement;
        }
        currentElement[options.elementsKey].push(element);
      }
    }

    function manipulateAttributes(attributes) {
      if ('attributesFn' in options && attributes) {
        attributes = options.attributesFn(attributes, currentElement);
      }
      if ((options.trim || 'attributeValueFn' in options || 'attributeNameFn' in options || options.nativeTypeAttributes) && attributes) {
        var key;
        for (key in attributes) {
          if (attributes.hasOwnProperty(key)) {
            if (options.trim) attributes[key] = attributes[key].trim();
            if (options.nativeTypeAttributes) {
              attributes[key] = nativeType(attributes[key]);
            }
            if ('attributeValueFn' in options) attributes[key] = options.attributeValueFn(attributes[key], key, currentElement);
            if ('attributeNameFn' in options) {
              var temp = attributes[key];
              delete attributes[key];
              attributes[options.attributeNameFn(key, attributes[key], currentElement)] = temp;
            }
          }
        }
      }
      return attributes;
    }

    function onInstruction(instruction) {
      var attributes = {};
      if (instruction.body && (instruction.name.toLowerCase() === 'xml' || options.instructionHasAttributes)) {
        var attrsRegExp = /([\w:-]+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\w+))\s*/g;
        var match;
        while ((match = attrsRegExp.exec(instruction.body)) !== null) {
          attributes[match[1]] = match[2] || match[3] || match[4];
        }
        attributes = manipulateAttributes(attributes);
      }
      if (instruction.name.toLowerCase() === 'xml') {
        if (options.ignoreDeclaration) {
          return;
        }
        currentElement[options.declarationKey] = {};
        if (Object.keys(attributes).length) {
          currentElement[options.declarationKey][options.attributesKey] = attributes;
        }
        if (options.addParent) {
          currentElement[options.declarationKey][options.parentKey] = currentElement;
        }
      } else {
        if (options.ignoreInstruction) {
          return;
        }
        if (options.trim) {
          instruction.body = instruction.body.trim();
        }
        var value = {};
        if (options.instructionHasAttributes && Object.keys(attributes).length) {
          value[instruction.name] = {};
          value[instruction.name][options.attributesKey] = attributes;
        } else {
          value[instruction.name] = instruction.body;
        }
        addField('instruction', value);
      }
    }

    function onStartElement(name, attributes) {
      var element;
      if (typeof name === 'object') {
        attributes = name.attributes;
        name = name.name;
      }
      attributes = manipulateAttributes(attributes);
      if ('elementNameFn' in options) {
        name = options.elementNameFn(name, currentElement);
      }
      if (options.compact) {
        element = {};
        if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {
          element[options.attributesKey] = {};
          var key;
          for (key in attributes) {
            if (attributes.hasOwnProperty(key)) {
              element[options.attributesKey][key] = attributes[key];
            }
          }
        }
        if (
          !(name in currentElement) &&
          (isArray(options.alwaysArray) ? options.alwaysArray.indexOf(name) !== -1 : options.alwaysArray)
        ) {
          currentElement[name] = [];
        }
        if (currentElement[name] && !isArray(currentElement[name])) {
          currentElement[name] = [currentElement[name]];
        }
        if (isArray(currentElement[name])) {
          currentElement[name].push(element);
        } else {
          currentElement[name] = element;
        }
      } else {
        if (!currentElement[options.elementsKey]) {
          currentElement[options.elementsKey] = [];
        }
        element = {};
        element[options.typeKey] = 'element';
        element[options.nameKey] = name;
        if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {
          element[options.attributesKey] = attributes;
        }
        if (options.alwaysChildren) {
          element[options.elementsKey] = [];
        }
        currentElement[options.elementsKey].push(element);
      }
      element[options.parentKey] = currentElement; // will be deleted in onEndElement() if !options.addParent
      currentElement = element;
    }

    function onText(text) {
      if (options.ignoreText) {
        return;
      }
      if (!text.trim() && !options.captureSpacesBetweenElements) {
        return;
      }
      if (options.trim) {
        text = text.trim();
      }
      if (options.nativeType) {
        text = nativeType(text);
      }
      if (options.sanitize) {
        text = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      }
      addField('text', text);
    }

    function onComment(comment) {
      if (options.ignoreComment) {
        return;
      }
      if (options.trim) {
        comment = comment.trim();
      }
      addField('comment', comment);
    }

    function onEndElement(name) {
      var parentElement = currentElement[options.parentKey];
      if (!options.addParent) {
        delete currentElement[options.parentKey];
      }
      currentElement = parentElement;
    }

    function onCdata(cdata) {
      if (options.ignoreCdata) {
        return;
      }
      if (options.trim) {
        cdata = cdata.trim();
      }
      addField('cdata', cdata);
    }

    function onDoctype(doctype) {
      if (options.ignoreDoctype) {
        return;
      }
      doctype = doctype.replace(/^ /, '');
      if (options.trim) {
        doctype = doctype.trim();
      }
      addField('doctype', doctype);
    }

    function onError(error) {
      error.note = error; //console.error(error);
    }

    module.exports = function (xml, userOptions) {

      var parser = sax.parser(true, {}) ;
      var result = {};
      currentElement = result;

      options = validateOptions(userOptions);

      {
        parser.opt = {strictEntities: true};
        parser.onopentag = onStartElement;
        parser.ontext = onText;
        parser.oncomment = onComment;
        parser.onclosetag = onEndElement;
        parser.onerror = onError;
        parser.oncdata = onCdata;
        parser.ondoctype = onDoctype;
        parser.onprocessinginstruction = onInstruction;
      }

      {
        parser.write(xml).close();
      }

      if (result[options.elementsKey]) {
        var temp = result[options.elementsKey];
        delete result[options.elementsKey];
        result[options.elementsKey] = temp;
        delete result.text;
      }

      return result;

    };


    /***/ }),
    /* 55 */
    /***/ (function(module, exports) {

    var toString = {}.toString;

    module.exports = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };


    /***/ }),
    /* 56 */
    /***/ (function(module, exports, __webpack_require__) {

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    module.exports = Stream;

    var EE = __webpack_require__(27).EventEmitter;
    var inherits = __webpack_require__(7);

    inherits(Stream, EE);
    Stream.Readable = __webpack_require__(28);
    Stream.Writable = __webpack_require__(152);
    Stream.Duplex = __webpack_require__(153);
    Stream.Transform = __webpack_require__(154);
    Stream.PassThrough = __webpack_require__(155);

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;



    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EE.call(this);
    }

    Stream.prototype.pipe = function(dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }


      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };


    /***/ }),
    /* 57 */
    /***/ (function(module, exports, __webpack_require__) {
    /* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.



    /*<replacement>*/

    var pna = __webpack_require__(15);
    /*</replacement>*/

    module.exports = Readable;

    /*<replacement>*/
    var isArray = __webpack_require__(55);
    /*</replacement>*/

    /*<replacement>*/
    var Duplex;
    /*</replacement>*/

    Readable.ReadableState = ReadableState;

    /*<replacement>*/
    __webpack_require__(27).EventEmitter;

    var EElistenerCount = function (emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/

    /*<replacement>*/
    var Stream = __webpack_require__(58);
    /*</replacement>*/

    /*<replacement>*/

    var Buffer = __webpack_require__(16).Buffer;
    var OurUint8Array = global.Uint8Array || function () {};
    function _uint8ArrayToBuffer(chunk) {
      return Buffer.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
    }

    /*</replacement>*/

    /*<replacement>*/
    var util = __webpack_require__(14);
    util.inherits = __webpack_require__(7);
    /*</replacement>*/

    /*<replacement>*/
    var debugUtil = __webpack_require__(146);
    var debug = void 0;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog('stream');
    } else {
      debug = function () {};
    }
    /*</replacement>*/

    var BufferList = __webpack_require__(147);
    var destroyImpl = __webpack_require__(59);
    var StringDecoder;

    util.inherits(Readable, Stream);

    var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }

    function ReadableState(options, stream) {
      Duplex = Duplex || __webpack_require__(5);

      options = options || {};

      // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.
      var isDuplex = stream instanceof Duplex;

      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;

      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var readableHwm = options.readableHighWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;

      if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

      // cast to ints.
      this.highWaterMark = Math.floor(this.highWaterMark);

      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;

      // has it been destroyed
      this.destroyed = false;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;

      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder) StringDecoder = __webpack_require__(30).StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }

    function Readable(options) {
      Duplex = Duplex || __webpack_require__(5);

      if (!(this instanceof Readable)) return new Readable(options);

      this._readableState = new ReadableState(options, this);

      // legacy
      this.readable = true;

      if (options) {
        if (typeof options.read === 'function') this._read = options.read;

        if (typeof options.destroy === 'function') this._destroy = options.destroy;
      }

      Stream.call(this);
    }

    Object.defineProperty(Readable.prototype, 'destroyed', {
      get: function () {
        if (this._readableState === undefined) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
          return;
        }

        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
      }
    });

    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function (err, cb) {
      this.push(null);
      cb(err);
    };

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;

      if (!state.objectMode) {
        if (typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer.from(chunk, encoding);
            encoding = '';
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }

      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };

    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };

    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) {
          stream.emit('error', er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (addToFront) {
            if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            stream.emit('error', new Error('stream.push() after EOF'));
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
        }
      }

      return needMoreData(state);
    }

    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

        if (state.needReadable) emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }

    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }

    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };

    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      if (!StringDecoder) StringDecoder = __webpack_require__(30).StringDecoder;
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };

    // Don't raise the hwm > 8MB
    var MAX_HWM = 0x800000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }

    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }

    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;

      if (n !== 0) state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;

        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);

      return ret;
    };

    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;

      // emit 'readable' now to make sure it gets picked up.
      emitReadable(stream);
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }

    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    }

    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        pna.nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;else len = state.length;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      this.emit('error', new Error('_read() is not implemented'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

      dest.on('unpipe', onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }

      function onend() {
        debug('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);

      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);

        cleanedUp = true;

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.
      var increasedAwaitDrain = false;
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
      }

      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);

      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);

      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;
      var unpipeInfo = { hasUnpiped: false };

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;

        if (!dest) dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var i = 0; i < len; i++) {
          dests[i].emit('unpipe', this, unpipeInfo);
        }return this;
      }

      // try to find the right one.
      var index = indexOf(state.pipes, dest);
      if (index === -1) return this;

      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];

      dest.emit('unpipe', this, unpipeInfo);

      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);

      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            pna.nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }

      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;

    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };

    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        pna.nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }

      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null) {}
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var _this = this;

      var state = this._readableState;
      var paused = false;

      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }

        _this.push(null);
      });

      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);

        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }

      // proxy certain important events.
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      this._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return this;
    };

    Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function () {
        return this._readableState.highWaterMark;
      }
    });

    // exposed for testing purposes only.
    Readable._fromList = fromList;

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;

      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }

      return ret;
    }

    // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }

    // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBuffer(n, list) {
      var ret = Buffer.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState;

      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        pna.nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(13)));

    /***/ }),
    /* 58 */
    /***/ (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(27).EventEmitter;


    /***/ }),
    /* 59 */
    /***/ (function(module, exports, __webpack_require__) {


    /*<replacement>*/

    var pna = __webpack_require__(15);
    /*</replacement>*/

    // undocumented cb() API, needed for core, not for public API
    function destroy(err, cb) {
      var _this = this;

      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;

      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
          pna.nextTick(emitErrorNT, this, err);
        }
        return this;
      }

      // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks

      if (this._readableState) {
        this._readableState.destroyed = true;
      }

      // if this is a duplex stream mark the writable part as destroyed as well
      if (this._writableState) {
        this._writableState.destroyed = true;
      }

      this._destroy(err || null, function (err) {
        if (!cb && err) {
          pna.nextTick(emitErrorNT, _this, err);
          if (_this._writableState) {
            _this._writableState.errorEmitted = true;
          }
        } else if (cb) {
          cb(err);
        }
      });

      return this;
    }

    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }

      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }

    function emitErrorNT(self, err) {
      self.emit('error', err);
    }

    module.exports = {
      destroy: destroy,
      undestroy: undestroy
    };

    /***/ }),
    /* 60 */
    /***/ (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
                (typeof self !== "undefined" && self) ||
                window;
    var apply = Function.prototype.apply;

    // DOM APIs, for completeness

    exports.setTimeout = function() {
      return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
    };
    exports.setInterval = function() {
      return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
    };
    exports.clearTimeout =
    exports.clearInterval = function(timeout) {
      if (timeout) {
        timeout.close();
      }
    };

    function Timeout(id, clearFn) {
      this._id = id;
      this._clearFn = clearFn;
    }
    Timeout.prototype.unref = Timeout.prototype.ref = function() {};
    Timeout.prototype.close = function() {
      this._clearFn.call(scope, this._id);
    };

    // Does not start the time, just sets up the members needed.
    exports.enroll = function(item, msecs) {
      clearTimeout(item._idleTimeoutId);
      item._idleTimeout = msecs;
    };

    exports.unenroll = function(item) {
      clearTimeout(item._idleTimeoutId);
      item._idleTimeout = -1;
    };

    exports._unrefActive = exports.active = function(item) {
      clearTimeout(item._idleTimeoutId);

      var msecs = item._idleTimeout;
      if (msecs >= 0) {
        item._idleTimeoutId = setTimeout(function onTimeout() {
          if (item._onTimeout)
            item._onTimeout();
        }, msecs);
      }
    };

    // setimmediate attaches itself to the global object
    __webpack_require__(149);
    // On some exotic environments, it's not clear which object `setimmediate` was
    // able to install onto.  Search each possibility in the same order as the
    // `setimmediate` library.
    exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                           (typeof global !== "undefined" && global.setImmediate) ||
                           (this && this.setImmediate);
    exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                             (typeof global !== "undefined" && global.clearImmediate) ||
                             (this && this.clearImmediate);

    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)));

    /***/ }),
    /* 61 */
    /***/ (function(module, exports, __webpack_require__) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.



    module.exports = Transform;

    var Duplex = __webpack_require__(5);

    /*<replacement>*/
    var util = __webpack_require__(14);
    util.inherits = __webpack_require__(7);
    /*</replacement>*/

    util.inherits(Transform, Duplex);

    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb) {
        return this.emit('error', new Error('write callback called multiple times'));
      }

      ts.writechunk = null;
      ts.writecb = null;

      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);

      cb(er);

      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }

    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);

      Duplex.call(this, options);

      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;

        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      // When the writable side finishes, then flush out anything remaining.
      this.on('prefinish', prefinish);
    }

    function prefinish() {
      var _this = this;

      if (typeof this._flush === 'function') {
        this._flush(function (er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('_transform() is not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    Transform.prototype._destroy = function (err, cb) {
      var _this2 = this;

      Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
        _this2.emit('close');
      });
    };

    function done(stream, er, data) {
      if (er) return stream.emit('error', er);

      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

      if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

      return stream.push(null);
    }

    /***/ }),
    /* 62 */
    /***/ (function(module, exports, __webpack_require__) {

    var helper = __webpack_require__(31);
    var isArray = __webpack_require__(32).isArray;

    var currentElement, currentElementName;

    function validateOptions(userOptions) {
      var options = helper.copyOptions(userOptions);
      helper.ensureFlagExists('ignoreDeclaration', options);
      helper.ensureFlagExists('ignoreInstruction', options);
      helper.ensureFlagExists('ignoreAttributes', options);
      helper.ensureFlagExists('ignoreText', options);
      helper.ensureFlagExists('ignoreComment', options);
      helper.ensureFlagExists('ignoreCdata', options);
      helper.ensureFlagExists('ignoreDoctype', options);
      helper.ensureFlagExists('compact', options);
      helper.ensureFlagExists('indentText', options);
      helper.ensureFlagExists('indentCdata', options);
      helper.ensureFlagExists('indentAttributes', options);
      helper.ensureFlagExists('indentInstruction', options);
      helper.ensureFlagExists('fullTagEmptyElement', options);
      helper.ensureFlagExists('noQuotesForNativeAttributes', options);
      helper.ensureSpacesExists(options);
      if (typeof options.spaces === 'number') {
        options.spaces = Array(options.spaces + 1).join(' ');
      }
      helper.ensureKeyExists('declaration', options);
      helper.ensureKeyExists('instruction', options);
      helper.ensureKeyExists('attributes', options);
      helper.ensureKeyExists('text', options);
      helper.ensureKeyExists('comment', options);
      helper.ensureKeyExists('cdata', options);
      helper.ensureKeyExists('doctype', options);
      helper.ensureKeyExists('type', options);
      helper.ensureKeyExists('name', options);
      helper.ensureKeyExists('elements', options);
      helper.checkFnExists('doctype', options);
      helper.checkFnExists('instruction', options);
      helper.checkFnExists('cdata', options);
      helper.checkFnExists('comment', options);
      helper.checkFnExists('text', options);
      helper.checkFnExists('instructionName', options);
      helper.checkFnExists('elementName', options);
      helper.checkFnExists('attributeName', options);
      helper.checkFnExists('attributeValue', options);
      helper.checkFnExists('attributes', options);
      helper.checkFnExists('fullTagEmptyElement', options);
      return options;
    }

    function writeIndentation(options, depth, firstLine) {
      return (!firstLine && options.spaces ? '\n' : '') + Array(depth + 1).join(options.spaces);
    }

    function writeAttributes(attributes, options, depth) {
      if (options.ignoreAttributes) {
        return '';
      }
      if ('attributesFn' in options) {
        attributes = options.attributesFn(attributes, currentElementName, currentElement);
      }
      var key, attr, attrName, quote, result = [];
      for (key in attributes) {
        if (attributes.hasOwnProperty(key) && attributes[key] !== null && attributes[key] !== undefined) {
          quote = options.noQuotesForNativeAttributes && typeof attributes[key] !== 'string' ? '' : '"';
          attr = '' + attributes[key]; // ensure number and boolean are converted to String
          attr = attr.replace(/"/g, '&quot;');
          attrName = 'attributeNameFn' in options ? options.attributeNameFn(key, attr, currentElementName, currentElement) : key;
          result.push((options.spaces && options.indentAttributes? writeIndentation(options, depth+1, false) : ' '));
          result.push(attrName + '=' + quote + ('attributeValueFn' in options ? options.attributeValueFn(attr, key, currentElementName, currentElement) : attr) + quote);
        }
      }
      if (attributes && Object.keys(attributes).length && options.spaces && options.indentAttributes) {
        result.push(writeIndentation(options, depth, false));
      }
      return result.join('');
    }

    function writeDeclaration(declaration, options, depth) {
      currentElement = declaration;
      currentElementName = 'xml';
      return options.ignoreDeclaration ? '' :  '<?' + 'xml' + writeAttributes(declaration[options.attributesKey], options, depth) + '?>';
    }

    function writeInstruction(instruction, options, depth) {
      if (options.ignoreInstruction) {
        return '';
      }
      var key;
      for (key in instruction) {
        if (instruction.hasOwnProperty(key)) {
          break;
        }
      }
      var instructionName = 'instructionNameFn' in options ? options.instructionNameFn(key, instruction[key], currentElementName, currentElement) : key;
      if (typeof instruction[key] === 'object') {
        currentElement = instruction;
        currentElementName = instructionName;
        return '<?' + instructionName + writeAttributes(instruction[key][options.attributesKey], options, depth) + '?>';
      } else {
        var instructionValue = instruction[key] ? instruction[key] : '';
        if ('instructionFn' in options) instructionValue = options.instructionFn(instructionValue, key, currentElementName, currentElement);
        return '<?' + instructionName + (instructionValue ? ' ' + instructionValue : '') + '?>';
      }
    }

    function writeComment(comment, options) {
      return options.ignoreComment ? '' : '<!--' + ('commentFn' in options ? options.commentFn(comment, currentElementName, currentElement) : comment) + '-->';
    }

    function writeCdata(cdata, options) {
      return options.ignoreCdata ? '' : '<![CDATA[' + ('cdataFn' in options ? options.cdataFn(cdata, currentElementName, currentElement) : cdata.replace(']]>', ']]]]><![CDATA[>')) + ']]>';
    }

    function writeDoctype(doctype, options) {
      return options.ignoreDoctype ? '' : '<!DOCTYPE ' + ('doctypeFn' in options ? options.doctypeFn(doctype, currentElementName, currentElement) : doctype) + '>';
    }

    function writeText(text, options) {
      if (options.ignoreText) return '';
      text = '' + text; // ensure Number and Boolean are converted to String
      text = text.replace(/&amp;/g, '&'); // desanitize to avoid double sanitization
      text = text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      return 'textFn' in options ? options.textFn(text, currentElementName, currentElement) : text;
    }

    function hasContent(element, options) {
      var i;
      if (element.elements && element.elements.length) {
        for (i = 0; i < element.elements.length; ++i) {
          switch (element.elements[i][options.typeKey]) {
          case 'text':
            if (options.indentText) {
              return true;
            }
            break; // skip to next key
          case 'cdata':
            if (options.indentCdata) {
              return true;
            }
            break; // skip to next key
          case 'instruction':
            if (options.indentInstruction) {
              return true;
            }
            break; // skip to next key
          case 'doctype':
          case 'comment':
          case 'element':
            return true;
          default:
            return true;
          }
        }
      }
      return false;
    }

    function writeElement(element, options, depth) {
      currentElement = element;
      currentElementName = element.name;
      var xml = [], elementName = 'elementNameFn' in options ? options.elementNameFn(element.name, element) : element.name;
      xml.push('<' + elementName);
      if (element[options.attributesKey]) {
        xml.push(writeAttributes(element[options.attributesKey], options, depth));
      }
      var withClosingTag = element[options.elementsKey] && element[options.elementsKey].length || element[options.attributesKey] && element[options.attributesKey]['xml:space'] === 'preserve';
      if (!withClosingTag) {
        if ('fullTagEmptyElementFn' in options) {
          withClosingTag = options.fullTagEmptyElementFn(element.name, element);
        } else {
          withClosingTag = options.fullTagEmptyElement;
        }
      }
      if (withClosingTag) {
        xml.push('>');
        if (element[options.elementsKey] && element[options.elementsKey].length) {
          xml.push(writeElements(element[options.elementsKey], options, depth + 1));
          currentElement = element;
          currentElementName = element.name;
        }
        xml.push(options.spaces && hasContent(element, options) ? '\n' + Array(depth + 1).join(options.spaces) : '');
        xml.push('</' + elementName + '>');
      } else {
        xml.push('/>');
      }
      return xml.join('');
    }

    function writeElements(elements, options, depth, firstLine) {
      return elements.reduce(function (xml, element) {
        var indent = writeIndentation(options, depth, firstLine && !xml);
        switch (element.type) {
        case 'element': return xml + indent + writeElement(element, options, depth);
        case 'comment': return xml + indent + writeComment(element[options.commentKey], options);
        case 'doctype': return xml + indent + writeDoctype(element[options.doctypeKey], options);
        case 'cdata': return xml + (options.indentCdata ? indent : '') + writeCdata(element[options.cdataKey], options);
        case 'text': return xml + (options.indentText ? indent : '') + writeText(element[options.textKey], options);
        case 'instruction':
          var instruction = {};
          instruction[element[options.nameKey]] = element[options.attributesKey] ? element : element[options.instructionKey];
          return xml + (options.indentInstruction ? indent : '') + writeInstruction(instruction, options, depth);
        }
      }, '');
    }

    function hasContentCompact(element, options, anyContent) {
      var key;
      for (key in element) {
        if (element.hasOwnProperty(key)) {
          switch (key) {
          case options.parentKey:
          case options.attributesKey:
            break; // skip to next key
          case options.textKey:
            if (options.indentText || anyContent) {
              return true;
            }
            break; // skip to next key
          case options.cdataKey:
            if (options.indentCdata || anyContent) {
              return true;
            }
            break; // skip to next key
          case options.instructionKey:
            if (options.indentInstruction || anyContent) {
              return true;
            }
            break; // skip to next key
          case options.doctypeKey:
          case options.commentKey:
            return true;
          default:
            return true;
          }
        }
      }
      return false;
    }

    function writeElementCompact(element, name, options, depth, indent) {
      currentElement = element;
      currentElementName = name;
      var elementName = 'elementNameFn' in options ? options.elementNameFn(name, element) : name;
      if (typeof element === 'undefined' || element === null || element === '') {
        return 'fullTagEmptyElementFn' in options && options.fullTagEmptyElementFn(name, element) || options.fullTagEmptyElement ? '<' + elementName + '></' + elementName + '>' : '<' + elementName + '/>';
      }
      var xml = [];
      if (name) {
        xml.push('<' + elementName);
        if (typeof element !== 'object') {
          xml.push('>' + writeText(element,options) + '</' + elementName + '>');
          return xml.join('');
        }
        if (element[options.attributesKey]) {
          xml.push(writeAttributes(element[options.attributesKey], options, depth));
        }
        var withClosingTag = hasContentCompact(element, options, true) || element[options.attributesKey] && element[options.attributesKey]['xml:space'] === 'preserve';
        if (!withClosingTag) {
          if ('fullTagEmptyElementFn' in options) {
            withClosingTag = options.fullTagEmptyElementFn(name, element);
          } else {
            withClosingTag = options.fullTagEmptyElement;
          }
        }
        if (withClosingTag) {
          xml.push('>');
        } else {
          xml.push('/>');
          return xml.join('');
        }
      }
      xml.push(writeElementsCompact(element, options, depth + 1, false));
      currentElement = element;
      currentElementName = name;
      if (name) {
        xml.push((indent ? writeIndentation(options, depth, false) : '') + '</' + elementName + '>');
      }
      return xml.join('');
    }

    function writeElementsCompact(element, options, depth, firstLine) {
      var i, key, nodes, xml = [];
      for (key in element) {
        if (element.hasOwnProperty(key)) {
          nodes = isArray(element[key]) ? element[key] : [element[key]];
          for (i = 0; i < nodes.length; ++i) {
            switch (key) {
            case options.declarationKey: xml.push(writeDeclaration(nodes[i], options, depth)); break;
            case options.instructionKey: xml.push((options.indentInstruction ? writeIndentation(options, depth, firstLine) : '') + writeInstruction(nodes[i], options, depth)); break;
            case options.attributesKey: case options.parentKey: break; // skip
            case options.textKey: xml.push((options.indentText ? writeIndentation(options, depth, firstLine) : '') + writeText(nodes[i], options)); break;
            case options.cdataKey: xml.push((options.indentCdata ? writeIndentation(options, depth, firstLine) : '') + writeCdata(nodes[i], options)); break;
            case options.doctypeKey: xml.push(writeIndentation(options, depth, firstLine) + writeDoctype(nodes[i], options)); break;
            case options.commentKey: xml.push(writeIndentation(options, depth, firstLine) + writeComment(nodes[i], options)); break;
            default: xml.push(writeIndentation(options, depth, firstLine) + writeElementCompact(nodes[i], key, options, depth, hasContentCompact(nodes[i], options)));
            }
            firstLine = firstLine && !xml.length;
          }
        }
      }
      return xml.join('');
    }

    module.exports = function (js, options) {
      options = validateOptions(options);
      var xml = [];
      currentElement = js;
      currentElementName = '_root_';
      if (options.compact) {
        xml.push(writeElementsCompact(js, options, 0, true));
      } else {
        if (js[options.declarationKey]) {
          xml.push(writeDeclaration(js[options.declarationKey], options, 0));
        }
        if (js[options.elementsKey] && js[options.elementsKey].length) {
          xml.push(writeElements(js[options.elementsKey], options, 0, !xml.length));
        }
      }
      return xml.join('');
    };


    /***/ }),
    /* 63 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const border_attributes_1 = __webpack_require__(160);
    class BorderProperty extends xml_components_1.XmlComponent {
        constructor(rootKey, options = { color: "auto", space: 1, value: "single", size: 6 }) {
            super(rootKey);
            const attrs = new border_attributes_1.BorderAttributes({
                color: options.color,
                space: options.space,
                val: options.value,
                sz: options.size,
            });
            this.root.push(attrs);
        }
    }
    class Border extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:pBdr");
            if (options.top !== undefined) {
                const borderProperty = new BorderProperty("w:top", options.top);
                this.root.push(borderProperty);
            }
            if (options.bottom !== undefined) {
                const borderProperty = new BorderProperty("w:bottom", options.bottom);
                this.root.push(borderProperty);
            }
            if (options.left !== undefined) {
                const borderProperty = new BorderProperty("w:left", options.left);
                this.root.push(borderProperty);
            }
            if (options.right !== undefined) {
                const borderProperty = new BorderProperty("w:right", options.right);
                this.root.push(borderProperty);
            }
        }
    }
    exports.Border = Border;
    class ThematicBreak extends xml_components_1.XmlComponent {
        constructor() {
            super("w:pBdr");
            const bottom = new BorderProperty("w:bottom", {
                color: "auto",
                space: 1,
                value: "single",
                size: 6,
            });
            this.root.push(bottom);
        }
    }
    exports.ThematicBreak = ThematicBreak;


    /***/ }),
    /* 64 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class IndentAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                left: "w:left",
                hanging: "w:hanging",
                firstLine: "w:firstLine",
                start: "w:start",
                end: "w:end",
                right: "w:end",
            };
        }
    }
    class Indent extends xml_components_1.XmlComponent {
        constructor(attrs) {
            super("w:ind");
            this.root.push(new IndentAttributes(attrs));
        }
    }
    exports.Indent = Indent;


    /***/ }),
    /* 65 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class KeepLines extends xml_components_1.XmlComponent {
        constructor() {
            super("w:keepLines");
        }
    }
    exports.KeepLines = KeepLines;
    class KeepNext extends xml_components_1.XmlComponent {
        constructor() {
            super("w:keepNext");
        }
    }
    exports.KeepNext = KeepNext;


    /***/ }),
    /* 66 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const run_1 = __webpack_require__(3);
    class Break extends xml_components_1.XmlComponent {
        constructor() {
            super("w:br");
            this.root.push(new xml_components_1.Attributes({
                type: "page",
            }));
        }
    }
    class PageBreak extends run_1.Run {
        constructor() {
            super({});
            this.root.push(new Break());
        }
    }
    exports.PageBreak = PageBreak;
    class PageBreakBefore extends xml_components_1.XmlComponent {
        constructor() {
            super("w:pageBreakBefore");
        }
    }
    exports.PageBreakBefore = PageBreakBefore;


    /***/ }),
    /* 67 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class Break extends xml_components_1.XmlComponent {
        constructor() {
            super("w:br");
        }
    }
    exports.Break = Break;


    /***/ }),
    /* 68 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    var underline_1 = __webpack_require__(19);
    exports.Underline = underline_1.Underline;
    var emphasis_mark_1 = __webpack_require__(33);
    exports.EmphasisMark = emphasis_mark_1.EmphasisMark;
    var script_1 = __webpack_require__(69);
    exports.SubScript = script_1.SubScript;
    exports.SuperScript = script_1.SuperScript;
    var run_fonts_1 = __webpack_require__(34);
    exports.RunFonts = run_fonts_1.RunFonts;
    class Bold extends xml_components_1.XmlComponent {
        constructor() {
            super("w:b");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.Bold = Bold;
    class BoldComplexScript extends xml_components_1.XmlComponent {
        constructor() {
            super("w:bCs");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.BoldComplexScript = BoldComplexScript;
    class CharacterSpacing extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:spacing");
            this.root.push(new xml_components_1.Attributes({
                val: value,
            }));
        }
    }
    exports.CharacterSpacing = CharacterSpacing;
    class Italics extends xml_components_1.XmlComponent {
        constructor() {
            super("w:i");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.Italics = Italics;
    class ItalicsComplexScript extends xml_components_1.XmlComponent {
        constructor() {
            super("w:iCs");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.ItalicsComplexScript = ItalicsComplexScript;
    class Caps extends xml_components_1.XmlComponent {
        constructor() {
            super("w:caps");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.Caps = Caps;
    class Color extends xml_components_1.XmlComponent {
        constructor(color) {
            super("w:color");
            this.root.push(new xml_components_1.Attributes({
                val: color,
            }));
        }
    }
    exports.Color = Color;
    class DoubleStrike extends xml_components_1.XmlComponent {
        constructor() {
            super("w:dstrike");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.DoubleStrike = DoubleStrike;
    class Emboss extends xml_components_1.XmlComponent {
        constructor() {
            super("w:emboss");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.Emboss = Emboss;
    class Imprint extends xml_components_1.XmlComponent {
        constructor() {
            super("w:imprint");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.Imprint = Imprint;
    class SmallCaps extends xml_components_1.XmlComponent {
        constructor() {
            super("w:smallCaps");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.SmallCaps = SmallCaps;
    class Strike extends xml_components_1.XmlComponent {
        constructor() {
            super("w:strike");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.Strike = Strike;
    class Size extends xml_components_1.XmlComponent {
        constructor(size) {
            super("w:sz");
            this.root.push(new xml_components_1.Attributes({
                val: size,
            }));
        }
    }
    exports.Size = Size;
    class SizeComplexScript extends xml_components_1.XmlComponent {
        constructor(size) {
            super("w:szCs");
            this.root.push(new xml_components_1.Attributes({
                val: size,
            }));
        }
    }
    exports.SizeComplexScript = SizeComplexScript;
    class RightToLeft extends xml_components_1.XmlComponent {
        constructor() {
            super("w:rtl");
            this.root.push(new xml_components_1.Attributes({
                val: true,
            }));
        }
    }
    exports.RightToLeft = RightToLeft;
    class Highlight extends xml_components_1.XmlComponent {
        constructor(color) {
            super("w:highlight");
            this.root.push(new xml_components_1.Attributes({
                val: color,
            }));
        }
    }
    exports.Highlight = Highlight;
    class HighlightComplexScript extends xml_components_1.XmlComponent {
        constructor(color) {
            super("w:highlightCs");
            this.root.push(new xml_components_1.Attributes({
                val: color,
            }));
        }
    }
    exports.HighlightComplexScript = HighlightComplexScript;
    class Shading extends xml_components_1.XmlComponent {
        constructor(value, fill, color) {
            super("w:shd");
            this.root.push(new xml_components_1.Attributes({
                val: value,
                fill: fill,
                color: color,
            }));
        }
    }
    exports.Shading = Shading;
    class ShadowComplexScript extends xml_components_1.XmlComponent {
        constructor(value, fill, color) {
            super("w:shdCs");
            this.root.push(new xml_components_1.Attributes({
                val: value,
                fill: fill,
                color: color,
            }));
        }
    }
    exports.ShadowComplexScript = ShadowComplexScript;


    /***/ }),
    /* 69 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class VerticalAlign extends xml_components_1.XmlComponent {
        constructor(type) {
            super("w:vertAlign");
            this.root.push(new xml_components_1.Attributes({
                val: type,
            }));
        }
    }
    exports.VerticalAlign = VerticalAlign;
    class SuperScript extends VerticalAlign {
        constructor() {
            super("superscript");
        }
    }
    exports.SuperScript = SuperScript;
    class SubScript extends VerticalAlign {
        constructor() {
            super("subscript");
        }
    }
    exports.SubScript = SubScript;


    /***/ }),
    /* 70 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class StyleAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class Style extends xml_components_1.XmlComponent {
        constructor(styleId) {
            super("w:rStyle");
            this.root.push(new StyleAttributes({ val: styleId }));
        }
    }
    exports.Style = Style;


    /***/ }),
    /* 71 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const space_type_1 = __webpack_require__(8);
    const xml_components_1 = __webpack_require__(0);
    class TextAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { space: "xml:space" };
        }
    }
    class Text extends xml_components_1.XmlComponent {
        constructor(text) {
            super("w:t");
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            this.root.push(text);
        }
    }
    exports.Text = Text;


    /***/ }),
    /* 72 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(166));
    __export(__webpack_require__(36));
    __export(__webpack_require__(73));


    /***/ }),
    /* 73 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(35));
    __export(__webpack_require__(169));
    __export(__webpack_require__(170));
    __export(__webpack_require__(171));


    /***/ }),
    /* 74 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class Align extends xml_components_1.XmlComponent {
        constructor(value) {
            super("wp:align");
            this.root.push(value);
        }
    }
    exports.Align = Align;


    /***/ }),
    /* 75 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class PositionOffset extends xml_components_1.XmlComponent {
        constructor(offsetValue) {
            super("wp:posOffset");
            this.root.push(offsetValue.toString());
        }
    }
    exports.PositionOffset = PositionOffset;


    /***/ }),
    /* 76 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(172));


    /***/ }),
    /* 77 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const doc_properties_attributes_1 = __webpack_require__(205);
    class DocProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("wp:docPr");
            this.root.push(new doc_properties_attributes_1.DocPropertiesAttributes({
                id: 0,
                name: "",
                descr: "",
            }));
        }
    }
    exports.DocProperties = DocProperties;


    /***/ }),
    /* 78 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const effect_extent_attributes_1 = __webpack_require__(206);
    class EffectExtent extends xml_components_1.XmlComponent {
        constructor() {
            super("wp:effectExtent");
            this.root.push(new effect_extent_attributes_1.EffectExtentAttributes({
                b: 0,
                l: 0,
                r: 0,
                t: 0,
            }));
        }
    }
    exports.EffectExtent = EffectExtent;


    /***/ }),
    /* 79 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const extent_attributes_1 = __webpack_require__(207);
    class Extent extends xml_components_1.XmlComponent {
        constructor(x, y) {
            super("wp:extent");
            this.attributes = new extent_attributes_1.ExtentAttributes({
                cx: x,
                cy: y,
            });
            this.root.push(this.attributes);
        }
        setXY(x, y) {
            this.attributes.set({
                cx: x,
                cy: y,
            });
        }
    }
    exports.Extent = Extent;


    /***/ }),
    /* 80 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const graphic_frame_locks_1 = __webpack_require__(208);
    class GraphicFrameProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("wp:cNvGraphicFramePr");
            this.root.push(new graphic_frame_locks_1.GraphicFrameLocks());
        }
    }
    exports.GraphicFrameProperties = GraphicFrameProperties;


    /***/ }),
    /* 81 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class AnchorAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                distT: "distT",
                distB: "distB",
                distL: "distL",
                distR: "distR",
                allowOverlap: "allowOverlap",
                behindDoc: "behindDoc",
                layoutInCell: "layoutInCell",
                locked: "locked",
                relativeHeight: "relativeHeight",
                simplePos: "simplePos",
            };
        }
    }
    exports.AnchorAttributes = AnchorAttributes;


    /***/ }),
    /* 82 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class SpacingAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                after: "w:after",
                before: "w:before",
                line: "w:line",
                lineRule: "w:lineRule",
            };
        }
    }
    class Spacing extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:spacing");
            this.root.push(new SpacingAttributes(options));
        }
    }
    exports.Spacing = Spacing;
    class ContextualSpacing extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:contextualSpacing");
            this.root.push(new xml_components_1.Attributes({
                val: value === false ? 0 : 1,
            }));
        }
    }
    exports.ContextualSpacing = ContextualSpacing;


    /***/ }),
    /* 83 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (HeadingLevel) {
        HeadingLevel["HEADING_1"] = "Heading1";
        HeadingLevel["HEADING_2"] = "Heading2";
        HeadingLevel["HEADING_3"] = "Heading3";
        HeadingLevel["HEADING_4"] = "Heading4";
        HeadingLevel["HEADING_5"] = "Heading5";
        HeadingLevel["HEADING_6"] = "Heading6";
        HeadingLevel["TITLE"] = "Title";
    })(exports.HeadingLevel || (exports.HeadingLevel = {}));
    class Style extends xml_components_1.XmlComponent {
        constructor(styleId) {
            super("w:pStyle");
            this.root.push(new xml_components_1.Attributes({
                val: styleId,
            }));
        }
    }
    exports.Style = Style;


    /***/ }),
    /* 84 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class TabStop extends xml_components_1.XmlComponent {
        constructor(type, position, leader) {
            super("w:tabs");
            this.root.push(new TabStopItem(type, position, leader));
        }
    }
    exports.TabStop = TabStop;
    (function (TabStopType) {
        TabStopType["LEFT"] = "left";
        TabStopType["RIGHT"] = "right";
        TabStopType["CENTER"] = "center";
        TabStopType["BAR"] = "bar";
        TabStopType["CLEAR"] = "clear";
        TabStopType["DECIMAL"] = "decimal";
        TabStopType["END"] = "end";
        TabStopType["NUM"] = "num";
        TabStopType["START"] = "start";
    })(exports.TabStopType || (exports.TabStopType = {}));
    (function (LeaderType) {
        LeaderType["DOT"] = "dot";
        LeaderType["HYPHEN"] = "hyphen";
        LeaderType["MIDDLE_DOT"] = "middleDot";
        LeaderType["NONE"] = "none";
        LeaderType["UNDERSCORE"] = "underscore";
    })(exports.LeaderType || (exports.LeaderType = {}));
    (function (TabStopPosition) {
        TabStopPosition[TabStopPosition["MAX"] = 9026] = "MAX";
    })(exports.TabStopPosition || (exports.TabStopPosition = {}));
    class TabAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val", pos: "w:pos", leader: "w:leader" };
        }
    }
    exports.TabAttributes = TabAttributes;
    class TabStopItem extends xml_components_1.XmlComponent {
        constructor(value, position, leader) {
            super("w:tab");
            this.root.push(new TabAttributes({
                val: value,
                pos: position,
                leader,
            }));
        }
    }
    exports.TabStopItem = TabStopItem;


    /***/ }),
    /* 85 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class NumberProperties extends xml_components_1.XmlComponent {
        constructor(numberId, indentLevel) {
            super("w:numPr");
            this.root.push(new IndentLevel(indentLevel));
            this.root.push(new NumberId(numberId));
        }
    }
    exports.NumberProperties = NumberProperties;
    class IndentLevel extends xml_components_1.XmlComponent {
        constructor(level) {
            super("w:ilvl");
            this.root.push(new xml_components_1.Attributes({
                val: level,
            }));
        }
    }
    class NumberId extends xml_components_1.XmlComponent {
        constructor(id) {
            super("w:numId");
            this.root.push(new xml_components_1.Attributes({
                val: typeof id === "string" ? `{${id}}` : id,
            }));
        }
    }


    /***/ }),
    /* 86 */
    /***/ (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(220);


    /***/ }),
    /* 87 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathDenominator extends xml_components_1.XmlComponent {
        constructor(children) {
            super("m:den");
            for (const child of children) {
                this.root.push(child);
            }
        }
    }
    exports.MathDenominator = MathDenominator;


    /***/ }),
    /* 88 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathNumerator extends xml_components_1.XmlComponent {
        constructor(children) {
            super("m:num");
            for (const child of children) {
                this.root.push(child);
            }
        }
    }
    exports.MathNumerator = MathNumerator;


    /***/ }),
    /* 89 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathAccentCharacterAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { accent: "m:val" };
        }
    }
    class MathAccentCharacter extends xml_components_1.XmlComponent {
        constructor(accent) {
            super("m:chr");
            this.root.push(new MathAccentCharacterAttributes({ accent }));
        }
    }
    exports.MathAccentCharacter = MathAccentCharacter;


    /***/ }),
    /* 90 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathBase extends xml_components_1.XmlComponent {
        constructor(children) {
            super("m:e");
            for (const child of children) {
                this.root.push(child);
            }
        }
    }
    exports.MathBase = MathBase;


    /***/ }),
    /* 91 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathLimitLocationAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { value: "m:val" };
        }
    }
    class MathLimitLocation extends xml_components_1.XmlComponent {
        constructor() {
            super("m:limLoc");
            this.root.push(new MathLimitLocationAttributes({ value: "undOvr" }));
        }
    }
    exports.MathLimitLocation = MathLimitLocation;


    /***/ }),
    /* 92 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const math_accent_character_1 = __webpack_require__(89);
    const math_limit_location_1 = __webpack_require__(91);
    const math_sub_script_hide_1 = __webpack_require__(237);
    const math_super_script_hide_1 = __webpack_require__(238);
    class MathNArayProperties extends xml_components_1.XmlComponent {
        constructor(accent, hasSuperScript, hasSubScript) {
            super("m:naryPr");
            this.root.push(new math_accent_character_1.MathAccentCharacter(accent));
            this.root.push(new math_limit_location_1.MathLimitLocation());
            if (!hasSuperScript) {
                this.root.push(new math_super_script_hide_1.MathSuperScriptHide());
            }
            if (!hasSubScript) {
                this.root.push(new math_sub_script_hide_1.MathSubScriptHide());
            }
        }
    }
    exports.MathNArayProperties = MathNArayProperties;


    /***/ }),
    /* 93 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathSubScriptElement extends xml_components_1.XmlComponent {
        constructor(children) {
            super("m:sub");
            for (const child of children) {
                this.root.push(child);
            }
        }
    }
    exports.MathSubScriptElement = MathSubScriptElement;


    /***/ }),
    /* 94 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathSuperScriptElement extends xml_components_1.XmlComponent {
        constructor(children) {
            super("m:sup");
            for (const child of children) {
                this.root.push(child);
            }
        }
    }
    exports.MathSuperScriptElement = MathSuperScriptElement;


    /***/ }),
    /* 95 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathSuperScriptProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("m:sSupPr");
        }
    }
    exports.MathSuperScriptProperties = MathSuperScriptProperties;


    /***/ }),
    /* 96 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathSubScriptProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("m:sSubPr");
        }
    }
    exports.MathSubScriptProperties = MathSubScriptProperties;


    /***/ }),
    /* 97 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathSubSuperScriptProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("m:sSubSupPr");
        }
    }
    exports.MathSubSuperScriptProperties = MathSubSuperScriptProperties;


    /***/ }),
    /* 98 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathPreSubSuperScriptProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("m:sPrePr");
        }
    }
    exports.MathPreSubSuperScriptProperties = MathPreSubSuperScriptProperties;


    /***/ }),
    /* 99 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathDegree extends xml_components_1.XmlComponent {
        constructor(children) {
            super("m:deg");
            if (!!children) {
                for (const child of children) {
                    this.root.push(child);
                }
            }
        }
    }
    exports.MathDegree = MathDegree;


    /***/ }),
    /* 100 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const math_degree_hide_1 = __webpack_require__(252);
    class MathRadicalProperties extends xml_components_1.XmlComponent {
        constructor(hasDegree) {
            super("m:radPr");
            if (!hasDegree) {
                this.root.push(new math_degree_hide_1.MathDegreeHide());
            }
        }
    }
    exports.MathRadicalProperties = MathRadicalProperties;


    /***/ }),
    /* 101 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathFunctionName extends xml_components_1.XmlComponent {
        constructor(children) {
            super("m:fName");
            for (const child of children) {
                this.root.push(child);
            }
        }
    }
    exports.MathFunctionName = MathFunctionName;


    /***/ }),
    /* 102 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathFunctionProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("m:funcPr");
        }
    }
    exports.MathFunctionProperties = MathFunctionProperties;


    /***/ }),
    /* 103 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(270));
    __export(__webpack_require__(109));
    __export(__webpack_require__(111));
    __export(__webpack_require__(104));
    __export(__webpack_require__(110));


    /***/ }),
    /* 104 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const styles_1 = __webpack_require__(23);
    const xml_components_1 = __webpack_require__(0);
    class TableBorders extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:tblBorders");
            if (options.top) {
                this.root.push(new TableBordersElement("w:top", options.top.style, options.top.size, 0, options.top.color));
            }
            else {
                this.root.push(new TableBordersElement("w:top", styles_1.BorderStyle.SINGLE, 4, 0, "auto"));
            }
            if (options.left) {
                this.root.push(new TableBordersElement("w:left", options.left.style, options.left.size, 0, options.left.color));
            }
            else {
                this.root.push(new TableBordersElement("w:left", styles_1.BorderStyle.SINGLE, 4, 0, "auto"));
            }
            if (options.bottom) {
                this.root.push(new TableBordersElement("w:bottom", options.bottom.style, options.bottom.size, 0, options.bottom.color));
            }
            else {
                this.root.push(new TableBordersElement("w:bottom", styles_1.BorderStyle.SINGLE, 4, 0, "auto"));
            }
            if (options.right) {
                this.root.push(new TableBordersElement("w:right", options.right.style, options.right.size, 0, options.right.color));
            }
            else {
                this.root.push(new TableBordersElement("w:right", styles_1.BorderStyle.SINGLE, 4, 0, "auto"));
            }
            if (options.insideHorizontal) {
                this.root.push(new TableBordersElement("w:insideH", options.insideHorizontal.style, options.insideHorizontal.size, 0, options.insideHorizontal.color));
            }
            else {
                this.root.push(new TableBordersElement("w:insideH", styles_1.BorderStyle.SINGLE, 4, 0, "auto"));
            }
            if (options.insideVertical) {
                this.root.push(new TableBordersElement("w:insideV", options.insideVertical.style, options.insideVertical.size, 0, options.insideVertical.color));
            }
            else {
                this.root.push(new TableBordersElement("w:insideV", styles_1.BorderStyle.SINGLE, 4, 0, "auto"));
            }
        }
    }
    TableBorders.NONE = {
        top: {
            style: styles_1.BorderStyle.NONE,
            size: 0,
            color: "auto",
        },
        bottom: {
            style: styles_1.BorderStyle.NONE,
            size: 0,
            color: "auto",
        },
        left: {
            style: styles_1.BorderStyle.NONE,
            size: 0,
            color: "auto",
        },
        right: {
            style: styles_1.BorderStyle.NONE,
            size: 0,
            color: "auto",
        },
        insideHorizontal: {
            style: styles_1.BorderStyle.NONE,
            size: 0,
            color: "auto",
        },
        insideVertical: {
            style: styles_1.BorderStyle.NONE,
            size: 0,
            color: "auto",
        },
    };
    exports.TableBorders = TableBorders;
    class TableBordersElement extends xml_components_1.XmlComponent {
        constructor(elementName, value, size, space, color) {
            super(elementName);
            this.root.push(new TableBordersAttributes({
                value,
                size,
                space,
                color,
            }));
        }
    }
    class TableBordersAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                value: "w:val",
                size: "w:sz",
                space: "w:space",
                color: "w:color",
            };
        }
    }


    /***/ }),
    /* 105 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(40));
    __export(__webpack_require__(42));
    __export(__webpack_require__(43));
    __export(__webpack_require__(272));


    /***/ }),
    /* 106 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(107));
    __export(__webpack_require__(108));
    __export(__webpack_require__(275));


    /***/ }),
    /* 107 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const properties_1 = __webpack_require__(21);
    const xml_components_1 = __webpack_require__(0);
    class ParagraphPropertiesDefaults extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:pPrDefault");
            this.root.push(new properties_1.ParagraphProperties(options));
        }
    }
    exports.ParagraphPropertiesDefaults = ParagraphPropertiesDefaults;


    /***/ }),
    /* 108 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const properties_1 = __webpack_require__(9);
    const xml_components_1 = __webpack_require__(0);
    class RunPropertiesDefaults extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:rPrDefault");
            this.properties = new properties_1.RunProperties(options);
            this.root.push(this.properties);
        }
    }
    exports.RunPropertiesDefaults = RunPropertiesDefaults;


    /***/ }),
    /* 109 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const table_overlap_1 = __webpack_require__(110);
    (function (TableAnchorType) {
        TableAnchorType["MARGIN"] = "margin";
        TableAnchorType["PAGE"] = "page";
        TableAnchorType["TEXT"] = "text";
    })(exports.TableAnchorType || (exports.TableAnchorType = {}));
    (function (RelativeHorizontalPosition) {
        RelativeHorizontalPosition["CENTER"] = "center";
        RelativeHorizontalPosition["INSIDE"] = "inside";
        RelativeHorizontalPosition["LEFT"] = "left";
        RelativeHorizontalPosition["OUTSIDE"] = "outside";
        RelativeHorizontalPosition["RIGHT"] = "right";
    })(exports.RelativeHorizontalPosition || (exports.RelativeHorizontalPosition = {}));
    (function (RelativeVerticalPosition) {
        RelativeVerticalPosition["CENTER"] = "center";
        RelativeVerticalPosition["INSIDE"] = "inside";
        RelativeVerticalPosition["BOTTOM"] = "bottom";
        RelativeVerticalPosition["OUTSIDE"] = "outside";
        RelativeVerticalPosition["INLINE"] = "inline";
        RelativeVerticalPosition["TOP"] = "top";
    })(exports.RelativeVerticalPosition || (exports.RelativeVerticalPosition = {}));
    class TableFloatOptionsAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                horizontalAnchor: "w:horzAnchor",
                verticalAnchor: "w:vertAnchor",
                absoluteHorizontalPosition: "w:tblpX",
                relativeHorizontalPosition: "w:tblpXSpec",
                absoluteVerticalPosition: "w:tblpY",
                relativeVerticalPosition: "w:tblpYSpec",
                bottomFromText: "w:bottomFromText",
                topFromText: "w:topFromText",
                leftFromText: "w:leftFromText",
                rightFromText: "w:rightFromText",
            };
        }
    }
    exports.TableFloatOptionsAttributes = TableFloatOptionsAttributes;
    class TableFloatProperties extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:tblpPr");
            this.root.push(new TableFloatOptionsAttributes(options));
            if (options.overlap) {
                this.root.push(new table_overlap_1.TableOverlap(options.overlap));
            }
        }
    }
    exports.TableFloatProperties = TableFloatProperties;


    /***/ }),
    /* 110 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (OverlapType) {
        OverlapType["NEVER"] = "never";
        OverlapType["OVERLAP"] = "overlap";
    })(exports.OverlapType || (exports.OverlapType = {}));
    class TableOverlapAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class TableOverlap extends xml_components_1.XmlComponent {
        constructor(type) {
            super("w:tblOverlap");
            this.root.push(new TableOverlapAttributes({ val: type }));
        }
    }
    exports.TableOverlap = TableOverlap;


    /***/ }),
    /* 111 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (TableLayoutType) {
        TableLayoutType["AUTOFIT"] = "autofit";
        TableLayoutType["FIXED"] = "fixed";
    })(exports.TableLayoutType || (exports.TableLayoutType = {}));
    class TableLayoutAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { type: "w:type" };
        }
    }
    class TableLayout extends xml_components_1.XmlComponent {
        constructor(type) {
            super("w:tblLayout");
            this.root.push(new TableLayoutAttributes({ type }));
        }
    }
    exports.TableLayout = TableLayout;


    /***/ }),
    /* 112 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const table_row_height_1 = __webpack_require__(113);
    class TableRowProperties extends xml_components_1.IgnoreIfEmptyXmlComponent {
        constructor() {
            super("w:trPr");
        }
        setCantSplit() {
            this.root.push(new CantSplit());
            return this;
        }
        setTableHeader() {
            this.root.push(new TableHeader());
            return this;
        }
        setHeight(height, rule) {
            this.root.push(new table_row_height_1.TableRowHeight(height, rule));
            return this;
        }
    }
    exports.TableRowProperties = TableRowProperties;
    class CantSplitAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class CantSplit extends xml_components_1.XmlComponent {
        constructor() {
            super("w:cantSplit");
            this.root.push(new CantSplitAttributes({ val: true }));
        }
    }
    exports.CantSplit = CantSplit;
    class TableHeaderAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class TableHeader extends xml_components_1.XmlComponent {
        constructor() {
            super("w:tblHeader");
            this.root.push(new TableHeaderAttributes({ val: true }));
        }
    }
    exports.TableHeader = TableHeader;


    /***/ }),
    /* 113 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (HeightRule) {
        HeightRule["AUTO"] = "auto";
        HeightRule["ATLEAST"] = "atLeast";
        HeightRule["EXACT"] = "exact";
    })(exports.HeightRule || (exports.HeightRule = {}));
    class TableRowHeightAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { height: "w:val", rule: "w:hRule" };
        }
    }
    exports.TableRowHeightAttributes = TableRowHeightAttributes;
    class TableRowHeight extends xml_components_1.XmlComponent {
        constructor(value, rule) {
            super("w:trHeight");
            this.root.push(new TableRowHeightAttributes({
                height: value,
                rule: rule,
            }));
        }
    }
    exports.TableRowHeight = TableRowHeight;


    /***/ }),
    /* 114 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(292));
    __export(__webpack_require__(11));
    __export(__webpack_require__(115));
    __export(__webpack_require__(130));


    /***/ }),
    /* 115 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(293));
    __export(__webpack_require__(129));


    /***/ }),
    /* 116 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const convenience_functions_1 = __webpack_require__(44);
    const xml_components_1 = __webpack_require__(0);
    const columns_1 = __webpack_require__(294);
    const doc_grid_1 = __webpack_require__(296);
    const footer_reference_1 = __webpack_require__(117);
    const footer_reference_2 = __webpack_require__(118);
    const header_reference_1 = __webpack_require__(120);
    const header_reference_2 = __webpack_require__(121);
    const line_number_1 = __webpack_require__(123);
    const page_border_1 = __webpack_require__(124);
    const page_margin_1 = __webpack_require__(300);
    const page_number_1 = __webpack_require__(125);
    const page_size_1 = __webpack_require__(126);
    const page_size_attributes_1 = __webpack_require__(45);
    const title_page_1 = __webpack_require__(303);
    const vertical_align_1 = __webpack_require__(127);
    class SectionProperties extends xml_components_1.XmlComponent {
        constructor(options = { column: {} }) {
            super("w:sectPr");
            const { width = 11906, height = 16838, top = convenience_functions_1.convertInchesToTwip(1), right = convenience_functions_1.convertInchesToTwip(1), bottom = convenience_functions_1.convertInchesToTwip(1), left = convenience_functions_1.convertInchesToTwip(1), header = 708, footer = 708, gutter = 0, mirror = false, column = {}, linePitch = 360, orientation = page_size_attributes_1.PageOrientation.PORTRAIT, headers, footers, pageNumberFormatType, pageNumberStart, lineNumberCountBy, lineNumberStart, lineNumberRestart, lineNumberDistance, pageBorders, pageBorderTop, pageBorderRight, pageBorderBottom, pageBorderLeft, titlePage = false, verticalAlign, } = options;
            this.options = options;
            this.root.push(new page_size_1.PageSize(width, height, orientation));
            this.root.push(new page_margin_1.PageMargin(top, right, bottom, left, header, footer, gutter, mirror));
            this.root.push(new columns_1.Columns(column.space ? column.space : 708, column.count ? column.count : 1));
            this.root.push(new doc_grid_1.DocumentGrid(linePitch));
            this.addHeaders(headers);
            this.addFooters(footers);
            if (pageNumberStart || pageNumberFormatType) {
                this.root.push(new page_number_1.PageNumberType(pageNumberStart, pageNumberFormatType));
            }
            if (lineNumberCountBy || lineNumberStart || lineNumberRestart || lineNumberDistance) {
                this.root.push(new line_number_1.LineNumberType(lineNumberCountBy, lineNumberStart, lineNumberRestart, lineNumberDistance));
            }
            if (pageBorders || pageBorderTop || pageBorderRight || pageBorderBottom || pageBorderLeft) {
                this.root.push(new page_border_1.PageBorders({
                    pageBorders: pageBorders,
                    pageBorderTop: pageBorderTop,
                    pageBorderRight: pageBorderRight,
                    pageBorderBottom: pageBorderBottom,
                    pageBorderLeft: pageBorderLeft,
                }));
            }
            if (titlePage) {
                this.root.push(new title_page_1.TitlePage());
            }
            if (verticalAlign) {
                this.root.push(new vertical_align_1.SectionVerticalAlign(verticalAlign));
            }
        }
        addHeaders(headers) {
            if (headers) {
                if (headers.default) {
                    this.root.push(new header_reference_2.HeaderReference({
                        headerType: header_reference_1.HeaderReferenceType.DEFAULT,
                        headerId: headers.default.Header.ReferenceId,
                    }));
                }
                if (headers.first) {
                    this.root.push(new header_reference_2.HeaderReference({
                        headerType: header_reference_1.HeaderReferenceType.FIRST,
                        headerId: headers.first.Header.ReferenceId,
                    }));
                }
                if (headers.even) {
                    this.root.push(new header_reference_2.HeaderReference({
                        headerType: header_reference_1.HeaderReferenceType.EVEN,
                        headerId: headers.even.Header.ReferenceId,
                    }));
                }
            }
        }
        addFooters(footers) {
            if (footers) {
                if (footers.default) {
                    this.root.push(new footer_reference_2.FooterReference({
                        footerType: footer_reference_1.FooterReferenceType.DEFAULT,
                        footerId: footers.default.Footer.ReferenceId,
                    }));
                }
                if (footers.first) {
                    this.root.push(new footer_reference_2.FooterReference({
                        footerType: footer_reference_1.FooterReferenceType.FIRST,
                        footerId: footers.first.Footer.ReferenceId,
                    }));
                }
                if (footers.even) {
                    this.root.push(new footer_reference_2.FooterReference({
                        footerType: footer_reference_1.FooterReferenceType.EVEN,
                        footerId: footers.even.Footer.ReferenceId,
                    }));
                }
            }
        }
        get Options() {
            return this.options;
        }
    }
    exports.SectionProperties = SectionProperties;


    /***/ }),
    /* 117 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(118));
    __export(__webpack_require__(119));


    /***/ }),
    /* 118 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const footer_reference_attributes_1 = __webpack_require__(119);
    class FooterReference extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:footerReference");
            this.root.push(new footer_reference_attributes_1.FooterReferenceAttributes({
                type: options.footerType || footer_reference_attributes_1.FooterReferenceType.DEFAULT,
                id: `rId${options.footerId}`,
            }));
        }
    }
    exports.FooterReference = FooterReference;


    /***/ }),
    /* 119 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (FooterReferenceType) {
        FooterReferenceType["DEFAULT"] = "default";
        FooterReferenceType["FIRST"] = "first";
        FooterReferenceType["EVEN"] = "even";
    })(exports.FooterReferenceType || (exports.FooterReferenceType = {}));
    class FooterReferenceAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                type: "w:type",
                id: "r:id",
            };
        }
    }
    exports.FooterReferenceAttributes = FooterReferenceAttributes;


    /***/ }),
    /* 120 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(121));
    __export(__webpack_require__(122));


    /***/ }),
    /* 121 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const header_reference_attributes_1 = __webpack_require__(122);
    class HeaderReference extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:headerReference");
            this.root.push(new header_reference_attributes_1.HeaderReferenceAttributes({
                type: options.headerType || header_reference_attributes_1.HeaderReferenceType.DEFAULT,
                id: `rId${options.headerId}`,
            }));
        }
    }
    exports.HeaderReference = HeaderReference;


    /***/ }),
    /* 122 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (HeaderReferenceType) {
        HeaderReferenceType["DEFAULT"] = "default";
        HeaderReferenceType["FIRST"] = "first";
        HeaderReferenceType["EVEN"] = "even";
    })(exports.HeaderReferenceType || (exports.HeaderReferenceType = {}));
    class HeaderReferenceAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                type: "w:type",
                id: "r:id",
            };
        }
    }
    exports.HeaderReferenceAttributes = HeaderReferenceAttributes;


    /***/ }),
    /* 123 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(298));


    /***/ }),
    /* 124 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(299));


    /***/ }),
    /* 125 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(302));


    /***/ }),
    /* 126 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const page_size_attributes_1 = __webpack_require__(45);
    class PageSize extends xml_components_1.XmlComponent {
        constructor(width, height, orientation) {
            super("w:pgSz");
            const flip = orientation === page_size_attributes_1.PageOrientation.LANDSCAPE;
            this.root.push(new page_size_attributes_1.PageSizeAttributes({
                width: flip ? height : width,
                height: flip ? width : height,
                orientation: orientation,
            }));
        }
    }
    exports.PageSize = PageSize;


    /***/ }),
    /* 127 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(305));
    __export(__webpack_require__(128));


    /***/ }),
    /* 128 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class SectionVerticalAlignAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                verticalAlign: "w:val",
            };
        }
    }
    exports.SectionVerticalAlignAttributes = SectionVerticalAlignAttributes;


    /***/ }),
    /* 129 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(116));
    __export(__webpack_require__(117));
    __export(__webpack_require__(120));
    __export(__webpack_require__(306));
    __export(__webpack_require__(125));
    __export(__webpack_require__(124));
    __export(__webpack_require__(123));
    __export(__webpack_require__(127));


    /***/ }),
    /* 130 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(307));


    /***/ }),
    /* 131 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(313));
    __export(__webpack_require__(323));


    /***/ }),
    /* 132 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    class Header {
        constructor(options = { children: [] }) {
            this.options = options;
        }
    }
    exports.Header = Header;
    class Footer {
        constructor(options = { children: [] }) {
            this.options = options;
        }
    }
    exports.Footer = Footer;


    /***/ }),
    /* 133 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(330));
    __export(__webpack_require__(134));
    __export(__webpack_require__(24));
    __export(__webpack_require__(135));


    /***/ }),
    /* 134 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const level_1 = __webpack_require__(24);
    const multi_level_type_1 = __webpack_require__(331);
    class AbstractNumberingAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                abstractNumId: "w:abstractNumId",
                restartNumberingAfterBreak: "w15:restartNumberingAfterBreak",
            };
        }
    }
    class AbstractNumbering extends xml_components_1.XmlComponent {
        constructor(id, levelOptions) {
            super("w:abstractNum");
            this.root.push(new AbstractNumberingAttributes({
                abstractNumId: id,
                restartNumberingAfterBreak: 0,
            }));
            this.root.push(new multi_level_type_1.MultiLevelType("hybridMultilevel"));
            this.id = id;
            for (const option of levelOptions) {
                this.root.push(new level_1.Level(option));
            }
        }
    }
    exports.AbstractNumbering = AbstractNumbering;


    /***/ }),
    /* 135 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const level_1 = __webpack_require__(24);
    class AbstractNumId extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:abstractNumId");
            this.root.push(new xml_components_1.Attributes({
                val: value,
            }));
        }
    }
    class NumAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { numId: "w:numId" };
        }
    }
    class ConcreteNumbering extends xml_components_1.XmlComponent {
        constructor(numId, abstractNumId, reference) {
            super("w:num");
            this.reference = reference;
            this.root.push(new NumAttributes({
                numId: numId,
            }));
            this.root.push(new AbstractNumId(abstractNumId));
            this.id = numId;
        }
        overrideLevel(num, start) {
            const olvl = new LevelOverride(num, start);
            this.root.push(olvl);
            return olvl;
        }
    }
    exports.ConcreteNumbering = ConcreteNumbering;
    class LevelOverrideAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { ilvl: "w:ilvl" };
        }
    }
    class LevelOverride extends xml_components_1.XmlComponent {
        constructor(levelNum, start) {
            super("w:lvlOverride");
            this.levelNum = levelNum;
            this.root.push(new LevelOverrideAttributes({ ilvl: levelNum }));
            if (start !== undefined) {
                this.root.push(new StartOverride(start));
            }
            this.lvl = new level_1.LevelForOverride({
                level: this.levelNum,
            });
            this.root.push(this.lvl);
        }
        get Level() {
            return this.lvl;
        }
    }
    exports.LevelOverride = LevelOverride;
    class StartOverrideAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { val: "w:val" };
        }
    }
    class StartOverride extends xml_components_1.XmlComponent {
        constructor(start) {
            super("w:startOverride");
            this.root.push(new StartOverrideAttributes({ val: start }));
        }
    }


    /***/ }),
    /* 136 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class UpdateFieldsAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                enabled: "w:val",
            };
        }
    }
    exports.UpdateFieldsAttributes = UpdateFieldsAttributes;
    class UpdateFields extends xml_components_1.XmlComponent {
        constructor(enabled = true) {
            super("w:updateFields");
            this.root.push(new UpdateFieldsAttributes({
                enabled,
            }));
        }
    }
    exports.UpdateFields = UpdateFields;


    /***/ }),
    /* 137 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class ChangeAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                id: "w:id",
                author: "w:author",
                date: "w:date",
            };
        }
    }
    exports.ChangeAttributes = ChangeAttributes;


    /***/ }),
    /* 138 */
    /***/ (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */(function(Buffer, global, setImmediate) {var require;var require;/*!

    JSZip v3.5.0 - A JavaScript class for generating and reading zip files
    <http://stuartk.com/jszip>

    (c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
    Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

    JSZip uses the library pako released under the MIT license :
    https://github.com/nodeca/pako/blob/master/LICENSE
    */

    !function(t){module.exports=t();}(function(){return function s(a,o,h){function u(r,t){if(!o[r]){if(!a[r]){var e="function"==typeof require&&require;if(!t&&e)return require(r,!0);if(l)return l(r,!0);var i=new Error("Cannot find module '"+r+"'");throw i.code="MODULE_NOT_FOUND",i}var n=o[r]={exports:{}};a[r][0].call(n.exports,function(t){var e=a[r][1][t];return u(e||t)},n,n.exports,s,a,o,h);}return o[r].exports}for(var l="function"==typeof require&&require,t=0;t<h.length;t++)u(h[t]);return u}({1:[function(t,e,r){var c=t("./utils"),d=t("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(t){for(var e,r,i,n,s,a,o,h=[],u=0,l=t.length,f=l,d="string"!==c.getTypeOf(t);u<t.length;)f=l-u,i=d?(e=t[u++],r=u<l?t[u++]:0,u<l?t[u++]:0):(e=t.charCodeAt(u++),r=u<l?t.charCodeAt(u++):0,u<l?t.charCodeAt(u++):0),n=e>>2,s=(3&e)<<4|r>>4,a=1<f?(15&r)<<2|i>>6:64,o=2<f?63&i:64,h.push(p.charAt(n)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join("")},r.decode=function(t){var e,r,i,n,s,a,o=0,h=0,u="data:";if(t.substr(0,u.length)===u)throw new Error("Invalid base64 input, it looks like a data url.");var l,f=3*(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(t.charAt(t.length-1)===p.charAt(64)&&f--,t.charAt(t.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=d.uint8array?new Uint8Array(0|f):new Array(0|f);o<t.length;)e=p.indexOf(t.charAt(o++))<<2|(n=p.indexOf(t.charAt(o++)))>>4,r=(15&n)<<4|(s=p.indexOf(t.charAt(o++)))>>2,i=(3&s)<<6|(a=p.indexOf(t.charAt(o++))),l[h++]=e,64!==s&&(l[h++]=r),64!==a&&(l[h++]=i);return l};},{"./support":30,"./utils":32}],2:[function(t,e,r){var i=t("./external"),n=t("./stream/DataWorker"),s=t("./stream/DataLengthProbe"),a=t("./stream/Crc32Probe");s=t("./stream/DataLengthProbe");function o(t,e,r,i,n){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=i,this.compressedContent=n;}o.prototype={getContentWorker:function(){var t=new n(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new s("data_length")),e=this;return t.on("end",function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),t},getCompressedWorker:function(){return new n(i.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(t,e,r){return t.pipe(new a).pipe(new s("uncompressedSize")).pipe(e.compressWorker(r)).pipe(new s("compressedSize")).withStreamInfo("compression",e)},e.exports=o;},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(t,e,r){var i=t("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(t){return new i("STORE compression")},uncompressWorker:function(){return new i("STORE decompression")}},r.DEFLATE=t("./flate");},{"./flate":7,"./stream/GenericWorker":28}],4:[function(t,e,r){var i=t("./utils");var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t;}return e}();e.exports=function(t,e){return void 0!==t&&t.length?"string"!==i.getTypeOf(t)?function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return -1^t}(0|e,t,t.length,0):function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e.charCodeAt(a))];return -1^t}(0|e,t,t.length,0):0};},{"./utils":32}],5:[function(t,e,r){r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null;},{}],6:[function(t,e,r){var i=null;i="undefined"!=typeof Promise?Promise:t("lie"),e.exports={Promise:i};},{lie:37}],7:[function(t,e,r){var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,n=t("pako"),s=t("./utils"),a=t("./stream/GenericWorker"),o=i?"uint8array":"array";function h(t,e){a.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={};}r.magic="\b\0",s.inherits(h,a),h.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,t.data),!1);},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0);},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null;},h.prototype._createPako=function(){this._pako=new n[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta});};},r.compressWorker=function(t){return new h("Deflate",t)},r.uncompressWorker=function(){return new h("Inflate",{})};},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(t,e,r){function A(t,e){var r,i="";for(r=0;r<e;r++)i+=String.fromCharCode(255&t),t>>>=8;return i}function i(t,e,r,i,n,s){var a,o,h=t.file,u=t.compression,l=s!==O.utf8encode,f=I.transformTo("string",s(h.name)),d=I.transformTo("string",O.utf8encode(h.name)),c=h.comment,p=I.transformTo("string",s(c)),m=I.transformTo("string",O.utf8encode(c)),_=d.length!==h.name.length,g=m.length!==c.length,b="",v="",y="",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(x.crc32=t.crc32,x.compressedSize=t.compressedSize,x.uncompressedSize=t.uncompressedSize);var S=0;e&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),"UNIX"===n?(C=798,z|=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(t){return 63&(t||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+d,b+="up"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+="uc"+A(y.length,2)+y);var E="";return E+="\n\0",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+"\0\0\0\0"+A(z,4)+A(i,4)+f+b+p}}var I=t("../utils"),n=t("../stream/GenericWorker"),O=t("../utf8"),B=t("../crc32"),R=t("../signature");function s(t,e,r,i){n.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=i,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[];}I.inherits(s,n),s.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,n.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-i-1))/r:100}}));},s.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}});}else this.accumulate=!0;},s.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:function(t){return R.DATA_DESCRIPTOR+A(t.crc32,4)+A(t.compressedSize,4)+A(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null;},s.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,i=function(t,e,r,i,n){var s=I.transformTo("string",n(i));return R.CENTRAL_DIRECTORY_END+"\0\0\0\0"+A(t,2)+A(t,2)+A(e,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}});},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume();},s.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",function(t){e.processChunk(t);}),t.on("end",function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end();}),t.on("error",function(t){e.error(t);}),this},s.prototype.resume=function(){return !!n.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(t){var e=this._sources;if(!n.prototype.error.call(this,t))return !1;for(var r=0;r<e.length;r++)try{e[r].error(t);}catch(t){}return !0},s.prototype.lock=function(){n.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock();},e.exports=s;},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(t,e,r){var u=t("../compressions"),i=t("./ZipFileWorker");r.generateWorker=function(t,a,e){var o=new i(a.streamFiles,e,a.platform,a.encodeFileName),h=0;try{t.forEach(function(t,e){h++;var r=function(t,e){var r=t||e,i=u[r];if(!i)throw new Error(r+" is not a valid compression method !");return i}(e.options.compression,a.compression),i=e.options.compressionOptions||a.compressionOptions||{},n=e.dir,s=e.date;e._compressWorker(r,i).withStreamInfo("file",{name:t,dir:n,date:s,comment:e.comment||"",unixPermissions:e.unixPermissions,dosPermissions:e.dosPermissions}).pipe(o);}),o.entriesCount=h;}catch(t){o.error(t);}return o};},{"../compressions":3,"./ZipFileWorker":8}],10:[function(t,e,r){function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var t=new i;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t};}(i.prototype=t("./object")).loadAsync=t("./load"),i.support=t("./support"),i.defaults=t("./defaults"),i.version="3.5.0",i.loadAsync=function(t,e){return (new i).loadAsync(t,e)},i.external=t("./external"),e.exports=i;},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(t,e,r){var i=t("./utils"),n=t("./external"),o=t("./utf8"),h=(i=t("./utils"),t("./zipEntries")),s=t("./stream/Crc32Probe"),u=t("./nodejsUtils");function l(i){return new n.Promise(function(t,e){var r=i.decompressed.getContentWorker().pipe(new s);r.on("error",function(t){e(t);}).on("end",function(){r.streamInfo.crc32!==i.decompressed.crc32?e(new Error("Corrupted zip : CRC32 mismatch")):t();}).resume();})}e.exports=function(t,s){var a=this;return s=i.extend(s||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),u.isNode&&u.isStream(t)?n.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):i.prepareContent("the loaded zip file",t,!0,s.optimizedBinaryString,s.base64).then(function(t){var e=new h(s);return e.load(t),e}).then(function(t){var e=[n.Promise.resolve(t)],r=t.files;if(s.checkCRC32)for(var i=0;i<r.length;i++)e.push(l(r[i]));return n.Promise.all(e)}).then(function(t){for(var e=t.shift(),r=e.files,i=0;i<r.length;i++){var n=r[i];a.file(n.fileNameStr,n.decompressed,{binary:!0,optimizedBinaryString:!0,date:n.date,dir:n.dir,comment:n.fileCommentStr.length?n.fileCommentStr:null,unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions,createFolders:s.createFolders});}return e.zipComment.length&&(a.comment=e.zipComment),a})};},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(t,e,r){var i=t("../utils"),n=t("../stream/GenericWorker");function s(t,e){n.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e);}i.inherits(s,n),s.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on("data",function(t){e.push({data:t,meta:{percent:0}});}).on("error",function(t){e.isPaused?this.generatedError=t:e.error(t);}).on("end",function(){e.isPaused?e._upstreamEnded=!0:e.end();});},s.prototype.pause=function(){return !!n.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return !!n.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=s;},{"../stream/GenericWorker":28,"../utils":32}],13:[function(t,e,r){var n=t("readable-stream").Readable;function i(t,e,r){n.call(this,e),this._helper=t;var i=this;t.on("data",function(t,e){i.push(t)||i._helper.pause(),r&&r(e);}).on("error",function(t){i.emit("error",t);}).on("end",function(){i.push(null);});}t("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume();},e.exports=i;},{"../utils":32,"readable-stream":16}],14:[function(t,e,r){e.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if("number"==typeof t)throw new Error('The "data" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}};},{}],15:[function(t,e,r){function s(t,e,r){var i,n=u.getTypeOf(e),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(t=g(t)),s.createFolders&&(i=_(t))&&b.call(this,i,!0);var a="string"===n&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(e instanceof d&&0===e.uncompressedSize||s.dir||!e||0===e.length)&&(s.base64=!1,s.binary=!0,e="",s.compression="STORE",n="string");var o=null;o=e instanceof d||e instanceof l?e:p.isNode&&p.isStream(e)?new m(t,e):u.prepareContent(t,e,s.binary,s.optimizedBinaryString,s.base64);var h=new c(t,o,s);this.files[t]=h;}var n=t("./utf8"),u=t("./utils"),l=t("./stream/GenericWorker"),a=t("./stream/StreamHelper"),f=t("./defaults"),d=t("./compressedObject"),c=t("./zipObject"),o=t("./generate"),p=t("./nodejsUtils"),m=t("./nodejs/NodejsStreamInputAdapter"),_=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return 0<e?t.substring(0,e):""},g=function(t){return "/"!==t.slice(-1)&&(t+="/"),t},b=function(t,e){return e=void 0!==e?e:f.createFolders,t=g(t),this.files[t]||s.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function h(t){return "[object RegExp]"===Object.prototype.toString.call(t)}var i={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,r,i;for(e in this.files)this.files.hasOwnProperty(e)&&(i=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,i));},filter:function(r){var i=[];return this.forEach(function(t,e){r(t,e)&&i.push(e);}),i},file:function(t,e,r){if(1!==arguments.length)return t=this.root+t,s.call(this,t,e,r),this;if(h(t)){var i=t;return this.filter(function(t,e){return !e.dir&&i.test(t)})}var n=this.files[this.root+t];return n&&!n.dir?n:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(t,e){return e.dir&&r.test(t)});var t=this.root+r,e=b.call(this,t),i=this.clone();return i.root=e.name,i},remove:function(r){r=this.root+r;var t=this.files[r];if(t||("/"!==r.slice(-1)&&(r+="/"),t=this.files[r]),t&&!t.dir)delete this.files[r];else for(var e=this.filter(function(t,e){return e.name.slice(0,r.length)===r}),i=0;i<e.length;i++)delete this.files[e[i].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,r={};try{if((r=u.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:n.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");u.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var i=r.comment||this.comment||"";e=o.generateWorker(this,r,i);}catch(t){(e=new l("error")).error(t);}return new a(e,r.type||"string",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return (t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=i;},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(t,e,r){e.exports=t("stream");},{stream:void 0}],17:[function(t,e,r){var i=t("./DataReader");function n(t){i.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e];}t("../utils").inherits(n,i),n.prototype.byteAt=function(t){return this.data[this.zero+t]},n.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===e&&this.data[s+1]===r&&this.data[s+2]===i&&this.data[s+3]===n)return s-this.zero;return -1},n.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.readData(4);return e===s[0]&&r===s[1]&&i===s[2]&&n===s[3]},n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return [];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n;},{"../utils":32,"./DataReader":18}],18:[function(t,e,r){var i=t("../utils");function n(t){this.data=t,this.length=t.length,this.index=0,this.zero=0;}n.prototype={checkOffset:function(t){this.checkIndex(this.index+t);},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t;},skip:function(t){this.setIndex(this.index+t);},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return i.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=n;},{"../utils":32}],19:[function(t,e,r){var i=t("./Uint8ArrayReader");function n(t){i.call(this,t);}t("../utils").inherits(n,i),n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n;},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(t,e,r){var i=t("./DataReader");function n(t){i.call(this,t);}t("../utils").inherits(n,i),n.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},n.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},n.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n;},{"../utils":32,"./DataReader":18}],21:[function(t,e,r){var i=t("./ArrayReader");function n(t){i.call(this,t);}t("../utils").inherits(n,i),n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n;},{"../utils":32,"./ArrayReader":17}],22:[function(t,e,r){var i=t("../utils"),n=t("../support"),s=t("./ArrayReader"),a=t("./StringReader"),o=t("./NodeBufferReader"),h=t("./Uint8ArrayReader");e.exports=function(t){var e=i.getTypeOf(t);return i.checkSupport(e),"string"!==e||n.uint8array?"nodebuffer"===e?new o(t):n.uint8array?new h(i.transformTo("uint8array",t)):new s(i.transformTo("array",t)):new a(t)};},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(t,e,r){r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b";},{}],24:[function(t,e,r){var i=t("./GenericWorker"),n=t("../utils");function s(t){i.call(this,"ConvertWorker to "+t),this.destType=t;}n.inherits(s,i),s.prototype.processChunk=function(t){this.push({data:n.transformTo(this.destType,t.data),meta:t.meta});},e.exports=s;},{"../utils":32,"./GenericWorker":28}],25:[function(t,e,r){var i=t("./GenericWorker"),n=t("../crc32");function s(){i.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0);}t("../utils").inherits(s,i),s.prototype.processChunk=function(t){this.streamInfo.crc32=n(t.data,this.streamInfo.crc32||0),this.push(t);},e.exports=s;},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(t,e,r){var i=t("../utils"),n=t("./GenericWorker");function s(t){n.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0);}i.inherits(s,n),s.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length;}n.prototype.processChunk.call(this,t);},e.exports=s;},{"../utils":32,"./GenericWorker":28}],27:[function(t,e,r){var i=t("../utils"),n=t("./GenericWorker");function s(t){n.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then(function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=i.getTypeOf(t),e.isPaused||e._tickAndRepeat();},function(t){e.error(t);});}i.inherits(s,n),s.prototype.cleanUp=function(){n.prototype.cleanUp.call(this),this.data=null;},s.prototype.resume=function(){return !!n.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0));},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return !1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e);}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=s;},{"../utils":32,"./GenericWorker":28}],28:[function(t,e,r){function i(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null;}i.prototype={push:function(t){this.emit("data",t);},end:function(){if(this.isFinished)return !1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0;}catch(t){this.emit("error",t);}return !0},error:function(t){return !this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[];},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e);},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",function(t){e.processChunk(t);}),t.on("end",function(){e.end();}),t.on("error",function(t){e.error(t);}),this},pause:function(){return !this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return !1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t);},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t]);},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock();},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},e.exports=i;},{}],29:[function(t,e,r){var h=t("../utils"),n=t("./ConvertWorker"),s=t("./GenericWorker"),u=t("../base64"),i=t("../support"),a=t("../external"),o=null;if(i.nodestream)try{o=t("../nodejs/NodejsStreamOutputAdapter");}catch(t){}function l(t,o){return new a.Promise(function(e,r){var i=[],n=t._internalType,s=t._outputType,a=t._mimeType;t.on("data",function(t,e){i.push(t),o&&o(e);}).on("error",function(t){i=[],r(t);}).on("end",function(){try{var t=function(t,e,r){switch(t){case"blob":return h.newBlob(h.transformTo("arraybuffer",e),r);case"base64":return u.encode(e);default:return h.transformTo(t,e)}}(s,function(t,e){var r,i=0,n=null,s=0;for(r=0;r<e.length;r++)s+=e[r].length;switch(t){case"string":return e.join("");case"array":return Array.prototype.concat.apply([],e);case"uint8array":for(n=new Uint8Array(s),r=0;r<e.length;r++)n.set(e[r],i),i+=e[r].length;return n;case"nodebuffer":return Buffer.concat(e);default:throw new Error("concat : unsupported type '"+t+"'")}}(n,i),a);e(t);}catch(t){r(t);}i=[];}).resume();})}function f(t,e,r){var i=e;switch(e){case"blob":case"arraybuffer":i="uint8array";break;case"base64":i="string";}try{this._internalType=i,this._outputType=e,this._mimeType=r,h.checkSupport(i),this._worker=t.pipe(new n(i)),t.lock();}catch(t){this._worker=new s("error"),this._worker.error(t);}}f.prototype={accumulate:function(t){return l(this,t)},on:function(t,e){var r=this;return "data"===t?this._worker.on(t,function(t){e.call(r,t.data,t.meta);}):this._worker.on(t,function(){h.delay(e,arguments,r);}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},t)}},e.exports=f;},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(t,e,r){if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else {var i=new ArrayBuffer(0);try{r.blob=0===new Blob([i],{type:"application/zip"}).size;}catch(t){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);n.append(i),r.blob=0===n.getBlob("application/zip").size;}catch(t){r.blob=!1;}}}try{r.nodestream=!!t("readable-stream").Readable;}catch(t){r.nodestream=!1;}},{"readable-stream":16}],31:[function(t,e,s){for(var o=t("./utils"),h=t("./support"),r=t("./nodejsUtils"),i=t("./stream/GenericWorker"),u=new Array(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;u[254]=u[254]=1;function a(){i.call(this,"utf-8 decode"),this.leftOver=null;}function l(){i.call(this,"utf-8 encode");}s.utf8encode=function(t){return h.nodebuffer?r.newBufferFrom(t,"utf-8"):function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=h.uint8array?new Uint8Array(o):new Array(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e}(t)},s.utf8decode=function(t){return h.nodebuffer?o.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,r,i,n,s=t.length,a=new Array(2*s);for(e=r=0;e<s;)if((i=t[e++])<128)a[r++]=i;else if(4<(n=u[i]))a[r++]=65533,e+=n-1;else {for(i&=2===n?31:3===n?15:7;1<n&&e<s;)i=i<<6|63&t[e++],n--;1<n?a[r++]=65533:i<65536?a[r++]=i:(i-=65536,a[r++]=55296|i>>10&1023,a[r++]=56320|1023&i);}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(t=o.transformTo(h.uint8array?"uint8array":"array",t))},o.inherits(a,i),a.prototype.processChunk=function(t){var e=o.transformTo(h.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=e;(e=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),e.set(r,this.leftOver.length);}else e=this.leftOver.concat(e);this.leftOver=null;}var i=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}(e),n=e;i!==e.length&&(h.uint8array?(n=e.subarray(0,i),this.leftOver=e.subarray(i,e.length)):(n=e.slice(0,i),this.leftOver=e.slice(i,e.length))),this.push({data:s.utf8decode(n),meta:t.meta});},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null);},s.Utf8DecodeWorker=a,o.inherits(l,i),l.prototype.processChunk=function(t){this.push({data:s.utf8encode(t.data),meta:t.meta});},s.Utf8EncodeWorker=l;},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(t,e,a){var o=t("./support"),h=t("./base64"),r=t("./nodejsUtils"),i=t("set-immediate-shim"),u=t("./external");function n(t){return t}function l(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}a.newBlob=function(e,r){a.checkSupport("blob");try{return new Blob([e],{type:r})}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return i.append(e),i.getBlob(r)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var s={stringifyByChunk:function(t,e,r){var i=[],n=0,s=t.length;if(s<=r)return String.fromCharCode.apply(null,t);for(;n<s;)"array"===e||"nodebuffer"===e?i.push(String.fromCharCode.apply(null,t.slice(n,Math.min(n+r,s)))):i.push(String.fromCharCode.apply(null,t.subarray(n,Math.min(n+r,s)))),n+=r;return i.join("")},stringifyByChar:function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return !1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(t){return !1}}()}};function f(t){var e=65536,r=a.getTypeOf(t),i=!0;if("uint8array"===r?i=s.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=s.applyCanBeUsed.nodebuffer),i)for(;1<e;)try{return s.stringifyByChunk(t,r,e)}catch(t){e=Math.floor(e/2);}return s.stringifyByChar(t)}function d(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}a.applyFromCharCode=f;var c={};c.string={string:n,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return c.string.uint8array(t).buffer},uint8array:function(t){return l(t,new Uint8Array(t.length))},nodebuffer:function(t){return l(t,r.allocBuffer(t.length))}},c.array={string:f,array:n,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(t)}},c.arraybuffer={string:function(t){return f(new Uint8Array(t))},array:function(t){return d(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:n,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(new Uint8Array(t))}},c.uint8array={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:n,nodebuffer:function(t){return r.newBufferFrom(t)}},c.nodebuffer={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return c.nodebuffer.uint8array(t).buffer},uint8array:function(t){return d(t,new Uint8Array(t.length))},nodebuffer:n},a.transformTo=function(t,e){if(e=e||"",!t)return e;a.checkSupport(t);var r=a.getTypeOf(e);return c[r][t](e)},a.getTypeOf=function(t){return "string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":o.nodebuffer&&r.isBuffer(t)?"nodebuffer":o.uint8array&&t instanceof Uint8Array?"uint8array":o.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(t){if(!o[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(t){var e,r,i="";for(r=0;r<(t||"").length;r++)i+="\\x"+((e=t.charCodeAt(r))<16?"0":"")+e.toString(16).toUpperCase();return i},a.delay=function(t,e,r){i(function(){t.apply(r||null,e||[]);});},a.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r;},a.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},a.prepareContent=function(r,t,i,n,s){return u.Promise.resolve(t).then(function(i){return o.blob&&(i instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(i)))&&"undefined"!=typeof FileReader?new u.Promise(function(e,r){var t=new FileReader;t.onload=function(t){e(t.target.result);},t.onerror=function(t){r(t.target.error);},t.readAsArrayBuffer(i);}):i}).then(function(t){var e=a.getTypeOf(t);return e?("arraybuffer"===e?t=a.transformTo("uint8array",t):"string"===e&&(s?t=h.decode(t):i&&!0!==n&&(t=function(t){return l(t,o.uint8array?new Uint8Array(t.length):new Array(t.length))}(t))),t):u.Promise.reject(new Error("Can't read the data of '"+r+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})};},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(t,e,r){var i=t("./reader/readerFor"),n=t("./utils"),s=t("./signature"),a=t("./zipEntry"),o=(t("./utf8"),t("./support"));function h(t){this.files=[],this.loadOptions=t;}h.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+n.pretty(e)+", expected "+n.pretty(t)+")")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var i=this.reader.readString(4)===e;return this.reader.setIndex(r),i},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=o.uint8array?"uint8array":"array",r=n.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r);},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,i=this.zip64EndOfCentralSize-44;0<i;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r};},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes();},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(t<0)throw !this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip: can't find end of central directory");this.reader.setIndex(t);var e=t;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===n.MAX_VALUE_16BITS||this.diskWithCentralDirStart===n.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===n.MAX_VALUE_16BITS||this.centralDirRecords===n.MAX_VALUE_16BITS||this.centralDirSize===n.MAX_VALUE_32BITS||this.centralDirOffset===n.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral();}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var i=e-r;if(0<i)this.isSignature(e,s.CENTRAL_FILE_HEADER)||(this.reader.zero=i);else if(i<0)throw new Error("Corrupted zip: missing "+Math.abs(i)+" bytes.")},prepareReader:function(t){this.reader=i(t);},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles();}},e.exports=h;},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(t,e,r){var i=t("./reader/readerFor"),s=t("./utils"),n=t("./compressedObject"),a=t("./crc32"),o=t("./utf8"),h=t("./compressions"),u=t("./support");function l(t,e){this.options=t,this.loadOptions=e;}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in h)if(h.hasOwnProperty(e)&&h[e].magic===t)return h[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new n(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize));},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength);},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0);},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=i(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4));}},readExtraFields:function(t){var e,r,i,n=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<n;)e=t.readInt(2),r=t.readInt(2),i=t.readData(r),this.extraFields[e]={id:e,length:r,value:i};t.setIndex(n);},handleUTF8:function(){var t=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else {var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else {var r=s.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r);}var i=this.findExtraFieldUnicodeComment();if(null!==i)this.fileCommentStr=i;else {var n=s.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(n);}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileName)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileComment)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null}},e.exports=l;},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(t,e,r){function i(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions};}var s=t("./stream/StreamHelper"),n=t("./stream/DataWorker"),a=t("./utf8"),o=t("./compressedObject"),h=t("./stream/GenericWorker");i.prototype={internalStream:function(t){var e=null,r="string";try{if(!t)throw new Error("No output type specified.");var i="string"===(r=t.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),e=this._decompressWorker();var n=!this._dataBinary;n&&!i&&(e=e.pipe(new a.Utf8EncodeWorker)),!n&&i&&(e=e.pipe(new a.Utf8DecodeWorker));}catch(t){(e=new h("error")).error(t);}return new s(e,r,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof o&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new n(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<u.length;f++)i.prototype[u[f]]=l;e.exports=i;},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(t,l,e){(function(e){var r,i,t=e.MutationObserver||e.WebKitMutationObserver;if(t){var n=0,s=new t(u),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=n=++n%2;};}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null;},e.document.documentElement.appendChild(t);}:function(){setTimeout(u,0);};else {var o=new e.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0);};}var h=[];function u(){var t,e;i=!0;for(var r=h.length;r;){for(e=h,h=[],t=-1;++t<r;)e[t]();r=h.length;}i=!1;}l.exports=function(t){1!==h.push(t)||i||r();};}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],37:[function(t,e,r){var n=t("immediate");function u(){}var l={},s=["REJECTED"],a=["FULFILLED"],i=["PENDING"];function o(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=i,this.queue=[],this.outcome=void 0,t!==u&&c(this,t);}function h(t,e,r){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected);}function f(e,r,i){n(function(){var t;try{t=r(i);}catch(t){return l.reject(e,t)}t===e?l.reject(e,new TypeError("Cannot resolve promise with itself")):l.resolve(e,t);});}function d(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments);}}function c(e,t){var r=!1;function i(t){r||(r=!0,l.reject(e,t));}function n(t){r||(r=!0,l.resolve(e,t));}var s=p(function(){t(n,i);});"error"===s.status&&i(s.value);}function p(t,e){var r={};try{r.value=t(e),r.status="success";}catch(t){r.status="error",r.value=t;}return r}(e.exports=o).prototype.finally=function(e){if("function"!=typeof e)return this;var r=this.constructor;return this.then(function(t){return r.resolve(e()).then(function(){return t})},function(t){return r.resolve(e()).then(function(){throw t})})},o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){if("function"!=typeof t&&this.state===a||"function"!=typeof e&&this.state===s)return this;var r=new this.constructor(u);this.state!==i?f(r,this.state===a?t:e,this.outcome):this.queue.push(new h(r,t,e));return r},h.prototype.callFulfilled=function(t){l.resolve(this.promise,t);},h.prototype.otherCallFulfilled=function(t){f(this.promise,this.onFulfilled,t);},h.prototype.callRejected=function(t){l.reject(this.promise,t);},h.prototype.otherCallRejected=function(t){f(this.promise,this.onRejected,t);},l.resolve=function(t,e){var r=p(d,e);if("error"===r.status)return l.reject(t,r.value);var i=r.value;if(i)c(t,i);else {t.state=a,t.outcome=e;for(var n=-1,s=t.queue.length;++n<s;)t.queue[n].callFulfilled(e);}return t},l.reject=function(t,e){t.state=s,t.outcome=e;for(var r=-1,i=t.queue.length;++r<i;)t.queue[r].callRejected(e);return t},o.resolve=function(t){if(t instanceof this)return t;return l.resolve(new this(u),t)},o.reject=function(t){var e=new this(u);return l.reject(e,t)},o.all=function(t){var r=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var i=t.length,n=!1;if(!i)return this.resolve([]);var s=new Array(i),a=0,e=-1,o=new this(u);for(;++e<i;)h(t[e],e);return o;function h(t,e){r.resolve(t).then(function(t){s[e]=t,++a!==i||n||(n=!0,l.resolve(o,s));},function(t){n||(n=!0,l.reject(o,t));});}},o.race=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var r=t.length,i=!1;if(!r)return this.resolve([]);var n=-1,s=new this(u);for(;++n<r;)a=t[n],e.resolve(a).then(function(t){i||(i=!0,l.resolve(s,t));},function(t){i||(i=!0,l.reject(s,t));});var a;return s};},{immediate:36}],38:[function(t,e,r){var i={};(0, t("./lib/utils/common").assign)(i,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=i;},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(t,e,r){var a=t("./zlib/deflate"),o=t("./utils/common"),h=t("./utils/strings"),n=t("./zlib/messages"),s=t("./zlib/zstream"),u=Object.prototype.toString,l=0,f=-1,d=0,c=8;function p(t){if(!(this instanceof p))return new p(t);this.options=o.assign({level:f,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==l)throw new Error(n[r]);if(e.header&&a.deflateSetHeader(this.strm,e.header),e.dictionary){var i;if(i="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(r=a.deflateSetDictionary(this.strm,i))!==l)throw new Error(n[r]);this._dict_set=!0;}}function i(t,e){var r=new p(e);if(r.push(t,!0),r.err)throw r.msg||n[r.err];return r.result}p.prototype.push=function(t,e){var r,i,n=this.strm,s=this.options.chunkSize;if(this.ended)return !1;i=e===~~e?e:!0===e?4:0,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===u.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new o.Buf8(s),n.next_out=0,n.avail_out=s),1!==(r=a.deflate(n,i))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==n.avail_out&&(0!==n.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(n.output,n.next_out))):this.onData(o.shrinkBuf(n.output,n.next_out)));}while((0<n.avail_in||0===n.avail_out)&&1!==r);return 4===i?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==i||(this.onEnd(l),!(n.avail_out=0))},p.prototype.onData=function(t){this.chunks.push(t);},p.prototype.onEnd=function(t){t===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg;},r.Deflate=p,r.deflate=i,r.deflateRaw=function(t,e){return (e=e||{}).raw=!0,i(t,e)},r.gzip=function(t,e){return (e=e||{}).gzip=!0,i(t,e)};},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(t,e,r){var d=t("./zlib/inflate"),c=t("./utils/common"),p=t("./utils/strings"),m=t("./zlib/constants"),i=t("./zlib/messages"),n=t("./zlib/zstream"),s=t("./zlib/gzheader"),_=Object.prototype.toString;function a(t){if(!(this instanceof a))return new a(t);this.options=c.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new n,this.strm.avail_out=0;var r=d.inflateInit2(this.strm,e.windowBits);if(r!==m.Z_OK)throw new Error(i[r]);this.header=new s,d.inflateGetHeader(this.strm,this.header);}function o(t,e){var r=new a(e);if(r.push(t,!0),r.err)throw r.msg||i[r.err];return r.result}a.prototype.push=function(t,e){var r,i,n,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return !1;i=e===~~e?e:!0===e?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof t?h.input=p.binstring2buf(t):"[object ArrayBuffer]"===_.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new c.Buf8(u),h.next_out=0,h.avail_out=u),(r=d.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o="string"==typeof l?p.string2buf(l):"[object ArrayBuffer]"===_.call(l)?new Uint8Array(l):l,r=d.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||i!==m.Z_FINISH&&i!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(n=p.utf8border(h.output,h.next_out),s=h.next_out-n,a=p.buf2string(h.output,n),h.next_out=s,h.avail_out=u-s,s&&c.arraySet(h.output,h.output,n,s,0),this.onData(a)):this.onData(c.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0);}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(i=m.Z_FINISH),i===m.Z_FINISH?(r=d.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):i!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(t){this.chunks.push(t);},a.prototype.onEnd=function(t){t===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg;},r.Inflate=a,r.inflate=o,r.inflateRaw=function(t,e){return (e=e||{}).raw=!0,o(t,e)},r.ungzip=o;},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(t,e,r){var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var i in r)r.hasOwnProperty(i)&&(t[i]=r[i]);}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,r,i,n){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+i),n);else for(var s=0;s<i;s++)t[n+s]=e[r+s];},flattenChunks:function(t){var e,r,i,n,s,a;for(e=i=0,r=t.length;e<r;e++)i+=t[e].length;for(a=new Uint8Array(i),e=n=0,r=t.length;e<r;e++)s=t[e],a.set(s,n),n+=s.length;return a}},s={arraySet:function(t,e,r,i,n){for(var s=0;s<i;s++)t[n+s]=e[r+s];},flattenChunks:function(t){return [].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,n)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s));},r.setTyped(i);},{}],42:[function(t,e,r){var h=t("./common"),n=!0,s=!0;try{String.fromCharCode.apply(null,[0]);}catch(t){n=!1;}try{String.fromCharCode.apply(null,new Uint8Array(1));}catch(t){s=!1;}for(var u=new h.Buf8(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function l(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&n))return String.fromCharCode.apply(null,h.shrinkBuf(t,e));for(var r="",i=0;i<e;i++)r+=String.fromCharCode(t[i]);return r}u[254]=u[254]=1,r.string2buf=function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=new h.Buf8(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e},r.buf2binstring=function(t){return l(t,t.length)},r.binstring2buf=function(t){for(var e=new h.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,i,n,s,a=e||t.length,o=new Array(2*a);for(r=i=0;r<a;)if((n=t[r++])<128)o[i++]=n;else if(4<(s=u[n]))o[i++]=65533,r+=s-1;else {for(n&=2===s?31:3===s?15:7;1<s&&r<a;)n=n<<6|63&t[r++],s--;1<s?o[i++]=65533:n<65536?o[i++]=n:(n-=65536,o[i++]=55296|n>>10&1023,o[i++]=56320|1023&n);}return l(o,i)},r.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e};},{"./common":41}],43:[function(t,e,r){e.exports=function(t,e,r,i){for(var n=65535&t|0,s=t>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(n=n+e[i++]|0)|0,--a;);n%=65521,s%=65521;}return n|s<<16|0};},{}],44:[function(t,e,r){e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};},{}],45:[function(t,e,r){var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t;}return e}();e.exports=function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return -1^t};},{}],46:[function(t,e,r){var h,d=t("../utils/common"),u=t("./trees"),c=t("./adler32"),p=t("./crc32"),i=t("./messages"),l=0,f=4,m=0,_=-2,g=-1,b=4,n=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(t,e){return t.msg=i[e],e}function T(t){return (t<<1)-(4<t?9:0)}function D(t){for(var e=t.length;0<=--e;)t[e]=0;}function F(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(d.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0));}function N(t,e){u._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,F(t.strm);}function U(t,e){t.pending_buf[t.pending++]=e;}function P(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e;}function L(t,e){var r,i,n=t.max_chain_length,s=t.strstart,a=t.prev_length,o=t.nice_match,h=t.strstart>t.w_size-z?t.strstart-(t.w_size-z):0,u=t.window,l=t.w_mask,f=t.prev,d=t.strstart+S,c=u[s+a-1],p=u[s+a];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(u[(r=e)+a]===p&&u[r+a-1]===c&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<d);if(i=S-(d-s),s=d-S,a<i){if(t.match_start=e,o<=(a=i))break;c=u[s+a-1],p=u[s+a];}}}while((e=f[e&l])>h&&0!=--n);return a<=t.lookahead?a:t.lookahead}function j(t){var e,r,i,n,s,a,o,h,u,l,f=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=f+(f-z)){for(d.arraySet(t.window,t.window,f,f,0),t.match_start-=f,t.strstart-=f,t.block_start-=f,e=r=t.hash_size;i=t.head[--e],t.head[e]=f<=i?i-f:0,--r;);for(e=r=f;i=t.prev[--e],t.prev[e]=f<=i?i-f:0,--r;);n+=f;}if(0===t.strm.avail_in)break;if(a=t.strm,o=t.window,h=t.strstart+t.lookahead,u=n,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,d.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=c(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),t.lookahead+=r,t.lookahead+t.insert>=x)for(s=t.strstart-t.insert,t.ins_h=t.window[s],t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+x-1])&t.hash_mask,t.prev[s&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=s,s++,t.insert--,!(t.lookahead+t.insert<x)););}while(t.lookahead<z&&0!==t.strm.avail_in)}function Z(t,e){for(var r,i;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r)),t.match_length>=x)if(i=u._tr_tally(t,t.strstart-t.match_start,t.match_length-x),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=x){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++;}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function W(t,e){for(var r,i,n;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=x-1,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r),t.match_length<=5&&(1===t.strategy||t.match_length===x&&4096<t.strstart-t.match_start)&&(t.match_length=x-1)),t.prev_length>=x&&t.match_length<=t.prev_length){for(n=t.strstart+t.lookahead-x,i=u._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-x),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=x-1,t.strstart++,i&&(N(t,!1),0===t.strm.avail_out))return A}else if(t.match_available){if((i=u._tr_tally(t,0,t.window[t.strstart-1]))&&N(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return A}else t.match_available=1,t.strstart++,t.lookahead--;}return t.match_available&&(i=u._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function M(t,e,r,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=i,this.func=n;}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new d.Buf16(2*w),this.dyn_dtree=new d.Buf16(2*(2*a+1)),this.bl_tree=new d.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new d.Buf16(k+1),this.heap=new d.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new d.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0;}function G(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=n,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?C:E,t.adler=2===e.wrap?0:1,e.last_flush=l,u._tr_init(e),m):R(t,_)}function K(t){var e=G(t);return e===m&&function(t){t.window_size=2*t.w_size,D(t.head),t.max_lazy_match=h[t.level].max_lazy,t.good_match=h[t.level].good_length,t.nice_match=h[t.level].nice_length,t.max_chain_length=h[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=x-1,t.match_available=0,t.ins_h=0;}(t.state),e}function Y(t,e,r,i,n,s){if(!t)return _;var a=1;if(e===g&&(e=6),i<0?(a=0,i=-i):15<i&&(a=2,i-=16),n<1||y<n||r!==v||i<8||15<i||e<0||9<e||s<0||b<s)return R(t,_);8===i&&(i=9);var o=new H;return (t.state=o).strm=t,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new d.Buf8(2*o.w_size),o.head=new d.Buf16(o.hash_size),o.prev=new d.Buf16(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new d.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=e,o.strategy=s,o.method=r,K(t)}h=[new M(0,0,0,0,function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(j(t),0===t.lookahead&&e===l)return A;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+r;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,N(t,!1),0===t.strm.avail_out))return A;if(t.strstart-t.block_start>=t.w_size-z&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):(t.strstart>t.block_start&&(N(t,!1),t.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(t,e){return Y(t,e,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?_:(t.state.gzhead=e,m):_},r.deflate=function(t,e){var r,i,n,s;if(!t||!t.state||5<e||e<0)return t?R(t,_):_;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&e!==f)return R(t,0===t.avail_out?-5:_);if(i.strm=t,r=i.last_flush,i.last_flush=e,i.status===C)if(2===i.wrap)t.adler=0,U(i,31),U(i,139),U(i,8),i.gzhead?(U(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),U(i,255&i.gzhead.time),U(i,i.gzhead.time>>8&255),U(i,i.gzhead.time>>16&255),U(i,i.gzhead.time>>24&255),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(U(i,255&i.gzhead.extra.length),U(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=p(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(U(i,0),U(i,0),U(i,0),U(i,0),U(i,0),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,3),i.status=E);else {var a=v+(i.w_bits-8<<4)<<8;a|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(a|=32),a+=31-a%31,i.status=E,P(i,a),0!==i.strstart&&(P(i,t.adler>>>16),P(i,65535&t.adler)),t.adler=1;}if(69===i.status)if(i.gzhead.extra){for(n=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending!==i.pending_buf_size));)U(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73);}else i.status=73;if(73===i.status)if(i.gzhead.name){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,U(i,s);}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.gzindex=0,i.status=91);}else i.status=91;if(91===i.status)if(i.gzhead.comment){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,U(i,s);}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.status=103);}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&F(t),i.pending+2<=i.pending_buf_size&&(U(i,255&t.adler),U(i,t.adler>>8&255),t.adler=0,i.status=E)):i.status=E),0!==i.pending){if(F(t),0===t.avail_out)return i.last_flush=-1,m}else if(0===t.avail_in&&T(e)<=T(r)&&e!==f)return R(t,-5);if(666===i.status&&0!==t.avail_in)return R(t,-5);if(0!==t.avail_in||0!==i.lookahead||e!==l&&666!==i.status){var o=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(j(t),0===t.lookahead)){if(e===l)return A;break}if(t.match_length=0,r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):3===i.strategy?function(t,e){for(var r,i,n,s,a=t.window;;){if(t.lookahead<=S){if(j(t),t.lookahead<=S&&e===l)return A;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=x&&0<t.strstart&&(i=a[n=t.strstart-1])===a[++n]&&i===a[++n]&&i===a[++n]){s=t.strstart+S;do{}while(i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&n<s);t.match_length=S-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead);}if(t.match_length>=x?(r=u._tr_tally(t,1,t.match_length-x),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):h[i.level].func(i,e);if(o!==O&&o!==B||(i.status=666),o===A||o===O)return 0===t.avail_out&&(i.last_flush=-1),m;if(o===I&&(1===e?u._tr_align(i):5!==e&&(u._tr_stored_block(i,0,0,!1),3===e&&(D(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),F(t),0===t.avail_out))return i.last_flush=-1,m}return e!==f?m:i.wrap<=0?1:(2===i.wrap?(U(i,255&t.adler),U(i,t.adler>>8&255),U(i,t.adler>>16&255),U(i,t.adler>>24&255),U(i,255&t.total_in),U(i,t.total_in>>8&255),U(i,t.total_in>>16&255),U(i,t.total_in>>24&255)):(P(i,t.adler>>>16),P(i,65535&t.adler)),F(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?m:1)},r.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==C&&69!==e&&73!==e&&91!==e&&103!==e&&e!==E&&666!==e?R(t,_):(t.state=null,e===E?R(t,-3):m):_},r.deflateSetDictionary=function(t,e){var r,i,n,s,a,o,h,u,l=e.length;if(!t||!t.state)return _;if(2===(s=(r=t.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(t.adler=c(t.adler,e,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new d.Buf8(r.w_size),d.arraySet(u,e,l-r.w_size,r.w_size,0),e=u,l=r.w_size),a=t.avail_in,o=t.next_in,h=t.input,t.avail_in=l,t.next_in=0,t.input=e,j(r);r.lookahead>=x;){for(i=r.strstart,n=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[i+x-1])&r.hash_mask,r.prev[i&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=i,i++,--n;);r.strstart=i,r.lookahead=x-1,j(r);}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,t.next_in=o,t.input=h,t.avail_in=a,r.wrap=s,m},r.deflateInfo="pako deflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(t,e,r){e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1;};},{}],48:[function(t,e,r){e.exports=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C;r=t.state,i=t.next_in,z=t.input,n=i+(t.avail_in-5),s=t.next_out,C=t.output,a=s-(e-t.avail_out),o=s+(t.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,d=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;t:do{p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=m[c&g];e:for(;;){if(c>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else {if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(c&(1<<y)-1)];continue e}if(32&y){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}w=65535&v,(y&=15)&&(p<y&&(c+=z[i++]<<p,p+=8),w+=c&(1<<y)-1,c>>>=y,p-=y),p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=_[c&b];r:for(;;){if(c>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(c&(1<<y)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(k=65535&v,p<(y&=15)&&(c+=z[i++]<<p,(p+=8)<y&&(c+=z[i++]<<p,p+=8)),h<(k+=c&(1<<y)-1)){t.msg="invalid distance too far back",r.mode=30;break t}if(c>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(S=d,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C;}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=d[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=d[x++],--y;);x=s-k,S=C;}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C;}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]));}else {for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]));}break}}break}}while(i<n&&s<o);i-=w=p>>3,c&=(1<<(p-=w<<3))-1,t.next_in=i,t.next_out=s,t.avail_in=i<n?n-i+5:5-(i-n),t.avail_out=s<o?o-s+257:257-(s-o),r.hold=c,r.bits=p;};},{}],49:[function(t,e,r){var I=t("../utils/common"),O=t("./adler32"),B=t("./crc32"),R=t("./inffast"),T=t("./inftrees"),D=1,F=2,N=0,U=-2,P=1,i=852,n=592;function L(t){return (t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0;}function a(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=P,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new I.Buf32(i),e.distcode=e.distdyn=new I.Buf32(n),e.sane=1,e.back=-1,N):U}function o(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,a(t)):U}function h(t,e){var r,i;return t&&t.state?(i=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?U:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=r,i.wbits=e,o(t))):U}function u(t,e){var r,i;return t?(i=new s,(t.state=i).window=null,(r=h(t,e))!==N&&(t.state=null),r):U}var l,f,d=!0;function j(t){if(d){var e;for(l=new I.Buf32(512),f=new I.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(T(D,t.lens,0,288,l,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;T(F,t.lens,0,32,f,0,t.work,{bits:5}),d=!1;}t.lencode=l,t.lenbits=9,t.distcode=f,t.distbits=5;}function Z(t,e,r,i){var n,s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),i>=s.wsize?(I.arraySet(s.window,e,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(i<(n=s.wsize-s.wnext)&&(n=i),I.arraySet(s.window,e,r-i,n,s.wnext),(i-=n)?(I.arraySet(s.window,e,r-i,i,0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(t){return u(t,15)},r.inflateInit2=u,r.inflate=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return U;12===(r=t.state).mode&&(r.mode=13),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,f=o,d=h,x=N;t:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){t.msg="incorrect header check",r.mode=30;break}if(8!=(15&u)){t.msg="unknown compression method",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){t.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,t.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if(r.flags=u,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0;}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(c=r.length)&&(c=o),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,i,s,c,k)),512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,r.length-=c),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if(u!==(65535&r.check)){t.msg="header crc mismatch",r.mode=30;break}l=u=0;}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}t.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==e)break;u>>>=2,l-=2;break t;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=30;}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if((65535&u)!=(u>>>16^65535)){t.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(c=r.length){if(o<c&&(c=o),h<c&&(c=h),0===c)break t;I.arraySet(n,i,s,c,a),o-=c,s+=c,h-=c,a+=c,r.length-=c;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){t.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3;}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else {if(16===b){for(z=_+2;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if(u>>>=_,l-=_,0===r.have){t.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&u),u>>>=2,l-=2;}else if(17===b){for(z=_+3;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}l-=_,k=0,c=3+(7&(u>>>=_)),u>>>=3,l-=3;}else {for(z=_+7;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}l-=_,k=0,c=11+(127&(u>>>=_)),u>>>=7,l-=7;}if(r.have+c>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=30;break}for(;c--;)r.lens[r.have++]=k;}}if(30===r.mode)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){t.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(6<=o&&258<=h){t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,R(t,d),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}u>>>=v,l-=v,r.back+=v;}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){t.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra;}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}u>>>=v,l-=v,r.back+=v;}if(u>>>=_,l-=_,r.back+=_,64&g){t.msg="invalid distance code",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra;}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===h)break t;if(c=d-h,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window;}else m=n,p=a-r.offset,c=r.length;for(h<c&&(c=h),h-=c,r.length-=c;n[a++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break t;n[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break t;o--,u|=i[s++]<<l,l+=8;}if(d-=h,t.total_out+=d,r.total+=d,d&&(t.adler=r.check=r.flags?B(r.check,n,d,a-d):O(r.check,n,d,a-d)),d=h,(r.flags?u:L(u))!==r.check){t.msg="incorrect data check",r.mode=30;break}l=u=0;}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8;}if(u!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=30;break}l=u=0;}r.mode=29;case 29:x=1;break t;case 30:x=-3;break t;case 31:return -4;case 32:default:return U}return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,(r.wsize||d!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&Z(t,t.output,t.next_out,d-t.avail_out)?(r.mode=31,-4):(f-=t.avail_in,d-=t.avail_out,t.total_in+=f,t.total_out+=d,r.total+=d,r.wrap&&d&&(t.adler=r.check=r.flags?B(r.check,n,d,t.next_out-d):O(r.check,n,d,t.next_out-d)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===d||4===e)&&x===N&&(x=-5),x)},r.inflateEnd=function(t){if(!t||!t.state)return U;var e=t.state;return e.window&&(e.window=null),t.state=null,N},r.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?U:((r.head=e).done=!1,N):U},r.inflateSetDictionary=function(t,e){var r,i=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,e,i,0)!==r.check?-3:Z(t,e,i,i)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)";},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(t,e,r){var D=t("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,r,i,n,s,a,o){var h,u,l,f,d,c,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<i;v++)O[e[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return -1;if(0<z&&(0===t||1!==w))return -1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<i;v++)0!==e[r+v]&&(a[B[e[r+v]]++]=v);if(c=0===t?(A=R=a,19):1===t?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,d=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===t&&852<C||2===t&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<c?(m=0,a[v]):a[v]>c?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;n[d+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=e[r+a[v]];}if(k<b&&(E&f)!==l){for(0===S&&(S=k),d+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===t&&852<C||2===t&&592<C)return 1;n[l=E&f]=k<<24|x<<16|d-s|0;}}return 0!==E&&(n[d+E]=b-S<<24|64<<16|0),o.bits=k,0};},{"../utils/common":41}],51:[function(t,e,r){e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"};},{}],52:[function(t,e,r){var n=t("../utils/common"),o=0,h=1;function i(t){for(var e=t.length;0<=--e;)t[e]=0;}var s=0,a=29,u=256,l=u+1+a,f=30,d=19,_=2*l+1,g=15,c=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));i(z);var C=new Array(2*f);i(C);var E=new Array(512);i(E);var A=new Array(256);i(A);var I=new Array(a);i(I);var O,B,R,T=new Array(f);function D(t,e,r,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=i,this.max_length=n,this.has_stree=t&&t.length;}function F(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e;}function N(t){return t<256?E[t]:E[256+(t>>>7)]}function U(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255;}function P(t,e,r){t.bi_valid>c-r?(t.bi_buf|=e<<t.bi_valid&65535,U(t,t.bi_buf),t.bi_buf=e>>c-t.bi_valid,t.bi_valid+=r-c):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r);}function L(t,e,r){P(t,r[2*e],r[2*e+1]);}function j(t,e){for(var r=0;r|=1&t,t>>>=1,r<<=1,0<--e;);return r>>>1}function Z(t,e,r){var i,n,s=new Array(g+1),a=0;for(i=1;i<=g;i++)s[i]=a=a+r[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=j(s[o]++,o));}}function W(t){var e;for(e=0;e<l;e++)t.dyn_ltree[2*e]=0;for(e=0;e<f;e++)t.dyn_dtree[2*e]=0;for(e=0;e<d;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*m]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0;}function M(t){8<t.bi_valid?U(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0;}function H(t,e,r,i){var n=2*e,s=2*r;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[r]}function G(t,e,r){for(var i=t.heap[r],n=r<<1;n<=t.heap_len&&(n<t.heap_len&&H(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!H(e,i,t.heap[n],t.depth));)t.heap[r]=t.heap[n],r=n,n<<=1;t.heap[r]=i;}function K(t,e,r){var i,n,s,a,o=0;if(0!==t.last_lit)for(;i=t.pending_buf[t.d_buf+2*o]<<8|t.pending_buf[t.d_buf+2*o+1],n=t.pending_buf[t.l_buf+o],o++,0===i?L(t,n,e):(L(t,(s=A[n])+u+1,e),0!==(a=w[s])&&P(t,n-=I[s],a),L(t,s=N(--i),r),0!==(a=k[s])&&P(t,i-=T[s],a)),o<t.last_lit;);L(t,m,e);}function Y(t,e){var r,i,n,s=e.dyn_tree,a=e.stat_desc.static_tree,o=e.stat_desc.has_stree,h=e.stat_desc.elems,u=-1;for(t.heap_len=0,t.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(t.heap[++t.heap_len]=u=r,t.depth[r]=0):s[2*r+1]=0;for(;t.heap_len<2;)s[2*(n=t.heap[++t.heap_len]=u<2?++u:0)]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=a[2*n+1]);for(e.max_code=u,r=t.heap_len>>1;1<=r;r--)G(t,s,r);for(n=h;r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],G(t,s,1),i=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=i,s[2*n]=s[2*r]+s[2*i],t.depth[n]=(t.depth[r]>=t.depth[i]?t.depth[r]:t.depth[i])+1,s[2*r+1]=s[2*i+1]=n,t.heap[1]=n++,G(t,s,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,i,n,s,a,o,h=e.dyn_tree,u=e.max_code,l=e.stat_desc.static_tree,f=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,c=e.stat_desc.extra_base,p=e.stat_desc.max_length,m=0;for(s=0;s<=g;s++)t.bl_count[s]=0;for(h[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<_;r++)p<(s=h[2*h[2*(i=t.heap[r])+1]+1]+1)&&(s=p,m++),h[2*i+1]=s,u<i||(t.bl_count[s]++,a=0,c<=i&&(a=d[i-c]),o=h[2*i],t.opt_len+=o*(s+a),f&&(t.static_len+=o*(l[2*i+1]+a)));if(0!==m){do{for(s=p-1;0===t.bl_count[s];)s--;t.bl_count[s]--,t.bl_count[s+1]+=2,t.bl_count[p]--,m-=2;}while(0<m);for(s=p;0!==s;s--)for(i=t.bl_count[s];0!==i;)u<(n=t.heap[--r])||(h[2*n+1]!==s&&(t.opt_len+=(s-h[2*n+1])*h[2*n],h[2*n+1]=s),i--);}}(t,e),Z(s,u,t.bl_count);}function X(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),e[2*(r+1)+1]=65535,i=0;i<=r;i++)n=a,a=e[2*(i+1)+1],++o<h&&n===a||(o<u?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[2*b]++):o<=10?t.bl_tree[2*v]++:t.bl_tree[2*y]++,s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4));}function V(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),i=0;i<=r;i++)if(n=a,a=e[2*(i+1)+1],!(++o<h&&n===a)){if(o<u)for(;L(t,n,t.bl_tree),0!=--o;);else 0!==n?(n!==s&&(L(t,n,t.bl_tree),o--),L(t,b,t.bl_tree),P(t,o-3,2)):o<=10?(L(t,v,t.bl_tree),P(t,o-3,3)):(L(t,y,t.bl_tree),P(t,o-11,7));s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4);}}i(T);var q=!1;function J(t,e,r,i){P(t,(s<<1)+(i?1:0),3),function(t,e,r,i){M(t),i&&(U(t,r),U(t,~r)),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r;}(t,e,r,!0);}r._tr_init=function(t){q||(function(){var t,e,r,i,n,s=new Array(g+1);for(i=r=0;i<a-1;i++)for(I[i]=r,t=0;t<1<<w[i];t++)A[r++]=i;for(A[r-1]=i,i=n=0;i<16;i++)for(T[i]=n,t=0;t<1<<k[i];t++)E[n++]=i;for(n>>=7;i<f;i++)for(T[i]=n<<7,t=0;t<1<<k[i]-7;t++)E[256+n++]=i;for(e=0;e<=g;e++)s[e]=0;for(t=0;t<=143;)z[2*t+1]=8,t++,s[8]++;for(;t<=255;)z[2*t+1]=9,t++,s[9]++;for(;t<=279;)z[2*t+1]=7,t++,s[7]++;for(;t<=287;)z[2*t+1]=8,t++,s[8]++;for(Z(z,l+1,s),t=0;t<f;t++)C[2*t+1]=5,C[2*t]=j(t,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,d,p);}(),q=!0),t.l_desc=new F(t.dyn_ltree,O),t.d_desc=new F(t.dyn_dtree,B),t.bl_desc=new F(t.bl_tree,R),t.bi_buf=0,t.bi_valid=0,W(t);},r._tr_stored_block=J,r._tr_flush_block=function(t,e,r,i){var n,s,a=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return o;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return h;for(e=32;e<u;e++)if(0!==t.dyn_ltree[2*e])return h;return o}(t)),Y(t,t.l_desc),Y(t,t.d_desc),a=function(t){var e;for(X(t,t.dyn_ltree,t.l_desc.max_code),X(t,t.dyn_dtree,t.d_desc.max_code),Y(t,t.bl_desc),e=d-1;3<=e&&0===t.bl_tree[2*S[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),n=t.opt_len+3+7>>>3,(s=t.static_len+3+7>>>3)<=n&&(n=s)):n=s=r+5,r+4<=n&&-1!==e?J(t,e,r,i):4===t.strategy||s===n?(P(t,2+(i?1:0),3),K(t,z,C)):(P(t,4+(i?1:0),3),function(t,e,r,i){var n;for(P(t,e-257,5),P(t,r-1,5),P(t,i-4,4),n=0;n<i;n++)P(t,t.bl_tree[2*S[n]+1],3);V(t,t.dyn_ltree,e-1),V(t,t.dyn_dtree,r-1);}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),K(t,t.dyn_ltree,t.dyn_dtree)),W(t),i&&M(t);},r._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(A[r]+u+1)]++,t.dyn_dtree[2*N(e)]++),t.last_lit===t.lit_bufsize-1},r._tr_align=function(t){P(t,2,3),L(t,m,z),function(t){16===t.bi_valid?(U(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8);}(t);};},{"../utils/common":41}],53:[function(t,e,r){e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0;};},{}],54:[function(t,e,r){e.exports="function"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t);};},{}]},{},[10])(10)});
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).Buffer, __webpack_require__(4), __webpack_require__(60).setImmediate));

    /***/ }),
    /* 139 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    var file_1 = __webpack_require__(12);
    exports.Document = file_1.File;
    __export(__webpack_require__(12));
    __export(__webpack_require__(352));
    __export(__webpack_require__(360));
    __export(__webpack_require__(44));


    /***/ }),
    /* 140 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const base_1 = __webpack_require__(25);
    exports.EMPTY_OBJECT = Object.seal({});
    class XmlComponent extends base_1.BaseXmlComponent {
        constructor(rootKey) {
            super(rootKey);
            this.root = new Array();
        }
        prepForXml(file) {
            const children = this.root
                .filter((c) => {
                if (c instanceof base_1.BaseXmlComponent) {
                    return !c.IsDeleted;
                }
                return c !== undefined;
            })
                .map((comp) => {
                if (comp instanceof base_1.BaseXmlComponent) {
                    return comp.prepForXml(file);
                }
                return comp;
            })
                .filter((comp) => comp !== undefined);
            const onlyAttrs = (c) => typeof c === "object" && c._attr;
            return {
                [this.rootKey]: children.length ? (children.length === 1 && onlyAttrs(children[0]) ? children[0] : children) : exports.EMPTY_OBJECT,
            };
        }
        addChildElement(child) {
            this.root.push(child);
            return this;
        }
        delete() {
            this.deleted = true;
        }
    }
    exports.XmlComponent = XmlComponent;
    class IgnoreIfEmptyXmlComponent extends XmlComponent {
        prepForXml() {
            const result = super.prepForXml();
            if (result && (typeof result[this.rootKey] !== "object" || Object.keys(result[this.rootKey]).length)) {
                return result;
            }
        }
    }
    exports.IgnoreIfEmptyXmlComponent = IgnoreIfEmptyXmlComponent;


    /***/ }),
    /* 141 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const default_attributes_1 = __webpack_require__(53);
    class Attributes extends default_attributes_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                val: "w:val",
                color: "w:color",
                fill: "w:fill",
                space: "w:space",
                sz: "w:sz",
                type: "w:type",
                rsidR: "w:rsidR",
                rsidRPr: "w:rsidRPr",
                rsidSect: "w:rsidSect",
                w: "w:w",
                h: "w:h",
                top: "w:top",
                right: "w:right",
                bottom: "w:bottom",
                left: "w:left",
                header: "w:header",
                footer: "w:footer",
                gutter: "w:gutter",
                linePitch: "w:linePitch",
                pos: "w:pos",
            };
        }
    }
    exports.Attributes = Attributes;


    /***/ }),
    /* 142 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_js_1 = __webpack_require__(26);
    const _1 = __webpack_require__(0);
    function convertToXmlComponent(element) {
        switch (element.type) {
            case undefined:
            case "element":
                const xmlComponent = new ImportedXmlComponent(element.name, element.attributes);
                const childElments = element.elements || [];
                for (const childElm of childElments) {
                    const child = convertToXmlComponent(childElm);
                    if (child !== undefined) {
                        xmlComponent.push(child);
                    }
                }
                return xmlComponent;
            case "text":
                return element.text;
            default:
                return undefined;
        }
    }
    exports.convertToXmlComponent = convertToXmlComponent;
    class ImportedXmlComponentAttributes extends _1.XmlAttributeComponent {
    }
    class ImportedXmlComponent extends _1.XmlComponent {
        static fromXmlString(importedContent) {
            const xmlObj = xml_js_1.xml2js(importedContent, { compact: false });
            return convertToXmlComponent(xmlObj);
        }
        constructor(rootKey, _attr) {
            super(rootKey);
            if (_attr) {
                this.root.push(new ImportedXmlComponentAttributes(_attr));
            }
        }
        push(xmlComponent) {
            this.root.push(xmlComponent);
        }
    }
    exports.ImportedXmlComponent = ImportedXmlComponent;
    class ImportedRootElementAttributes extends _1.XmlComponent {
        constructor(_attr) {
            super("");
            this._attr = _attr;
        }
        prepForXml() {
            return {
                _attr: this._attr,
            };
        }
    }
    exports.ImportedRootElementAttributes = ImportedRootElementAttributes;


    /***/ }),
    /* 143 */
    /***/ (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */(function(Buffer) {(function (sax) { // wrapper for non-node envs
      sax.parser = function (strict, opt) { return new SAXParser(strict, opt) };
      sax.SAXParser = SAXParser;
      sax.SAXStream = SAXStream;
      sax.createStream = createStream;

      // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
      // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
      // since that's the earliest that a buffer overrun could occur.  This way, checks are
      // as rare as required, but as often as necessary to ensure never crossing this bound.
      // Furthermore, buffers are only tested at most once per write(), so passing a very
      // large string into write() might have undesirable effects, but this is manageable by
      // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
      // edge case, result in creating at most one complete copy of the string passed in.
      // Set to Infinity to have unlimited buffers.
      sax.MAX_BUFFER_LENGTH = 64 * 1024;

      var buffers = [
        'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
        'procInstName', 'procInstBody', 'entity', 'attribName',
        'attribValue', 'cdata', 'script'
      ];

      sax.EVENTS = [
        'text',
        'processinginstruction',
        'sgmldeclaration',
        'doctype',
        'comment',
        'opentagstart',
        'attribute',
        'opentag',
        'closetag',
        'opencdata',
        'cdata',
        'closecdata',
        'error',
        'end',
        'ready',
        'script',
        'opennamespace',
        'closenamespace'
      ];

      function SAXParser (strict, opt) {
        if (!(this instanceof SAXParser)) {
          return new SAXParser(strict, opt)
        }

        var parser = this;
        clearBuffers(parser);
        parser.q = parser.c = '';
        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser.opt = opt || {};
        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
        parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';
        parser.tags = [];
        parser.closed = parser.closedRoot = parser.sawRoot = false;
        parser.tag = parser.error = null;
        parser.strict = !!strict;
        parser.noscript = !!(strict || parser.opt.noscript);
        parser.state = S.BEGIN;
        parser.strictEntities = parser.opt.strictEntities;
        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser.attribList = [];

        // namespaces form a prototype chain.
        // it always points at the current tag,
        // which protos to its parent tag.
        if (parser.opt.xmlns) {
          parser.ns = Object.create(rootNS);
        }

        // mostly just for error reporting
        parser.trackPosition = parser.opt.position !== false;
        if (parser.trackPosition) {
          parser.position = parser.line = parser.column = 0;
        }
        emit(parser, 'onready');
      }

      if (!Object.create) {
        Object.create = function (o) {
          function F () {}
          F.prototype = o;
          var newf = new F();
          return newf
        };
      }

      if (!Object.keys) {
        Object.keys = function (o) {
          var a = [];
          for (var i in o) if (o.hasOwnProperty(i)) a.push(i);
          return a
        };
      }

      function checkBufferLength (parser) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for (var i = 0, l = buffers.length; i < l; i++) {
          var len = parser[buffers[i]].length;
          if (len > maxAllowed) {
            // Text/cdata nodes can get big, and since they're buffered,
            // we can get here under normal conditions.
            // Avoid issues by emitting the text node now,
            // so at least it won't get any bigger.
            switch (buffers[i]) {
              case 'textNode':
                closeText(parser);
                break

              case 'cdata':
                emitNode(parser, 'oncdata', parser.cdata);
                parser.cdata = '';
                break

              case 'script':
                emitNode(parser, 'onscript', parser.script);
                parser.script = '';
                break

              default:
                error(parser, 'Max buffer length exceeded: ' + buffers[i]);
            }
          }
          maxActual = Math.max(maxActual, len);
        }
        // schedule the next check for the earliest possible buffer overrun.
        var m = sax.MAX_BUFFER_LENGTH - maxActual;
        parser.bufferCheckPosition = m + parser.position;
      }

      function clearBuffers (parser) {
        for (var i = 0, l = buffers.length; i < l; i++) {
          parser[buffers[i]] = '';
        }
      }

      function flushBuffers (parser) {
        closeText(parser);
        if (parser.cdata !== '') {
          emitNode(parser, 'oncdata', parser.cdata);
          parser.cdata = '';
        }
        if (parser.script !== '') {
          emitNode(parser, 'onscript', parser.script);
          parser.script = '';
        }
      }

      SAXParser.prototype = {
        end: function () { end(this); },
        write: write,
        resume: function () { this.error = null; return this },
        close: function () { return this.write(null) },
        flush: function () { flushBuffers(this); }
      };

      var Stream;
      try {
        Stream = __webpack_require__(56).Stream;
      } catch (ex) {
        Stream = function () {};
      }

      var streamWraps = sax.EVENTS.filter(function (ev) {
        return ev !== 'error' && ev !== 'end'
      });

      function createStream (strict, opt) {
        return new SAXStream(strict, opt)
      }

      function SAXStream (strict, opt) {
        if (!(this instanceof SAXStream)) {
          return new SAXStream(strict, opt)
        }

        Stream.apply(this);

        this._parser = new SAXParser(strict, opt);
        this.writable = true;
        this.readable = true;

        var me = this;

        this._parser.onend = function () {
          me.emit('end');
        };

        this._parser.onerror = function (er) {
          me.emit('error', er);

          // if didn't throw, then means error was handled.
          // go ahead and clear error, so we can write again.
          me._parser.error = null;
        };

        this._decoder = null;

        streamWraps.forEach(function (ev) {
          Object.defineProperty(me, 'on' + ev, {
            get: function () {
              return me._parser['on' + ev]
            },
            set: function (h) {
              if (!h) {
                me.removeAllListeners(ev);
                me._parser['on' + ev] = h;
                return h
              }
              me.on(ev, h);
            },
            enumerable: true,
            configurable: false
          });
        });
      }

      SAXStream.prototype = Object.create(Stream.prototype, {
        constructor: {
          value: SAXStream
        }
      });

      SAXStream.prototype.write = function (data) {
        if (typeof Buffer === 'function' &&
          typeof Buffer.isBuffer === 'function' &&
          Buffer.isBuffer(data)) {
          if (!this._decoder) {
            var SD = __webpack_require__(30).StringDecoder;
            this._decoder = new SD('utf8');
          }
          data = this._decoder.write(data);
        }

        this._parser.write(data.toString());
        this.emit('data', data);
        return true
      };

      SAXStream.prototype.end = function (chunk) {
        if (chunk && chunk.length) {
          this.write(chunk);
        }
        this._parser.end();
        return true
      };

      SAXStream.prototype.on = function (ev, handler) {
        var me = this;
        if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
          me._parser['on' + ev] = function () {
            var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
            args.splice(0, 0, ev);
            me.emit.apply(me, args);
          };
        }

        return Stream.prototype.on.call(me, ev, handler)
      };

      // this really needs to be replaced with character classes.
      // XML allows all manner of ridiculous numbers and digits.
      var CDATA = '[CDATA[';
      var DOCTYPE = 'DOCTYPE';
      var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';
      var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';
      var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };

      // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
      // This implementation works on strings, a single character at a time
      // as such, it cannot ever support astral-plane characters (10000-EFFFF)
      // without a significant breaking change to either this  parser, or the
      // JavaScript language.  Implementation of an emoji-capable xml parser
      // is left as an exercise for the reader.
      var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;

      var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

      var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;

      function isWhitespace (c) {
        return c === ' ' || c === '\n' || c === '\r' || c === '\t'
      }

      function isQuote (c) {
        return c === '"' || c === '\''
      }

      function isAttribEnd (c) {
        return c === '>' || isWhitespace(c)
      }

      function isMatch (regex, c) {
        return regex.test(c)
      }

      function notMatch (regex, c) {
        return !isMatch(regex, c)
      }

      var S = 0;
      sax.STATE = {
        BEGIN: S++, // leading byte order mark or whitespace
        BEGIN_WHITESPACE: S++, // leading whitespace
        TEXT: S++, // general stuff
        TEXT_ENTITY: S++, // &amp and such.
        OPEN_WAKA: S++, // <
        SGML_DECL: S++, // <!BLARG
        SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
        DOCTYPE: S++, // <!DOCTYPE
        DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
        DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
        DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
        COMMENT_STARTING: S++, // <!-
        COMMENT: S++, // <!--
        COMMENT_ENDING: S++, // <!-- blah -
        COMMENT_ENDED: S++, // <!-- blah --
        CDATA: S++, // <![CDATA[ something
        CDATA_ENDING: S++, // ]
        CDATA_ENDING_2: S++, // ]]
        PROC_INST: S++, // <?hi
        PROC_INST_BODY: S++, // <?hi there
        PROC_INST_ENDING: S++, // <?hi "there" ?
        OPEN_TAG: S++, // <strong
        OPEN_TAG_SLASH: S++, // <strong /
        ATTRIB: S++, // <a
        ATTRIB_NAME: S++, // <a foo
        ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
        ATTRIB_VALUE: S++, // <a foo=
        ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
        ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
        ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
        ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
        ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
        CLOSE_TAG: S++, // </a
        CLOSE_TAG_SAW_WHITE: S++, // </a   >
        SCRIPT: S++, // <script> ...
        SCRIPT_ENDING: S++ // <script> ... <
      };

      sax.XML_ENTITIES = {
        'amp': '&',
        'gt': '>',
        'lt': '<',
        'quot': '"',
        'apos': "'"
      };

      sax.ENTITIES = {
        'amp': '&',
        'gt': '>',
        'lt': '<',
        'quot': '"',
        'apos': "'",
        'AElig': 198,
        'Aacute': 193,
        'Acirc': 194,
        'Agrave': 192,
        'Aring': 197,
        'Atilde': 195,
        'Auml': 196,
        'Ccedil': 199,
        'ETH': 208,
        'Eacute': 201,
        'Ecirc': 202,
        'Egrave': 200,
        'Euml': 203,
        'Iacute': 205,
        'Icirc': 206,
        'Igrave': 204,
        'Iuml': 207,
        'Ntilde': 209,
        'Oacute': 211,
        'Ocirc': 212,
        'Ograve': 210,
        'Oslash': 216,
        'Otilde': 213,
        'Ouml': 214,
        'THORN': 222,
        'Uacute': 218,
        'Ucirc': 219,
        'Ugrave': 217,
        'Uuml': 220,
        'Yacute': 221,
        'aacute': 225,
        'acirc': 226,
        'aelig': 230,
        'agrave': 224,
        'aring': 229,
        'atilde': 227,
        'auml': 228,
        'ccedil': 231,
        'eacute': 233,
        'ecirc': 234,
        'egrave': 232,
        'eth': 240,
        'euml': 235,
        'iacute': 237,
        'icirc': 238,
        'igrave': 236,
        'iuml': 239,
        'ntilde': 241,
        'oacute': 243,
        'ocirc': 244,
        'ograve': 242,
        'oslash': 248,
        'otilde': 245,
        'ouml': 246,
        'szlig': 223,
        'thorn': 254,
        'uacute': 250,
        'ucirc': 251,
        'ugrave': 249,
        'uuml': 252,
        'yacute': 253,
        'yuml': 255,
        'copy': 169,
        'reg': 174,
        'nbsp': 160,
        'iexcl': 161,
        'cent': 162,
        'pound': 163,
        'curren': 164,
        'yen': 165,
        'brvbar': 166,
        'sect': 167,
        'uml': 168,
        'ordf': 170,
        'laquo': 171,
        'not': 172,
        'shy': 173,
        'macr': 175,
        'deg': 176,
        'plusmn': 177,
        'sup1': 185,
        'sup2': 178,
        'sup3': 179,
        'acute': 180,
        'micro': 181,
        'para': 182,
        'middot': 183,
        'cedil': 184,
        'ordm': 186,
        'raquo': 187,
        'frac14': 188,
        'frac12': 189,
        'frac34': 190,
        'iquest': 191,
        'times': 215,
        'divide': 247,
        'OElig': 338,
        'oelig': 339,
        'Scaron': 352,
        'scaron': 353,
        'Yuml': 376,
        'fnof': 402,
        'circ': 710,
        'tilde': 732,
        'Alpha': 913,
        'Beta': 914,
        'Gamma': 915,
        'Delta': 916,
        'Epsilon': 917,
        'Zeta': 918,
        'Eta': 919,
        'Theta': 920,
        'Iota': 921,
        'Kappa': 922,
        'Lambda': 923,
        'Mu': 924,
        'Nu': 925,
        'Xi': 926,
        'Omicron': 927,
        'Pi': 928,
        'Rho': 929,
        'Sigma': 931,
        'Tau': 932,
        'Upsilon': 933,
        'Phi': 934,
        'Chi': 935,
        'Psi': 936,
        'Omega': 937,
        'alpha': 945,
        'beta': 946,
        'gamma': 947,
        'delta': 948,
        'epsilon': 949,
        'zeta': 950,
        'eta': 951,
        'theta': 952,
        'iota': 953,
        'kappa': 954,
        'lambda': 955,
        'mu': 956,
        'nu': 957,
        'xi': 958,
        'omicron': 959,
        'pi': 960,
        'rho': 961,
        'sigmaf': 962,
        'sigma': 963,
        'tau': 964,
        'upsilon': 965,
        'phi': 966,
        'chi': 967,
        'psi': 968,
        'omega': 969,
        'thetasym': 977,
        'upsih': 978,
        'piv': 982,
        'ensp': 8194,
        'emsp': 8195,
        'thinsp': 8201,
        'zwnj': 8204,
        'zwj': 8205,
        'lrm': 8206,
        'rlm': 8207,
        'ndash': 8211,
        'mdash': 8212,
        'lsquo': 8216,
        'rsquo': 8217,
        'sbquo': 8218,
        'ldquo': 8220,
        'rdquo': 8221,
        'bdquo': 8222,
        'dagger': 8224,
        'Dagger': 8225,
        'bull': 8226,
        'hellip': 8230,
        'permil': 8240,
        'prime': 8242,
        'Prime': 8243,
        'lsaquo': 8249,
        'rsaquo': 8250,
        'oline': 8254,
        'frasl': 8260,
        'euro': 8364,
        'image': 8465,
        'weierp': 8472,
        'real': 8476,
        'trade': 8482,
        'alefsym': 8501,
        'larr': 8592,
        'uarr': 8593,
        'rarr': 8594,
        'darr': 8595,
        'harr': 8596,
        'crarr': 8629,
        'lArr': 8656,
        'uArr': 8657,
        'rArr': 8658,
        'dArr': 8659,
        'hArr': 8660,
        'forall': 8704,
        'part': 8706,
        'exist': 8707,
        'empty': 8709,
        'nabla': 8711,
        'isin': 8712,
        'notin': 8713,
        'ni': 8715,
        'prod': 8719,
        'sum': 8721,
        'minus': 8722,
        'lowast': 8727,
        'radic': 8730,
        'prop': 8733,
        'infin': 8734,
        'ang': 8736,
        'and': 8743,
        'or': 8744,
        'cap': 8745,
        'cup': 8746,
        'int': 8747,
        'there4': 8756,
        'sim': 8764,
        'cong': 8773,
        'asymp': 8776,
        'ne': 8800,
        'equiv': 8801,
        'le': 8804,
        'ge': 8805,
        'sub': 8834,
        'sup': 8835,
        'nsub': 8836,
        'sube': 8838,
        'supe': 8839,
        'oplus': 8853,
        'otimes': 8855,
        'perp': 8869,
        'sdot': 8901,
        'lceil': 8968,
        'rceil': 8969,
        'lfloor': 8970,
        'rfloor': 8971,
        'lang': 9001,
        'rang': 9002,
        'loz': 9674,
        'spades': 9824,
        'clubs': 9827,
        'hearts': 9829,
        'diams': 9830
      };

      Object.keys(sax.ENTITIES).forEach(function (key) {
        var e = sax.ENTITIES[key];
        var s = typeof e === 'number' ? String.fromCharCode(e) : e;
        sax.ENTITIES[key] = s;
      });

      for (var s in sax.STATE) {
        sax.STATE[sax.STATE[s]] = s;
      }

      // shorthand
      S = sax.STATE;

      function emit (parser, event, data) {
        parser[event] && parser[event](data);
      }

      function emitNode (parser, nodeType, data) {
        if (parser.textNode) closeText(parser);
        emit(parser, nodeType, data);
      }

      function closeText (parser) {
        parser.textNode = textopts(parser.opt, parser.textNode);
        if (parser.textNode) emit(parser, 'ontext', parser.textNode);
        parser.textNode = '';
      }

      function textopts (opt, text) {
        if (opt.trim) text = text.trim();
        if (opt.normalize) text = text.replace(/\s+/g, ' ');
        return text
      }

      function error (parser, er) {
        closeText(parser);
        if (parser.trackPosition) {
          er += '\nLine: ' + parser.line +
            '\nColumn: ' + parser.column +
            '\nChar: ' + parser.c;
        }
        er = new Error(er);
        parser.error = er;
        emit(parser, 'onerror', er);
        return parser
      }

      function end (parser) {
        if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');
        if ((parser.state !== S.BEGIN) &&
          (parser.state !== S.BEGIN_WHITESPACE) &&
          (parser.state !== S.TEXT)) {
          error(parser, 'Unexpected end');
        }
        closeText(parser);
        parser.c = '';
        parser.closed = true;
        emit(parser, 'onend');
        SAXParser.call(parser, parser.strict, parser.opt);
        return parser
      }

      function strictFail (parser, message) {
        if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
          throw new Error('bad call to strictFail')
        }
        if (parser.strict) {
          error(parser, message);
        }
      }

      function newTag (parser) {
        if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
        var parent = parser.tags[parser.tags.length - 1] || parser;
        var tag = parser.tag = { name: parser.tagName, attributes: {} };

        // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
        if (parser.opt.xmlns) {
          tag.ns = parent.ns;
        }
        parser.attribList.length = 0;
        emitNode(parser, 'onopentagstart', tag);
      }

      function qname (name, attribute) {
        var i = name.indexOf(':');
        var qualName = i < 0 ? [ '', name ] : name.split(':');
        var prefix = qualName[0];
        var local = qualName[1];

        // <x "xmlns"="http://foo">
        if (attribute && name === 'xmlns') {
          prefix = 'xmlns';
          local = '';
        }

        return { prefix: prefix, local: local }
      }

      function attrib (parser) {
        if (!parser.strict) {
          parser.attribName = parser.attribName[parser.looseCase]();
        }

        if (parser.attribList.indexOf(parser.attribName) !== -1 ||
          parser.tag.attributes.hasOwnProperty(parser.attribName)) {
          parser.attribName = parser.attribValue = '';
          return
        }

        if (parser.opt.xmlns) {
          var qn = qname(parser.attribName, true);
          var prefix = qn.prefix;
          var local = qn.local;

          if (prefix === 'xmlns') {
            // namespace binding attribute. push the binding into scope
            if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
              strictFail(parser,
                'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
                'Actual: ' + parser.attribValue);
            } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
              strictFail(parser,
                'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
                'Actual: ' + parser.attribValue);
            } else {
              var tag = parser.tag;
              var parent = parser.tags[parser.tags.length - 1] || parser;
              if (tag.ns === parent.ns) {
                tag.ns = Object.create(parent.ns);
              }
              tag.ns[local] = parser.attribValue;
            }
          }

          // defer onattribute events until all attributes have been seen
          // so any new bindings can take effect. preserve attribute order
          // so deferred events can be emitted in document order
          parser.attribList.push([parser.attribName, parser.attribValue]);
        } else {
          // in non-xmlns mode, we can emit the event right away
          parser.tag.attributes[parser.attribName] = parser.attribValue;
          emitNode(parser, 'onattribute', {
            name: parser.attribName,
            value: parser.attribValue
          });
        }

        parser.attribName = parser.attribValue = '';
      }

      function openTag (parser, selfClosing) {
        if (parser.opt.xmlns) {
          // emit namespace binding events
          var tag = parser.tag;

          // add namespace info to tag
          var qn = qname(parser.tagName);
          tag.prefix = qn.prefix;
          tag.local = qn.local;
          tag.uri = tag.ns[qn.prefix] || '';

          if (tag.prefix && !tag.uri) {
            strictFail(parser, 'Unbound namespace prefix: ' +
              JSON.stringify(parser.tagName));
            tag.uri = qn.prefix;
          }

          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (tag.ns && parent.ns !== tag.ns) {
            Object.keys(tag.ns).forEach(function (p) {
              emitNode(parser, 'onopennamespace', {
                prefix: p,
                uri: tag.ns[p]
              });
            });
          }

          // handle deferred onattribute events
          // Note: do not apply default ns to attributes:
          //   http://www.w3.org/TR/REC-xml-names/#defaulting
          for (var i = 0, l = parser.attribList.length; i < l; i++) {
            var nv = parser.attribList[i];
            var name = nv[0];
            var value = nv[1];
            var qualName = qname(name, true);
            var prefix = qualName.prefix;
            var local = qualName.local;
            var uri = prefix === '' ? '' : (tag.ns[prefix] || '');
            var a = {
              name: name,
              value: value,
              prefix: prefix,
              local: local,
              uri: uri
            };

            // if there's any attributes with an undefined namespace,
            // then fail on them now.
            if (prefix && prefix !== 'xmlns' && !uri) {
              strictFail(parser, 'Unbound namespace prefix: ' +
                JSON.stringify(prefix));
              a.uri = prefix;
            }
            parser.tag.attributes[name] = a;
            emitNode(parser, 'onattribute', a);
          }
          parser.attribList.length = 0;
        }

        parser.tag.isSelfClosing = !!selfClosing;

        // process the tag
        parser.sawRoot = true;
        parser.tags.push(parser.tag);
        emitNode(parser, 'onopentag', parser.tag);
        if (!selfClosing) {
          // special case for <script> in non-strict mode.
          if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
            parser.state = S.SCRIPT;
          } else {
            parser.state = S.TEXT;
          }
          parser.tag = null;
          parser.tagName = '';
        }
        parser.attribName = parser.attribValue = '';
        parser.attribList.length = 0;
      }

      function closeTag (parser) {
        if (!parser.tagName) {
          strictFail(parser, 'Weird empty close tag.');
          parser.textNode += '</>';
          parser.state = S.TEXT;
          return
        }

        if (parser.script) {
          if (parser.tagName !== 'script') {
            parser.script += '</' + parser.tagName + '>';
            parser.tagName = '';
            parser.state = S.SCRIPT;
            return
          }
          emitNode(parser, 'onscript', parser.script);
          parser.script = '';
        }

        // first make sure that the closing tag actually exists.
        // <a><b></c></b></a> will close everything, otherwise.
        var t = parser.tags.length;
        var tagName = parser.tagName;
        if (!parser.strict) {
          tagName = tagName[parser.looseCase]();
        }
        var closeTo = tagName;
        while (t--) {
          var close = parser.tags[t];
          if (close.name !== closeTo) {
            // fail the first time in strict mode
            strictFail(parser, 'Unexpected close tag');
          } else {
            break
          }
        }

        // didn't find it.  we already failed for strict, so just abort.
        if (t < 0) {
          strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);
          parser.textNode += '</' + parser.tagName + '>';
          parser.state = S.TEXT;
          return
        }
        parser.tagName = tagName;
        var s = parser.tags.length;
        while (s-- > t) {
          var tag = parser.tag = parser.tags.pop();
          parser.tagName = parser.tag.name;
          emitNode(parser, 'onclosetag', parser.tagName);

          var x = {};
          for (var i in tag.ns) {
            x[i] = tag.ns[i];
          }

          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (parser.opt.xmlns && tag.ns !== parent.ns) {
            // remove namespace bindings introduced by tag
            Object.keys(tag.ns).forEach(function (p) {
              var n = tag.ns[p];
              emitNode(parser, 'onclosenamespace', { prefix: p, uri: n });
            });
          }
        }
        if (t === 0) parser.closedRoot = true;
        parser.tagName = parser.attribValue = parser.attribName = '';
        parser.attribList.length = 0;
        parser.state = S.TEXT;
      }

      function parseEntity (parser) {
        var entity = parser.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = '';

        if (parser.ENTITIES[entity]) {
          return parser.ENTITIES[entity]
        }
        if (parser.ENTITIES[entityLC]) {
          return parser.ENTITIES[entityLC]
        }
        entity = entityLC;
        if (entity.charAt(0) === '#') {
          if (entity.charAt(1) === 'x') {
            entity = entity.slice(2);
            num = parseInt(entity, 16);
            numStr = num.toString(16);
          } else {
            entity = entity.slice(1);
            num = parseInt(entity, 10);
            numStr = num.toString(10);
          }
        }
        entity = entity.replace(/^0+/, '');
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
          strictFail(parser, 'Invalid character entity');
          return '&' + parser.entity + ';'
        }

        return String.fromCodePoint(num)
      }

      function beginWhiteSpace (parser, c) {
        if (c === '<') {
          parser.state = S.OPEN_WAKA;
          parser.startTagPosition = parser.position;
        } else if (!isWhitespace(c)) {
          // have to process this as a text node.
          // weird, but happens.
          strictFail(parser, 'Non-whitespace before first tag.');
          parser.textNode = c;
          parser.state = S.TEXT;
        }
      }

      function charAt (chunk, i) {
        var result = '';
        if (i < chunk.length) {
          result = chunk.charAt(i);
        }
        return result
      }

      function write (chunk) {
        var parser = this;
        if (this.error) {
          throw this.error
        }
        if (parser.closed) {
          return error(parser,
            'Cannot write after close. Assign an onready handler.')
        }
        if (chunk === null) {
          return end(parser)
        }
        if (typeof chunk === 'object') {
          chunk = chunk.toString();
        }
        var i = 0;
        var c = '';
        while (true) {
          c = charAt(chunk, i++);
          parser.c = c;

          if (!c) {
            break
          }

          if (parser.trackPosition) {
            parser.position++;
            if (c === '\n') {
              parser.line++;
              parser.column = 0;
            } else {
              parser.column++;
            }
          }

          switch (parser.state) {
            case S.BEGIN:
              parser.state = S.BEGIN_WHITESPACE;
              if (c === '\uFEFF') {
                continue
              }
              beginWhiteSpace(parser, c);
              continue

            case S.BEGIN_WHITESPACE:
              beginWhiteSpace(parser, c);
              continue

            case S.TEXT:
              if (parser.sawRoot && !parser.closedRoot) {
                var starti = i - 1;
                while (c && c !== '<' && c !== '&') {
                  c = charAt(chunk, i++);
                  if (c && parser.trackPosition) {
                    parser.position++;
                    if (c === '\n') {
                      parser.line++;
                      parser.column = 0;
                    } else {
                      parser.column++;
                    }
                  }
                }
                parser.textNode += chunk.substring(starti, i - 1);
              }
              if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                parser.state = S.OPEN_WAKA;
                parser.startTagPosition = parser.position;
              } else {
                if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                  strictFail(parser, 'Text data outside of root node.');
                }
                if (c === '&') {
                  parser.state = S.TEXT_ENTITY;
                } else {
                  parser.textNode += c;
                }
              }
              continue

            case S.SCRIPT:
              // only non-strict
              if (c === '<') {
                parser.state = S.SCRIPT_ENDING;
              } else {
                parser.script += c;
              }
              continue

            case S.SCRIPT_ENDING:
              if (c === '/') {
                parser.state = S.CLOSE_TAG;
              } else {
                parser.script += '<' + c;
                parser.state = S.SCRIPT;
              }
              continue

            case S.OPEN_WAKA:
              // either a /, ?, !, or text is coming next.
              if (c === '!') {
                parser.state = S.SGML_DECL;
                parser.sgmlDecl = '';
              } else if (isWhitespace(c)) ; else if (isMatch(nameStart, c)) {
                parser.state = S.OPEN_TAG;
                parser.tagName = c;
              } else if (c === '/') {
                parser.state = S.CLOSE_TAG;
                parser.tagName = '';
              } else if (c === '?') {
                parser.state = S.PROC_INST;
                parser.procInstName = parser.procInstBody = '';
              } else {
                strictFail(parser, 'Unencoded <');
                // if there was some whitespace, then add that in.
                if (parser.startTagPosition + 1 < parser.position) {
                  var pad = parser.position - parser.startTagPosition;
                  c = new Array(pad).join(' ') + c;
                }
                parser.textNode += '<' + c;
                parser.state = S.TEXT;
              }
              continue

            case S.SGML_DECL:
              if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                emitNode(parser, 'onopencdata');
                parser.state = S.CDATA;
                parser.sgmlDecl = '';
                parser.cdata = '';
              } else if (parser.sgmlDecl + c === '--') {
                parser.state = S.COMMENT;
                parser.comment = '';
                parser.sgmlDecl = '';
              } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                parser.state = S.DOCTYPE;
                if (parser.doctype || parser.sawRoot) {
                  strictFail(parser,
                    'Inappropriately located doctype declaration');
                }
                parser.doctype = '';
                parser.sgmlDecl = '';
              } else if (c === '>') {
                emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);
                parser.sgmlDecl = '';
                parser.state = S.TEXT;
              } else if (isQuote(c)) {
                parser.state = S.SGML_DECL_QUOTED;
                parser.sgmlDecl += c;
              } else {
                parser.sgmlDecl += c;
              }
              continue

            case S.SGML_DECL_QUOTED:
              if (c === parser.q) {
                parser.state = S.SGML_DECL;
                parser.q = '';
              }
              parser.sgmlDecl += c;
              continue

            case S.DOCTYPE:
              if (c === '>') {
                parser.state = S.TEXT;
                emitNode(parser, 'ondoctype', parser.doctype);
                parser.doctype = true; // just remember that we saw it.
              } else {
                parser.doctype += c;
                if (c === '[') {
                  parser.state = S.DOCTYPE_DTD;
                } else if (isQuote(c)) {
                  parser.state = S.DOCTYPE_QUOTED;
                  parser.q = c;
                }
              }
              continue

            case S.DOCTYPE_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.q = '';
                parser.state = S.DOCTYPE;
              }
              continue

            case S.DOCTYPE_DTD:
              parser.doctype += c;
              if (c === ']') {
                parser.state = S.DOCTYPE;
              } else if (isQuote(c)) {
                parser.state = S.DOCTYPE_DTD_QUOTED;
                parser.q = c;
              }
              continue

            case S.DOCTYPE_DTD_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.state = S.DOCTYPE_DTD;
                parser.q = '';
              }
              continue

            case S.COMMENT:
              if (c === '-') {
                parser.state = S.COMMENT_ENDING;
              } else {
                parser.comment += c;
              }
              continue

            case S.COMMENT_ENDING:
              if (c === '-') {
                parser.state = S.COMMENT_ENDED;
                parser.comment = textopts(parser.opt, parser.comment);
                if (parser.comment) {
                  emitNode(parser, 'oncomment', parser.comment);
                }
                parser.comment = '';
              } else {
                parser.comment += '-' + c;
                parser.state = S.COMMENT;
              }
              continue

            case S.COMMENT_ENDED:
              if (c !== '>') {
                strictFail(parser, 'Malformed comment');
                // allow <!-- blah -- bloo --> in non-strict mode,
                // which is a comment of " blah -- bloo "
                parser.comment += '--' + c;
                parser.state = S.COMMENT;
              } else {
                parser.state = S.TEXT;
              }
              continue

            case S.CDATA:
              if (c === ']') {
                parser.state = S.CDATA_ENDING;
              } else {
                parser.cdata += c;
              }
              continue

            case S.CDATA_ENDING:
              if (c === ']') {
                parser.state = S.CDATA_ENDING_2;
              } else {
                parser.cdata += ']' + c;
                parser.state = S.CDATA;
              }
              continue

            case S.CDATA_ENDING_2:
              if (c === '>') {
                if (parser.cdata) {
                  emitNode(parser, 'oncdata', parser.cdata);
                }
                emitNode(parser, 'onclosecdata');
                parser.cdata = '';
                parser.state = S.TEXT;
              } else if (c === ']') {
                parser.cdata += ']';
              } else {
                parser.cdata += ']]' + c;
                parser.state = S.CDATA;
              }
              continue

            case S.PROC_INST:
              if (c === '?') {
                parser.state = S.PROC_INST_ENDING;
              } else if (isWhitespace(c)) {
                parser.state = S.PROC_INST_BODY;
              } else {
                parser.procInstName += c;
              }
              continue

            case S.PROC_INST_BODY:
              if (!parser.procInstBody && isWhitespace(c)) {
                continue
              } else if (c === '?') {
                parser.state = S.PROC_INST_ENDING;
              } else {
                parser.procInstBody += c;
              }
              continue

            case S.PROC_INST_ENDING:
              if (c === '>') {
                emitNode(parser, 'onprocessinginstruction', {
                  name: parser.procInstName,
                  body: parser.procInstBody
                });
                parser.procInstName = parser.procInstBody = '';
                parser.state = S.TEXT;
              } else {
                parser.procInstBody += '?' + c;
                parser.state = S.PROC_INST_BODY;
              }
              continue

            case S.OPEN_TAG:
              if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else {
                newTag(parser);
                if (c === '>') {
                  openTag(parser);
                } else if (c === '/') {
                  parser.state = S.OPEN_TAG_SLASH;
                } else {
                  if (!isWhitespace(c)) {
                    strictFail(parser, 'Invalid character in tag name');
                  }
                  parser.state = S.ATTRIB;
                }
              }
              continue

            case S.OPEN_TAG_SLASH:
              if (c === '>') {
                openTag(parser, true);
                closeTag(parser);
              } else {
                strictFail(parser, 'Forward-slash in opening tag not followed by >');
                parser.state = S.ATTRIB;
              }
              continue

            case S.ATTRIB:
              // haven't read the attribute name yet.
              if (isWhitespace(c)) {
                continue
              } else if (c === '>') {
                openTag(parser);
              } else if (c === '/') {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                parser.attribName = c;
                parser.attribValue = '';
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, 'Invalid attribute name');
              }
              continue

            case S.ATTRIB_NAME:
              if (c === '=') {
                parser.state = S.ATTRIB_VALUE;
              } else if (c === '>') {
                strictFail(parser, 'Attribute without value');
                parser.attribValue = parser.attribName;
                attrib(parser);
                openTag(parser);
              } else if (isWhitespace(c)) {
                parser.state = S.ATTRIB_NAME_SAW_WHITE;
              } else if (isMatch(nameBody, c)) {
                parser.attribName += c;
              } else {
                strictFail(parser, 'Invalid attribute name');
              }
              continue

            case S.ATTRIB_NAME_SAW_WHITE:
              if (c === '=') {
                parser.state = S.ATTRIB_VALUE;
              } else if (isWhitespace(c)) {
                continue
              } else {
                strictFail(parser, 'Attribute without value');
                parser.tag.attributes[parser.attribName] = '';
                parser.attribValue = '';
                emitNode(parser, 'onattribute', {
                  name: parser.attribName,
                  value: ''
                });
                parser.attribName = '';
                if (c === '>') {
                  openTag(parser);
                } else if (isMatch(nameStart, c)) {
                  parser.attribName = c;
                  parser.state = S.ATTRIB_NAME;
                } else {
                  strictFail(parser, 'Invalid attribute name');
                  parser.state = S.ATTRIB;
                }
              }
              continue

            case S.ATTRIB_VALUE:
              if (isWhitespace(c)) {
                continue
              } else if (isQuote(c)) {
                parser.q = c;
                parser.state = S.ATTRIB_VALUE_QUOTED;
              } else {
                strictFail(parser, 'Unquoted attribute value');
                parser.state = S.ATTRIB_VALUE_UNQUOTED;
                parser.attribValue = c;
              }
              continue

            case S.ATTRIB_VALUE_QUOTED:
              if (c !== parser.q) {
                if (c === '&') {
                  parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                } else {
                  parser.attribValue += c;
                }
                continue
              }
              attrib(parser);
              parser.q = '';
              parser.state = S.ATTRIB_VALUE_CLOSED;
              continue

            case S.ATTRIB_VALUE_CLOSED:
              if (isWhitespace(c)) {
                parser.state = S.ATTRIB;
              } else if (c === '>') {
                openTag(parser);
              } else if (c === '/') {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                strictFail(parser, 'No whitespace between attributes');
                parser.attribName = c;
                parser.attribValue = '';
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, 'Invalid attribute name');
              }
              continue

            case S.ATTRIB_VALUE_UNQUOTED:
              if (!isAttribEnd(c)) {
                if (c === '&') {
                  parser.state = S.ATTRIB_VALUE_ENTITY_U;
                } else {
                  parser.attribValue += c;
                }
                continue
              }
              attrib(parser);
              if (c === '>') {
                openTag(parser);
              } else {
                parser.state = S.ATTRIB;
              }
              continue

            case S.CLOSE_TAG:
              if (!parser.tagName) {
                if (isWhitespace(c)) {
                  continue
                } else if (notMatch(nameStart, c)) {
                  if (parser.script) {
                    parser.script += '</' + c;
                    parser.state = S.SCRIPT;
                  } else {
                    strictFail(parser, 'Invalid tagname in closing tag.');
                  }
                } else {
                  parser.tagName = c;
                }
              } else if (c === '>') {
                closeTag(parser);
              } else if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else if (parser.script) {
                parser.script += '</' + parser.tagName;
                parser.tagName = '';
                parser.state = S.SCRIPT;
              } else {
                if (!isWhitespace(c)) {
                  strictFail(parser, 'Invalid tagname in closing tag');
                }
                parser.state = S.CLOSE_TAG_SAW_WHITE;
              }
              continue

            case S.CLOSE_TAG_SAW_WHITE:
              if (isWhitespace(c)) {
                continue
              }
              if (c === '>') {
                closeTag(parser);
              } else {
                strictFail(parser, 'Invalid characters in closing tag');
              }
              continue

            case S.TEXT_ENTITY:
            case S.ATTRIB_VALUE_ENTITY_Q:
            case S.ATTRIB_VALUE_ENTITY_U:
              var returnState;
              var buffer;
              switch (parser.state) {
                case S.TEXT_ENTITY:
                  returnState = S.TEXT;
                  buffer = 'textNode';
                  break

                case S.ATTRIB_VALUE_ENTITY_Q:
                  returnState = S.ATTRIB_VALUE_QUOTED;
                  buffer = 'attribValue';
                  break

                case S.ATTRIB_VALUE_ENTITY_U:
                  returnState = S.ATTRIB_VALUE_UNQUOTED;
                  buffer = 'attribValue';
                  break
              }

              if (c === ';') {
                parser[buffer] += parseEntity(parser);
                parser.entity = '';
                parser.state = returnState;
              } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                parser.entity += c;
              } else {
                strictFail(parser, 'Invalid character in entity name');
                parser[buffer] += '&' + parser.entity + c;
                parser.entity = '';
                parser.state = returnState;
              }

              continue

            default:
              throw new Error(parser, 'Unknown state: ' + parser.state)
          }
        } // while

        if (parser.position >= parser.bufferCheckPosition) {
          checkBufferLength(parser);
        }
        return parser
      }

      /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
      /* istanbul ignore next */
      if (!String.fromCodePoint) {
        (function () {
          var stringFromCharCode = String.fromCharCode;
          var floor = Math.floor;
          var fromCodePoint = function () {
            var MAX_SIZE = 0x4000;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) {
              return ''
            }
            var result = '';
            while (++index < length) {
              var codePoint = Number(arguments[index]);
              if (
                !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                codePoint < 0 || // not a valid Unicode code point
                codePoint > 0x10FFFF || // not a valid Unicode code point
                floor(codePoint) !== codePoint // not an integer
              ) {
                throw RangeError('Invalid code point: ' + codePoint)
              }
              if (codePoint <= 0xFFFF) { // BMP code point
                codeUnits.push(codePoint);
              } else { // Astral code point; split in surrogate halves
                // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                codePoint -= 0x10000;
                highSurrogate = (codePoint >> 10) + 0xD800;
                lowSurrogate = (codePoint % 0x400) + 0xDC00;
                codeUnits.push(highSurrogate, lowSurrogate);
              }
              if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                result += stringFromCharCode.apply(null, codeUnits);
                codeUnits.length = 0;
              }
            }
            return result
          };
          /* istanbul ignore next */
          if (Object.defineProperty) {
            Object.defineProperty(String, 'fromCodePoint', {
              value: fromCodePoint,
              configurable: true,
              writable: true
            });
          } else {
            String.fromCodePoint = fromCodePoint;
          }
        }());
      }
    })( exports);

    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).Buffer));

    /***/ }),
    /* 144 */
    /***/ (function(module, exports, __webpack_require__) {


    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens (b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4);

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength (b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength (b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray (b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];

      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

      var curByte = 0;

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen;

      for (var i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = (tmp >> 16) & 0xFF;
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[curByte++] = (tmp >> 8) & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(
          uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
        ));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        );
      }

      return parts.join('')
    }


    /***/ }),
    /* 145 */
    /***/ (function(module, exports) {

    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    };

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = (nBytes * 8) - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };


    /***/ }),
    /* 146 */
    /***/ (function(module, exports) {

    /* (ignored) */

    /***/ }),
    /* 147 */
    /***/ (function(module, exports, __webpack_require__) {


    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Buffer = __webpack_require__(16).Buffer;
    var util = __webpack_require__(148);

    function copyBuffer(src, target, offset) {
      src.copy(target, offset);
    }

    module.exports = function () {
      function BufferList() {
        _classCallCheck(this, BufferList);

        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      BufferList.prototype.push = function push(v) {
        var entry = { data: v, next: null };
        if (this.length > 0) this.tail.next = entry;else this.head = entry;
        this.tail = entry;
        ++this.length;
      };

      BufferList.prototype.unshift = function unshift(v) {
        var entry = { data: v, next: this.head };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };

      BufferList.prototype.shift = function shift() {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
        --this.length;
        return ret;
      };

      BufferList.prototype.clear = function clear() {
        this.head = this.tail = null;
        this.length = 0;
      };

      BufferList.prototype.join = function join(s) {
        if (this.length === 0) return '';
        var p = this.head;
        var ret = '' + p.data;
        while (p = p.next) {
          ret += s + p.data;
        }return ret;
      };

      BufferList.prototype.concat = function concat(n) {
        if (this.length === 0) return Buffer.alloc(0);
        if (this.length === 1) return this.head.data;
        var ret = Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      };

      return BufferList;
    }();

    if (util && util.inspect && util.inspect.custom) {
      module.exports.prototype[util.inspect.custom] = function () {
        var obj = util.inspect({ length: this.length });
        return this.constructor.name + ' ' + obj;
      };
    }

    /***/ }),
    /* 148 */
    /***/ (function(module, exports) {

    /* (ignored) */

    /***/ }),
    /* 149 */
    /***/ (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined$1) {

        if (global.setImmediate) {
            return;
        }

        var nextHandle = 1; // Spec says greater than zero
        var tasksByHandle = {};
        var currentlyRunningATask = false;
        var doc = global.document;
        var registerImmediate;

        function setImmediate(callback) {
          // Callback can either be a function or a string
          if (typeof callback !== "function") {
            callback = new Function("" + callback);
          }
          // Copy function arguments
          var args = new Array(arguments.length - 1);
          for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i + 1];
          }
          // Store and register the task
          var task = { callback: callback, args: args };
          tasksByHandle[nextHandle] = task;
          registerImmediate(nextHandle);
          return nextHandle++;
        }

        function clearImmediate(handle) {
            delete tasksByHandle[handle];
        }

        function run(task) {
            var callback = task.callback;
            var args = task.args;
            switch (args.length) {
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined$1, args);
                break;
            }
        }

        function runIfPresent(handle) {
            // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
            // So if we're currently running a task, we'll need to delay this invocation.
            if (currentlyRunningATask) {
                // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                // "too much recursion" error.
                setTimeout(runIfPresent, 0, handle);
            } else {
                var task = tasksByHandle[handle];
                if (task) {
                    currentlyRunningATask = true;
                    try {
                        run(task);
                    } finally {
                        clearImmediate(handle);
                        currentlyRunningATask = false;
                    }
                }
            }
        }

        function installNextTickImplementation() {
            registerImmediate = function(handle) {
                process.nextTick(function () { runIfPresent(handle); });
            };
        }

        function canUsePostMessage() {
            // The test against `importScripts` prevents this implementation from being installed inside a web worker,
            // where `global.postMessage` means something completely different and can't be used for this purpose.
            if (global.postMessage && !global.importScripts) {
                var postMessageIsAsynchronous = true;
                var oldOnMessage = global.onmessage;
                global.onmessage = function() {
                    postMessageIsAsynchronous = false;
                };
                global.postMessage("", "*");
                global.onmessage = oldOnMessage;
                return postMessageIsAsynchronous;
            }
        }

        function installPostMessageImplementation() {
            // Installs an event handler on `global` for the `message` event: see
            // * https://developer.mozilla.org/en/DOM/window.postMessage
            // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

            var messagePrefix = "setImmediate$" + Math.random() + "$";
            var onGlobalMessage = function(event) {
                if (event.source === global &&
                    typeof event.data === "string" &&
                    event.data.indexOf(messagePrefix) === 0) {
                    runIfPresent(+event.data.slice(messagePrefix.length));
                }
            };

            if (global.addEventListener) {
                global.addEventListener("message", onGlobalMessage, false);
            } else {
                global.attachEvent("onmessage", onGlobalMessage);
            }

            registerImmediate = function(handle) {
                global.postMessage(messagePrefix + handle, "*");
            };
        }

        function installMessageChannelImplementation() {
            var channel = new MessageChannel();
            channel.port1.onmessage = function(event) {
                var handle = event.data;
                runIfPresent(handle);
            };

            registerImmediate = function(handle) {
                channel.port2.postMessage(handle);
            };
        }

        function installReadyStateChangeImplementation() {
            var html = doc.documentElement;
            registerImmediate = function(handle) {
                // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                var script = doc.createElement("script");
                script.onreadystatechange = function () {
                    runIfPresent(handle);
                    script.onreadystatechange = null;
                    html.removeChild(script);
                    script = null;
                };
                html.appendChild(script);
            };
        }

        function installSetTimeoutImplementation() {
            registerImmediate = function(handle) {
                setTimeout(runIfPresent, 0, handle);
            };
        }

        // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
        var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
        attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

        // Don't get fooled by e.g. browserify environments.
        if ({}.toString.call(global.process) === "[object process]") {
            // For Node.js before 0.9
            installNextTickImplementation();

        } else if (canUsePostMessage()) {
            // For non-IE10 modern browsers
            installPostMessageImplementation();

        } else if (global.MessageChannel) {
            // For web workers, where supported
            installMessageChannelImplementation();

        } else if (doc && "onreadystatechange" in doc.createElement("script")) {
            // For IE 6–8
            installReadyStateChangeImplementation();

        } else {
            // For older browsers
            installSetTimeoutImplementation();
        }

        attachTo.setImmediate = setImmediate;
        attachTo.clearImmediate = clearImmediate;
    }(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), __webpack_require__(13)));

    /***/ }),
    /* 150 */
    /***/ (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */(function(global) {
    /**
     * Module exports.
     */

    module.exports = deprecate;

    /**
     * Mark that a method should not be used.
     * Returns a modified function which warns once by default.
     *
     * If `localStorage.noDeprecation = true` is set, then it is a no-op.
     *
     * If `localStorage.throwDeprecation = true` is set, then deprecated functions
     * will throw an Error when invoked.
     *
     * If `localStorage.traceDeprecation = true` is set, then deprecated functions
     * will invoke `console.trace()` instead of `console.error()`.
     *
     * @param {Function} fn - the function to deprecate
     * @param {String} msg - the string to print to the console when `fn` is invoked
     * @returns {Function} a new "deprecated" version of `fn`
     * @api public
     */

    function deprecate (fn, msg) {
      if (config('noDeprecation')) {
        return fn;
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config('throwDeprecation')) {
            throw new Error(msg);
          } else if (config('traceDeprecation')) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    /**
     * Checks `localStorage` for boolean values for the given `name`.
     *
     * @param {String} name
     * @returns {Boolean}
     * @api private
     */

    function config (name) {
      // accessing global.localStorage can trigger a DOMException in sandboxed iframes
      try {
        if (!global.localStorage) return false;
      } catch (_) {
        return false;
      }
      var val = global.localStorage[name];
      if (null == val) return false;
      return String(val).toLowerCase() === 'true';
    }

    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)));

    /***/ }),
    /* 151 */
    /***/ (function(module, exports, __webpack_require__) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.



    module.exports = PassThrough;

    var Transform = __webpack_require__(61);

    /*<replacement>*/
    var util = __webpack_require__(14);
    util.inherits = __webpack_require__(7);
    /*</replacement>*/

    util.inherits(PassThrough, Transform);

    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);

      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    /***/ }),
    /* 152 */
    /***/ (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(29);


    /***/ }),
    /* 153 */
    /***/ (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(5);


    /***/ }),
    /* 154 */
    /***/ (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(28).Transform;


    /***/ }),
    /* 155 */
    /***/ (function(module, exports, __webpack_require__) {

    module.exports = __webpack_require__(28).PassThrough;


    /***/ }),
    /* 156 */
    /***/ (function(module, exports, __webpack_require__) {

    var helper = __webpack_require__(31);
    var xml2js = __webpack_require__(54);

    function validateOptions (userOptions) {
      var options = helper.copyOptions(userOptions);
      helper.ensureSpacesExists(options);
      return options;
    }

    module.exports = function(xml, userOptions) {
      var options, js, json, parentKey;
      options = validateOptions(userOptions);
      js = xml2js(xml, options);
      parentKey = 'compact' in options && options.compact ? '_parent' : 'parent';
      // parentKey = ptions.compact ? '_parent' : 'parent'; // consider this
      if ('addParent' in options && options.addParent) {
        json = JSON.stringify(js, function (k, v) { return k === parentKey? '_' : v; }, options.spaces);
      } else {
        json = JSON.stringify(js, null, options.spaces);
      }
      return json.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
    };


    /***/ }),
    /* 157 */
    /***/ (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */(function(Buffer) {var js2xml = __webpack_require__(62);

    module.exports = function (json, options) {
      if (json instanceof Buffer) {
        json = json.toString();
      }
      var js = null;
      if (typeof (json) === 'string') {
        try {
          js = JSON.parse(json);
        } catch (e) {
          throw new Error('The JSON structure is invalid');
        }
      } else {
        js = json;
      }
      return js2xml(js, options);
    };

    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6).Buffer));

    /***/ }),
    /* 158 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WORKAROUND3 = "";


    /***/ }),
    /* 159 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class InitializableXmlComponent extends xml_components_1.XmlComponent {
        constructor(rootKey, initComponent) {
            super(rootKey);
            if (initComponent) {
                this.root = initComponent.root;
            }
        }
    }
    exports.InitializableXmlComponent = InitializableXmlComponent;


    /***/ }),
    /* 160 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class BorderAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                val: "w:val",
                color: "w:color",
                space: "w:space",
                sz: "w:sz",
            };
        }
    }
    exports.BorderAttributes = BorderAttributes;


    /***/ }),
    /* 161 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const space_type_1 = __webpack_require__(8);
    const xml_components_1 = __webpack_require__(0);
    class TextAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { space: "xml:space" };
        }
    }
    class Page extends xml_components_1.XmlComponent {
        constructor() {
            super("w:instrText");
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            this.root.push("PAGE");
        }
    }
    exports.Page = Page;
    class NumberOfPages extends xml_components_1.XmlComponent {
        constructor() {
            super("w:instrText");
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            this.root.push("NUMPAGES");
        }
    }
    exports.NumberOfPages = NumberOfPages;
    class NumberOfPagesSection extends xml_components_1.XmlComponent {
        constructor() {
            super("w:instrText");
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            this.root.push("SECTIONPAGES");
        }
    }
    exports.NumberOfPagesSection = NumberOfPagesSection;


    /***/ }),
    /* 162 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const run_1 = __webpack_require__(17);
    const text_1 = __webpack_require__(71);
    class TextRun extends run_1.Run {
        constructor(options) {
            if (typeof options === "string") {
                super({});
                this.root.push(new text_1.Text(options));
                return;
            }
            super(options);
        }
    }
    exports.TextRun = TextRun;


    /***/ }),
    /* 163 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const run_1 = __webpack_require__(17);
    const symbol_1 = __webpack_require__(164);
    class SymbolRun extends run_1.Run {
        constructor(options) {
            if (typeof options === "string") {
                super({});
                this.root.push(new symbol_1.Symbol(options));
                return;
            }
            super(options);
            this.root.push(new symbol_1.Symbol(options.char, options.symbolfont));
        }
    }
    exports.SymbolRun = SymbolRun;


    /***/ }),
    /* 164 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class SymbolAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                char: "w:char",
                symbolfont: "w:font",
            };
        }
    }
    class Symbol extends xml_components_1.XmlComponent {
        constructor(char = "", symbolfont = "Wingdings") {
            super("w:sym");
            this.root.push(new SymbolAttributes({ char: char, symbolfont: symbolfont }));
        }
    }
    exports.Symbol = Symbol;


    /***/ }),
    /* 165 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const drawing_1 = __webpack_require__(72);
    const run_1 = __webpack_require__(3);
    class PictureRun extends run_1.Run {
        constructor(imageData, drawingOptions) {
            super({});
            const drawing = new drawing_1.Drawing(imageData, drawingOptions);
            this.root.push(drawing);
        }
    }
    exports.PictureRun = PictureRun;


    /***/ }),
    /* 166 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const anchor_1 = __webpack_require__(167);
    const inline_1 = __webpack_require__(210);
    class Drawing extends xml_components_1.XmlComponent {
        constructor(imageData, drawingOptions = {}) {
            super("w:drawing");
            if (!drawingOptions.floating) {
                this.inline = new inline_1.Inline(imageData, imageData.dimensions);
                this.root.push(this.inline);
            }
            else {
                this.root.push(new anchor_1.Anchor(imageData, imageData.dimensions, drawingOptions));
            }
        }
        scale(factorX, factorY) {
            this.inline.scale(factorX, factorY);
        }
    }
    exports.Drawing = Drawing;


    /***/ }),
    /* 167 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(168));
    __export(__webpack_require__(81));


    /***/ }),
    /* 168 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const floating_1 = __webpack_require__(73);
    const graphic_1 = __webpack_require__(76);
    const text_wrap_1 = __webpack_require__(36);
    const doc_properties_1 = __webpack_require__(77);
    const effect_extent_1 = __webpack_require__(78);
    const extent_1 = __webpack_require__(79);
    const graphic_frame_properties_1 = __webpack_require__(80);
    const anchor_attributes_1 = __webpack_require__(81);
    class Anchor extends xml_components_1.XmlComponent {
        constructor(mediaData, dimensions, drawingOptions) {
            super("wp:anchor");
            const floating = Object.assign({ allowOverlap: true, behindDocument: false, lockAnchor: false, layoutInCell: true, verticalPosition: {}, horizontalPosition: {} }, drawingOptions.floating);
            this.root.push(new anchor_attributes_1.AnchorAttributes({
                distT: floating.margins ? floating.margins.top || 0 : 0,
                distB: floating.margins ? floating.margins.bottom || 0 : 0,
                distL: floating.margins ? floating.margins.left || 0 : 0,
                distR: floating.margins ? floating.margins.right || 0 : 0,
                simplePos: "0",
                allowOverlap: floating.allowOverlap === true ? "1" : "0",
                behindDoc: floating.behindDocument === true ? "1" : "0",
                locked: floating.lockAnchor === true ? "1" : "0",
                layoutInCell: floating.layoutInCell === true ? "1" : "0",
                relativeHeight: floating.zIndex ? floating.zIndex : dimensions.emus.y,
            }));
            this.root.push(new floating_1.SimplePos());
            this.root.push(new floating_1.HorizontalPosition(floating.horizontalPosition));
            this.root.push(new floating_1.VerticalPosition(floating.verticalPosition));
            this.root.push(new extent_1.Extent(dimensions.emus.x, dimensions.emus.y));
            this.root.push(new effect_extent_1.EffectExtent());
            if (drawingOptions.floating !== undefined && drawingOptions.floating.wrap !== undefined) {
                switch (drawingOptions.floating.wrap.type) {
                    case text_wrap_1.TextWrappingType.SQUARE:
                        this.root.push(new text_wrap_1.WrapSquare(drawingOptions.floating.wrap, drawingOptions.floating.margins));
                        break;
                    case text_wrap_1.TextWrappingType.TIGHT:
                        this.root.push(new text_wrap_1.WrapTight(drawingOptions.floating.margins));
                        break;
                    case text_wrap_1.TextWrappingType.TOP_AND_BOTTOM:
                        this.root.push(new text_wrap_1.WrapTopAndBottom(drawingOptions.floating.margins));
                        break;
                    case text_wrap_1.TextWrappingType.NONE:
                    default:
                        this.root.push(new text_wrap_1.WrapNone());
                }
            }
            else {
                this.root.push(new text_wrap_1.WrapNone());
            }
            this.root.push(new doc_properties_1.DocProperties());
            this.root.push(new graphic_frame_properties_1.GraphicFrameProperties());
            this.root.push(new graphic_1.Graphic(mediaData, dimensions.emus.x, dimensions.emus.y));
        }
    }
    exports.Anchor = Anchor;


    /***/ }),
    /* 169 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class SimplePosAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                x: "x",
                y: "y",
            };
        }
    }
    class SimplePos extends xml_components_1.XmlComponent {
        constructor() {
            super("wp:simplePos");
            this.root.push(new SimplePosAttributes({
                x: 0,
                y: 0,
            }));
        }
    }
    exports.SimplePos = SimplePos;


    /***/ }),
    /* 170 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const align_1 = __webpack_require__(74);
    const floating_position_1 = __webpack_require__(35);
    const position_offset_1 = __webpack_require__(75);
    class HorizontalPositionAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                relativeFrom: "relativeFrom",
            };
        }
    }
    class HorizontalPosition extends xml_components_1.XmlComponent {
        constructor(horizontalPosition) {
            super("wp:positionH");
            this.root.push(new HorizontalPositionAttributes({
                relativeFrom: horizontalPosition.relative || floating_position_1.HorizontalPositionRelativeFrom.PAGE,
            }));
            if (horizontalPosition.align) {
                this.root.push(new align_1.Align(horizontalPosition.align));
            }
            else if (horizontalPosition.offset !== undefined) {
                this.root.push(new position_offset_1.PositionOffset(horizontalPosition.offset));
            }
            else {
                throw new Error("There is no configuration provided for floating position (Align or offset)");
            }
        }
    }
    exports.HorizontalPosition = HorizontalPosition;


    /***/ }),
    /* 171 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const align_1 = __webpack_require__(74);
    const floating_position_1 = __webpack_require__(35);
    const position_offset_1 = __webpack_require__(75);
    class VerticalPositionAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                relativeFrom: "relativeFrom",
            };
        }
    }
    class VerticalPosition extends xml_components_1.XmlComponent {
        constructor(verticalPosition) {
            super("wp:positionV");
            this.root.push(new VerticalPositionAttributes({
                relativeFrom: verticalPosition.relative || floating_position_1.VerticalPositionRelativeFrom.PAGE,
            }));
            if (verticalPosition.align) {
                this.root.push(new align_1.Align(verticalPosition.align));
            }
            else if (verticalPosition.offset !== undefined) {
                this.root.push(new position_offset_1.PositionOffset(verticalPosition.offset));
            }
            else {
                throw new Error("There is no configuration provided for floating position (Align or offset)");
            }
        }
    }
    exports.VerticalPosition = VerticalPosition;


    /***/ }),
    /* 172 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const graphic_data_1 = __webpack_require__(173);
    class GraphicAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                a: "xmlns:a",
            };
        }
    }
    class Graphic extends xml_components_1.XmlComponent {
        constructor(mediaData, x, y) {
            super("a:graphic");
            this.root.push(new GraphicAttributes({
                a: "http://schemas.openxmlformats.org/drawingml/2006/main",
            }));
            this.data = new graphic_data_1.GraphicData(mediaData, x, y);
            this.root.push(this.data);
        }
        setXY(x, y) {
            this.data.setXY(x, y);
        }
    }
    exports.Graphic = Graphic;


    /***/ }),
    /* 173 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(174));


    /***/ }),
    /* 174 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const graphic_data_attribute_1 = __webpack_require__(175);
    const pic_1 = __webpack_require__(176);
    class GraphicData extends xml_components_1.XmlComponent {
        constructor(mediaData, x, y) {
            super("a:graphicData");
            this.root.push(new graphic_data_attribute_1.GraphicDataAttributes({
                uri: "http://schemas.openxmlformats.org/drawingml/2006/picture",
            }));
            this.pic = new pic_1.Pic(mediaData, x, y);
            this.root.push(this.pic);
        }
        setXY(x, y) {
            this.pic.setXY(x, y);
        }
    }
    exports.GraphicData = GraphicData;


    /***/ }),
    /* 175 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class GraphicDataAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                uri: "uri",
            };
        }
    }
    exports.GraphicDataAttributes = GraphicDataAttributes;


    /***/ }),
    /* 176 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(177));


    /***/ }),
    /* 177 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const blip_fill_1 = __webpack_require__(178);
    const non_visual_pic_properties_1 = __webpack_require__(182);
    const pic_attributes_1 = __webpack_require__(188);
    const shape_properties_1 = __webpack_require__(189);
    class Pic extends xml_components_1.XmlComponent {
        constructor(mediaData, x, y) {
            super("pic:pic");
            this.root.push(new pic_attributes_1.PicAttributes({
                xmlns: "http://schemas.openxmlformats.org/drawingml/2006/picture",
            }));
            this.shapeProperties = new shape_properties_1.ShapeProperties(x, y);
            this.root.push(new non_visual_pic_properties_1.NonVisualPicProperties());
            this.root.push(new blip_fill_1.BlipFill(mediaData));
            this.root.push(new shape_properties_1.ShapeProperties(x, y));
        }
        setXY(x, y) {
            this.shapeProperties.setXY(x, y);
        }
    }
    exports.Pic = Pic;


    /***/ }),
    /* 178 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const blip_1 = __webpack_require__(179);
    const source_rectangle_1 = __webpack_require__(180);
    const stretch_1 = __webpack_require__(181);
    class BlipFill extends xml_components_1.XmlComponent {
        constructor(mediaData) {
            super("pic:blipFill");
            this.root.push(new blip_1.Blip(mediaData));
            this.root.push(new source_rectangle_1.SourceRectangle());
            this.root.push(new stretch_1.Stretch());
        }
    }
    exports.BlipFill = BlipFill;


    /***/ }),
    /* 179 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class BlipAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                embed: "r:embed",
                cstate: "cstate",
            };
        }
    }
    class Blip extends xml_components_1.XmlComponent {
        constructor(mediaData) {
            super("a:blip");
            this.root.push(new BlipAttributes({
                embed: `rId{${mediaData.fileName}}`,
                cstate: "none",
            }));
        }
    }
    exports.Blip = Blip;


    /***/ }),
    /* 180 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class SourceRectangle extends xml_components_1.XmlComponent {
        constructor() {
            super("a:srcRect");
        }
    }
    exports.SourceRectangle = SourceRectangle;


    /***/ }),
    /* 181 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class FillRectangle extends xml_components_1.XmlComponent {
        constructor() {
            super("a:fillRect");
        }
    }
    class Stretch extends xml_components_1.XmlComponent {
        constructor() {
            super("a:stretch");
            this.root.push(new FillRectangle());
        }
    }
    exports.Stretch = Stretch;


    /***/ }),
    /* 182 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const child_non_visual_pic_properties_1 = __webpack_require__(183);
    const non_visual_properties_1 = __webpack_require__(186);
    class NonVisualPicProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("pic:nvPicPr");
            this.root.push(new non_visual_properties_1.NonVisualProperties());
            this.root.push(new child_non_visual_pic_properties_1.ChildNonVisualProperties());
        }
    }
    exports.NonVisualPicProperties = NonVisualPicProperties;


    /***/ }),
    /* 183 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const pic_locks_1 = __webpack_require__(184);
    class ChildNonVisualProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("pic:cNvPicPr");
            this.root.push(new pic_locks_1.PicLocks());
        }
    }
    exports.ChildNonVisualProperties = ChildNonVisualProperties;


    /***/ }),
    /* 184 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const pic_locks_attributes_1 = __webpack_require__(185);
    class PicLocks extends xml_components_1.XmlComponent {
        constructor() {
            super("a:picLocks");
            this.root.push(new pic_locks_attributes_1.PicLocksAttributes({
                noChangeAspect: 1,
                noChangeArrowheads: 1,
            }));
        }
    }
    exports.PicLocks = PicLocks;


    /***/ }),
    /* 185 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class PicLocksAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                noChangeAspect: "noChangeAspect",
                noChangeArrowheads: "noChangeArrowheads",
            };
        }
    }
    exports.PicLocksAttributes = PicLocksAttributes;


    /***/ }),
    /* 186 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const non_visual_properties_attributes_1 = __webpack_require__(187);
    class NonVisualProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("pic:cNvPr");
            this.root.push(new non_visual_properties_attributes_1.NonVisualPropertiesAttributes({
                id: 0,
                name: "",
                descr: "",
            }));
        }
    }
    exports.NonVisualProperties = NonVisualProperties;


    /***/ }),
    /* 187 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class NonVisualPropertiesAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                id: "id",
                name: "name",
                descr: "desc",
            };
        }
    }
    exports.NonVisualPropertiesAttributes = NonVisualPropertiesAttributes;


    /***/ }),
    /* 188 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class PicAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                xmlns: "xmlns:pic",
            };
        }
    }
    exports.PicAttributes = PicAttributes;


    /***/ }),
    /* 189 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const form_1 = __webpack_require__(190);
    const preset_geometry_1 = __webpack_require__(196);
    const shape_properties_attributes_1 = __webpack_require__(199);
    class ShapeProperties extends xml_components_1.XmlComponent {
        constructor(x, y) {
            super("pic:spPr");
            this.root.push(new shape_properties_attributes_1.ShapePropertiesAttributes({
                bwMode: "auto",
            }));
            this.form = new form_1.Form(x, y);
            this.root.push(this.form);
            this.root.push(new preset_geometry_1.PresetGeometry());
        }
        setXY(x, y) {
            this.form.setXY(x, y);
        }
    }
    exports.ShapeProperties = ShapeProperties;


    /***/ }),
    /* 190 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(191));


    /***/ }),
    /* 191 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const extents_1 = __webpack_require__(192);
    const off_1 = __webpack_require__(194);
    class Form extends xml_components_1.XmlComponent {
        constructor(x, y) {
            super("a:xfrm");
            this.extents = new extents_1.Extents(x, y);
            this.root.push(this.extents);
            this.root.push(new off_1.Offset());
        }
        setXY(x, y) {
            this.extents.setXY(x, y);
        }
    }
    exports.Form = Form;


    /***/ }),
    /* 192 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const extents_attributes_1 = __webpack_require__(193);
    class Extents extends xml_components_1.XmlComponent {
        constructor(x, y) {
            super("a:ext");
            this.attributes = new extents_attributes_1.ExtentsAttributes({
                cx: x,
                cy: y,
            });
            this.root.push(this.attributes);
        }
        setXY(x, y) {
            this.attributes.set({
                cx: x,
                cy: y,
            });
        }
    }
    exports.Extents = Extents;


    /***/ }),
    /* 193 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class ExtentsAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                cx: "cx",
                cy: "cy",
            };
        }
    }
    exports.ExtentsAttributes = ExtentsAttributes;


    /***/ }),
    /* 194 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const off_attributes_1 = __webpack_require__(195);
    class Offset extends xml_components_1.XmlComponent {
        constructor() {
            super("a:off");
            this.root.push(new off_attributes_1.OffsetAttributes({
                x: 0,
                y: 0,
            }));
        }
    }
    exports.Offset = Offset;


    /***/ }),
    /* 195 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class OffsetAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                x: "x",
                y: "y",
            };
        }
    }
    exports.OffsetAttributes = OffsetAttributes;


    /***/ }),
    /* 196 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const adjustment_values_1 = __webpack_require__(197);
    const preset_geometry_attributes_1 = __webpack_require__(198);
    class PresetGeometry extends xml_components_1.XmlComponent {
        constructor() {
            super("a:prstGeom");
            this.root.push(new preset_geometry_attributes_1.PresetGeometryAttributes({
                prst: "rect",
            }));
            this.root.push(new adjustment_values_1.AdjustmentValues());
        }
    }
    exports.PresetGeometry = PresetGeometry;


    /***/ }),
    /* 197 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class AdjustmentValues extends xml_components_1.XmlComponent {
        constructor() {
            super("a:avLst");
        }
    }
    exports.AdjustmentValues = AdjustmentValues;


    /***/ }),
    /* 198 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class PresetGeometryAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                prst: "prst",
            };
        }
    }
    exports.PresetGeometryAttributes = PresetGeometryAttributes;


    /***/ }),
    /* 199 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class ShapePropertiesAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                bwMode: "bwMode",
            };
        }
    }
    exports.ShapePropertiesAttributes = ShapePropertiesAttributes;


    /***/ }),
    /* 200 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    (function (TextWrappingType) {
        TextWrappingType[TextWrappingType["NONE"] = 0] = "NONE";
        TextWrappingType[TextWrappingType["SQUARE"] = 1] = "SQUARE";
        TextWrappingType[TextWrappingType["TIGHT"] = 2] = "TIGHT";
        TextWrappingType[TextWrappingType["TOP_AND_BOTTOM"] = 3] = "TOP_AND_BOTTOM";
    })(exports.TextWrappingType || (exports.TextWrappingType = {}));
    (function (TextWrappingSide) {
        TextWrappingSide["BOTH_SIDES"] = "bothSides";
        TextWrappingSide["LEFT"] = "left";
        TextWrappingSide["RIGHT"] = "right";
        TextWrappingSide["LARGEST"] = "largest";
    })(exports.TextWrappingSide || (exports.TextWrappingSide = {}));


    /***/ }),
    /* 201 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class WrapNone extends xml_components_1.XmlComponent {
        constructor() {
            super("wp:wrapNone");
        }
    }
    exports.WrapNone = WrapNone;


    /***/ }),
    /* 202 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const _1 = __webpack_require__(36);
    class WrapSquareAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                distT: "distT",
                distB: "distB",
                distL: "distL",
                distR: "distR",
                wrapText: "wrapText",
            };
        }
    }
    class WrapSquare extends xml_components_1.XmlComponent {
        constructor(textWrapping, margins = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
        }) {
            super("wp:wrapSquare");
            this.root.push(new WrapSquareAttributes({
                wrapText: textWrapping.side || _1.TextWrappingSide.BOTH_SIDES,
                distT: margins.top,
                distB: margins.bottom,
                distL: margins.left,
                distR: margins.right,
            }));
        }
    }
    exports.WrapSquare = WrapSquare;


    /***/ }),
    /* 203 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class WrapTightAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                distT: "distT",
                distB: "distB",
            };
        }
    }
    class WrapTight extends xml_components_1.XmlComponent {
        constructor(margins = {
            top: 0,
            bottom: 0,
        }) {
            super("wp:wrapTight");
            this.root.push(new WrapTightAttributes({
                distT: margins.top,
                distB: margins.bottom,
            }));
        }
    }
    exports.WrapTight = WrapTight;


    /***/ }),
    /* 204 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class WrapTopAndBottomAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                distT: "distT",
                distB: "distB",
            };
        }
    }
    class WrapTopAndBottom extends xml_components_1.XmlComponent {
        constructor(margins = {
            top: 0,
            bottom: 0,
        }) {
            super("wp:wrapTopAndBottom");
            this.root.push(new WrapTopAndBottomAttributes({
                distT: margins.top,
                distB: margins.bottom,
            }));
        }
    }
    exports.WrapTopAndBottom = WrapTopAndBottom;


    /***/ }),
    /* 205 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class DocPropertiesAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                id: "id",
                name: "name",
                descr: "descr",
            };
        }
    }
    exports.DocPropertiesAttributes = DocPropertiesAttributes;


    /***/ }),
    /* 206 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class EffectExtentAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                b: "b",
                l: "l",
                r: "r",
                t: "t",
            };
        }
    }
    exports.EffectExtentAttributes = EffectExtentAttributes;


    /***/ }),
    /* 207 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class ExtentAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                cx: "cx",
                cy: "cy",
            };
        }
    }
    exports.ExtentAttributes = ExtentAttributes;


    /***/ }),
    /* 208 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const graphic_frame_lock_attributes_1 = __webpack_require__(209);
    class GraphicFrameLocks extends xml_components_1.XmlComponent {
        constructor() {
            super("a:graphicFrameLocks");
            this.root.push(new graphic_frame_lock_attributes_1.GraphicFrameLockAttributes({
                xmlns: "http://schemas.openxmlformats.org/drawingml/2006/main",
                noChangeAspect: 1,
            }));
        }
    }
    exports.GraphicFrameLocks = GraphicFrameLocks;


    /***/ }),
    /* 209 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class GraphicFrameLockAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                xmlns: "xmlns:a",
                noChangeAspect: "noChangeAspect",
            };
        }
    }
    exports.GraphicFrameLockAttributes = GraphicFrameLockAttributes;


    /***/ }),
    /* 210 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(211));


    /***/ }),
    /* 211 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const doc_properties_1 = __webpack_require__(77);
    const effect_extent_1 = __webpack_require__(78);
    const extent_1 = __webpack_require__(79);
    const graphic_frame_properties_1 = __webpack_require__(80);
    const graphic_1 = __webpack_require__(76);
    const inline_attributes_1 = __webpack_require__(212);
    class Inline extends xml_components_1.XmlComponent {
        constructor(mediaData, dimensions) {
            super("wp:inline");
            this.dimensions = dimensions;
            this.root.push(new inline_attributes_1.InlineAttributes({
                distT: 0,
                distB: 0,
                distL: 0,
                distR: 0,
            }));
            this.extent = new extent_1.Extent(dimensions.emus.x, dimensions.emus.y);
            this.graphic = new graphic_1.Graphic(mediaData, dimensions.emus.x, dimensions.emus.y);
            this.root.push(this.extent);
            this.root.push(new effect_extent_1.EffectExtent());
            this.root.push(new doc_properties_1.DocProperties());
            this.root.push(new graphic_frame_properties_1.GraphicFrameProperties());
            this.root.push(this.graphic);
        }
        scale(factorX, factorY) {
            const newX = Math.round(this.dimensions.emus.x * factorX);
            const newY = Math.round(this.dimensions.emus.y * factorY);
            this.extent.setXY(newX, newY);
            this.graphic.setXY(newX, newY);
        }
    }
    exports.Inline = Inline;


    /***/ }),
    /* 212 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class InlineAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                distT: "distT",
                distB: "distB",
                distL: "distL",
                distR: "distR",
            };
        }
    }
    exports.InlineAttributes = InlineAttributes;


    /***/ }),
    /* 213 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const run_1 = __webpack_require__(3);
    const field_1 = __webpack_require__(18);
    const sequential_identifier_instruction_1 = __webpack_require__(214);
    class SequentialIdentifier extends run_1.Run {
        constructor(identifier) {
            super({});
            this.root.push(new field_1.Begin(true));
            this.root.push(new sequential_identifier_instruction_1.SequentialIdentifierInstruction(identifier));
            this.root.push(new field_1.Separate());
            this.root.push(new field_1.End());
        }
    }
    exports.SequentialIdentifier = SequentialIdentifier;


    /***/ }),
    /* 214 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const space_type_1 = __webpack_require__(8);
    const xml_components_1 = __webpack_require__(0);
    class TextAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { space: "xml:space" };
        }
    }
    class SequentialIdentifierInstruction extends xml_components_1.XmlComponent {
        constructor(identifier) {
            super("w:instrText");
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            this.root.push(`SEQ ${identifier}`);
        }
    }
    exports.SequentialIdentifierInstruction = SequentialIdentifierInstruction;


    /***/ }),
    /* 215 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class Tab extends xml_components_1.XmlComponent {
        constructor() {
            super("w:tab");
        }
    }
    exports.Tab = Tab;


    /***/ }),
    /* 216 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const links_1 = __webpack_require__(37);
    const properties_1 = __webpack_require__(21);
    const run_1 = __webpack_require__(3);
    class Paragraph extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:p");
            if (typeof options === "string") {
                this.properties = new properties_1.ParagraphProperties({});
                this.root.push(this.properties);
                this.root.push(new run_1.TextRun(options));
                return;
            }
            if (options instanceof run_1.PictureRun) {
                this.properties = new properties_1.ParagraphProperties({});
                this.root.push(this.properties);
                this.root.push(options);
                return;
            }
            this.properties = new properties_1.ParagraphProperties(options);
            this.root.push(this.properties);
            if (options.text) {
                this.root.push(new run_1.TextRun(options.text));
            }
            if (options.children) {
                for (const child of options.children) {
                    if (child instanceof links_1.Bookmark) {
                        this.root.push(child.start);
                        this.root.push(child.text);
                        this.root.push(child.end);
                        continue;
                    }
                    this.root.push(child);
                }
            }
        }
        prepForXml(file) {
            for (const element of this.root) {
                if (element instanceof links_1.HyperlinkRef) {
                    const index = this.root.indexOf(element);
                    this.root[index] = file.HyperlinkCache[element.id];
                }
            }
            return super.prepForXml();
        }
        addRunToFront(run) {
            this.root.splice(1, 0, run);
            return this;
        }
    }
    exports.Paragraph = Paragraph;


    /***/ }),
    /* 217 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const run_1 = __webpack_require__(3);
    const hyperlink_attributes_1 = __webpack_require__(218);
    (function (HyperlinkType) {
        HyperlinkType["INTERNAL"] = "INTERNAL";
        HyperlinkType["EXTERNAL"] = "EXTERNAL";
    })(exports.HyperlinkType || (exports.HyperlinkType = {}));
    class HyperlinkRef {
        constructor(id) {
            this.id = id;
        }
    }
    exports.HyperlinkRef = HyperlinkRef;
    class Hyperlink extends xml_components_1.XmlComponent {
        constructor(text, relationshipId, anchor) {
            super("w:hyperlink");
            this.linkId = relationshipId;
            const props = {
                history: 1,
                anchor: anchor ? anchor : undefined,
                id: !anchor ? `rId${this.linkId}` : undefined,
            };
            const attributes = new hyperlink_attributes_1.HyperlinkAttributes(props);
            this.root.push(attributes);
            this.textRun = new run_1.TextRun({
                text: text,
                style: "Hyperlink",
            });
            this.root.push(this.textRun);
        }
        get TextRun() {
            return this.textRun;
        }
    }
    exports.Hyperlink = Hyperlink;


    /***/ }),
    /* 218 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class HyperlinkAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                id: "r:id",
                history: "w:history",
                anchor: "w:anchor",
            };
        }
    }
    exports.HyperlinkAttributes = HyperlinkAttributes;


    /***/ }),
    /* 219 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const shortid = __webpack_require__(86);
    const run_1 = __webpack_require__(3);
    const bookmark_attributes_1 = __webpack_require__(228);
    class Bookmark {
        constructor(name, text) {
            const linkId = shortid.generate().toLowerCase();
            this.start = new BookmarkStart(name, linkId);
            this.text = new run_1.TextRun(text);
            this.end = new BookmarkEnd(linkId);
        }
    }
    exports.Bookmark = Bookmark;
    class BookmarkStart extends xml_components_1.XmlComponent {
        constructor(name, linkId) {
            super("w:bookmarkStart");
            const attributes = new bookmark_attributes_1.BookmarkStartAttributes({
                name,
                id: linkId,
            });
            this.root.push(attributes);
        }
    }
    exports.BookmarkStart = BookmarkStart;
    class BookmarkEnd extends xml_components_1.XmlComponent {
        constructor(linkId) {
            super("w:bookmarkEnd");
            const attributes = new bookmark_attributes_1.BookmarkEndAttributes({
                id: linkId,
            });
            this.root.push(attributes);
        }
    }
    exports.BookmarkEnd = BookmarkEnd;


    /***/ }),
    /* 220 */
    /***/ (function(module, exports, __webpack_require__) {


    var alphabet = __webpack_require__(20);
    var build = __webpack_require__(222);
    var isValid = __webpack_require__(226);

    // if you are using cluster or multiple servers use this to make each instance
    // has a unique value for worker
    // Note: I don't know if this is automatically set when using third
    // party cluster solutions such as pm2.
    var clusterWorkerId = __webpack_require__(227) || 0;

    /**
     * Set the seed.
     * Highly recommended if you don't want people to try to figure out your id schema.
     * exposed as shortid.seed(int)
     * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
     */
    function seed(seedValue) {
        alphabet.seed(seedValue);
        return module.exports;
    }

    /**
     * Set the cluster worker or machine id
     * exposed as shortid.worker(int)
     * @param workerId worker must be positive integer.  Number less than 16 is recommended.
     * returns shortid module so it can be chained.
     */
    function worker(workerId) {
        clusterWorkerId = workerId;
        return module.exports;
    }

    /**
     *
     * sets new characters to use in the alphabet
     * returns the shuffled alphabet
     */
    function characters(newCharacters) {
        if (newCharacters !== undefined) {
            alphabet.characters(newCharacters);
        }

        return alphabet.shuffled();
    }

    /**
     * Generate unique id
     * Returns string id
     */
    function generate() {
      return build(clusterWorkerId);
    }

    // Export all other functions as properties of the generate function
    module.exports = generate;
    module.exports.generate = generate;
    module.exports.seed = seed;
    module.exports.worker = worker;
    module.exports.characters = characters;
    module.exports.isValid = isValid;


    /***/ }),
    /* 221 */
    /***/ (function(module, exports, __webpack_require__) {


    // Found this seed-based random generator somewhere
    // Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

    var seed = 1;

    /**
     * return a random number based on a seed
     * @param seed
     * @returns {number}
     */
    function getNextValue() {
        seed = (seed * 9301 + 49297) % 233280;
        return seed/(233280.0);
    }

    function setSeed(_seed_) {
        seed = _seed_;
    }

    module.exports = {
        nextValue: getNextValue,
        seed: setSeed
    };


    /***/ }),
    /* 222 */
    /***/ (function(module, exports, __webpack_require__) {


    var generate = __webpack_require__(223);
    __webpack_require__(20);

    // Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
    // This number should be updated every year or so to keep the generated id short.
    // To regenerate `new Date() - 0` and bump the version. Always bump the version!
    var REDUCE_TIME = 1567752802062;

    // don't change unless we change the algos or REDUCE_TIME
    // must be an integer and less than 16
    var version = 7;

    // Counter is used when shortid is called multiple times in one second.
    var counter;

    // Remember the last time shortid was called in case counter is needed.
    var previousSeconds;

    /**
     * Generate unique id
     * Returns string id
     */
    function build(clusterWorkerId) {
        var str = '';

        var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

        if (seconds === previousSeconds) {
            counter++;
        } else {
            counter = 0;
            previousSeconds = seconds;
        }

        str = str + generate(version);
        str = str + generate(clusterWorkerId);
        if (counter > 0) {
            str = str + generate(counter);
        }
        str = str + generate(seconds);
        return str;
    }

    module.exports = build;


    /***/ }),
    /* 223 */
    /***/ (function(module, exports, __webpack_require__) {


    var alphabet = __webpack_require__(20);
    var random = __webpack_require__(224);
    var format = __webpack_require__(225);

    function generate(number) {
        var loopCounter = 0;
        var done;

        var str = '';

        while (!done) {
            str = str + format(random, alphabet.get(), 1);
            done = number < (Math.pow(16, loopCounter + 1 ) );
            loopCounter++;
        }
        return str;
    }

    module.exports = generate;


    /***/ }),
    /* 224 */
    /***/ (function(module, exports, __webpack_require__) {


    var crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

    var randomByte;

    if (!crypto || !crypto.getRandomValues) {
        randomByte = function(size) {
            var bytes = [];
            for (var i = 0; i < size; i++) {
                bytes.push(Math.floor(Math.random() * 256));
            }
            return bytes;
        };
    } else {
        randomByte = function(size) {
            return crypto.getRandomValues(new Uint8Array(size));
        };
    }

    module.exports = randomByte;


    /***/ }),
    /* 225 */
    /***/ (function(module, exports) {

    module.exports = function (random, alphabet, size) {
      var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
      var step = Math.ceil(1.6 * mask * size / alphabet.length);
      var id = '';

      while (true) {
        var i = step;
        var bytes = random(i);
        while (i--) {
          id += alphabet[bytes[i] & mask] || '';
          if (id.length === +size) return id
        }
      }
    };


    /***/ }),
    /* 226 */
    /***/ (function(module, exports, __webpack_require__) {

    var alphabet = __webpack_require__(20);

    function isShortId(id) {
        if (!id || typeof id !== 'string' || id.length < 6 ) {
            return false;
        }

        var nonAlphabetic = new RegExp('[^' +
          alphabet.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') +
        ']');
        return !nonAlphabetic.test(id);
    }

    module.exports = isShortId;


    /***/ }),
    /* 227 */
    /***/ (function(module, exports, __webpack_require__) {


    module.exports = 0;


    /***/ }),
    /* 228 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class BookmarkStartAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                id: "w:id",
                name: "w:name",
            };
        }
    }
    exports.BookmarkStartAttributes = BookmarkStartAttributes;
    class BookmarkEndAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                id: "w:id",
            };
        }
    }
    exports.BookmarkEndAttributes = BookmarkEndAttributes;


    /***/ }),
    /* 229 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class OutlineLevel extends xml_components_1.XmlComponent {
        constructor(level) {
            super("w:outlineLvl");
            this.level = level;
            this.root.push(new xml_components_1.Attributes({
                val: level,
            }));
        }
    }
    exports.OutlineLevel = OutlineLevel;


    /***/ }),
    /* 230 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class Bidirectional extends xml_components_1.XmlComponent {
        constructor() {
            super("w:bidi");
        }
    }
    exports.Bidirectional = Bidirectional;


    /***/ }),
    /* 231 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(232));
    __export(__webpack_require__(233));
    __export(__webpack_require__(235));
    __export(__webpack_require__(2));
    __export(__webpack_require__(240));
    __export(__webpack_require__(249));
    __export(__webpack_require__(250));
    __export(__webpack_require__(253));
    __export(__webpack_require__(255));


    /***/ }),
    /* 232 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class Math extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:oMath");
            for (const child of options.children) {
                this.root.push(child);
            }
        }
    }
    exports.Math = Math;


    /***/ }),
    /* 233 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const math_text_1 = __webpack_require__(234);
    class MathRun extends xml_components_1.XmlComponent {
        constructor(text) {
            super("m:r");
            this.root.push(new math_text_1.MathText(text));
        }
    }
    exports.MathRun = MathRun;


    /***/ }),
    /* 234 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathText extends xml_components_1.XmlComponent {
        constructor(text) {
            super("m:t");
            this.root.push(text);
        }
    }
    exports.MathText = MathText;


    /***/ }),
    /* 235 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(236));
    __export(__webpack_require__(87));
    __export(__webpack_require__(88));


    /***/ }),
    /* 236 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const math_denominator_1 = __webpack_require__(87);
    const math_numerator_1 = __webpack_require__(88);
    class MathFraction extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:f");
            this.root.push(new math_numerator_1.MathNumerator(options.numerator));
            this.root.push(new math_denominator_1.MathDenominator(options.denominator));
        }
    }
    exports.MathFraction = MathFraction;


    /***/ }),
    /* 237 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathSubScriptHideAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { hide: "m:val" };
        }
    }
    class MathSubScriptHide extends xml_components_1.XmlComponent {
        constructor() {
            super("m:subHide");
            this.root.push(new MathSubScriptHideAttributes({ hide: 1 }));
        }
    }
    exports.MathSubScriptHide = MathSubScriptHide;


    /***/ }),
    /* 238 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathSuperScriptHideAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { hide: "m:val" };
        }
    }
    class MathSuperScriptHide extends xml_components_1.XmlComponent {
        constructor() {
            super("m:supHide");
            this.root.push(new MathSuperScriptHideAttributes({ hide: 1 }));
        }
    }
    exports.MathSuperScriptHide = MathSuperScriptHide;


    /***/ }),
    /* 239 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const math_base_1 = __webpack_require__(90);
    const math_naray_properties_1 = __webpack_require__(92);
    const math_sub_script_1 = __webpack_require__(93);
    const math_super_script_1 = __webpack_require__(94);
    class MathSum extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:nary");
            this.root.push(new math_naray_properties_1.MathNArayProperties("∑", !!options.superScript, !!options.subScript));
            if (!!options.subScript) {
                this.root.push(new math_sub_script_1.MathSubScriptElement(options.subScript));
            }
            if (!!options.superScript) {
                this.root.push(new math_super_script_1.MathSuperScriptElement(options.superScript));
            }
            this.root.push(new math_base_1.MathBase(options.children));
        }
    }
    exports.MathSum = MathSum;


    /***/ }),
    /* 240 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(241));
    __export(__webpack_require__(243));
    __export(__webpack_require__(245));
    __export(__webpack_require__(247));


    /***/ }),
    /* 241 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(242));
    __export(__webpack_require__(95));


    /***/ }),
    /* 242 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_super_script_function_properties_1 = __webpack_require__(95);
    class MathSuperScript extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:sSup");
            this.root.push(new math_super_script_function_properties_1.MathSuperScriptProperties());
            this.root.push(new n_ary_1.MathBase(options.children));
            this.root.push(new n_ary_1.MathSuperScriptElement(options.superScript));
        }
    }
    exports.MathSuperScript = MathSuperScript;


    /***/ }),
    /* 243 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(244));
    __export(__webpack_require__(96));


    /***/ }),
    /* 244 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_sub_script_function_properties_1 = __webpack_require__(96);
    class MathSubScript extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:sSub");
            this.root.push(new math_sub_script_function_properties_1.MathSubScriptProperties());
            this.root.push(new n_ary_1.MathBase(options.children));
            this.root.push(new n_ary_1.MathSubScriptElement(options.subScript));
        }
    }
    exports.MathSubScript = MathSubScript;


    /***/ }),
    /* 245 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(246));
    __export(__webpack_require__(97));


    /***/ }),
    /* 246 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_sub_super_script_function_properties_1 = __webpack_require__(97);
    class MathSubSuperScript extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:sSubSup");
            this.root.push(new math_sub_super_script_function_properties_1.MathSubSuperScriptProperties());
            this.root.push(new n_ary_1.MathBase(options.children));
            this.root.push(new n_ary_1.MathSubScriptElement(options.subScript));
            this.root.push(new n_ary_1.MathSuperScriptElement(options.superScript));
        }
    }
    exports.MathSubSuperScript = MathSubSuperScript;


    /***/ }),
    /* 247 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(248));
    __export(__webpack_require__(98));


    /***/ }),
    /* 248 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_pre_sub_super_script_function_properties_1 = __webpack_require__(98);
    class MathPreSubSuperScript extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:sPre");
            this.root.push(new math_pre_sub_super_script_function_properties_1.MathPreSubSuperScriptProperties());
            this.root.push(new n_ary_1.MathBase(options.children));
            this.root.push(new n_ary_1.MathSubScriptElement(options.subScript));
            this.root.push(new n_ary_1.MathSuperScriptElement(options.superScript));
        }
    }
    exports.MathPreSubSuperScript = MathPreSubSuperScript;


    /***/ }),
    /* 249 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WORKAROUND4 = "";


    /***/ }),
    /* 250 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(99));
    __export(__webpack_require__(251));
    __export(__webpack_require__(100));


    /***/ }),
    /* 251 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_degree_1 = __webpack_require__(99);
    const math_radical_properties_1 = __webpack_require__(100);
    class MathRadical extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:rad");
            this.root.push(new math_radical_properties_1.MathRadicalProperties(!!options.degree));
            this.root.push(new math_degree_1.MathDegree(options.degree));
            this.root.push(new n_ary_1.MathBase(options.children));
        }
    }
    exports.MathRadical = MathRadical;


    /***/ }),
    /* 252 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathDegreeHideAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { hide: "m:val" };
        }
    }
    class MathDegreeHide extends xml_components_1.XmlComponent {
        constructor() {
            super("m:degHide");
            this.root.push(new MathDegreeHideAttributes({ hide: 1 }));
        }
    }
    exports.MathDegreeHide = MathDegreeHide;


    /***/ }),
    /* 253 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(254));
    __export(__webpack_require__(101));
    __export(__webpack_require__(102));


    /***/ }),
    /* 254 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_function_name_1 = __webpack_require__(101);
    const math_function_properties_1 = __webpack_require__(102);
    class MathFunction extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:func");
            this.root.push(new math_function_properties_1.MathFunctionProperties());
            this.root.push(new math_function_name_1.MathFunctionName(options.name));
            this.root.push(new n_ary_1.MathBase(options.children));
        }
    }
    exports.MathFunction = MathFunction;


    /***/ }),
    /* 255 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(256));
    __export(__webpack_require__(259));
    __export(__webpack_require__(260));
    __export(__webpack_require__(261));


    /***/ }),
    /* 256 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_bracket_properties_1 = __webpack_require__(22);
    class MathRoundBrackets extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:d");
            this.root.push(new math_bracket_properties_1.MathBracketProperties());
            this.root.push(new n_ary_1.MathBase(options.children));
        }
    }
    exports.MathRoundBrackets = MathRoundBrackets;


    /***/ }),
    /* 257 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathBeginningCharacterAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { character: "m:val" };
        }
    }
    class MathBeginningCharacter extends xml_components_1.XmlComponent {
        constructor(character) {
            super("m:begChr");
            this.root.push(new MathBeginningCharacterAttributes({ character }));
        }
    }
    exports.MathBeginningCharacter = MathBeginningCharacter;


    /***/ }),
    /* 258 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MathEndingCharacterAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { character: "m:val" };
        }
    }
    class MathEndingCharacter extends xml_components_1.XmlComponent {
        constructor(character) {
            super("m:endChr");
            this.root.push(new MathEndingCharacterAttributes({ character }));
        }
    }
    exports.MathEndingCharacter = MathEndingCharacter;


    /***/ }),
    /* 259 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_bracket_properties_1 = __webpack_require__(22);
    class MathSquareBrackets extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:d");
            this.root.push(new math_bracket_properties_1.MathBracketProperties({
                beginningCharacter: "[",
                endingCharacter: "]",
            }));
            this.root.push(new n_ary_1.MathBase(options.children));
        }
    }
    exports.MathSquareBrackets = MathSquareBrackets;


    /***/ }),
    /* 260 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_bracket_properties_1 = __webpack_require__(22);
    class MathCurlyBrackets extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:d");
            this.root.push(new math_bracket_properties_1.MathBracketProperties({
                beginningCharacter: "{",
                endingCharacter: "}",
            }));
            this.root.push(new n_ary_1.MathBase(options.children));
        }
    }
    exports.MathCurlyBrackets = MathCurlyBrackets;


    /***/ }),
    /* 261 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const n_ary_1 = __webpack_require__(2);
    const math_bracket_properties_1 = __webpack_require__(22);
    class MathAngledBrackets extends xml_components_1.XmlComponent {
        constructor(options) {
            super("m:d");
            this.root.push(new math_bracket_properties_1.MathBracketProperties({
                beginningCharacter: "〈",
                endingCharacter: "〉",
            }));
            this.root.push(new n_ary_1.MathBase(options.children));
        }
    }
    exports.MathAngledBrackets = MathAngledBrackets;


    /***/ }),
    /* 262 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(263));
    __export(__webpack_require__(10));
    __export(__webpack_require__(103));
    __export(__webpack_require__(39));
    __export(__webpack_require__(278));


    /***/ }),
    /* 263 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const grid_1 = __webpack_require__(264);
    const table_cell_1 = __webpack_require__(10);
    const table_properties_1 = __webpack_require__(103);
    class Table extends xml_components_1.XmlComponent {
        constructor({ rows, width, columnWidths = Array(Math.max(...rows.map((row) => row.CellCount))).fill(100), margins: { marginUnitType, top, bottom, right, left } = { marginUnitType: table_cell_1.WidthType.AUTO, top: 0, bottom: 0, right: 0, left: 0 }, float, layout, borders, alignment, }) {
            super("w:tbl");
            this.properties = new table_properties_1.TableProperties();
            this.root.push(this.properties);
            if (borders) {
                this.properties.setBorder(borders);
            }
            else {
                this.properties.setBorder({});
            }
            if (width) {
                this.properties.setWidth(width.size, width.type);
            }
            else {
                this.properties.setWidth(100);
            }
            this.properties.CellMargin.addBottomMargin(bottom || 0, marginUnitType);
            this.properties.CellMargin.addTopMargin(top || 0, marginUnitType);
            this.properties.CellMargin.addLeftMargin(left || 0, marginUnitType);
            this.properties.CellMargin.addRightMargin(right || 0, marginUnitType);
            this.root.push(new grid_1.TableGrid(columnWidths));
            for (const row of rows) {
                this.root.push(row);
            }
            rows.forEach((row, rowIndex) => {
                if (rowIndex === rows.length - 1) {
                    return;
                }
                let columnIndex = 0;
                row.cells.forEach((cell) => {
                    if (cell.options.rowSpan && cell.options.rowSpan > 1) {
                        const continueCell = new table_cell_1.TableCell({
                            rowSpan: cell.options.rowSpan - 1,
                            columnSpan: cell.options.columnSpan,
                            borders: cell.options.borders,
                            children: [],
                            verticalMerge: table_cell_1.VerticalMergeType.CONTINUE,
                        });
                        rows[rowIndex + 1].addCellToColumnIndex(continueCell, columnIndex);
                    }
                    columnIndex += cell.options.columnSpan || 1;
                });
            });
            if (float) {
                this.properties.setTableFloatProperties(float);
            }
            if (layout) {
                this.properties.setLayout(layout);
            }
            if (alignment) {
                this.properties.setAlignment(alignment);
            }
        }
    }
    exports.Table = Table;


    /***/ }),
    /* 264 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class TableGrid extends xml_components_1.XmlComponent {
        constructor(widths) {
            super("w:tblGrid");
            for (const width of widths) {
                this.root.push(new GridCol(width));
            }
        }
    }
    exports.TableGrid = TableGrid;
    class GridColAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { w: "w:w" };
        }
    }
    class GridCol extends xml_components_1.XmlComponent {
        constructor(width) {
            super("w:gridCol");
            if (width !== undefined) {
                this.root.push(new GridColAttributes({ w: width }));
            }
        }
    }
    exports.GridCol = GridCol;


    /***/ }),
    /* 265 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const paragraph_1 = __webpack_require__(1);
    const xml_components_1 = __webpack_require__(0);
    const table_cell_components_1 = __webpack_require__(38);
    const table_cell_properties_1 = __webpack_require__(266);
    class TableCell extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:tc");
            this.options = options;
            this.properties = new table_cell_properties_1.TableCellProperties();
            this.root.push(this.properties);
            for (const child of options.children) {
                this.root.push(child);
            }
            if (options.verticalAlign) {
                this.properties.setVerticalAlign(options.verticalAlign);
            }
            if (options.textDirection) {
                this.properties.setTextDirection(options.textDirection);
            }
            if (options.verticalMerge) {
                this.properties.addVerticalMerge(options.verticalMerge);
            }
            else if (options.rowSpan && options.rowSpan > 1) {
                this.properties.addVerticalMerge(table_cell_components_1.VerticalMergeType.RESTART);
            }
            if (options.margins) {
                this.properties.addMargins(options.margins);
            }
            if (options.shading) {
                this.properties.setShading(options.shading);
            }
            if (options.columnSpan) {
                this.properties.addGridSpan(options.columnSpan);
            }
            if (options.width) {
                this.properties.setWidth(options.width.size, options.width.type);
            }
            if (options.borders) {
                if (options.borders.top) {
                    this.properties.Borders.addTopBorder(options.borders.top.style, options.borders.top.size, options.borders.top.color);
                }
                if (options.borders.bottom) {
                    this.properties.Borders.addBottomBorder(options.borders.bottom.style, options.borders.bottom.size, options.borders.bottom.color);
                }
                if (options.borders.left) {
                    this.properties.Borders.addLeftBorder(options.borders.left.style, options.borders.left.size, options.borders.left.color);
                }
                if (options.borders.right) {
                    this.properties.Borders.addRightBorder(options.borders.right.style, options.borders.right.size, options.borders.right.color);
                }
            }
        }
        prepForXml(file) {
            if (!(this.root[this.root.length - 1] instanceof paragraph_1.Paragraph)) {
                this.root.push(new paragraph_1.Paragraph({}));
            }
            return super.prepForXml(file);
        }
    }
    exports.TableCell = TableCell;


    /***/ }),
    /* 266 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const shading_1 = __webpack_require__(39);
    const table_cell_margins_1 = __webpack_require__(268);
    const table_cell_components_1 = __webpack_require__(38);
    class TableCellProperties extends xml_components_1.IgnoreIfEmptyXmlComponent {
        constructor() {
            super("w:tcPr");
            this.cellBorder = new table_cell_components_1.TableCellBorders();
            this.root.push(this.cellBorder);
        }
        get Borders() {
            return this.cellBorder;
        }
        addGridSpan(cellSpan) {
            this.root.push(new table_cell_components_1.GridSpan(cellSpan));
            return this;
        }
        addVerticalMerge(type) {
            this.root.push(new table_cell_components_1.VerticalMerge(type));
            return this;
        }
        setVerticalAlign(type) {
            this.root.push(new table_cell_components_1.VAlign(type));
            return this;
        }
        setWidth(width, type = table_cell_components_1.WidthType.AUTO) {
            this.root.push(new table_cell_components_1.TableCellWidth(width, type));
            return this;
        }
        setShading(attrs) {
            this.root.push(new shading_1.TableShading(attrs));
            return this;
        }
        addMargins(options) {
            this.root.push(new table_cell_margins_1.TableCellMargin(options));
            return this;
        }
        setTextDirection(type) {
            this.root.push(new table_cell_components_1.TDirection(type));
            return this;
        }
    }
    exports.TableCellProperties = TableCellProperties;


    /***/ }),
    /* 267 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class TableShadingAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                fill: "w:fill",
                color: "w:color",
                val: "w:val",
            };
        }
    }
    class TableShading extends xml_components_1.XmlComponent {
        constructor(attrs) {
            super("w:shd");
            this.root.push(new TableShadingAttributes(attrs));
        }
    }
    exports.TableShading = TableShading;
    (function (ShadingType) {
        ShadingType["CLEAR"] = "clear";
        ShadingType["DIAGONAL_CROSS"] = "diagCross";
        ShadingType["DIAGONAL_STRIPE"] = "diagStripe";
        ShadingType["HORIZONTAL_CROSS"] = "horzCross";
        ShadingType["HORIZONTAL_STRIPE"] = "horzStripe";
        ShadingType["NIL"] = "nil";
        ShadingType["PERCENT_5"] = "pct5";
        ShadingType["PERCENT_10"] = "pct10";
        ShadingType["PERCENT_12"] = "pct12";
        ShadingType["PERCENT_15"] = "pct15";
        ShadingType["PERCENT_20"] = "pct20";
        ShadingType["PERCENT_25"] = "pct25";
        ShadingType["PERCENT_30"] = "pct30";
        ShadingType["PERCENT_35"] = "pct35";
        ShadingType["PERCENT_37"] = "pct37";
        ShadingType["PERCENT_40"] = "pct40";
        ShadingType["PERCENT_45"] = "pct45";
        ShadingType["PERCENT_50"] = "pct50";
        ShadingType["PERCENT_55"] = "pct55";
        ShadingType["PERCENT_60"] = "pct60";
        ShadingType["PERCENT_62"] = "pct62";
        ShadingType["PERCENT_65"] = "pct65";
        ShadingType["PERCENT_70"] = "pct70";
        ShadingType["PERCENT_75"] = "pct75";
        ShadingType["PERCENT_80"] = "pct80";
        ShadingType["PERCENT_85"] = "pct85";
        ShadingType["PERCENT_87"] = "pct87";
        ShadingType["PERCENT_90"] = "pct90";
        ShadingType["PERCENT_95"] = "pct95";
        ShadingType["REVERSE_DIAGONAL_STRIPE"] = "reverseDiagStripe";
        ShadingType["SOLID"] = "solid";
        ShadingType["THIN_DIAGONAL_CROSS"] = "thinDiagCross";
        ShadingType["THIN_DIAGONAL_STRIPE"] = "thinDiagStripe";
        ShadingType["THIN_HORIZONTAL_CROSS"] = "thinHorzCross";
        ShadingType["THIN_REVERSE_DIAGONAL_STRIPE"] = "thinReverseDiagStripe";
        ShadingType["THIN_VERTICAL_STRIPE"] = "thinVertStripe";
        ShadingType["VERTICAL_STRIPE"] = "vertStripe";
    })(exports.ShadingType || (exports.ShadingType = {}));


    /***/ }),
    /* 268 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const cell_margin_1 = __webpack_require__(269);
    class TableCellMargin extends xml_components_1.XmlComponent {
        constructor({ top = 0, left = 0, right = 0, bottom = 0 }) {
            super("w:tcMar");
            this.root.push(new cell_margin_1.TopCellMargin(top));
            this.root.push(new cell_margin_1.BottomCellMargin(bottom));
            this.root.push(new cell_margin_1.RightCellMargin(right));
            this.root.push(new cell_margin_1.LeftCellMargin(left));
        }
    }
    exports.TableCellMargin = TableCellMargin;


    /***/ }),
    /* 269 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class CellMarginAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { width: "w:w", type: "w:type" };
        }
    }
    class TopCellMargin extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:top");
            this.root.push(new CellMarginAttributes({
                width: value,
                type: "dxa",
            }));
        }
    }
    exports.TopCellMargin = TopCellMargin;
    class BottomCellMargin extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:bottom");
            this.root.push(new CellMarginAttributes({
                width: value,
                type: "dxa",
            }));
        }
    }
    exports.BottomCellMargin = BottomCellMargin;
    class LeftCellMargin extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:start");
            this.root.push(new CellMarginAttributes({
                width: value,
                type: "dxa",
            }));
        }
    }
    exports.LeftCellMargin = LeftCellMargin;
    class RightCellMargin extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:end");
            this.root.push(new CellMarginAttributes({
                width: value,
                type: "dxa",
            }));
        }
    }
    exports.RightCellMargin = RightCellMargin;


    /***/ }),
    /* 270 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const paragraph_1 = __webpack_require__(1);
    const shading_1 = __webpack_require__(39);
    const table_cell_1 = __webpack_require__(10);
    const table_borders_1 = __webpack_require__(104);
    const table_cell_margin_1 = __webpack_require__(276);
    const table_float_properties_1 = __webpack_require__(109);
    const table_layout_1 = __webpack_require__(111);
    const table_width_1 = __webpack_require__(277);
    class TableProperties extends xml_components_1.IgnoreIfEmptyXmlComponent {
        constructor() {
            super("w:tblPr");
            this.cellMargin = new table_cell_margin_1.TableCellMargin();
            this.root.push(this.cellMargin);
        }
        setWidth(width, type = table_cell_1.WidthType.AUTO) {
            this.root.push(new table_width_1.PreferredTableWidth(type, width));
            return this;
        }
        setLayout(type) {
            this.root.push(new table_layout_1.TableLayout(type));
        }
        setBorder(borderOptions) {
            this.root.push(new table_borders_1.TableBorders(borderOptions));
            return this;
        }
        get CellMargin() {
            return this.cellMargin;
        }
        setTableFloatProperties(tableFloatOptions) {
            this.root.push(new table_float_properties_1.TableFloatProperties(tableFloatOptions));
            return this;
        }
        setShading(attrs) {
            this.root.push(new shading_1.TableShading(attrs));
            return this;
        }
        setAlignment(type) {
            this.root.push(new paragraph_1.Alignment(type));
        }
    }
    exports.TableProperties = TableProperties;


    /***/ }),
    /* 271 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const style_1 = __webpack_require__(105);
    __export(__webpack_require__(273));
    class Styles extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:styles");
            if (options.initialStyles) {
                this.root.push(options.initialStyles);
            }
            if (options.importedStyles) {
                for (const style of options.importedStyles) {
                    this.root.push(style);
                }
            }
            if (options.paragraphStyles) {
                for (const style of options.paragraphStyles) {
                    this.root.push(new style_1.StyleForParagraph(style));
                }
            }
            if (options.characterStyles) {
                for (const style of options.characterStyles) {
                    this.root.push(new style_1.StyleForCharacter(style));
                }
            }
        }
    }
    exports.Styles = Styles;


    /***/ }),
    /* 272 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const underline_1 = __webpack_require__(19);
    const character_style_1 = __webpack_require__(43);
    const paragraph_style_1 = __webpack_require__(42);
    class HeadingStyle extends paragraph_style_1.StyleForParagraph {
        constructor(options) {
            super(Object.assign({}, options, { basedOn: "Normal", next: "Normal", quickFormat: true }));
        }
    }
    exports.HeadingStyle = HeadingStyle;
    class TitleStyle extends HeadingStyle {
        constructor(options) {
            super(Object.assign({}, options, { id: "Title", name: "Title" }));
        }
    }
    exports.TitleStyle = TitleStyle;
    class Heading1Style extends HeadingStyle {
        constructor(options) {
            super(Object.assign({}, options, { id: "Heading1", name: "Heading 1" }));
        }
    }
    exports.Heading1Style = Heading1Style;
    class Heading2Style extends HeadingStyle {
        constructor(options) {
            super(Object.assign({}, options, { id: "Heading2", name: "Heading 2" }));
        }
    }
    exports.Heading2Style = Heading2Style;
    class Heading3Style extends HeadingStyle {
        constructor(options) {
            super(Object.assign({}, options, { id: "Heading3", name: "Heading 3" }));
        }
    }
    exports.Heading3Style = Heading3Style;
    class Heading4Style extends HeadingStyle {
        constructor(options) {
            super(Object.assign({}, options, { id: "Heading4", name: "Heading 4" }));
        }
    }
    exports.Heading4Style = Heading4Style;
    class Heading5Style extends HeadingStyle {
        constructor(options) {
            super(Object.assign({}, options, { id: "Heading5", name: "Heading 5" }));
        }
    }
    exports.Heading5Style = Heading5Style;
    class Heading6Style extends HeadingStyle {
        constructor(options) {
            super(Object.assign({}, options, { id: "Heading6", name: "Heading 6" }));
        }
    }
    exports.Heading6Style = Heading6Style;
    class StrongStyle extends HeadingStyle {
        constructor(options) {
            super(Object.assign({}, options, { id: "Strong", name: "Strong" }));
        }
    }
    exports.StrongStyle = StrongStyle;
    class ListParagraph extends paragraph_style_1.StyleForParagraph {
        constructor(options) {
            super(Object.assign({}, options, { id: "ListParagraph", name: "List Paragraph", basedOn: "Normal", quickFormat: true }));
        }
    }
    exports.ListParagraph = ListParagraph;
    class FootnoteText extends paragraph_style_1.StyleForParagraph {
        constructor(options) {
            super(Object.assign({}, options, { id: "FootnoteText", name: "footnote text", link: "FootnoteTextChar", basedOn: "Normal", uiPriority: 99, semiHidden: true, unhideWhenUsed: true, paragraph: {
                    spacing: {
                        after: 0,
                        line: 240,
                        lineRule: "auto",
                    },
                }, run: {
                    size: 20,
                } }));
        }
    }
    exports.FootnoteText = FootnoteText;
    class FootnoteReferenceStyle extends character_style_1.StyleForCharacter {
        constructor(options) {
            super(Object.assign({}, options, { id: "FootnoteReference", name: "footnote reference", basedOn: "DefaultParagraphFont", semiHidden: true, run: {
                    superScript: true,
                } }));
        }
    }
    exports.FootnoteReferenceStyle = FootnoteReferenceStyle;
    class FootnoteTextChar extends character_style_1.StyleForCharacter {
        constructor(options) {
            super(Object.assign({}, options, { id: "FootnoteTextChar", name: "Footnote Text Char", basedOn: "DefaultParagraphFont", link: "FootnoteText", semiHidden: true, run: {
                    size: 20,
                } }));
        }
    }
    exports.FootnoteTextChar = FootnoteTextChar;
    class HyperlinkStyle extends character_style_1.StyleForCharacter {
        constructor(options) {
            super(Object.assign({}, options, { id: "Hyperlink", name: "Hyperlink", basedOn: "DefaultParagraphFont", run: {
                    color: "0563C1",
                    underline: {
                        type: underline_1.UnderlineType.SINGLE,
                    },
                } }));
        }
    }
    exports.HyperlinkStyle = HyperlinkStyle;


    /***/ }),
    /* 273 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(274));


    /***/ }),
    /* 274 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    (function (BorderStyle) {
        BorderStyle["SINGLE"] = "single";
        BorderStyle["DASH_DOT_STROKED"] = "dashDotStroked";
        BorderStyle["DASHED"] = "dashed";
        BorderStyle["DASH_SMALL_GAP"] = "dashSmallGap";
        BorderStyle["DOT_DASH"] = "dotDash";
        BorderStyle["DOT_DOT_DASH"] = "dotDotDash";
        BorderStyle["DOTTED"] = "dotted";
        BorderStyle["DOUBLE"] = "double";
        BorderStyle["DOUBLE_WAVE"] = "doubleWave";
        BorderStyle["INSET"] = "inset";
        BorderStyle["NIL"] = "nil";
        BorderStyle["NONE"] = "none";
        BorderStyle["OUTSET"] = "outset";
        BorderStyle["THICK"] = "thick";
        BorderStyle["THICK_THIN_LARGE_GAP"] = "thickThinLargeGap";
        BorderStyle["THICK_THIN_MEDIUM_GAP"] = "thickThinMediumGap";
        BorderStyle["THICK_THIN_SMALL_GAP"] = "thickThinSmallGap";
        BorderStyle["THIN_THICK_LARGE_GAP"] = "thinThickLargeGap";
        BorderStyle["THIN_THICK_MEDIUM_GAP"] = "thinThickMediumGap";
        BorderStyle["THIN_THICK_SMALL_GAP"] = "thinThickSmallGap";
        BorderStyle["THIN_THICK_THIN_LARGE_GAP"] = "thinThickThinLargeGap";
        BorderStyle["THIN_THICK_THIN_MEDIUM_GAP"] = "thinThickThinMediumGap";
        BorderStyle["THIN_THICK_THIN_SMALL_GAP"] = "thinThickThinSmallGap";
        BorderStyle["THREE_D_EMBOSS"] = "threeDEmboss";
        BorderStyle["THREE_D_ENGRAVE"] = "threeDEngrave";
        BorderStyle["TRIPLE"] = "triple";
        BorderStyle["WAVE"] = "wave";
    })(exports.BorderStyle || (exports.BorderStyle = {}));


    /***/ }),
    /* 275 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const paragraph_properties_1 = __webpack_require__(107);
    const run_properties_1 = __webpack_require__(108);
    class DocumentDefaults extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:docDefaults");
            this.runPropertiesDefaults = new run_properties_1.RunPropertiesDefaults(options && options.run);
            this.paragraphPropertiesDefaults = new paragraph_properties_1.ParagraphPropertiesDefaults(options && options.paragraph);
            this.root.push(this.runPropertiesDefaults);
            this.root.push(this.paragraphPropertiesDefaults);
        }
    }
    exports.DocumentDefaults = DocumentDefaults;


    /***/ }),
    /* 276 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const table_cell_1 = __webpack_require__(10);
    class TableCellMarginAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { value: "w:w", type: "w:type" };
        }
    }
    class BaseTableCellMargin extends xml_components_1.XmlComponent {
        setProperties(value, type = table_cell_1.WidthType.DXA) {
            this.root.push(new TableCellMarginAttributes({
                type: type,
                value: value,
            }));
        }
    }
    class TableCellMargin extends xml_components_1.IgnoreIfEmptyXmlComponent {
        constructor() {
            super("w:tblCellMar");
        }
        addTopMargin(value, type = table_cell_1.WidthType.DXA) {
            const top = new BaseTableCellMargin("w:top");
            top.setProperties(value, type);
            this.root.push(top);
        }
        addLeftMargin(value, type = table_cell_1.WidthType.DXA) {
            const left = new BaseTableCellMargin("w:left");
            left.setProperties(value, type);
            this.root.push(left);
        }
        addBottomMargin(value, type = table_cell_1.WidthType.DXA) {
            const bottom = new BaseTableCellMargin("w:bottom");
            bottom.setProperties(value, type);
            this.root.push(bottom);
        }
        addRightMargin(value, type = table_cell_1.WidthType.DXA) {
            const right = new BaseTableCellMargin("w:right");
            right.setProperties(value, type);
            this.root.push(right);
        }
    }
    exports.TableCellMargin = TableCellMargin;


    /***/ }),
    /* 277 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const table_cell_1 = __webpack_require__(10);
    class TableWidthAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { type: "w:type", w: "w:w" };
        }
    }
    class PreferredTableWidth extends xml_components_1.XmlComponent {
        constructor(type, w) {
            super("w:tblW");
            const width = type === table_cell_1.WidthType.PERCENTAGE ? `${w}%` : w;
            this.root.push(new TableWidthAttributes({ type: type, w: width }));
        }
    }
    exports.PreferredTableWidth = PreferredTableWidth;


    /***/ }),
    /* 278 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(279));
    __export(__webpack_require__(112));
    __export(__webpack_require__(113));


    /***/ }),
    /* 279 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const table_cell_1 = __webpack_require__(10);
    const table_row_properties_1 = __webpack_require__(112);
    class TableRow extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:tr");
            this.options = options;
            this.properties = new table_row_properties_1.TableRowProperties();
            this.root.push(this.properties);
            for (const child of options.children) {
                this.root.push(child);
            }
            if (options.cantSplit) {
                this.properties.setCantSplit();
            }
            if (options.tableHeader) {
                this.properties.setTableHeader();
            }
            if (options.height) {
                this.properties.setHeight(options.height.height, options.height.rule);
            }
        }
        get CellCount() {
            return this.options.children.length;
        }
        get Children() {
            return this.options.children;
        }
        get cells() {
            return this.root.filter((xmlComponent) => xmlComponent instanceof table_cell_1.TableCell);
        }
        addCellToIndex(cell, index) {
            this.root.splice(index + 1, 0, cell);
        }
        addCellToColumnIndex(cell, columnIndex) {
            const rootIndex = this.columnIndexToRootIndex(columnIndex, true);
            this.addCellToIndex(cell, rootIndex - 1);
        }
        rootIndexToColumnIndex(rootIndex) {
            if (rootIndex < 1 || rootIndex >= this.root.length) {
                throw new Error(`cell 'rootIndex' should between 1 to ${this.root.length - 1}`);
            }
            let colIdx = 0;
            for (let rootIdx = 1; rootIdx < rootIndex; rootIdx++) {
                const cell = this.root[rootIdx];
                colIdx += cell.options.columnSpan || 1;
            }
            return colIdx;
        }
        columnIndexToRootIndex(columnIndex, allowEndNewCell = false) {
            if (columnIndex < 0) {
                throw new Error(`cell 'columnIndex' should not less than zero`);
            }
            let colIdx = 0;
            let rootIdx = 1;
            while (colIdx <= columnIndex) {
                if (rootIdx >= this.root.length) {
                    if (allowEndNewCell) {
                        return this.root.length;
                    }
                    else {
                        throw new Error(`cell 'columnIndex' should not great than ${colIdx - 1}`);
                    }
                }
                const cell = this.root[rootIdx];
                rootIdx += 1;
                colIdx += (cell && cell.options.columnSpan) || 1;
            }
            return rootIdx - 1;
        }
    }
    exports.TableRow = TableRow;


    /***/ }),
    /* 280 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const shortid = __webpack_require__(86);
    const app_properties_1 = __webpack_require__(281);
    const content_types_1 = __webpack_require__(283);
    const core_properties_1 = __webpack_require__(289);
    const document_1 = __webpack_require__(114);
    const section_properties_1 = __webpack_require__(129);
    const footer_wrapper_1 = __webpack_require__(46);
    const footnotes_1 = __webpack_require__(131);
    const header_1 = __webpack_require__(132);
    const header_wrapper_1 = __webpack_require__(49);
    const media_1 = __webpack_require__(50);
    const numbering_1 = __webpack_require__(133);
    const paragraph_1 = __webpack_require__(1);
    const relationships_1 = __webpack_require__(47);
    const relationship_1 = __webpack_require__(48);
    const settings_1 = __webpack_require__(332);
    const styles_1 = __webpack_require__(23);
    const external_styles_factory_1 = __webpack_require__(337);
    const factory_1 = __webpack_require__(338);
    class File {
        constructor(options = {
            creator: "Un-named",
            revision: "1",
            lastModifiedBy: "Un-named",
        }, fileProperties = {}, sections = []) {
            this.currentRelationshipId = 1;
            this.headers = [];
            this.footers = [];
            this.hyperlinkCache = {};
            this.coreProperties = new core_properties_1.CoreProperties(options);
            this.numbering = new numbering_1.Numbering(options.numbering
                ? options.numbering
                : {
                    config: [],
                });
            this.docRelationships = new relationships_1.Relationships();
            this.fileRelationships = new relationships_1.Relationships();
            this.appProperties = new app_properties_1.AppProperties();
            this.footNotes = new footnotes_1.FootNotes();
            this.contentTypes = new content_types_1.ContentTypes();
            this.document = new document_1.Document({ background: options.background || {} });
            this.settings = new settings_1.Settings();
            this.media = fileProperties.template && fileProperties.template.media ? fileProperties.template.media : new media_1.Media();
            if (fileProperties.template) {
                this.currentRelationshipId = fileProperties.template.currentRelationshipId + 1;
            }
            if (fileProperties.template && options.externalStyles) {
                throw Error("can not use both template and external styles");
            }
            if (fileProperties.template) {
                const stylesFactory = new external_styles_factory_1.ExternalStylesFactory();
                this.styles = stylesFactory.newInstance(fileProperties.template.styles);
            }
            else if (options.externalStyles) {
                const stylesFactory = new external_styles_factory_1.ExternalStylesFactory();
                this.styles = stylesFactory.newInstance(options.externalStyles);
            }
            else if (options.styles) {
                const stylesFactory = new factory_1.DefaultStylesFactory();
                const defaultStyles = stylesFactory.newInstance(options.styles.default);
                this.styles = new styles_1.Styles(Object.assign({}, defaultStyles, options.styles));
            }
            else {
                const stylesFactory = new factory_1.DefaultStylesFactory();
                this.styles = new styles_1.Styles(stylesFactory.newInstance());
            }
            this.addDefaultRelationships();
            if (fileProperties.template && fileProperties.template.headers) {
                for (const templateHeader of fileProperties.template.headers) {
                    this.addHeaderToDocument(templateHeader.header, templateHeader.type);
                }
            }
            if (fileProperties.template && fileProperties.template.footers) {
                for (const templateFooter of fileProperties.template.footers) {
                    this.addFooterToDocument(templateFooter.footer, templateFooter.type);
                }
            }
            for (const section of sections) {
                this.document.Body.addSection(section.properties ? section.properties : {});
                for (const child of section.children) {
                    if (child instanceof paragraph_1.HyperlinkRef) {
                        const hyperlink = this.hyperlinkCache[child.id];
                        this.document.add(hyperlink);
                        continue;
                    }
                    this.document.add(child);
                }
            }
            if (options.footnotes) {
                for (const paragraph of options.footnotes) {
                    this.footNotes.createFootNote(paragraph);
                }
            }
            if (options.hyperlinks) {
                const cache = {};
                for (const key in options.hyperlinks) {
                    if (!options.hyperlinks[key]) {
                        continue;
                    }
                    const hyperlinkRef = options.hyperlinks[key];
                    const hyperlink = hyperlinkRef.type === paragraph_1.HyperlinkType.EXTERNAL
                        ? this.createHyperlink(hyperlinkRef.link, hyperlinkRef.text)
                        : this.createInternalHyperLink(key, hyperlinkRef.text);
                    cache[key] = hyperlink;
                }
                this.hyperlinkCache = cache;
            }
            if (options.features) {
                if (options.features.trackRevisions) {
                    this.settings.addTrackRevisions();
                }
            }
        }
        addSection({ headers = { default: new header_1.Header() }, footers = { default: new header_1.Header() }, margins = {}, size = {}, properties, children, }) {
            this.document.Body.addSection(Object.assign({}, properties, { headers: {
                    default: headers.default ? this.createHeader(headers.default) : this.createHeader(new header_1.Header()),
                    first: headers.first ? this.createHeader(headers.first) : undefined,
                    even: headers.even ? this.createHeader(headers.even) : undefined,
                }, footers: {
                    default: footers.default ? this.createFooter(footers.default) : this.createFooter(new header_1.Footer()),
                    first: footers.first ? this.createFooter(footers.first) : undefined,
                    even: footers.even ? this.createFooter(footers.even) : undefined,
                } }, margins, size));
            for (const child of children) {
                if (child instanceof paragraph_1.HyperlinkRef) {
                    const hyperlink = this.hyperlinkCache[child.id];
                    this.document.add(hyperlink);
                    continue;
                }
                this.document.add(child);
            }
        }
        verifyUpdateFields() {
            if (this.document.getTablesOfContents().length) {
                this.settings.addUpdateFields();
            }
        }
        createHyperlink(link, text = link) {
            const hyperlink = new paragraph_1.Hyperlink(text, shortid.generate().toLowerCase());
            this.docRelationships.createRelationship(hyperlink.linkId, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", link, relationship_1.TargetModeType.EXTERNAL);
            return hyperlink;
        }
        createInternalHyperLink(anchor, text = anchor) {
            const hyperlink = new paragraph_1.Hyperlink(text, shortid.generate().toLowerCase(), anchor);
            return hyperlink;
        }
        createHeader(header) {
            const wrapper = new header_wrapper_1.HeaderWrapper(this.media, this.currentRelationshipId++);
            for (const child of header.options.children) {
                wrapper.add(child);
            }
            this.addHeaderToDocument(wrapper);
            return wrapper;
        }
        createFooter(footer) {
            const wrapper = new footer_wrapper_1.FooterWrapper(this.media, this.currentRelationshipId++);
            for (const child of footer.options.children) {
                wrapper.add(child);
            }
            this.addFooterToDocument(wrapper);
            return wrapper;
        }
        addHeaderToDocument(header, type = section_properties_1.HeaderReferenceType.DEFAULT) {
            this.headers.push({ header, type });
            this.docRelationships.createRelationship(header.Header.ReferenceId, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/header", `header${this.headers.length}.xml`);
            this.contentTypes.addHeader(this.headers.length);
        }
        addFooterToDocument(footer, type = section_properties_1.FooterReferenceType.DEFAULT) {
            this.footers.push({ footer, type });
            this.docRelationships.createRelationship(footer.Footer.ReferenceId, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer", `footer${this.footers.length}.xml`);
            this.contentTypes.addFooter(this.footers.length);
        }
        addDefaultRelationships() {
            this.fileRelationships.createRelationship(1, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument", "word/document.xml");
            this.fileRelationships.createRelationship(2, "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties", "docProps/core.xml");
            this.fileRelationships.createRelationship(3, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties", "docProps/app.xml");
            this.docRelationships.createRelationship(this.currentRelationshipId++, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles", "styles.xml");
            this.docRelationships.createRelationship(this.currentRelationshipId++, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering", "numbering.xml");
            this.docRelationships.createRelationship(this.currentRelationshipId++, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footnotes", "footnotes.xml");
            this.docRelationships.createRelationship(this.currentRelationshipId++, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings", "settings.xml");
        }
        get Document() {
            return this.document;
        }
        get Styles() {
            return this.styles;
        }
        get CoreProperties() {
            return this.coreProperties;
        }
        get Numbering() {
            return this.numbering;
        }
        get Media() {
            return this.media;
        }
        get DocumentRelationships() {
            return this.docRelationships;
        }
        get FileRelationships() {
            return this.fileRelationships;
        }
        get Headers() {
            return this.headers.map((item) => item.header);
        }
        get Footers() {
            return this.footers.map((item) => item.footer);
        }
        get ContentTypes() {
            return this.contentTypes;
        }
        get AppProperties() {
            return this.appProperties;
        }
        get FootNotes() {
            return this.footNotes;
        }
        get Settings() {
            return this.settings;
        }
        get HyperlinkCache() {
            return this.hyperlinkCache;
        }
    }
    exports.File = File;


    /***/ }),
    /* 281 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const app_properties_attributes_1 = __webpack_require__(282);
    class AppProperties extends xml_components_1.XmlComponent {
        constructor() {
            super("Properties");
            this.root.push(new app_properties_attributes_1.AppPropertiesAttributes({
                xmlns: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
                vt: "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
            }));
        }
    }
    exports.AppProperties = AppProperties;


    /***/ }),
    /* 282 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class AppPropertiesAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                xmlns: "xmlns",
                vt: "xmlns:vt",
            };
        }
    }
    exports.AppPropertiesAttributes = AppPropertiesAttributes;


    /***/ }),
    /* 283 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const content_types_attributes_1 = __webpack_require__(284);
    const default_1 = __webpack_require__(285);
    const override_1 = __webpack_require__(287);
    class ContentTypes extends xml_components_1.XmlComponent {
        constructor() {
            super("Types");
            this.root.push(new content_types_attributes_1.ContentTypeAttributes({
                xmlns: "http://schemas.openxmlformats.org/package/2006/content-types",
            }));
            this.root.push(new default_1.Default("image/png", "png"));
            this.root.push(new default_1.Default("image/jpeg", "jpeg"));
            this.root.push(new default_1.Default("image/jpeg", "jpg"));
            this.root.push(new default_1.Default("image/bmp", "bmp"));
            this.root.push(new default_1.Default("image/gif", "gif"));
            this.root.push(new default_1.Default("application/vnd.openxmlformats-package.relationships+xml", "rels"));
            this.root.push(new default_1.Default("application/xml", "xml"));
            this.root.push(new override_1.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml", "/word/document.xml"));
            this.root.push(new override_1.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml", "/word/styles.xml"));
            this.root.push(new override_1.Override("application/vnd.openxmlformats-package.core-properties+xml", "/docProps/core.xml"));
            this.root.push(new override_1.Override("application/vnd.openxmlformats-officedocument.extended-properties+xml", "/docProps/app.xml"));
            this.root.push(new override_1.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml", "/word/numbering.xml"));
            this.root.push(new override_1.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml", "/word/footnotes.xml"));
            this.root.push(new override_1.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml", "/word/settings.xml"));
        }
        addFooter(index) {
            this.root.push(new override_1.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml", `/word/footer${index}.xml`));
        }
        addHeader(index) {
            this.root.push(new override_1.Override("application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml", `/word/header${index}.xml`));
        }
    }
    exports.ContentTypes = ContentTypes;


    /***/ }),
    /* 284 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class ContentTypeAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                xmlns: "xmlns",
            };
        }
    }
    exports.ContentTypeAttributes = ContentTypeAttributes;


    /***/ }),
    /* 285 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const default_attributes_1 = __webpack_require__(286);
    class Default extends xml_components_1.XmlComponent {
        constructor(contentType, extension) {
            super("Default");
            this.root.push(new default_attributes_1.DefaultAttributes({
                contentType: contentType,
                extension: extension,
            }));
        }
    }
    exports.Default = Default;


    /***/ }),
    /* 286 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class DefaultAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                contentType: "ContentType",
                extension: "Extension",
            };
        }
    }
    exports.DefaultAttributes = DefaultAttributes;


    /***/ }),
    /* 287 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const override_attributes_1 = __webpack_require__(288);
    class Override extends xml_components_1.XmlComponent {
        constructor(contentType, partName) {
            super("Override");
            this.root.push(new override_attributes_1.OverrideAttributes({
                contentType: contentType,
                partName: partName,
            }));
        }
    }
    exports.Override = Override;


    /***/ }),
    /* 288 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class OverrideAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                contentType: "ContentType",
                partName: "PartName",
            };
        }
    }
    exports.OverrideAttributes = OverrideAttributes;


    /***/ }),
    /* 289 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(290));


    /***/ }),
    /* 290 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const document_attributes_1 = __webpack_require__(11);
    const components_1 = __webpack_require__(291);
    class CoreProperties extends xml_components_1.XmlComponent {
        constructor(options) {
            super("cp:coreProperties");
            this.root.push(new document_attributes_1.DocumentAttributes({
                cp: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
                dc: "http://purl.org/dc/elements/1.1/",
                dcterms: "http://purl.org/dc/terms/",
                dcmitype: "http://purl.org/dc/dcmitype/",
                xsi: "http://www.w3.org/2001/XMLSchema-instance",
            }));
            if (options.title) {
                this.root.push(new components_1.Title(options.title));
            }
            if (options.subject) {
                this.root.push(new components_1.Subject(options.subject));
            }
            if (options.creator) {
                this.root.push(new components_1.Creator(options.creator));
            }
            if (options.keywords) {
                this.root.push(new components_1.Keywords(options.keywords));
            }
            if (options.description) {
                this.root.push(new components_1.Description(options.description));
            }
            if (options.lastModifiedBy) {
                this.root.push(new components_1.LastModifiedBy(options.lastModifiedBy));
            }
            if (options.revision) {
                this.root.push(new components_1.Revision(options.revision));
            }
            this.root.push(new components_1.Created());
            this.root.push(new components_1.Modified());
        }
    }
    exports.CoreProperties = CoreProperties;


    /***/ }),
    /* 291 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const document_attributes_1 = __webpack_require__(11);
    class Title extends xml_components_1.XmlComponent {
        constructor(value) {
            super("dc:title");
            this.root.push(value);
        }
    }
    exports.Title = Title;
    class Subject extends xml_components_1.XmlComponent {
        constructor(value) {
            super("dc:subject");
            this.root.push(value);
        }
    }
    exports.Subject = Subject;
    class Creator extends xml_components_1.XmlComponent {
        constructor(value) {
            super("dc:creator");
            this.root.push(value);
        }
    }
    exports.Creator = Creator;
    class Keywords extends xml_components_1.XmlComponent {
        constructor(value) {
            super("cp:keywords");
            this.root.push(value);
        }
    }
    exports.Keywords = Keywords;
    class Description extends xml_components_1.XmlComponent {
        constructor(value) {
            super("dc:description");
            this.root.push(value);
        }
    }
    exports.Description = Description;
    class LastModifiedBy extends xml_components_1.XmlComponent {
        constructor(value) {
            super("cp:lastModifiedBy");
            this.root.push(value);
        }
    }
    exports.LastModifiedBy = LastModifiedBy;
    class Revision extends xml_components_1.XmlComponent {
        constructor(value) {
            super("cp:revision");
            this.root.push(value);
        }
    }
    exports.Revision = Revision;
    class DateComponent extends xml_components_1.XmlComponent {
        getCurrentDate() {
            const date = new Date();
            const year = date.getFullYear();
            const month = ("0" + (date.getMonth() + 1)).slice(-2);
            const day = ("0" + date.getDate()).slice(-2);
            const hours = ("0" + date.getHours()).slice(-2);
            const minutes = ("0" + date.getMinutes()).slice(-2);
            const seconds = ("0" + date.getSeconds()).slice(-2);
            return year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds + "Z";
        }
    }
    exports.DateComponent = DateComponent;
    class Created extends DateComponent {
        constructor() {
            super("dcterms:created");
            this.root.push(new document_attributes_1.DocumentAttributes({
                type: "dcterms:W3CDTF",
            }));
            this.root.push(this.getCurrentDate());
        }
    }
    exports.Created = Created;
    class Modified extends DateComponent {
        constructor() {
            super("dcterms:modified");
            this.root.push(new document_attributes_1.DocumentAttributes({
                type: "dcterms:W3CDTF",
            }));
            this.root.push(this.getCurrentDate());
        }
    }
    exports.Modified = Modified;


    /***/ }),
    /* 292 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const body_1 = __webpack_require__(115);
    const document_attributes_1 = __webpack_require__(11);
    const document_background_1 = __webpack_require__(130);
    class Document extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:document");
            this.root.push(new document_attributes_1.DocumentAttributes({
                wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",
                mc: "http://schemas.openxmlformats.org/markup-compatibility/2006",
                o: "urn:schemas-microsoft-com:office:office",
                r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
                m: "http://schemas.openxmlformats.org/officeDocument/2006/math",
                v: "urn:schemas-microsoft-com:vml",
                wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",
                wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",
                w10: "urn:schemas-microsoft-com:office:word",
                w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main",
                w14: "http://schemas.microsoft.com/office/word/2010/wordml",
                w15: "http://schemas.microsoft.com/office/word/2012/wordml",
                wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",
                wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk",
                wne: "http://schemas.microsoft.com/office/word/2006/wordml",
                wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape",
                Ignorable: "w14 w15 wp14",
            }));
            this.body = new body_1.Body();
            this.root.push(new document_background_1.DocumentBackground(options.background));
            this.root.push(this.body);
        }
        add(item) {
            this.body.push(item);
            return this;
        }
        get Body() {
            return this.body;
        }
        getTablesOfContents() {
            return this.body.getTablesOfContents();
        }
    }
    exports.Document = Document;


    /***/ }),
    /* 293 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const __1 = __webpack_require__(12);
    const section_properties_1 = __webpack_require__(116);
    class Body extends xml_components_1.XmlComponent {
        constructor() {
            super("w:body");
            this.sections = [];
        }
        addSection(options) {
            const currentSection = this.sections.pop();
            this.root.push(this.createSectionParagraph(currentSection));
            this.sections.push(new section_properties_1.SectionProperties(options));
        }
        prepForXml(file) {
            if (this.sections.length === 1) {
                this.root.splice(0, 1);
                this.root.push(this.sections.pop());
            }
            return super.prepForXml(file);
        }
        push(component) {
            this.root.push(component);
        }
        getTablesOfContents() {
            return this.root.filter((child) => child instanceof __1.TableOfContents);
        }
        createSectionParagraph(section) {
            const paragraph = new __1.Paragraph({});
            const properties = new __1.ParagraphProperties({});
            properties.push(section);
            paragraph.addChildElement(properties);
            return paragraph;
        }
    }
    exports.Body = Body;


    /***/ }),
    /* 294 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const columns_attributes_1 = __webpack_require__(295);
    class Columns extends xml_components_1.XmlComponent {
        constructor(space, num) {
            super("w:cols");
            this.root.push(new columns_attributes_1.ColumnsAttributes({
                space: space,
                num: num,
            }));
        }
    }
    exports.Columns = Columns;


    /***/ }),
    /* 295 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class ColumnsAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                space: "w:space",
                num: "w:num",
            };
        }
    }
    exports.ColumnsAttributes = ColumnsAttributes;


    /***/ }),
    /* 296 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const doc_grid_attributes_1 = __webpack_require__(297);
    class DocumentGrid extends xml_components_1.XmlComponent {
        constructor(linePitch) {
            super("w:docGrid");
            this.root.push(new doc_grid_attributes_1.DocGridAttributes({
                linePitch: linePitch,
            }));
        }
    }
    exports.DocumentGrid = DocumentGrid;


    /***/ }),
    /* 297 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class DocGridAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                linePitch: "w:linePitch",
            };
        }
    }
    exports.DocGridAttributes = DocGridAttributes;


    /***/ }),
    /* 298 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (LineNumberRestartFormat) {
        LineNumberRestartFormat["CONTINUOUS"] = "continuous";
        LineNumberRestartFormat["NEW_SECTION"] = "newSection";
        LineNumberRestartFormat["NEW_PAGE"] = "newPage";
    })(exports.LineNumberRestartFormat || (exports.LineNumberRestartFormat = {}));
    class LineNumberAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                lineNumberCountBy: "w:countBy",
                lineNumberStart: "w:start",
                lineNumberRestart: "w:restart",
                lineNumberDistance: "w:distance",
            };
        }
    }
    exports.LineNumberAttributes = LineNumberAttributes;
    class LineNumberType extends xml_components_1.XmlComponent {
        constructor(countBy, start, restart, dist) {
            super("w:lnNumType");
            this.root.push(new LineNumberAttributes({
                lineNumberCountBy: countBy,
                lineNumberStart: start,
                lineNumberRestart: restart,
                lineNumberDistance: dist,
            }));
        }
    }
    exports.LineNumberType = LineNumberType;


    /***/ }),
    /* 299 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (PageBorderDisplay) {
        PageBorderDisplay["ALL_PAGES"] = "allPages";
        PageBorderDisplay["FIRST_PAGE"] = "firstPage";
        PageBorderDisplay["NOT_FIRST_PAGE"] = "notFirstPage";
    })(exports.PageBorderDisplay || (exports.PageBorderDisplay = {}));
    (function (PageBorderOffsetFrom) {
        PageBorderOffsetFrom["PAGE"] = "page";
        PageBorderOffsetFrom["TEXT"] = "text";
    })(exports.PageBorderOffsetFrom || (exports.PageBorderOffsetFrom = {}));
    (function (PageBorderZOrder) {
        PageBorderZOrder["BACK"] = "back";
        PageBorderZOrder["FRONT"] = "front";
    })(exports.PageBorderZOrder || (exports.PageBorderZOrder = {}));
    class PageBordeAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                style: "w:val",
                size: "w:size",
                color: "w:color",
                space: "w:space",
            };
        }
    }
    class PageBorder extends xml_components_1.XmlComponent {
        constructor(key, options) {
            super(key);
            this.root.push(new PageBordeAttributes(options));
        }
    }
    class PageBordersAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                display: "w:display",
                offsetFrom: "w:offsetFrom",
                zOrder: "w:zOrder",
            };
        }
    }
    class PageBorders extends xml_components_1.IgnoreIfEmptyXmlComponent {
        constructor(options) {
            super("w:pgBorders");
            if (!options) {
                return;
            }
            let pageBordersAttributes = {};
            if (options.pageBorders) {
                pageBordersAttributes = {
                    display: options.pageBorders.display,
                    offsetFrom: options.pageBorders.offsetFrom,
                    zOrder: options.pageBorders.zOrder,
                };
            }
            this.root.push(new PageBordersAttributes(pageBordersAttributes));
            if (options.pageBorderTop) {
                this.root.push(new PageBorder("w:top", options.pageBorderTop));
            }
            if (options.pageBorderRight) {
                this.root.push(new PageBorder("w:right", options.pageBorderRight));
            }
            if (options.pageBorderBottom) {
                this.root.push(new PageBorder("w:bottom", options.pageBorderBottom));
            }
            if (options.pageBorderLeft) {
                this.root.push(new PageBorder("w:left", options.pageBorderLeft));
            }
        }
    }
    exports.PageBorders = PageBorders;


    /***/ }),
    /* 300 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const page_margin_attributes_1 = __webpack_require__(301);
    class PageMargin extends xml_components_1.XmlComponent {
        constructor(top, right, bottom, left, header, footer, gutter, mirror) {
            super("w:pgMar");
            this.root.push(new page_margin_attributes_1.PageMarginAttributes({
                top: top,
                right: right,
                bottom: bottom,
                left: left,
                header: header,
                footer: footer,
                gutter: gutter,
                mirror: mirror,
            }));
        }
    }
    exports.PageMargin = PageMargin;


    /***/ }),
    /* 301 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class PageMarginAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                top: "w:top",
                right: "w:right",
                bottom: "w:bottom",
                left: "w:left",
                header: "w:header",
                footer: "w:footer",
                gutter: "w:gutter",
                mirror: "w:mirrorMargins",
            };
        }
    }
    exports.PageMarginAttributes = PageMarginAttributes;


    /***/ }),
    /* 302 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    (function (PageNumberFormat) {
        PageNumberFormat["CARDINAL_TEXT"] = "cardinalText";
        PageNumberFormat["DECIMAL"] = "decimal";
        PageNumberFormat["DECIMAL_ENCLOSED_CIRCLE"] = "decimalEnclosedCircle";
        PageNumberFormat["DECIMAL_ENCLOSED_FULL_STOP"] = "decimalEnclosedFullstop";
        PageNumberFormat["DECIMAL_ENCLOSED_PAREN"] = "decimalEnclosedParen";
        PageNumberFormat["DECIMAL_ZERO"] = "decimalZero";
        PageNumberFormat["LOWER_LETTER"] = "lowerLetter";
        PageNumberFormat["LOWER_ROMAN"] = "lowerRoman";
        PageNumberFormat["NONE"] = "none";
        PageNumberFormat["ORDINAL_TEXT"] = "ordinalText";
        PageNumberFormat["UPPER_LETTER"] = "upperLetter";
        PageNumberFormat["UPPER_ROMAN"] = "upperRoman";
        PageNumberFormat["DECIMAL_FULL_WIDTH"] = "decimalFullWidth";
    })(exports.PageNumberFormat || (exports.PageNumberFormat = {}));
    class PageNumberTypeAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                pageNumberStart: "w:start",
                pageNumberFormatType: "w:fmt",
            };
        }
    }
    exports.PageNumberTypeAttributes = PageNumberTypeAttributes;
    class PageNumberType extends xml_components_1.XmlComponent {
        constructor(start, numberFormat) {
            super("w:pgNumType");
            this.root.push(new PageNumberTypeAttributes({
                pageNumberStart: start,
                pageNumberFormatType: numberFormat,
            }));
        }
    }
    exports.PageNumberType = PageNumberType;


    /***/ }),
    /* 303 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const title_page_attributes_1 = __webpack_require__(304);
    class TitlePage extends xml_components_1.XmlComponent {
        constructor() {
            super("w:titlePg");
            this.root.push(new title_page_attributes_1.TitlePageAttributes({
                value: "1",
            }));
        }
    }
    exports.TitlePage = TitlePage;


    /***/ }),
    /* 304 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class TitlePageAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                value: "w:val",
            };
        }
    }
    exports.TitlePageAttributes = TitlePageAttributes;


    /***/ }),
    /* 305 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const vertical_align_attributes_1 = __webpack_require__(128);
    (function (SectionVerticalAlignValue) {
        SectionVerticalAlignValue["BOTH"] = "both";
        SectionVerticalAlignValue["BOTTOM"] = "bottom";
        SectionVerticalAlignValue["CENTER"] = "center";
        SectionVerticalAlignValue["TOP"] = "top";
    })(exports.SectionVerticalAlignValue || (exports.SectionVerticalAlignValue = {}));
    class SectionVerticalAlign extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:vAlign");
            this.root.push(new vertical_align_attributes_1.SectionVerticalAlignAttributes({ verticalAlign: value }));
        }
    }
    exports.SectionVerticalAlign = SectionVerticalAlign;


    /***/ }),
    /* 306 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(126));
    __export(__webpack_require__(45));


    /***/ }),
    /* 307 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class DocumentBackgroundAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                color: "w:color",
                themeColor: "w:themeColor",
                themeShade: "w:themeShade",
                themeTint: "w:themeTint",
            };
        }
    }
    exports.DocumentBackgroundAttributes = DocumentBackgroundAttributes;
    class DocumentBackground extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:background");
            this.root.push(new DocumentBackgroundAttributes({
                color: options.color ? options.color : "FFFFFF",
                themeColor: options.themeColor,
                themeShade: options.themeShade,
                themeTint: options.themeTint,
            }));
        }
    }
    exports.DocumentBackground = DocumentBackground;


    /***/ }),
    /* 308 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const footer_attributes_1 = __webpack_require__(309);
    class Footer extends xml_components_1.InitializableXmlComponent {
        constructor(referenceNumber, initContent) {
            super("w:ftr", initContent);
            this.refId = referenceNumber;
            if (!initContent) {
                this.root.push(new footer_attributes_1.FooterAttributes({
                    wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",
                    mc: "http://schemas.openxmlformats.org/markup-compatibility/2006",
                    o: "urn:schemas-microsoft-com:office:office",
                    r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
                    m: "http://schemas.openxmlformats.org/officeDocument/2006/math",
                    v: "urn:schemas-microsoft-com:vml",
                    wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",
                    wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",
                    w10: "urn:schemas-microsoft-com:office:word",
                    w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main",
                    w14: "http://schemas.microsoft.com/office/word/2010/wordml",
                    w15: "http://schemas.microsoft.com/office/word/2012/wordml",
                    wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",
                    wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk",
                    wne: "http://schemas.microsoft.com/office/word/2006/wordml",
                    wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape",
                }));
            }
        }
        get ReferenceId() {
            return this.refId;
        }
        add(item) {
            this.root.push(item);
        }
    }
    exports.Footer = Footer;


    /***/ }),
    /* 309 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class FooterAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                wpc: "xmlns:wpc",
                mc: "xmlns:mc",
                o: "xmlns:o",
                r: "xmlns:r",
                m: "xmlns:m",
                v: "xmlns:v",
                wp14: "xmlns:wp14",
                wp: "xmlns:wp",
                w10: "xmlns:w10",
                w: "xmlns:w",
                w14: "xmlns:w14",
                w15: "xmlns:w15",
                wpg: "xmlns:wpg",
                wpi: "xmlns:wpi",
                wne: "xmlns:wne",
                wps: "xmlns:wps",
                cp: "xmlns:cp",
                dc: "xmlns:dc",
                dcterms: "xmlns:dcterms",
                dcmitype: "xmlns:dcmitype",
                xsi: "xmlns:xsi",
                type: "xsi:type",
            };
        }
    }
    exports.FooterAttributes = FooterAttributes;


    /***/ }),
    /* 310 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const attributes_1 = __webpack_require__(311);
    const relationship_1 = __webpack_require__(48);
    class Relationships extends xml_components_1.XmlComponent {
        constructor() {
            super("Relationships");
            this.root.push(new attributes_1.RelationshipsAttributes({
                xmlns: "http://schemas.openxmlformats.org/package/2006/relationships",
            }));
        }
        addRelationship(relationship) {
            this.root.push(relationship);
        }
        createRelationship(id, type, target, targetMode) {
            const relationship = new relationship_1.Relationship(`rId${id}`, type, target, targetMode);
            this.addRelationship(relationship);
            return relationship;
        }
        get RelationshipCount() {
            return this.root.length - 1;
        }
    }
    exports.Relationships = Relationships;


    /***/ }),
    /* 311 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class RelationshipsAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                xmlns: "xmlns",
            };
        }
    }
    exports.RelationshipsAttributes = RelationshipsAttributes;


    /***/ }),
    /* 312 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class RelationshipAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                id: "Id",
                type: "Type",
                target: "Target",
                targetMode: "TargetMode",
            };
        }
    }
    exports.RelationshipAttributes = RelationshipAttributes;


    /***/ }),
    /* 313 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const paragraph_1 = __webpack_require__(1);
    const footnote_1 = __webpack_require__(314);
    const continuation_seperator_run_1 = __webpack_require__(318);
    const seperator_run_1 = __webpack_require__(320);
    const footnotes_attributes_1 = __webpack_require__(322);
    class FootNotes extends xml_components_1.XmlComponent {
        constructor() {
            super("w:footnotes");
            this.currentId = 1;
            this.root.push(new footnotes_attributes_1.FootnotesAttributes({
                wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",
                mc: "http://schemas.openxmlformats.org/markup-compatibility/2006",
                o: "urn:schemas-microsoft-com:office:office",
                r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
                m: "http://schemas.openxmlformats.org/officeDocument/2006/math",
                v: "urn:schemas-microsoft-com:vml",
                wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",
                wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",
                w10: "urn:schemas-microsoft-com:office:word",
                w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main",
                w14: "http://schemas.microsoft.com/office/word/2010/wordml",
                w15: "http://schemas.microsoft.com/office/word/2012/wordml",
                wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",
                wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk",
                wne: "http://schemas.microsoft.com/office/word/2006/wordml",
                wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape",
                Ignorable: "w14 w15 wp14",
            }));
            const begin = new footnote_1.Footnote(-1, footnote_1.FootnoteType.SEPERATOR);
            begin.add(new paragraph_1.Paragraph({
                spacing: {
                    after: 0,
                    line: 240,
                    lineRule: "auto",
                },
                children: [new seperator_run_1.SeperatorRun()],
            }));
            this.root.push(begin);
            const spacing = new footnote_1.Footnote(0, footnote_1.FootnoteType.CONTINUATION_SEPERATOR);
            spacing.add(new paragraph_1.Paragraph({
                spacing: {
                    after: 0,
                    line: 240,
                    lineRule: "auto",
                },
                children: [new continuation_seperator_run_1.ContinuationSeperatorRun()],
            }));
            this.root.push(spacing);
        }
        createFootNote(paragraph) {
            const footnote = new footnote_1.Footnote(this.currentId);
            footnote.add(paragraph);
            this.root.push(footnote);
            this.currentId++;
        }
    }
    exports.FootNotes = FootNotes;


    /***/ }),
    /* 314 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const footnote_attributes_1 = __webpack_require__(315);
    const footnote_ref_run_1 = __webpack_require__(316);
    (function (FootnoteType) {
        FootnoteType["SEPERATOR"] = "separator";
        FootnoteType["CONTINUATION_SEPERATOR"] = "continuationSeparator";
    })(exports.FootnoteType || (exports.FootnoteType = {}));
    class Footnote extends xml_components_1.XmlComponent {
        constructor(id, type) {
            super("w:footnote");
            this.root.push(new footnote_attributes_1.FootnoteAttributes({
                type: type,
                id: id,
            }));
        }
        add(paragraph) {
            paragraph.addRunToFront(new footnote_ref_run_1.FootnoteRefRun());
            this.root.push(paragraph);
        }
    }
    exports.Footnote = Footnote;


    /***/ }),
    /* 315 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class FootnoteAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                type: "w:type",
                id: "w:id",
            };
        }
    }
    exports.FootnoteAttributes = FootnoteAttributes;


    /***/ }),
    /* 316 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const paragraph_1 = __webpack_require__(1);
    const footnote_ref_1 = __webpack_require__(317);
    class FootnoteRefRun extends paragraph_1.Run {
        constructor() {
            super({
                style: "FootnoteReference",
            });
            this.root.push(new footnote_ref_1.FootnoteRef());
        }
    }
    exports.FootnoteRefRun = FootnoteRefRun;


    /***/ }),
    /* 317 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class FootnoteRef extends xml_components_1.XmlComponent {
        constructor() {
            super("w:footnoteRef");
        }
    }
    exports.FootnoteRef = FootnoteRef;


    /***/ }),
    /* 318 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const paragraph_1 = __webpack_require__(1);
    const continuation_seperator_1 = __webpack_require__(319);
    class ContinuationSeperatorRun extends paragraph_1.Run {
        constructor() {
            super({});
            this.root.push(new continuation_seperator_1.ContinuationSeperator());
        }
    }
    exports.ContinuationSeperatorRun = ContinuationSeperatorRun;


    /***/ }),
    /* 319 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class ContinuationSeperator extends xml_components_1.XmlComponent {
        constructor() {
            super("w:continuationSeparator");
        }
    }
    exports.ContinuationSeperator = ContinuationSeperator;


    /***/ }),
    /* 320 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const paragraph_1 = __webpack_require__(1);
    const seperator_1 = __webpack_require__(321);
    class SeperatorRun extends paragraph_1.Run {
        constructor() {
            super({});
            this.root.push(new seperator_1.Seperator());
        }
    }
    exports.SeperatorRun = SeperatorRun;


    /***/ }),
    /* 321 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class Seperator extends xml_components_1.XmlComponent {
        constructor() {
            super("w:separator");
        }
    }
    exports.Seperator = Seperator;


    /***/ }),
    /* 322 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class FootnotesAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                wpc: "xmlns:wpc",
                mc: "xmlns:mc",
                o: "xmlns:o",
                r: "xmlns:r",
                m: "xmlns:m",
                v: "xmlns:v",
                wp14: "xmlns:wp14",
                wp: "xmlns:wp",
                w10: "xmlns:w10",
                w: "xmlns:w",
                w14: "xmlns:w14",
                w15: "xmlns:w15",
                wpg: "xmlns:wpg",
                wpi: "xmlns:wpi",
                wne: "xmlns:wne",
                wps: "xmlns:wps",
                Ignorable: "mc:Ignorable",
            };
        }
    }
    exports.FootnotesAttributes = FootnotesAttributes;


    /***/ }),
    /* 323 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(324));


    /***/ }),
    /* 324 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(325));


    /***/ }),
    /* 325 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const run_1 = __webpack_require__(3);
    const style_1 = __webpack_require__(70);
    const xml_components_1 = __webpack_require__(0);
    class FootNoteReferenceRunAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                id: "w:id",
            };
        }
    }
    exports.FootNoteReferenceRunAttributes = FootNoteReferenceRunAttributes;
    class FootnoteReference extends xml_components_1.XmlComponent {
        constructor(id) {
            super("w:footnoteReference");
            this.root.push(new FootNoteReferenceRunAttributes({
                id: id,
            }));
        }
    }
    exports.FootnoteReference = FootnoteReference;
    class FootnoteReferenceRun extends run_1.Run {
        constructor(id) {
            super({});
            this.properties.push(new style_1.Style("FootnoteReference"));
            this.root.push(new FootnoteReference(id));
        }
    }
    exports.FootnoteReferenceRun = FootnoteReferenceRun;


    /***/ }),
    /* 326 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const header_attributes_1 = __webpack_require__(327);
    class Header extends xml_components_1.InitializableXmlComponent {
        constructor(referenceNumber, initContent) {
            super("w:hdr", initContent);
            this.refId = referenceNumber;
            if (!initContent) {
                this.root.push(new header_attributes_1.HeaderAttributes({
                    wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",
                    mc: "http://schemas.openxmlformats.org/markup-compatibility/2006",
                    o: "urn:schemas-microsoft-com:office:office",
                    r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
                    m: "http://schemas.openxmlformats.org/officeDocument/2006/math",
                    v: "urn:schemas-microsoft-com:vml",
                    wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",
                    wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",
                    w10: "urn:schemas-microsoft-com:office:word",
                    w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main",
                    w14: "http://schemas.microsoft.com/office/word/2010/wordml",
                    w15: "http://schemas.microsoft.com/office/word/2012/wordml",
                    wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",
                    wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk",
                    wne: "http://schemas.microsoft.com/office/word/2006/wordml",
                    wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape",
                    cx: "http://schemas.microsoft.com/office/drawing/2014/chartex",
                    cx1: "http://schemas.microsoft.com/office/drawing/2015/9/8/chartex",
                    cx2: "http://schemas.microsoft.com/office/drawing/2015/10/21/chartex",
                    cx3: "http://schemas.microsoft.com/office/drawing/2016/5/9/chartex",
                    cx4: "http://schemas.microsoft.com/office/drawing/2016/5/10/chartex",
                    cx5: "http://schemas.microsoft.com/office/drawing/2016/5/11/chartex",
                    cx6: "http://schemas.microsoft.com/office/drawing/2016/5/12/chartex",
                    cx7: "http://schemas.microsoft.com/office/drawing/2016/5/13/chartex",
                    cx8: "http://schemas.microsoft.com/office/drawing/2016/5/14/chartex",
                    w16cid: "http://schemas.microsoft.com/office/word/2016/wordml/cid",
                    w16se: "http://schemas.microsoft.com/office/word/2015/wordml/symex",
                }));
            }
        }
        get ReferenceId() {
            return this.refId;
        }
        add(item) {
            this.root.push(item);
        }
    }
    exports.Header = Header;


    /***/ }),
    /* 327 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class HeaderAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                wpc: "xmlns:wpc",
                mc: "xmlns:mc",
                o: "xmlns:o",
                r: "xmlns:r",
                m: "xmlns:m",
                v: "xmlns:v",
                wp14: "xmlns:wp14",
                wp: "xmlns:wp",
                w10: "xmlns:w10",
                w: "xmlns:w",
                w14: "xmlns:w14",
                w15: "xmlns:w15",
                wpg: "xmlns:wpg",
                wpi: "xmlns:wpi",
                wne: "xmlns:wne",
                wps: "xmlns:wps",
                cp: "xmlns:cp",
                dc: "xmlns:dc",
                dcterms: "xmlns:dcterms",
                dcmitype: "xmlns:dcmitype",
                xsi: "xmlns:xsi",
                type: "xsi:type",
                cx: "xmlns:cx",
                cx1: "xmlns:cx1",
                cx2: "xmlns:cx2",
                cx3: "xmlns:cx3",
                cx4: "xmlns:cx4",
                cx5: "xmlns:cx5",
                cx6: "xmlns:cx6",
                cx7: "xmlns:cx7",
                cx8: "xmlns:cx8",
                w16cid: "xmlns:w16cid",
                w16se: "xmlns:w16se",
            };
        }
    }
    exports.HeaderAttributes = HeaderAttributes;


    /***/ }),
    /* 328 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const paragraph_1 = __webpack_require__(1);
    class Media {
        static addImage(file, buffer, width, height, drawingOptions) {
            const mediaData = file.Media.addMedia(buffer, width, height);
            return new paragraph_1.PictureRun(mediaData, drawingOptions);
        }
        static generateId() {
            return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        }
        constructor() {
            this.map = new Map();
        }
        getMedia(key) {
            const data = this.map.get(key);
            if (data === undefined) {
                throw new Error(`Cannot find image with the key ${key}`);
            }
            return data;
        }
        addMedia(buffer, width = 100, height = 100) {
            const key = `${Media.generateId()}.png`;
            return this.createMedia(key, {
                width: width,
                height: height,
            }, buffer);
        }
        createMedia(key, dimensions, data, filePath) {
            const newData = typeof data === "string" ? this.convertDataURIToBinary(data) : data;
            const imageData = {
                stream: newData,
                path: filePath,
                fileName: key,
                dimensions: {
                    pixels: {
                        x: Math.round(dimensions.width),
                        y: Math.round(dimensions.height),
                    },
                    emus: {
                        x: Math.round(dimensions.width * 9525),
                        y: Math.round(dimensions.height * 9525),
                    },
                },
            };
            this.map.set(key, imageData);
            return imageData;
        }
        get Array() {
            const array = new Array();
            this.map.forEach((data) => {
                array.push(data);
            });
            return array;
        }
        convertDataURIToBinary(dataURI) {
            const BASE64_MARKER = ";base64,";
            const base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
            if (typeof atob === "function") {
                return new Uint8Array(atob(dataURI.substring(base64Index))
                    .split("")
                    .map((c) => c.charCodeAt(0)));
            }
            else {
                const b = __webpack_require__(6);
                return new b.Buffer(dataURI, "base64");
            }
        }
    }
    exports.Media = Media;


    /***/ }),
    /* 329 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WORKAROUND2 = "";


    /***/ }),
    /* 330 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const convenience_functions_1 = __webpack_require__(44);
    const paragraph_1 = __webpack_require__(1);
    const xml_components_1 = __webpack_require__(0);
    const document_attributes_1 = __webpack_require__(11);
    const abstract_numbering_1 = __webpack_require__(134);
    const level_1 = __webpack_require__(24);
    const num_1 = __webpack_require__(135);
    class Numbering extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:numbering");
            this.abstractNumbering = [];
            this.concreteNumbering = [];
            this.root.push(new document_attributes_1.DocumentAttributes({
                wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",
                mc: "http://schemas.openxmlformats.org/markup-compatibility/2006",
                o: "urn:schemas-microsoft-com:office:office",
                r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
                m: "http://schemas.openxmlformats.org/officeDocument/2006/math",
                v: "urn:schemas-microsoft-com:vml",
                wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",
                wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",
                w10: "urn:schemas-microsoft-com:office:word",
                w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main",
                w14: "http://schemas.microsoft.com/office/word/2010/wordml",
                w15: "http://schemas.microsoft.com/office/word/2012/wordml",
                wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",
                wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk",
                wne: "http://schemas.microsoft.com/office/word/2006/wordml",
                wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape",
                Ignorable: "w14 w15 wp14",
            }));
            this.nextId = 0;
            const abstractNumbering = this.createAbstractNumbering([
                {
                    level: 0,
                    format: level_1.LevelFormat.BULLET,
                    text: "\u25CF",
                    alignment: paragraph_1.AlignmentType.LEFT,
                    style: {
                        paragraph: {
                            indent: { left: convenience_functions_1.convertInchesToTwip(0.5), hanging: convenience_functions_1.convertInchesToTwip(0.25) },
                        },
                    },
                },
                {
                    level: 1,
                    format: level_1.LevelFormat.BULLET,
                    text: "\u25CB",
                    alignment: paragraph_1.AlignmentType.LEFT,
                    style: {
                        paragraph: {
                            indent: { left: convenience_functions_1.convertInchesToTwip(1), hanging: convenience_functions_1.convertInchesToTwip(0.25) },
                        },
                    },
                },
                {
                    level: 2,
                    format: level_1.LevelFormat.BULLET,
                    text: "\u25A0",
                    alignment: paragraph_1.AlignmentType.LEFT,
                    style: {
                        paragraph: {
                            indent: { left: 2160, hanging: convenience_functions_1.convertInchesToTwip(0.25) },
                        },
                    },
                },
                {
                    level: 3,
                    format: level_1.LevelFormat.BULLET,
                    text: "\u25CF",
                    alignment: paragraph_1.AlignmentType.LEFT,
                    style: {
                        paragraph: {
                            indent: { left: 2880, hanging: convenience_functions_1.convertInchesToTwip(0.25) },
                        },
                    },
                },
                {
                    level: 4,
                    format: level_1.LevelFormat.BULLET,
                    text: "\u25CB",
                    alignment: paragraph_1.AlignmentType.LEFT,
                    style: {
                        paragraph: {
                            indent: { left: 3600, hanging: convenience_functions_1.convertInchesToTwip(0.25) },
                        },
                    },
                },
                {
                    level: 5,
                    format: level_1.LevelFormat.BULLET,
                    text: "\u25A0",
                    alignment: paragraph_1.AlignmentType.LEFT,
                    style: {
                        paragraph: {
                            indent: { left: 4320, hanging: convenience_functions_1.convertInchesToTwip(0.25) },
                        },
                    },
                },
                {
                    level: 6,
                    format: level_1.LevelFormat.BULLET,
                    text: "\u25CF",
                    alignment: paragraph_1.AlignmentType.LEFT,
                    style: {
                        paragraph: {
                            indent: { left: 5040, hanging: convenience_functions_1.convertInchesToTwip(0.25) },
                        },
                    },
                },
                {
                    level: 7,
                    format: level_1.LevelFormat.BULLET,
                    text: "\u25CF",
                    alignment: paragraph_1.AlignmentType.LEFT,
                    style: {
                        paragraph: {
                            indent: { left: 5760, hanging: convenience_functions_1.convertInchesToTwip(0.25) },
                        },
                    },
                },
                {
                    level: 8,
                    format: level_1.LevelFormat.BULLET,
                    text: "\u25CF",
                    alignment: paragraph_1.AlignmentType.LEFT,
                    style: {
                        paragraph: {
                            indent: { left: 6480, hanging: convenience_functions_1.convertInchesToTwip(0.25) },
                        },
                    },
                },
            ]);
            this.createConcreteNumbering(abstractNumbering);
            for (const con of options.config) {
                const currentAbstractNumbering = this.createAbstractNumbering(con.levels);
                this.createConcreteNumbering(currentAbstractNumbering, con.reference);
            }
        }
        prepForXml() {
            this.abstractNumbering.forEach((x) => this.root.push(x));
            this.concreteNumbering.forEach((x) => this.root.push(x));
            return super.prepForXml();
        }
        createConcreteNumbering(abstractNumbering, reference) {
            const num = new num_1.ConcreteNumbering(this.nextId++, abstractNumbering.id, reference);
            this.concreteNumbering.push(num);
            return num;
        }
        createAbstractNumbering(options) {
            const num = new abstract_numbering_1.AbstractNumbering(this.nextId++, options);
            this.abstractNumbering.push(num);
            return num;
        }
        get ConcreteNumbering() {
            return this.concreteNumbering;
        }
    }
    exports.Numbering = Numbering;


    /***/ }),
    /* 331 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class MultiLevelType extends xml_components_1.XmlComponent {
        constructor(value) {
            super("w:multiLevelType");
            this.root.push(new xml_components_1.Attributes({
                val: value,
            }));
        }
    }
    exports.MultiLevelType = MultiLevelType;


    /***/ }),
    /* 332 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(333));
    __export(__webpack_require__(136));


    /***/ }),
    /* 333 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const compatibility_1 = __webpack_require__(334);
    const display_background_shape_1 = __webpack_require__(335);
    const track_revisions_1 = __webpack_require__(336);
    const update_fields_1 = __webpack_require__(136);
    class SettingsAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = {
                wpc: "xmlns:wpc",
                mc: "xmlns:mc",
                o: "xmlns:o",
                r: "xmlns:r",
                m: "xmlns:m",
                v: "xmlns:v",
                wp14: "xmlns:wp14",
                wp: "xmlns:wp",
                w10: "xmlns:w10",
                w: "xmlns:w",
                w14: "xmlns:w14",
                w15: "xmlns:w15",
                wpg: "xmlns:wpg",
                wpi: "xmlns:wpi",
                wne: "xmlns:wne",
                wps: "xmlns:wps",
                Ignorable: "mc:Ignorable",
            };
        }
    }
    exports.SettingsAttributes = SettingsAttributes;
    class Settings extends xml_components_1.XmlComponent {
        constructor() {
            super("w:settings");
            this.root.push(new SettingsAttributes({
                wpc: "http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas",
                mc: "http://schemas.openxmlformats.org/markup-compatibility/2006",
                o: "urn:schemas-microsoft-com:office:office",
                r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
                m: "http://schemas.openxmlformats.org/officeDocument/2006/math",
                v: "urn:schemas-microsoft-com:vml",
                wp14: "http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing",
                wp: "http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing",
                w10: "urn:schemas-microsoft-com:office:word",
                w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main",
                w14: "http://schemas.microsoft.com/office/word/2010/wordml",
                w15: "http://schemas.microsoft.com/office/word/2012/wordml",
                wpg: "http://schemas.microsoft.com/office/word/2010/wordprocessingGroup",
                wpi: "http://schemas.microsoft.com/office/word/2010/wordprocessingInk",
                wne: "http://schemas.microsoft.com/office/word/2006/wordml",
                wps: "http://schemas.microsoft.com/office/word/2010/wordprocessingShape",
                Ignorable: "w14 w15 wp14",
            }));
            this.compatibility = new compatibility_1.Compatibility();
            this.trackRevisions = new track_revisions_1.TrackRevisions();
            this.root.push(new display_background_shape_1.DisplayBackgroundShape());
        }
        addUpdateFields() {
            if (!this.root.find((child) => child instanceof update_fields_1.UpdateFields)) {
                this.addChildElement(new update_fields_1.UpdateFields());
            }
        }
        addCompatibility() {
            if (!this.root.find((child) => child instanceof compatibility_1.Compatibility)) {
                this.addChildElement(this.compatibility);
            }
            return this.compatibility;
        }
        addTrackRevisions() {
            if (!this.root.find((child) => child instanceof track_revisions_1.TrackRevisions)) {
                this.addChildElement(this.trackRevisions);
            }
            return this.trackRevisions;
        }
    }
    exports.Settings = Settings;


    /***/ }),
    /* 334 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class DoNotExpandShiftReturn extends xml_components_1.XmlComponent {
        constructor() {
            super("w:doNotExpandShiftReturn");
        }
    }
    class Compatibility extends xml_components_1.XmlComponent {
        constructor() {
            super("w:compat");
        }
        doNotExpandShiftReturn() {
            this.root.push(new DoNotExpandShiftReturn());
            return this;
        }
    }
    exports.Compatibility = Compatibility;


    /***/ }),
    /* 335 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class DisplayBackgroundShape extends xml_components_1.XmlComponent {
        constructor() {
            super("w:displayBackgroundShape");
        }
    }
    exports.DisplayBackgroundShape = DisplayBackgroundShape;


    /***/ }),
    /* 336 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class TrackRevisions extends xml_components_1.XmlComponent {
        constructor() {
            super("w:trackRevisions");
        }
    }
    exports.TrackRevisions = TrackRevisions;


    /***/ }),
    /* 337 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const xml_js_1 = __webpack_require__(26);
    const _1 = __webpack_require__(23);
    class ExternalStylesFactory {
        newInstance(xmlData) {
            const xmlObj = xml_js_1.xml2js(xmlData, { compact: false });
            let stylesXmlElement;
            for (const xmlElm of xmlObj.elements || []) {
                if (xmlElm.name === "w:styles") {
                    stylesXmlElement = xmlElm;
                }
            }
            if (stylesXmlElement === undefined) {
                throw new Error("can not find styles element");
            }
            const stylesElements = stylesXmlElement.elements || [];
            const importedStyle = new _1.Styles({
                initialStyles: new xml_components_1.ImportedRootElementAttributes(stylesXmlElement.attributes),
                importedStyles: stylesElements.map((childElm) => xml_components_1.convertToXmlComponent(childElm)),
            });
            return importedStyle;
        }
    }
    exports.ExternalStylesFactory = ExternalStylesFactory;


    /***/ }),
    /* 338 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const document_attributes_1 = __webpack_require__(11);
    const defaults_1 = __webpack_require__(106);
    const style_1 = __webpack_require__(105);
    class DefaultStylesFactory {
        newInstance(options = {}) {
            const documentAttributes = new document_attributes_1.DocumentAttributes({
                mc: "http://schemas.openxmlformats.org/markup-compatibility/2006",
                r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
                w: "http://schemas.openxmlformats.org/wordprocessingml/2006/main",
                w14: "http://schemas.microsoft.com/office/word/2010/wordml",
                w15: "http://schemas.microsoft.com/office/word/2012/wordml",
                Ignorable: "w14 w15",
            });
            return {
                initialStyles: documentAttributes,
                importedStyles: [
                    new defaults_1.DocumentDefaults(options.document),
                    new style_1.TitleStyle(Object.assign({ run: {
                            size: 56,
                        } }, options.title)),
                    new style_1.Heading1Style(Object.assign({ run: {
                            color: "2E74B5",
                            size: 32,
                        } }, options.heading1)),
                    new style_1.Heading2Style(Object.assign({ run: {
                            color: "2E74B5",
                            size: 26,
                        } }, options.heading2)),
                    new style_1.Heading3Style(Object.assign({ run: {
                            color: "1F4D78",
                            size: 24,
                        } }, options.heading3)),
                    new style_1.Heading4Style(Object.assign({ run: {
                            color: "2E74B5",
                            italics: true,
                        } }, options.heading4)),
                    new style_1.Heading5Style(Object.assign({ run: {
                            color: "2E74B5",
                        } }, options.heading5)),
                    new style_1.Heading6Style(Object.assign({ run: {
                            color: "1F4D78",
                        } }, options.heading6)),
                    new style_1.StrongStyle(Object.assign({ run: {
                            bold: true,
                        } }, options.strong)),
                    new style_1.ListParagraph(options.listParagraph || {}),
                    new style_1.HyperlinkStyle(options.hyperlink || {}),
                    new style_1.FootnoteReferenceStyle(options.footnoteReference || {}),
                    new style_1.FootnoteText(options.footnoteText || {}),
                    new style_1.FootnoteTextChar(options.footnoteTextChar || {}),
                ],
            };
        }
    }
    exports.DefaultStylesFactory = DefaultStylesFactory;


    /***/ }),
    /* 339 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WORKAROUND = "";


    /***/ }),
    /* 340 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(341));
    __export(__webpack_require__(346));


    /***/ }),
    /* 341 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const paragraph_1 = __webpack_require__(1);
    const run_1 = __webpack_require__(3);
    const field_1 = __webpack_require__(18);
    const xml_components_1 = __webpack_require__(0);
    const field_instruction_1 = __webpack_require__(342);
    const sdt_content_1 = __webpack_require__(343);
    const sdt_properties_1 = __webpack_require__(344);
    class TableOfContents extends xml_components_1.XmlComponent {
        constructor(alias = "Table of Contents", properties) {
            super("w:sdt");
            this.root.push(new sdt_properties_1.StructuredDocumentTagProperties(alias));
            const content = new sdt_content_1.StructuredDocumentTagContent();
            const beginParagraph = new paragraph_1.Paragraph({
                children: [
                    new run_1.Run({
                        children: [new field_1.Begin(true), new field_instruction_1.FieldInstruction(properties), new field_1.Separate()],
                    }),
                ],
            });
            content.addChildElement(beginParagraph);
            const endParagraph = new paragraph_1.Paragraph({
                children: [
                    new run_1.Run({
                        children: [new field_1.End()],
                    }),
                ],
            });
            content.addChildElement(endParagraph);
            this.root.push(content);
        }
    }
    exports.TableOfContents = TableOfContents;


    /***/ }),
    /* 342 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const space_type_1 = __webpack_require__(8);
    const xml_components_1 = __webpack_require__(0);
    class TextAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { space: "xml:space" };
        }
    }
    class FieldInstruction extends xml_components_1.XmlComponent {
        constructor(properties = {}) {
            super("w:instrText");
            this.properties = properties;
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            let instruction = "TOC";
            if (this.properties.captionLabel) {
                instruction = `${instruction} \\a "${this.properties.captionLabel}"`;
            }
            if (this.properties.entriesFromBookmark) {
                instruction = `${instruction} \\b "${this.properties.entriesFromBookmark}"`;
            }
            if (this.properties.captionLabelIncludingNumbers) {
                instruction = `${instruction} \\c "${this.properties.captionLabelIncludingNumbers}"`;
            }
            if (this.properties.sequenceAndPageNumbersSeparator) {
                instruction = `${instruction} \\d "${this.properties.sequenceAndPageNumbersSeparator}"`;
            }
            if (this.properties.tcFieldIdentifier) {
                instruction = `${instruction} \\f "${this.properties.tcFieldIdentifier}"`;
            }
            if (this.properties.hyperlink) {
                instruction = `${instruction} \\h`;
            }
            if (this.properties.tcFieldLevelRange) {
                instruction = `${instruction} \\l "${this.properties.tcFieldLevelRange}"`;
            }
            if (this.properties.pageNumbersEntryLevelsRange) {
                instruction = `${instruction} \\n "${this.properties.pageNumbersEntryLevelsRange}"`;
            }
            if (this.properties.headingStyleRange) {
                instruction = `${instruction} \\o "${this.properties.headingStyleRange}"`;
            }
            if (this.properties.entryAndPageNumberSeparator) {
                instruction = `${instruction} \\p "${this.properties.entryAndPageNumberSeparator}"`;
            }
            if (this.properties.seqFieldIdentifierForPrefix) {
                instruction = `${instruction} \\s "${this.properties.seqFieldIdentifierForPrefix}"`;
            }
            if (this.properties.stylesWithLevels && this.properties.stylesWithLevels.length) {
                const styles = this.properties.stylesWithLevels.map((sl) => `${sl.styleName},${sl.level}`).join(",");
                instruction = `${instruction} \\t "${styles}"`;
            }
            if (this.properties.useAppliedParagraphOutlineLevel) {
                instruction = `${instruction} \\u`;
            }
            if (this.properties.preserveTabInEntries) {
                instruction = `${instruction} \\w`;
            }
            if (this.properties.preserveNewLineInEntries) {
                instruction = `${instruction} \\x`;
            }
            if (this.properties.hideTabAndPageNumbersInWebView) {
                instruction = `${instruction} \\z`;
            }
            this.root.push(instruction);
        }
    }
    exports.FieldInstruction = FieldInstruction;


    /***/ }),
    /* 343 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class StructuredDocumentTagContent extends xml_components_1.XmlComponent {
        constructor() {
            super("w:sdtContent");
        }
    }
    exports.StructuredDocumentTagContent = StructuredDocumentTagContent;


    /***/ }),
    /* 344 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const alias_1 = __webpack_require__(345);
    class StructuredDocumentTagProperties extends xml_components_1.XmlComponent {
        constructor(alias) {
            super("w:sdtPr");
            this.root.push(new alias_1.Alias(alias));
        }
    }
    exports.StructuredDocumentTagProperties = StructuredDocumentTagProperties;


    /***/ }),
    /* 345 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    class AliasAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { alias: "w:val" };
        }
    }
    class Alias extends xml_components_1.XmlComponent {
        constructor(alias) {
            super("w:alias");
            this.root.push(new AliasAttributes({ alias }));
        }
    }
    exports.Alias = Alias;


    /***/ }),
    /* 346 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    class StyleLevel {
        constructor(styleName, level) {
            this.styleName = styleName;
            this.level = level;
        }
    }
    exports.StyleLevel = StyleLevel;


    /***/ }),
    /* 347 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(348));
    __export(__webpack_require__(349));


    /***/ }),
    /* 348 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const index_1 = __webpack_require__(12);
    const track_revision_1 = __webpack_require__(137);
    class InsertedTextRun extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:ins");
            this.root.push(new track_revision_1.ChangeAttributes({
                id: options.id,
                author: options.author,
                date: options.date,
            }));
            this.addChildElement(new index_1.TextRun(options));
        }
    }
    exports.InsertedTextRun = InsertedTextRun;


    /***/ }),
    /* 349 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const xml_components_1 = __webpack_require__(0);
    const index_1 = __webpack_require__(12);
    const break_1 = __webpack_require__(67);
    const field_1 = __webpack_require__(18);
    const run_1 = __webpack_require__(17);
    const track_revision_1 = __webpack_require__(137);
    const deleted_page_number_1 = __webpack_require__(350);
    const deleted_text_1 = __webpack_require__(351);
    class DeletedTextRun extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:del");
            this.root.push(new track_revision_1.ChangeAttributes({
                id: options.id,
                author: options.author,
                date: options.date,
            }));
            this.deletedTextRunWrapper = new DeletedTextRunWrapper(options);
            this.addChildElement(this.deletedTextRunWrapper);
        }
    }
    exports.DeletedTextRun = DeletedTextRun;
    class DeletedTextRunWrapper extends xml_components_1.XmlComponent {
        constructor(options) {
            super("w:r");
            this.root.push(new index_1.RunProperties(options));
            if (options.children) {
                for (const child of options.children) {
                    if (typeof child === "string") {
                        switch (child) {
                            case run_1.PageNumber.CURRENT:
                                this.root.push(new field_1.Begin());
                                this.root.push(new deleted_page_number_1.DeletedPage());
                                this.root.push(new field_1.Separate());
                                this.root.push(new field_1.End());
                                break;
                            case run_1.PageNumber.TOTAL_PAGES:
                                this.root.push(new field_1.Begin());
                                this.root.push(new deleted_page_number_1.DeletedNumberOfPages());
                                this.root.push(new field_1.Separate());
                                this.root.push(new field_1.End());
                                break;
                            case run_1.PageNumber.TOTAL_PAGES_IN_SECTION:
                                this.root.push(new field_1.Begin());
                                this.root.push(new deleted_page_number_1.DeletedNumberOfPagesSection());
                                this.root.push(new field_1.Separate());
                                this.root.push(new field_1.End());
                                break;
                            default:
                                this.root.push(new deleted_text_1.DeletedText(child));
                                break;
                        }
                        continue;
                    }
                    this.root.push(child);
                }
            }
            else if (options.text) {
                this.root.push(new deleted_text_1.DeletedText(options.text));
            }
            if (options.break) {
                for (let i = 0; i < options.break; i++) {
                    this.root.splice(1, 0, new break_1.Break());
                }
            }
        }
    }


    /***/ }),
    /* 350 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const space_type_1 = __webpack_require__(8);
    const xml_components_1 = __webpack_require__(0);
    class TextAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { space: "xml:space" };
        }
    }
    class DeletedPage extends xml_components_1.XmlComponent {
        constructor() {
            super("w:delInstrText");
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            this.root.push("PAGE");
        }
    }
    exports.DeletedPage = DeletedPage;
    class DeletedNumberOfPages extends xml_components_1.XmlComponent {
        constructor() {
            super("w:delInstrText");
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            this.root.push("NUMPAGES");
        }
    }
    exports.DeletedNumberOfPages = DeletedNumberOfPages;
    class DeletedNumberOfPagesSection extends xml_components_1.XmlComponent {
        constructor() {
            super("w:delInstrText");
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            this.root.push("SECTIONPAGES");
        }
    }
    exports.DeletedNumberOfPagesSection = DeletedNumberOfPagesSection;


    /***/ }),
    /* 351 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const space_type_1 = __webpack_require__(8);
    const xml_components_1 = __webpack_require__(0);
    class TextAttributes extends xml_components_1.XmlAttributeComponent {
        constructor() {
            super(...arguments);
            this.xmlKeys = { space: "xml:space" };
        }
    }
    class DeletedText extends xml_components_1.XmlComponent {
        constructor(text) {
            super("w:delText");
            this.root.push(new TextAttributes({ space: space_type_1.SpaceType.PRESERVE }));
            this.root.push(text);
        }
    }
    exports.DeletedText = DeletedText;


    /***/ }),
    /* 352 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(353));


    /***/ }),
    /* 353 */
    /***/ (function(module, exports, __webpack_require__) {

    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const next_compiler_1 = __webpack_require__(354);
    class Packer {
        static toBuffer(file, prettify) {
            return __awaiter(this, void 0, void 0, function* () {
                const zip = this.compiler.compile(file, prettify);
                const zipData = yield zip.generateAsync({
                    type: "nodebuffer",
                    mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    compression: "DEFLATE",
                });
                return zipData;
            });
        }
        static toBase64String(file, prettify) {
            return __awaiter(this, void 0, void 0, function* () {
                const zip = this.compiler.compile(file, prettify);
                const zipData = yield zip.generateAsync({
                    type: "base64",
                    mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    compression: "DEFLATE",
                });
                return zipData;
            });
        }
        static toBlob(file, prettify) {
            return __awaiter(this, void 0, void 0, function* () {
                const zip = this.compiler.compile(file, prettify);
                const zipData = yield zip.generateAsync({
                    type: "blob",
                    mimeType: "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    compression: "DEFLATE",
                });
                return zipData;
            });
        }
    }
    Packer.compiler = new next_compiler_1.Compiler();
    exports.Packer = Packer;


    /***/ }),
    /* 354 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    const JSZip = __webpack_require__(138);
    const xml = __webpack_require__(355);
    const formatter_1 = __webpack_require__(357);
    const image_replacer_1 = __webpack_require__(358);
    const numbering_replacer_1 = __webpack_require__(359);
    class Compiler {
        constructor() {
            this.formatter = new formatter_1.Formatter();
            this.imageReplacer = new image_replacer_1.ImageReplacer();
            this.numberingReplacer = new numbering_replacer_1.NumberingReplacer();
        }
        compile(file, prettifyXml) {
            const zip = new JSZip();
            const xmlifiedFileMapping = this.xmlifyFile(file, prettifyXml);
            for (const key in xmlifiedFileMapping) {
                if (!xmlifiedFileMapping[key]) {
                    continue;
                }
                const obj = xmlifiedFileMapping[key];
                if (Array.isArray(obj)) {
                    for (const subFile of obj) {
                        zip.file(subFile.path, subFile.data);
                    }
                }
                else {
                    zip.file(obj.path, obj.data);
                }
            }
            for (const data of file.Media.Array) {
                const mediaData = data.stream;
                zip.file(`word/media/${data.fileName}`, mediaData);
            }
            return zip;
        }
        xmlifyFile(file, prettify) {
            file.verifyUpdateFields();
            const documentRelationshipCount = file.DocumentRelationships.RelationshipCount + 1;
            const documentXmlData = xml(this.formatter.format(file.Document, file), prettify);
            const documentMediaDatas = this.imageReplacer.getMediaData(documentXmlData, file.Media);
            return {
                Relationships: {
                    data: (() => {
                        documentMediaDatas.forEach((mediaData, i) => {
                            file.DocumentRelationships.createRelationship(documentRelationshipCount + i, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", `media/${mediaData.fileName}`);
                        });
                        return xml(this.formatter.format(file.DocumentRelationships, file), prettify);
                    })(),
                    path: "word/_rels/document.xml.rels",
                },
                Document: {
                    data: (() => {
                        const xmlData = this.imageReplacer.replace(documentXmlData, documentMediaDatas, documentRelationshipCount);
                        const referenedXmlData = this.numberingReplacer.replace(xmlData, file.Numbering.ConcreteNumbering);
                        return referenedXmlData;
                    })(),
                    path: "word/document.xml",
                },
                Styles: {
                    data: xml(this.formatter.format(file.Styles, file), prettify),
                    path: "word/styles.xml",
                },
                Properties: {
                    data: xml(this.formatter.format(file.CoreProperties, file), {
                        declaration: {
                            standalone: "yes",
                            encoding: "UTF-8",
                        },
                    }),
                    path: "docProps/core.xml",
                },
                Numbering: {
                    data: xml(this.formatter.format(file.Numbering, file), prettify),
                    path: "word/numbering.xml",
                },
                FileRelationships: {
                    data: xml(this.formatter.format(file.FileRelationships, file), prettify),
                    path: "_rels/.rels",
                },
                HeaderRelationships: file.Headers.map((headerWrapper, index) => {
                    const xmlData = xml(this.formatter.format(headerWrapper.Header, file), prettify);
                    const mediaDatas = this.imageReplacer.getMediaData(xmlData, file.Media);
                    mediaDatas.forEach((mediaData, i) => {
                        headerWrapper.Relationships.createRelationship(i, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", `media/${mediaData.fileName}`);
                    });
                    return {
                        data: xml(this.formatter.format(headerWrapper.Relationships, file), prettify),
                        path: `word/_rels/header${index + 1}.xml.rels`,
                    };
                }),
                FooterRelationships: file.Footers.map((footerWrapper, index) => {
                    const xmlData = xml(this.formatter.format(footerWrapper.Footer, file), prettify);
                    const mediaDatas = this.imageReplacer.getMediaData(xmlData, file.Media);
                    mediaDatas.forEach((mediaData, i) => {
                        footerWrapper.Relationships.createRelationship(i, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", `media/${mediaData.fileName}`);
                    });
                    return {
                        data: xml(this.formatter.format(footerWrapper.Relationships, file), prettify),
                        path: `word/_rels/footer${index + 1}.xml.rels`,
                    };
                }),
                Headers: file.Headers.map((headerWrapper, index) => {
                    const tempXmlData = xml(this.formatter.format(headerWrapper.Header, file), prettify);
                    const mediaDatas = this.imageReplacer.getMediaData(tempXmlData, file.Media);
                    const xmlData = this.imageReplacer.replace(tempXmlData, mediaDatas, 0);
                    return {
                        data: xmlData,
                        path: `word/header${index + 1}.xml`,
                    };
                }),
                Footers: file.Footers.map((footerWrapper, index) => {
                    const tempXmlData = xml(this.formatter.format(footerWrapper.Footer, file), prettify);
                    const mediaDatas = this.imageReplacer.getMediaData(tempXmlData, file.Media);
                    const xmlData = this.imageReplacer.replace(tempXmlData, mediaDatas, 0);
                    return {
                        data: xmlData,
                        path: `word/footer${index + 1}.xml`,
                    };
                }),
                ContentTypes: {
                    data: xml(this.formatter.format(file.ContentTypes, file), prettify),
                    path: "[Content_Types].xml",
                },
                AppProperties: {
                    data: xml(this.formatter.format(file.AppProperties, file), prettify),
                    path: "docProps/app.xml",
                },
                FootNotes: {
                    data: xml(this.formatter.format(file.FootNotes, file), prettify),
                    path: "word/footnotes.xml",
                },
                Settings: {
                    data: xml(this.formatter.format(file.Settings, file), prettify),
                    path: "word/settings.xml",
                },
            };
        }
    }
    exports.Compiler = Compiler;


    /***/ }),
    /* 355 */
    /***/ (function(module, exports, __webpack_require__) {

    /* WEBPACK VAR INJECTION */(function(process) {var escapeForXML = __webpack_require__(356);
    var Stream = __webpack_require__(56).Stream;

    var DEFAULT_INDENT = '    ';

    function xml(input, options) {

        if (typeof options !== 'object') {
            options = {
                indent: options
            };
        }

        var stream      = options.stream ? new Stream() : null,
            output      = "",
            interrupted = false,
            indent      = !options.indent ? ''
                            : options.indent === true ? DEFAULT_INDENT
                                : options.indent,
            instant     = true;


        function delay (func) {
            if (!instant) {
                func();
            } else {
                process.nextTick(func);
            }
        }

        function append (interrupt, out) {
            if (out !== undefined) {
                output += out;
            }
            if (interrupt && !interrupted) {
                stream = stream || new Stream();
                interrupted = true;
            }
            if (interrupt && interrupted) {
                var data = output;
                delay(function () { stream.emit('data', data); });
                output = "";
            }
        }

        function add (value, last) {
            format(append, resolve(value, indent, indent ? 1 : 0), last);
        }

        function end() {
            if (stream) {
                var data = output;
                delay(function () {
                  stream.emit('data', data);
                  stream.emit('end');
                  stream.readable = false;
                  stream.emit('close');
                });
            }
        }

        function addXmlDeclaration(declaration) {
            var encoding = declaration.encoding || 'UTF-8',
                attr =  { version: '1.0', encoding: encoding };

            if (declaration.standalone) {
                attr.standalone = declaration.standalone;
            }

            add({'?xml': { _attr: attr } });
            output = output.replace('/>', '?>');
        }

        // disable delay delayed
        delay(function () { instant = false; });

        if (options.declaration) {
            addXmlDeclaration(options.declaration);
        }

        if (input && input.forEach) {
            input.forEach(function (value, i) {
                var last;
                if (i + 1 === input.length)
                    last = end;
                add(value, last);
            });
        } else {
            add(input, end);
        }

        if (stream) {
            stream.readable = true;
            return stream;
        }
        return output;
    }

    function element (/*input, …*/) {
        var input = Array.prototype.slice.call(arguments),
            self = {
                _elem:  resolve(input)
            };

        self.push = function (input) {
            if (!this.append) {
                throw new Error("not assigned to a parent!");
            }
            var that = this;
            var indent = this._elem.indent;
            format(this.append, resolve(
                input, indent, this._elem.icount + (indent ? 1 : 0)),
                function () { that.append(true); });
        };

        self.close = function (input) {
            if (input !== undefined) {
                this.push(input);
            }
            if (this.end) {
                this.end();
            }
        };

        return self;
    }

    function create_indent(character, count) {
        return (new Array(count || 0).join(character || ''))
    }

    function resolve(data, indent, indent_count) {
        indent_count = indent_count || 0;
        var indent_spaces = create_indent(indent, indent_count);
        var name;
        var values = data;
        var interrupt = false;

        if (typeof data === 'object') {
            var keys = Object.keys(data);
            name = keys[0];
            values = data[name];

            if (values && values._elem) {
                values._elem.name = name;
                values._elem.icount = indent_count;
                values._elem.indent = indent;
                values._elem.indents = indent_spaces;
                values._elem.interrupt = values;
                return values._elem;
            }
        }

        var attributes = [],
            content = [];

        var isStringContent;

        function get_attributes(obj){
            var keys = Object.keys(obj);
            keys.forEach(function(key){
                attributes.push(attribute(key, obj[key]));
            });
        }

        switch(typeof values) {
            case 'object':
                if (values === null) break;

                if (values._attr) {
                    get_attributes(values._attr);
                }

                if (values._cdata) {
                    content.push(
                        ('<![CDATA[' + values._cdata).replace(/\]\]>/g, ']]]]><![CDATA[>') + ']]>'
                    );
                }

                if (values.forEach) {
                    isStringContent = false;
                    content.push('');
                    values.forEach(function(value) {
                        if (typeof value == 'object') {
                            var _name = Object.keys(value)[0];

                            if (_name == '_attr') {
                                get_attributes(value._attr);
                            } else {
                                content.push(resolve(
                                    value, indent, indent_count + 1));
                            }
                        } else {
                            //string
                            content.pop();
                            isStringContent=true;
                            content.push(escapeForXML(value));
                        }

                    });
                    if (!isStringContent) {
                        content.push('');
                    }
                }
            break;

            default:
                //string
                content.push(escapeForXML(values));

        }

        return {
            name:       name,
            interrupt:  interrupt,
            attributes: attributes,
            content:    content,
            icount:     indent_count,
            indents:    indent_spaces,
            indent:     indent
        };
    }

    function format(append, elem, end) {

        if (typeof elem != 'object') {
            return append(false, elem);
        }

        var len = elem.interrupt ? 1 : elem.content.length;

        function proceed () {
            while (elem.content.length) {
                var value = elem.content.shift();

                if (value === undefined) continue;
                if (interrupt(value)) return;

                format(append, value);
            }

            append(false, (len > 1 ? elem.indents : '')
                + (elem.name ? '</' + elem.name + '>' : '')
                + (elem.indent && !end ? '\n' : ''));

            if (end) {
                end();
            }
        }

        function interrupt(value) {
           if (value.interrupt) {
               value.interrupt.append = append;
               value.interrupt.end = proceed;
               value.interrupt = false;
               append(true);
               return true;
           }
           return false;
        }

        append(false, elem.indents
            + (elem.name ? '<' + elem.name : '')
            + (elem.attributes.length ? ' ' + elem.attributes.join(' ') : '')
            + (len ? (elem.name ? '>' : '') : (elem.name ? '/>' : ''))
            + (elem.indent && len > 1 ? '\n' : ''));

        if (!len) {
            return append(false, elem.indent ? '\n' : '');
        }

        if (!interrupt(elem)) {
            proceed();
        }
    }

    function attribute(key, value) {
        return key + '=' + '"' + escapeForXML(value) + '"';
    }

    module.exports = xml;
    module.exports.element = module.exports.Element = element;

    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)));

    /***/ }),
    /* 356 */
    /***/ (function(module, exports) {


    var XML_CHARACTER_MAP = {
        '&': '&amp;',
        '"': '&quot;',
        "'": '&apos;',
        '<': '&lt;',
        '>': '&gt;'
    };

    function escapeForXML(string) {
        return string && string.replace
            ? string.replace(/([&"<>'])/g, function(str, item) {
                return XML_CHARACTER_MAP[item];
              })
            : string;
    }

    module.exports = escapeForXML;


    /***/ }),
    /* 357 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    class Formatter {
        format(input, file) {
            const output = input.prepForXml(file);
            if (output) {
                return output;
            }
            else {
                throw Error("XMLComponent did not format correctly");
            }
        }
    }
    exports.Formatter = Formatter;


    /***/ }),
    /* 358 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    class ImageReplacer {
        replace(xmlData, mediaData, offset) {
            let currentXmlData = xmlData;
            mediaData.forEach((image, i) => {
                currentXmlData = currentXmlData.replace(new RegExp(`{${image.fileName}}`, "g"), (offset + i).toString());
            });
            return currentXmlData;
        }
        getMediaData(xmlData, media) {
            return media.Array.filter((image) => xmlData.search(`{${image.fileName}}`) > 0);
        }
    }
    exports.ImageReplacer = ImageReplacer;


    /***/ }),
    /* 359 */
    /***/ (function(module, exports, __webpack_require__) {

    Object.defineProperty(exports, "__esModule", { value: true });
    class NumberingReplacer {
        replace(xmlData, concreteNumberings) {
            let currentXmlData = xmlData;
            for (const concreteNumbering of concreteNumberings) {
                if (!concreteNumbering.reference) {
                    continue;
                }
                currentXmlData = currentXmlData.replace(new RegExp(`{${concreteNumbering.reference}}`, "g"), concreteNumbering.id.toString());
            }
            return currentXmlData;
        }
    }
    exports.NumberingReplacer = NumberingReplacer;


    /***/ }),
    /* 360 */
    /***/ (function(module, exports, __webpack_require__) {

    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(__webpack_require__(361));


    /***/ }),
    /* 361 */
    /***/ (function(module, exports, __webpack_require__) {

    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const JSZip = __webpack_require__(138);
    const xml_js_1 = __webpack_require__(26);
    const footer_wrapper_1 = __webpack_require__(46);
    const header_wrapper_1 = __webpack_require__(49);
    const media_1 = __webpack_require__(50);
    const relationship_1 = __webpack_require__(48);
    const xml_components_1 = __webpack_require__(0);
    const schemeToType = {
        "http://schemas.openxmlformats.org/officeDocument/2006/relationships/header": "header",
        "http://schemas.openxmlformats.org/officeDocument/2006/relationships/footer": "footer",
        "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image": "image",
        "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink": "hyperlink",
    };
    var RelationshipType;
    (function (RelationshipType) {
        RelationshipType["HEADER"] = "header";
        RelationshipType["FOOTER"] = "footer";
        RelationshipType["IMAGE"] = "image";
        RelationshipType["HYPERLINK"] = "hyperlink";
    })(RelationshipType || (RelationshipType = {}));
    class ImportDotx {
        extract(data) {
            return __awaiter(this, void 0, void 0, function* () {
                const zipContent = yield JSZip.loadAsync(data);
                const documentContent = yield zipContent.files["word/document.xml"].async("text");
                const relationshipContent = yield zipContent.files["word/_rels/document.xml.rels"].async("text");
                const documentRefs = this.extractDocumentRefs(documentContent);
                const documentRelationships = this.findReferenceFiles(relationshipContent);
                const media = new media_1.Media();
                const templateDocument = {
                    headers: yield this.createHeaders(zipContent, documentRefs, documentRelationships, media, 0),
                    footers: yield this.createFooters(zipContent, documentRefs, documentRelationships, media, documentRefs.headers.length),
                    currentRelationshipId: documentRefs.footers.length + documentRefs.headers.length,
                    styles: yield zipContent.files["word/styles.xml"].async("text"),
                    titlePageIsDefined: this.checkIfTitlePageIsDefined(documentContent),
                    media: media,
                };
                return templateDocument;
            });
        }
        createFooters(zipContent, documentRefs, documentRelationships, media, startingRelationshipId) {
            return __awaiter(this, void 0, void 0, function* () {
                const result = documentRefs.footers
                    .map((reference, i) => __awaiter(this, void 0, void 0, function* () {
                    const relationshipFileInfo = documentRelationships.find((rel) => rel.id === reference.id);
                    if (relationshipFileInfo === null || !relationshipFileInfo) {
                        throw new Error(`Can not find target file for id ${reference.id}`);
                    }
                    const xmlData = yield zipContent.files[`word/${relationshipFileInfo.target}`].async("text");
                    const xmlObj = xml_js_1.xml2js(xmlData, { compact: false, captureSpacesBetweenElements: true });
                    if (!xmlObj.elements) {
                        return undefined;
                    }
                    const xmlElement = xmlObj.elements.reduce((acc, current) => (current.name === "w:ftr" ? current : acc));
                    const importedComp = xml_components_1.convertToXmlComponent(xmlElement);
                    const wrapper = new footer_wrapper_1.FooterWrapper(media, startingRelationshipId + i, importedComp);
                    yield this.addRelationshipToWrapper(relationshipFileInfo, zipContent, wrapper, media);
                    return { type: reference.type, footer: wrapper };
                }))
                    .filter((x) => !!x);
                return Promise.all(result);
            });
        }
        createHeaders(zipContent, documentRefs, documentRelationships, media, startingRelationshipId) {
            return __awaiter(this, void 0, void 0, function* () {
                const result = documentRefs.headers
                    .map((reference, i) => __awaiter(this, void 0, void 0, function* () {
                    const relationshipFileInfo = documentRelationships.find((rel) => rel.id === reference.id);
                    if (relationshipFileInfo === null || !relationshipFileInfo) {
                        throw new Error(`Can not find target file for id ${reference.id}`);
                    }
                    const xmlData = yield zipContent.files[`word/${relationshipFileInfo.target}`].async("text");
                    const xmlObj = xml_js_1.xml2js(xmlData, { compact: false, captureSpacesBetweenElements: true });
                    if (!xmlObj.elements) {
                        return undefined;
                    }
                    const xmlElement = xmlObj.elements.reduce((acc, current) => (current.name === "w:hdr" ? current : acc));
                    const importedComp = xml_components_1.convertToXmlComponent(xmlElement);
                    const wrapper = new header_wrapper_1.HeaderWrapper(media, startingRelationshipId + i, importedComp);
                    yield this.addRelationshipToWrapper(relationshipFileInfo, zipContent, wrapper, media);
                    return { type: reference.type, header: wrapper };
                }))
                    .filter((x) => !!x);
                return Promise.all(result);
            });
        }
        addRelationshipToWrapper(relationhipFile, zipContent, wrapper, media) {
            return __awaiter(this, void 0, void 0, function* () {
                const refFile = zipContent.files[`word/_rels/${relationhipFile.target}.rels`];
                if (!refFile) {
                    return;
                }
                const xmlRef = yield refFile.async("text");
                const wrapperImagesReferences = this.findReferenceFiles(xmlRef).filter((r) => r.type === RelationshipType.IMAGE);
                const hyperLinkReferences = this.findReferenceFiles(xmlRef).filter((r) => r.type === RelationshipType.HYPERLINK);
                for (const r of wrapperImagesReferences) {
                    const buffer = yield zipContent.files[`word/${r.target}`].async("nodebuffer");
                    const mediaData = media.addMedia(buffer);
                    wrapper.Relationships.createRelationship(r.id, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image", `media/${mediaData.fileName}`);
                }
                for (const r of hyperLinkReferences) {
                    wrapper.Relationships.createRelationship(r.id, "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", r.target, relationship_1.TargetModeType.EXTERNAL);
                }
            });
        }
        findReferenceFiles(xmlData) {
            const xmlObj = xml_js_1.xml2js(xmlData, { compact: true });
            const relationXmlArray = Array.isArray(xmlObj.Relationships.Relationship)
                ? xmlObj.Relationships.Relationship
                : [xmlObj.Relationships.Relationship];
            const relationships = relationXmlArray
                .map((item) => {
                if (item._attributes === undefined) {
                    throw Error("relationship element has no attributes");
                }
                return {
                    id: this.parseRefId(item._attributes.Id),
                    type: schemeToType[item._attributes.Type],
                    target: item._attributes.Target,
                };
            })
                .filter((item) => item.type !== null);
            return relationships;
        }
        extractDocumentRefs(xmlData) {
            const xmlObj = xml_js_1.xml2js(xmlData, { compact: true });
            const sectionProp = xmlObj["w:document"]["w:body"]["w:sectPr"];
            const headerProps = sectionProp["w:headerReference"];
            let headersXmlArray;
            if (headerProps === undefined) {
                headersXmlArray = [];
            }
            else if (Array.isArray(headerProps)) {
                headersXmlArray = headerProps;
            }
            else {
                headersXmlArray = [headerProps];
            }
            const headers = headersXmlArray.map((item) => {
                if (item._attributes === undefined) {
                    throw Error("header referecne element has no attributes");
                }
                return {
                    type: item._attributes["w:type"],
                    id: this.parseRefId(item._attributes["r:id"]),
                };
            });
            const footerProps = sectionProp["w:footerReference"];
            let footersXmlArray;
            if (footerProps === undefined) {
                footersXmlArray = [];
            }
            else if (Array.isArray(footerProps)) {
                footersXmlArray = footerProps;
            }
            else {
                footersXmlArray = [footerProps];
            }
            const footers = footersXmlArray.map((item) => {
                if (item._attributes === undefined) {
                    throw Error("footer referecne element has no attributes");
                }
                return {
                    type: item._attributes["w:type"],
                    id: this.parseRefId(item._attributes["r:id"]),
                };
            });
            return { headers, footers };
        }
        checkIfTitlePageIsDefined(xmlData) {
            const xmlObj = xml_js_1.xml2js(xmlData, { compact: true });
            const sectionProp = xmlObj["w:document"]["w:body"]["w:sectPr"];
            return sectionProp["w:titlePg"] !== undefined;
        }
        parseRefId(str) {
            const match = /^rId(\d+)$/.exec(str);
            if (match === null) {
                throw new Error("Invalid ref id");
            }
            return parseInt(match[1], 10);
        }
    }
    exports.ImportDotx = ImportDotx;


    /***/ })
    /******/ ]);
    });
    });

    var docx$1 = /*@__PURE__*/getDefaultExportFromCjs(build);

    var FileSaver_min = createCommonjsModule(function (module, exports) {
    (function(a,b){b();})(commonjsGlobal,function(){function b(a,b){return "undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c);},d.onerror=function(){console.error("could not download file");},d.send();}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send();}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"));}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b);}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof commonjsGlobal&&commonjsGlobal.global===commonjsGlobal?commonjsGlobal:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href);},4E4),setTimeout(function(){e(j);},0));}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else {var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i);});}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null;},k.readAsDataURL(b);}else {var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m);},4E4);}});f.saveAs=g.saveAs=g,(module.exports=g);});

    //# sourceMappingURL=FileSaver.min.js.map
    });

    const textNodesUnder = (el) => {
      var n, a=[], walk=document.createTreeWalker(el,NodeFilter.SHOW_TEXT);
      while(n=walk.nextNode()) a.push(n);
      return a;
    };

    const renderer = (chapters) => ({
      html:      text => mangle(text),
      paragraph: text => `<p>${text}</p>`,
      strong:    text => `<b>${text}</b>`,
      em:        text => `<i>${text}</i>`,
      codespan:  text => '',
      code: (code, lang) => '',
      link: (key, i, text) => `<mage-link to="${key.replace('#', '')}">${
    text.trim() || chapters[key.replace('#', '')]?.title.trim() || key.replace('#', '')
  }</mage-link>`,
    });

    const addChapter$1 = (key, chapters ) => {
      const title = chapters[key].title || key;
      const text = chapters[key].text || " ";
      const inlineStyle = isNumber(key);
      const breakAfter = !isNumber(key);

      // Create Bookmark
      const bookMark = new docx$1.Bookmark(`mage${key}`, '');
      bookMark.text  = new docx$1.TextRun({
          text: inlineStyle ? `${title}. ` : title,
          bold: true,
        });

      const l = document.createElement("div");
      l.innerHTML = encodeToHTML(text, renderer(chapters)) || '<p></p>';

      // Create paragraphs
      const paragraphs = [];

      if(!inlineStyle){
        paragraphs.push(new docx$1.Paragraph({
            children: [bookMark],
            alignment: 'center',
        }));
      }

      const childNodes = l.childNodes;
      childNodes.forEach( (p, i) =>{
        const children = [];

        textNodesUnder(p).forEach( (node) => {
          let bold      = false;
          let italics   = false;
          let underline = false;

          let domElement = node.parentNode;
          while(domElement.tagName !== 'P'){
            const tag = domElement.tagName;

            if(tag === 'MAGE-LINK'){
              const href= domElement.getAttribute('to');
              children.push(
                new docx$1.Hyperlink(node.nodeValue, `mage${href}`,`mage${href}`)
              );
              return
            }

            if(tag === 'B') bold      = true;
            if(tag === 'I') italics   = true;
            if(tag === 'U') underline = true;
            domElement = domElement.parentNode;
          }

          children.push(new docx$1.TextRun({
            bold, italics, underline,
            text: node.nodeValue
          }));
        });

        // Get alignment
        let alignment = 'both';
        // Create paragraph
        paragraphs.push(new docx$1.Paragraph({
            children: [
              ...((inlineStyle && i === 0) ? [bookMark] : []),
              ...children,
            ],
            alignment,
        }));
      });

      paragraphs.push(new docx$1.Paragraph({
          children: [
            new docx$1.TextRun(''),
            ...(breakAfter ? [new docx$1.PageBreak()] : []),
          ]
      }));

      return paragraphs
    };


    const encode = (book) => {
      if(!book["__is_book"]) book = new Book(book);
      const doc = new docx$1.Document({
        styles: {
        paragraphStyles: [
            {
                id: "Normal",
                name: "Normal",
                next: "Normal",
                quickFormat: false,
                run: {
                    size: 24,
                    font: "Times New Roman",
                },
                paragraph: {
                    spacing: {
                        line: 276,
                    },
                },
            },
          ],
        }
      });

      const children = [];
      const {chapters, properties} = book.get();
      const name = properties.title || 'magebook';
      book.sortedKeys().forEach( key => {
        children.push(...addChapter$1(key, chapters));
      });

      doc.addSection({
          headers: { default: null, },
          size: {
            width: 8419,
            height: 11906,
          },
          margins: {
              top: 1417,
              right: 1134,
              bottom: 1134,
              left: 1134,
          },
          children,
      });

      docx$1.Packer.toBlob(doc).then(blob => {
        new FileReader();
        FileSaver_min(blob, name + '.docx');
      });

      

    };


    var docx = {encode};

    /*
     * Dexie.js - a minimalistic wrapper for IndexedDB
     * ===============================================
     *
     * By David Fahlander, david.fahlander@gmail.com
     *
     * Version 3.0.3, Wed Nov 18 2020
     *
     * http://dexie.org
     *
     * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
     */
     
    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };










    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    var keys = Object.keys;
    var isArray = Array.isArray;
    var _global = typeof self !== 'undefined' ? self :
        typeof window !== 'undefined' ? window :
            global;
    if (typeof Promise !== 'undefined' && !_global.Promise) {
        _global.Promise = Promise;
    }
    function extend(obj, extension) {
        if (typeof extension !== 'object')
            return obj;
        keys(extension).forEach(function (key) {
            obj[key] = extension[key];
        });
        return obj;
    }
    var getProto = Object.getPrototypeOf;
    var _hasOwn = {}.hasOwnProperty;
    function hasOwn(obj, prop) {
        return _hasOwn.call(obj, prop);
    }
    function props(proto, extension) {
        if (typeof extension === 'function')
            extension = extension(getProto(proto));
        keys(extension).forEach(function (key) {
            setProp(proto, key, extension[key]);
        });
    }
    var defineProperty = Object.defineProperty;
    function setProp(obj, prop, functionOrGetSet, options) {
        defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === 'function' ?
            { get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true } :
            { value: functionOrGetSet, configurable: true, writable: true }, options));
    }
    function derive(Child) {
        return {
            from: function (Parent) {
                Child.prototype = Object.create(Parent.prototype);
                setProp(Child.prototype, "constructor", Child);
                return {
                    extend: props.bind(null, Child.prototype)
                };
            }
        };
    }
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    function getPropertyDescriptor(obj, prop) {
        var pd = getOwnPropertyDescriptor(obj, prop);
        var proto;
        return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
    }
    var _slice = [].slice;
    function slice(args, start, end) {
        return _slice.call(args, start, end);
    }
    function override(origFunc, overridedFactory) {
        return overridedFactory(origFunc);
    }
    function assert(b) {
        if (!b)
            throw new Error("Assertion Failed");
    }
    function asap(fn) {
        if (_global.setImmediate)
            setImmediate(fn);
        else
            setTimeout(fn, 0);
    }

    function arrayToObject(array, extractor) {
        return array.reduce(function (result, item, i) {
            var nameAndValue = extractor(item, i);
            if (nameAndValue)
                result[nameAndValue[0]] = nameAndValue[1];
            return result;
        }, {});
    }

    function tryCatch(fn, onerror, args) {
        try {
            fn.apply(null, args);
        }
        catch (ex) {
            onerror && onerror(ex);
        }
    }
    function getByKeyPath(obj, keyPath) {
        if (hasOwn(obj, keyPath))
            return obj[keyPath];
        if (!keyPath)
            return obj;
        if (typeof keyPath !== 'string') {
            var rv = [];
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                var val = getByKeyPath(obj, keyPath[i]);
                rv.push(val);
            }
            return rv;
        }
        var period = keyPath.indexOf('.');
        if (period !== -1) {
            var innerObj = obj[keyPath.substr(0, period)];
            return innerObj === undefined ? undefined : getByKeyPath(innerObj, keyPath.substr(period + 1));
        }
        return undefined;
    }
    function setByKeyPath(obj, keyPath, value) {
        if (!obj || keyPath === undefined)
            return;
        if ('isFrozen' in Object && Object.isFrozen(obj))
            return;
        if (typeof keyPath !== 'string' && 'length' in keyPath) {
            assert(typeof value !== 'string' && 'length' in value);
            for (var i = 0, l = keyPath.length; i < l; ++i) {
                setByKeyPath(obj, keyPath[i], value[i]);
            }
        }
        else {
            var period = keyPath.indexOf('.');
            if (period !== -1) {
                var currentKeyPath = keyPath.substr(0, period);
                var remainingKeyPath = keyPath.substr(period + 1);
                if (remainingKeyPath === "")
                    if (value === undefined) {
                        if (isArray(obj) && !isNaN(parseInt(currentKeyPath)))
                            obj.splice(currentKeyPath, 1);
                        else
                            delete obj[currentKeyPath];
                    }
                    else
                        obj[currentKeyPath] = value;
                else {
                    var innerObj = obj[currentKeyPath];
                    if (!innerObj)
                        innerObj = (obj[currentKeyPath] = {});
                    setByKeyPath(innerObj, remainingKeyPath, value);
                }
            }
            else {
                if (value === undefined) {
                    if (isArray(obj) && !isNaN(parseInt(keyPath)))
                        obj.splice(keyPath, 1);
                    else
                        delete obj[keyPath];
                }
                else
                    obj[keyPath] = value;
            }
        }
    }
    function delByKeyPath(obj, keyPath) {
        if (typeof keyPath === 'string')
            setByKeyPath(obj, keyPath, undefined);
        else if ('length' in keyPath)
            [].map.call(keyPath, function (kp) {
                setByKeyPath(obj, kp, undefined);
            });
    }
    function shallowClone(obj) {
        var rv = {};
        for (var m in obj) {
            if (hasOwn(obj, m))
                rv[m] = obj[m];
        }
        return rv;
    }
    var concat = [].concat;
    function flatten(a) {
        return concat.apply([], a);
    }
    var intrinsicTypeNames = "Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set"
        .split(',').concat(flatten([8, 16, 32, 64].map(function (num) { return ["Int", "Uint", "Float"].map(function (t) { return t + num + "Array"; }); }))).filter(function (t) { return _global[t]; });
    var intrinsicTypes = intrinsicTypeNames.map(function (t) { return _global[t]; });
    var intrinsicTypeNameSet = arrayToObject(intrinsicTypeNames, function (x) { return [x, true]; });
    function deepClone(any) {
        if (!any || typeof any !== 'object')
            return any;
        var rv;
        if (isArray(any)) {
            rv = [];
            for (var i = 0, l = any.length; i < l; ++i) {
                rv.push(deepClone(any[i]));
            }
        }
        else if (intrinsicTypes.indexOf(any.constructor) >= 0) {
            rv = any;
        }
        else {
            rv = any.constructor ? Object.create(any.constructor.prototype) : {};
            for (var prop in any) {
                if (hasOwn(any, prop)) {
                    rv[prop] = deepClone(any[prop]);
                }
            }
        }
        return rv;
    }
    var toString = {}.toString;
    function toStringTag(o) {
        return toString.call(o).slice(8, -1);
    }
    var getValueOf = function (val, type) {
        return type === "Array" ? '' + val.map(function (v) { return getValueOf(v, toStringTag(v)); }) :
            type === "ArrayBuffer" ? '' + new Uint8Array(val) :
                type === "Date" ? val.getTime() :
                    ArrayBuffer.isView(val) ? '' + new Uint8Array(val.buffer) :
                        val;
    };
    function getObjectDiff(a, b, rv, prfx) {
        rv = rv || {};
        prfx = prfx || '';
        keys(a).forEach(function (prop) {
            if (!hasOwn(b, prop))
                rv[prfx + prop] = undefined;
            else {
                var ap = a[prop], bp = b[prop];
                if (typeof ap === 'object' && typeof bp === 'object' && ap && bp) {
                    var apTypeName = toStringTag(ap);
                    var bpTypeName = toStringTag(bp);
                    if (apTypeName === bpTypeName) {
                        if (intrinsicTypeNameSet[apTypeName]) {
                            if (getValueOf(ap, apTypeName) !== getValueOf(bp, bpTypeName)) {
                                rv[prfx + prop] = b[prop];
                            }
                        }
                        else {
                            getObjectDiff(ap, bp, rv, prfx + prop + ".");
                        }
                    }
                    else {
                        rv[prfx + prop] = b[prop];
                    }
                }
                else if (ap !== bp)
                    rv[prfx + prop] = b[prop];
            }
        });
        keys(b).forEach(function (prop) {
            if (!hasOwn(a, prop)) {
                rv[prfx + prop] = b[prop];
            }
        });
        return rv;
    }
    var iteratorSymbol = typeof Symbol !== 'undefined' && Symbol.iterator;
    var getIteratorOf = iteratorSymbol ? function (x) {
        var i;
        return x != null && (i = x[iteratorSymbol]) && i.apply(x);
    } : function () { return null; };
    var NO_CHAR_ARRAY = {};
    function getArrayOf(arrayLike) {
        var i, a, x, it;
        if (arguments.length === 1) {
            if (isArray(arrayLike))
                return arrayLike.slice();
            if (this === NO_CHAR_ARRAY && typeof arrayLike === 'string')
                return [arrayLike];
            if ((it = getIteratorOf(arrayLike))) {
                a = [];
                while (x = it.next(), !x.done)
                    a.push(x.value);
                return a;
            }
            if (arrayLike == null)
                return [arrayLike];
            i = arrayLike.length;
            if (typeof i === 'number') {
                a = new Array(i);
                while (i--)
                    a[i] = arrayLike[i];
                return a;
            }
            return [arrayLike];
        }
        i = arguments.length;
        a = new Array(i);
        while (i--)
            a[i] = arguments[i];
        return a;
    }
    var isAsyncFunction = typeof Symbol !== 'undefined'
        ? function (fn) { return fn[Symbol.toStringTag] === 'AsyncFunction'; }
        : function () { return false; };

    var debug = typeof location !== 'undefined' &&
        /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
    function setDebug(value, filter) {
        debug = value;
        libraryFilter = filter;
    }
    var libraryFilter = function () { return true; };
    var NEEDS_THROW_FOR_STACK = !new Error("").stack;
    function getErrorWithStack() {
        if (NEEDS_THROW_FOR_STACK)
            try {
                throw new Error();
            }
            catch (e) {
                return e;
            }
        return new Error();
    }
    function prettyStack(exception, numIgnoredFrames) {
        var stack = exception.stack;
        if (!stack)
            return "";
        numIgnoredFrames = (numIgnoredFrames || 0);
        if (stack.indexOf(exception.name) === 0)
            numIgnoredFrames += (exception.name + exception.message).split('\n').length;
        return stack.split('\n')
            .slice(numIgnoredFrames)
            .filter(libraryFilter)
            .map(function (frame) { return "\n" + frame; })
            .join('');
    }

    var dexieErrorNames = [
        'Modify',
        'Bulk',
        'OpenFailed',
        'VersionChange',
        'Schema',
        'Upgrade',
        'InvalidTable',
        'MissingAPI',
        'NoSuchDatabase',
        'InvalidArgument',
        'SubTransaction',
        'Unsupported',
        'Internal',
        'DatabaseClosed',
        'PrematureCommit',
        'ForeignAwait'
    ];
    var idbDomErrorNames = [
        'Unknown',
        'Constraint',
        'Data',
        'TransactionInactive',
        'ReadOnly',
        'Version',
        'NotFound',
        'InvalidState',
        'InvalidAccess',
        'Abort',
        'Timeout',
        'QuotaExceeded',
        'Syntax',
        'DataClone'
    ];
    var errorList = dexieErrorNames.concat(idbDomErrorNames);
    var defaultTexts = {
        VersionChanged: "Database version changed by other database connection",
        DatabaseClosed: "Database has been closed",
        Abort: "Transaction aborted",
        TransactionInactive: "Transaction has already completed or failed"
    };
    function DexieError(name, msg) {
        this._e = getErrorWithStack();
        this.name = name;
        this.message = msg;
    }
    derive(DexieError).from(Error).extend({
        stack: {
            get: function () {
                return this._stack ||
                    (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
            }
        },
        toString: function () { return this.name + ": " + this.message; }
    });
    function getMultiErrorMessage(msg, failures) {
        return msg + ". Errors: " + Object.keys(failures)
            .map(function (key) { return failures[key].toString(); })
            .filter(function (v, i, s) { return s.indexOf(v) === i; })
            .join('\n');
    }
    function ModifyError(msg, failures, successCount, failedKeys) {
        this._e = getErrorWithStack();
        this.failures = failures;
        this.failedKeys = failedKeys;
        this.successCount = successCount;
        this.message = getMultiErrorMessage(msg, failures);
    }
    derive(ModifyError).from(DexieError);
    function BulkError(msg, failures) {
        this._e = getErrorWithStack();
        this.name = "BulkError";
        this.failures = failures;
        this.message = getMultiErrorMessage(msg, failures);
    }
    derive(BulkError).from(DexieError);
    var errnames = errorList.reduce(function (obj, name) { return (obj[name] = name + "Error", obj); }, {});
    var BaseException = DexieError;
    var exceptions = errorList.reduce(function (obj, name) {
        var fullName = name + "Error";
        function DexieError(msgOrInner, inner) {
            this._e = getErrorWithStack();
            this.name = fullName;
            if (!msgOrInner) {
                this.message = defaultTexts[name] || fullName;
                this.inner = null;
            }
            else if (typeof msgOrInner === 'string') {
                this.message = "" + msgOrInner + (!inner ? '' : '\n ' + inner);
                this.inner = inner || null;
            }
            else if (typeof msgOrInner === 'object') {
                this.message = msgOrInner.name + " " + msgOrInner.message;
                this.inner = msgOrInner;
            }
        }
        derive(DexieError).from(BaseException);
        obj[name] = DexieError;
        return obj;
    }, {});
    exceptions.Syntax = SyntaxError;
    exceptions.Type = TypeError;
    exceptions.Range = RangeError;
    var exceptionMap = idbDomErrorNames.reduce(function (obj, name) {
        obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    function mapError(domError, message) {
        if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])
            return domError;
        var rv = new exceptionMap[domError.name](message || domError.message, domError);
        if ("stack" in domError) {
            setProp(rv, "stack", { get: function () {
                    return this.inner.stack;
                } });
        }
        return rv;
    }
    var fullNameExceptions = errorList.reduce(function (obj, name) {
        if (["Syntax", "Type", "Range"].indexOf(name) === -1)
            obj[name + "Error"] = exceptions[name];
        return obj;
    }, {});
    fullNameExceptions.ModifyError = ModifyError;
    fullNameExceptions.DexieError = DexieError;
    fullNameExceptions.BulkError = BulkError;

    function nop() { }
    function mirror(val) { return val; }
    function pureFunctionChain(f1, f2) {
        if (f1 == null || f1 === mirror)
            return f2;
        return function (val) {
            return f2(f1(val));
        };
    }
    function callBoth(on1, on2) {
        return function () {
            on1.apply(this, arguments);
            on2.apply(this, arguments);
        };
    }
    function hookCreatingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res !== undefined)
                arguments[0] = res;
            var onsuccess = this.onsuccess,
            onerror = this.onerror;
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res2 !== undefined ? res2 : res;
        };
    }
    function hookDeletingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            f1.apply(this, arguments);
            var onsuccess = this.onsuccess,
            onerror = this.onerror;
            this.onsuccess = this.onerror = null;
            f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
        };
    }
    function hookUpdatingChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function (modifications) {
            var res = f1.apply(this, arguments);
            extend(modifications, res);
            var onsuccess = this.onsuccess,
            onerror = this.onerror;
            this.onsuccess = null;
            this.onerror = null;
            var res2 = f2.apply(this, arguments);
            if (onsuccess)
                this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
            if (onerror)
                this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
            return res === undefined ?
                (res2 === undefined ? undefined : res2) :
                (extend(res, res2));
        };
    }
    function reverseStoppableEventChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            if (f2.apply(this, arguments) === false)
                return false;
            return f1.apply(this, arguments);
        };
    }

    function promisableChain(f1, f2) {
        if (f1 === nop)
            return f2;
        return function () {
            var res = f1.apply(this, arguments);
            if (res && typeof res.then === 'function') {
                var thiz = this, i = arguments.length, args = new Array(i);
                while (i--)
                    args[i] = arguments[i];
                return res.then(function () {
                    return f2.apply(thiz, args);
                });
            }
            return f2.apply(this, arguments);
        };
    }

    var INTERNAL = {};
    var LONG_STACKS_CLIP_LIMIT = 100;
    var MAX_LONG_STACKS = 20;
    var ZONE_ECHO_LIMIT = 100;
    var _a = typeof Promise === 'undefined' ?
        [] :
        (function () {
            var globalP = Promise.resolve();
            if (typeof crypto === 'undefined' || !crypto.subtle)
                return [globalP, globalP.__proto__, globalP];
            var nativeP = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
            return [
                nativeP,
                nativeP.__proto__,
                globalP
            ];
        })();
    var resolvedNativePromise = _a[0];
    var nativePromiseProto = _a[1];
    var resolvedGlobalPromise = _a[2];
    var nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
    var NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
    var patchGlobalPromise = !!resolvedGlobalPromise;
    var stack_being_generated = false;
    var schedulePhysicalTick = resolvedGlobalPromise ?
        function () { resolvedGlobalPromise.then(physicalTick); }
        :
            _global.setImmediate ?
                setImmediate.bind(null, physicalTick) :
                _global.MutationObserver ?
                    function () {
                        var hiddenDiv = document.createElement("div");
                        (new MutationObserver(function () {
                            physicalTick();
                            hiddenDiv = null;
                        })).observe(hiddenDiv, { attributes: true });
                        hiddenDiv.setAttribute('i', '1');
                    } :
                    function () { setTimeout(physicalTick, 0); };
    var asap$1 = function (callback, args) {
        microtickQueue.push([callback, args]);
        if (needsNewPhysicalTick) {
            schedulePhysicalTick();
            needsNewPhysicalTick = false;
        }
    };
    var isOutsideMicroTick = true;
    var needsNewPhysicalTick = true;
    var unhandledErrors = [];
    var rejectingErrors = [];
    var currentFulfiller = null;
    var rejectionMapper = mirror;
    var globalPSD = {
        id: 'global',
        global: true,
        ref: 0,
        unhandleds: [],
        onunhandled: globalError,
        pgp: false,
        env: {},
        finalize: function () {
            this.unhandleds.forEach(function (uh) {
                try {
                    globalError(uh[0], uh[1]);
                }
                catch (e) { }
            });
        }
    };
    var PSD = globalPSD;
    var microtickQueue = [];
    var numScheduledCalls = 0;
    var tickFinalizers = [];
    function DexiePromise(fn) {
        if (typeof this !== 'object')
            throw new TypeError('Promises must be constructed via new');
        this._listeners = [];
        this.onuncatched = nop;
        this._lib = false;
        var psd = (this._PSD = PSD);
        if (debug) {
            this._stackHolder = getErrorWithStack();
            this._prev = null;
            this._numPrev = 0;
        }
        if (typeof fn !== 'function') {
            if (fn !== INTERNAL)
                throw new TypeError('Not a function');
            this._state = arguments[1];
            this._value = arguments[2];
            if (this._state === false)
                handleRejection(this, this._value);
            return;
        }
        this._state = null;
        this._value = null;
        ++psd.ref;
        executePromiseTask(this, fn);
    }
    var thenProp = {
        get: function () {
            var psd = PSD, microTaskId = totalEchoes;
            function then(onFulfilled, onRejected) {
                var _this = this;
                var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
                var cleanup = possibleAwait && !decrementExpectedAwaits();
                var rv = new DexiePromise(function (resolve, reject) {
                    propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait, cleanup), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait, cleanup), resolve, reject, psd));
                });
                debug && linkToPreviousPromise(rv, this);
                return rv;
            }
            then.prototype = INTERNAL;
            return then;
        },
        set: function (value) {
            setProp(this, 'then', value && value.prototype === INTERNAL ?
                thenProp :
                {
                    get: function () {
                        return value;
                    },
                    set: thenProp.set
                });
        }
    };
    props(DexiePromise.prototype, {
        then: thenProp,
        _then: function (onFulfilled, onRejected) {
            propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
        },
        catch: function (onRejected) {
            if (arguments.length === 1)
                return this.then(null, onRejected);
            var type = arguments[0], handler = arguments[1];
            return typeof type === 'function' ? this.then(null, function (err) {
                return err instanceof type ? handler(err) : PromiseReject(err);
            })
                : this.then(null, function (err) {
                    return err && err.name === type ? handler(err) : PromiseReject(err);
                });
        },
        finally: function (onFinally) {
            return this.then(function (value) {
                onFinally();
                return value;
            }, function (err) {
                onFinally();
                return PromiseReject(err);
            });
        },
        stack: {
            get: function () {
                if (this._stack)
                    return this._stack;
                try {
                    stack_being_generated = true;
                    var stacks = getStack(this, [], MAX_LONG_STACKS);
                    var stack = stacks.join("\nFrom previous: ");
                    if (this._state !== null)
                        this._stack = stack;
                    return stack;
                }
                finally {
                    stack_being_generated = false;
                }
            }
        },
        timeout: function (ms, msg) {
            var _this = this;
            return ms < Infinity ?
                new DexiePromise(function (resolve, reject) {
                    var handle = setTimeout(function () { return reject(new exceptions.Timeout(msg)); }, ms);
                    _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
                }) : this;
        }
    });
    if (typeof Symbol !== 'undefined' && Symbol.toStringTag)
        setProp(DexiePromise.prototype, Symbol.toStringTag, 'Dexie.Promise');
    globalPSD.env = snapShot();
    function Listener(onFulfilled, onRejected, resolve, reject, zone) {
        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
        this.onRejected = typeof onRejected === 'function' ? onRejected : null;
        this.resolve = resolve;
        this.reject = reject;
        this.psd = zone;
    }
    props(DexiePromise, {
        all: function () {
            var values = getArrayOf.apply(null, arguments)
                .map(onPossibleParallellAsync);
            return new DexiePromise(function (resolve, reject) {
                if (values.length === 0)
                    resolve([]);
                var remaining = values.length;
                values.forEach(function (a, i) { return DexiePromise.resolve(a).then(function (x) {
                    values[i] = x;
                    if (!--remaining)
                        resolve(values);
                }, reject); });
            });
        },
        resolve: function (value) {
            if (value instanceof DexiePromise)
                return value;
            if (value && typeof value.then === 'function')
                return new DexiePromise(function (resolve, reject) {
                    value.then(resolve, reject);
                });
            var rv = new DexiePromise(INTERNAL, true, value);
            linkToPreviousPromise(rv, currentFulfiller);
            return rv;
        },
        reject: PromiseReject,
        race: function () {
            var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
            return new DexiePromise(function (resolve, reject) {
                values.map(function (value) { return DexiePromise.resolve(value).then(resolve, reject); });
            });
        },
        PSD: {
            get: function () { return PSD; },
            set: function (value) { return PSD = value; }
        },
        totalEchoes: { get: function () { return totalEchoes; } },
        newPSD: newScope,
        usePSD: usePSD,
        scheduler: {
            get: function () { return asap$1; },
            set: function (value) { asap$1 = value; }
        },
        rejectionMapper: {
            get: function () { return rejectionMapper; },
            set: function (value) { rejectionMapper = value; }
        },
        follow: function (fn, zoneProps) {
            return new DexiePromise(function (resolve, reject) {
                return newScope(function (resolve, reject) {
                    var psd = PSD;
                    psd.unhandleds = [];
                    psd.onunhandled = reject;
                    psd.finalize = callBoth(function () {
                        var _this = this;
                        run_at_end_of_this_or_next_physical_tick(function () {
                            _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);
                        });
                    }, psd.finalize);
                    fn();
                }, zoneProps, resolve, reject);
            });
        }
    });
    if (NativePromise) {
        if (NativePromise.allSettled)
            setProp(DexiePromise, "allSettled", function () {
                var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
                return new DexiePromise(function (resolve) {
                    if (possiblePromises.length === 0)
                        resolve([]);
                    var remaining = possiblePromises.length;
                    var results = new Array(remaining);
                    possiblePromises.forEach(function (p, i) { return DexiePromise.resolve(p).then(function (value) { return results[i] = { status: "fulfilled", value: value }; }, function (reason) { return results[i] = { status: "rejected", reason: reason }; })
                        .then(function () { return --remaining || resolve(results); }); });
                });
            });
        if (NativePromise.any && typeof AggregateError !== 'undefined')
            setProp(DexiePromise, "any", function () {
                var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
                return new DexiePromise(function (resolve, reject) {
                    if (possiblePromises.length === 0)
                        reject(new AggregateError([]));
                    var remaining = possiblePromises.length;
                    var failures = new Array(remaining);
                    possiblePromises.forEach(function (p, i) { return DexiePromise.resolve(p).then(function (value) { return resolve(value); }, function (failure) {
                        failures[i] = failure;
                        if (!--remaining)
                            reject(new AggregateError(failures));
                    }); });
                });
            });
    }
    function executePromiseTask(promise, fn) {
        try {
            fn(function (value) {
                if (promise._state !== null)
                    return;
                if (value === promise)
                    throw new TypeError('A promise cannot be resolved with itself.');
                var shouldExecuteTick = promise._lib && beginMicroTickScope();
                if (value && typeof value.then === 'function') {
                    executePromiseTask(promise, function (resolve, reject) {
                        value instanceof DexiePromise ?
                            value._then(resolve, reject) :
                            value.then(resolve, reject);
                    });
                }
                else {
                    promise._state = true;
                    promise._value = value;
                    propagateAllListeners(promise);
                }
                if (shouldExecuteTick)
                    endMicroTickScope();
            }, handleRejection.bind(null, promise));
        }
        catch (ex) {
            handleRejection(promise, ex);
        }
    }
    function handleRejection(promise, reason) {
        rejectingErrors.push(reason);
        if (promise._state !== null)
            return;
        var shouldExecuteTick = promise._lib && beginMicroTickScope();
        reason = rejectionMapper(reason);
        promise._state = false;
        promise._value = reason;
        debug && reason !== null && typeof reason === 'object' && !reason._promise && tryCatch(function () {
            var origProp = getPropertyDescriptor(reason, "stack");
            reason._promise = promise;
            setProp(reason, "stack", {
                get: function () {
                    return stack_being_generated ?
                        origProp && (origProp.get ?
                            origProp.get.apply(reason) :
                            origProp.value) :
                        promise.stack;
                }
            });
        });
        addPossiblyUnhandledError(promise);
        propagateAllListeners(promise);
        if (shouldExecuteTick)
            endMicroTickScope();
    }
    function propagateAllListeners(promise) {
        var listeners = promise._listeners;
        promise._listeners = [];
        for (var i = 0, len = listeners.length; i < len; ++i) {
            propagateToListener(promise, listeners[i]);
        }
        var psd = promise._PSD;
        --psd.ref || psd.finalize();
        if (numScheduledCalls === 0) {
            ++numScheduledCalls;
            asap$1(function () {
                if (--numScheduledCalls === 0)
                    finalizePhysicalTick();
            }, []);
        }
    }
    function propagateToListener(promise, listener) {
        if (promise._state === null) {
            promise._listeners.push(listener);
            return;
        }
        var cb = promise._state ? listener.onFulfilled : listener.onRejected;
        if (cb === null) {
            return (promise._state ? listener.resolve : listener.reject)(promise._value);
        }
        ++listener.psd.ref;
        ++numScheduledCalls;
        asap$1(callListener, [cb, promise, listener]);
    }
    function callListener(cb, promise, listener) {
        try {
            currentFulfiller = promise;
            var ret, value = promise._value;
            if (promise._state) {
                ret = cb(value);
            }
            else {
                if (rejectingErrors.length)
                    rejectingErrors = [];
                ret = cb(value);
                if (rejectingErrors.indexOf(value) === -1)
                    markErrorAsHandled(promise);
            }
            listener.resolve(ret);
        }
        catch (e) {
            listener.reject(e);
        }
        finally {
            currentFulfiller = null;
            if (--numScheduledCalls === 0)
                finalizePhysicalTick();
            --listener.psd.ref || listener.psd.finalize();
        }
    }
    function getStack(promise, stacks, limit) {
        if (stacks.length === limit)
            return stacks;
        var stack = "";
        if (promise._state === false) {
            var failure = promise._value, errorName, message;
            if (failure != null) {
                errorName = failure.name || "Error";
                message = failure.message || failure;
                stack = prettyStack(failure, 0);
            }
            else {
                errorName = failure;
                message = "";
            }
            stacks.push(errorName + (message ? ": " + message : "") + stack);
        }
        if (debug) {
            stack = prettyStack(promise._stackHolder, 2);
            if (stack && stacks.indexOf(stack) === -1)
                stacks.push(stack);
            if (promise._prev)
                getStack(promise._prev, stacks, limit);
        }
        return stacks;
    }
    function linkToPreviousPromise(promise, prev) {
        var numPrev = prev ? prev._numPrev + 1 : 0;
        if (numPrev < LONG_STACKS_CLIP_LIMIT) {
            promise._prev = prev;
            promise._numPrev = numPrev;
        }
    }
    function physicalTick() {
        beginMicroTickScope() && endMicroTickScope();
    }
    function beginMicroTickScope() {
        var wasRootExec = isOutsideMicroTick;
        isOutsideMicroTick = false;
        needsNewPhysicalTick = false;
        return wasRootExec;
    }
    function endMicroTickScope() {
        var callbacks, i, l;
        do {
            while (microtickQueue.length > 0) {
                callbacks = microtickQueue;
                microtickQueue = [];
                l = callbacks.length;
                for (i = 0; i < l; ++i) {
                    var item = callbacks[i];
                    item[0].apply(null, item[1]);
                }
            }
        } while (microtickQueue.length > 0);
        isOutsideMicroTick = true;
        needsNewPhysicalTick = true;
    }
    function finalizePhysicalTick() {
        var unhandledErrs = unhandledErrors;
        unhandledErrors = [];
        unhandledErrs.forEach(function (p) {
            p._PSD.onunhandled.call(null, p._value, p);
        });
        var finalizers = tickFinalizers.slice(0);
        var i = finalizers.length;
        while (i)
            finalizers[--i]();
    }
    function run_at_end_of_this_or_next_physical_tick(fn) {
        function finalizer() {
            fn();
            tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
        }
        tickFinalizers.push(finalizer);
        ++numScheduledCalls;
        asap$1(function () {
            if (--numScheduledCalls === 0)
                finalizePhysicalTick();
        }, []);
    }
    function addPossiblyUnhandledError(promise) {
        if (!unhandledErrors.some(function (p) { return p._value === promise._value; }))
            unhandledErrors.push(promise);
    }
    function markErrorAsHandled(promise) {
        var i = unhandledErrors.length;
        while (i)
            if (unhandledErrors[--i]._value === promise._value) {
                unhandledErrors.splice(i, 1);
                return;
            }
    }
    function PromiseReject(reason) {
        return new DexiePromise(INTERNAL, false, reason);
    }
    function wrap(fn, errorCatcher) {
        var psd = PSD;
        return function () {
            var wasRootExec = beginMicroTickScope(), outerScope = PSD;
            try {
                switchToZone(psd, true);
                return fn.apply(this, arguments);
            }
            catch (e) {
                errorCatcher && errorCatcher(e);
            }
            finally {
                switchToZone(outerScope, false);
                if (wasRootExec)
                    endMicroTickScope();
            }
        };
    }
    var task = { awaits: 0, echoes: 0, id: 0 };
    var taskCounter = 0;
    var zoneStack = [];
    var zoneEchoes = 0;
    var totalEchoes = 0;
    var zone_id_counter = 0;
    function newScope(fn, props$$1, a1, a2) {
        var parent = PSD, psd = Object.create(parent);
        psd.parent = parent;
        psd.ref = 0;
        psd.global = false;
        psd.id = ++zone_id_counter;
        var globalEnv = globalPSD.env;
        psd.env = patchGlobalPromise ? {
            Promise: DexiePromise,
            PromiseProp: { value: DexiePromise, configurable: true, writable: true },
            all: DexiePromise.all,
            race: DexiePromise.race,
            allSettled: DexiePromise.allSettled,
            any: DexiePromise.any,
            resolve: DexiePromise.resolve,
            reject: DexiePromise.reject,
            nthen: getPatchedPromiseThen(globalEnv.nthen, psd),
            gthen: getPatchedPromiseThen(globalEnv.gthen, psd)
        } : {};
        if (props$$1)
            extend(psd, props$$1);
        ++parent.ref;
        psd.finalize = function () {
            --this.parent.ref || this.parent.finalize();
        };
        var rv = usePSD(psd, fn, a1, a2);
        if (psd.ref === 0)
            psd.finalize();
        return rv;
    }
    function incrementExpectedAwaits() {
        if (!task.id)
            task.id = ++taskCounter;
        ++task.awaits;
        task.echoes += ZONE_ECHO_LIMIT;
        return task.id;
    }
    function decrementExpectedAwaits() {
        if (!task.awaits)
            return false;
        if (--task.awaits === 0)
            task.id = 0;
        task.echoes = task.awaits * ZONE_ECHO_LIMIT;
        return true;
    }
    if (('' + nativePromiseThen).indexOf('[native code]') === -1) {
        incrementExpectedAwaits = decrementExpectedAwaits = nop;
    }
    function onPossibleParallellAsync(possiblePromise) {
        if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
            incrementExpectedAwaits();
            return possiblePromise.then(function (x) {
                decrementExpectedAwaits();
                return x;
            }, function (e) {
                decrementExpectedAwaits();
                return rejection(e);
            });
        }
        return possiblePromise;
    }
    function zoneEnterEcho(targetZone) {
        ++totalEchoes;
        if (!task.echoes || --task.echoes === 0) {
            task.echoes = task.id = 0;
        }
        zoneStack.push(PSD);
        switchToZone(targetZone, true);
    }
    function zoneLeaveEcho() {
        var zone = zoneStack[zoneStack.length - 1];
        zoneStack.pop();
        switchToZone(zone, false);
    }
    function switchToZone(targetZone, bEnteringZone) {
        var currentZone = PSD;
        if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
            enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
        }
        if (targetZone === PSD)
            return;
        PSD = targetZone;
        if (currentZone === globalPSD)
            globalPSD.env = snapShot();
        if (patchGlobalPromise) {
            var GlobalPromise_1 = globalPSD.env.Promise;
            var targetEnv = targetZone.env;
            nativePromiseProto.then = targetEnv.nthen;
            GlobalPromise_1.prototype.then = targetEnv.gthen;
            if (currentZone.global || targetZone.global) {
                Object.defineProperty(_global, 'Promise', targetEnv.PromiseProp);
                GlobalPromise_1.all = targetEnv.all;
                GlobalPromise_1.race = targetEnv.race;
                GlobalPromise_1.resolve = targetEnv.resolve;
                GlobalPromise_1.reject = targetEnv.reject;
                if (targetEnv.allSettled)
                    GlobalPromise_1.allSettled = targetEnv.allSettled;
                if (targetEnv.any)
                    GlobalPromise_1.any = targetEnv.any;
            }
        }
    }
    function snapShot() {
        var GlobalPromise = _global.Promise;
        return patchGlobalPromise ? {
            Promise: GlobalPromise,
            PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
            all: GlobalPromise.all,
            race: GlobalPromise.race,
            allSettled: GlobalPromise.allSettled,
            any: GlobalPromise.any,
            resolve: GlobalPromise.resolve,
            reject: GlobalPromise.reject,
            nthen: nativePromiseProto.then,
            gthen: GlobalPromise.prototype.then
        } : {};
    }
    function usePSD(psd, fn, a1, a2, a3) {
        var outerScope = PSD;
        try {
            switchToZone(psd, true);
            return fn(a1, a2, a3);
        }
        finally {
            switchToZone(outerScope, false);
        }
    }
    function enqueueNativeMicroTask(job) {
        nativePromiseThen.call(resolvedNativePromise, job);
    }
    function nativeAwaitCompatibleWrap(fn, zone, possibleAwait, cleanup) {
        return typeof fn !== 'function' ? fn : function () {
            var outerZone = PSD;
            if (possibleAwait)
                incrementExpectedAwaits();
            switchToZone(zone, true);
            try {
                return fn.apply(this, arguments);
            }
            finally {
                switchToZone(outerZone, false);
                if (cleanup)
                    enqueueNativeMicroTask(decrementExpectedAwaits);
            }
        };
    }
    function getPatchedPromiseThen(origThen, zone) {
        return function (onResolved, onRejected) {
            return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone), nativeAwaitCompatibleWrap(onRejected, zone));
        };
    }
    var UNHANDLEDREJECTION = "unhandledrejection";
    function globalError(err, promise) {
        var rv;
        try {
            rv = promise.onuncatched(err);
        }
        catch (e) { }
        if (rv !== false)
            try {
                var event, eventData = { promise: promise, reason: err };
                if (_global.document && document.createEvent) {
                    event = document.createEvent('Event');
                    event.initEvent(UNHANDLEDREJECTION, true, true);
                    extend(event, eventData);
                }
                else if (_global.CustomEvent) {
                    event = new CustomEvent(UNHANDLEDREJECTION, { detail: eventData });
                    extend(event, eventData);
                }
                if (event && _global.dispatchEvent) {
                    dispatchEvent(event);
                    if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)
                        try {
                            _global.onunhandledrejection(event);
                        }
                        catch (_) { }
                }
                if (debug && event && !event.defaultPrevented) {
                    console.warn("Unhandled rejection: " + (err.stack || err));
                }
            }
            catch (e) { }
    }
    var rejection = DexiePromise.reject;

    function tempTransaction(db, mode, storeNames, fn) {
        if (!db._state.openComplete && (!PSD.letThrough)) {
            if (!db._state.isBeingOpened) {
                if (!db._options.autoOpen)
                    return rejection(new exceptions.DatabaseClosed());
                db.open().catch(nop);
            }
            return db._state.dbReadyPromise.then(function () { return tempTransaction(db, mode, storeNames, fn); });
        }
        else {
            var trans = db._createTransaction(mode, storeNames, db._dbSchema);
            try {
                trans.create();
            }
            catch (ex) {
                return rejection(ex);
            }
            return trans._promise(mode, function (resolve, reject) {
                return newScope(function () {
                    PSD.trans = trans;
                    return fn(resolve, reject, trans);
                });
            }).then(function (result) {
                return trans._completion.then(function () { return result; });
            });
        }
    }

    var DEXIE_VERSION = '3.0.3';
    var maxString = String.fromCharCode(65535);
    var minKey = -Infinity;
    var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
    var STRING_EXPECTED = "String expected.";
    var connections = [];
    var isIEOrEdge = typeof navigator !== 'undefined' && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
    var hasIEDeleteObjectStoreBug = isIEOrEdge;
    var hangsOnDeleteLargeKeyRange = isIEOrEdge;
    var dexieStackFrameFilter = function (frame) { return !/(dexie\.js|dexie\.min\.js)/.test(frame); };
    var DBNAMES_DB = '__dbnames';
    var READONLY = 'readonly';
    var READWRITE = 'readwrite';

    function combine(filter1, filter2) {
        return filter1 ?
            filter2 ?
                function () { return filter1.apply(this, arguments) && filter2.apply(this, arguments); } :
                filter1 :
            filter2;
    }

    var AnyRange = {
        type: 3          ,
        lower: -Infinity,
        lowerOpen: false,
        upper: [[]],
        upperOpen: false
    };

    function workaroundForUndefinedPrimKey(keyPath) {
        return function (obj) {
            if (getByKeyPath(obj, keyPath) === undefined) {
                obj = deepClone(obj);
                delByKeyPath(obj, keyPath);
            }
            return obj;
        };
    }

    var Table =               (function () {
        function Table() {
        }
        Table.prototype._trans = function (mode, fn, writeLocked) {
            var trans = this._tx || PSD.trans;
            var tableName = this.name;
            function checkTableInTransaction(resolve, reject, trans) {
                if (!trans.schema[tableName])
                    throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
                return fn(trans.idbtrans, trans);
            }
            var wasRootExec = beginMicroTickScope();
            try {
                return trans && trans.db === this.db ?
                    trans === PSD.trans ?
                        trans._promise(mode, checkTableInTransaction, writeLocked) :
                        newScope(function () { return trans._promise(mode, checkTableInTransaction, writeLocked); }, { trans: trans, transless: PSD.transless || PSD }) :
                    tempTransaction(this.db, mode, [this.name], checkTableInTransaction);
            }
            finally {
                if (wasRootExec)
                    endMicroTickScope();
            }
        };
        Table.prototype.get = function (keyOrCrit, cb) {
            var _this = this;
            if (keyOrCrit && keyOrCrit.constructor === Object)
                return this.where(keyOrCrit).first(cb);
            return this._trans('readonly', function (trans) {
                return _this.core.get({ trans: trans, key: keyOrCrit })
                    .then(function (res) { return _this.hook.reading.fire(res); });
            }).then(cb);
        };
        Table.prototype.where = function (indexOrCrit) {
            if (typeof indexOrCrit === 'string')
                return new this.db.WhereClause(this, indexOrCrit);
            if (isArray(indexOrCrit))
                return new this.db.WhereClause(this, "[" + indexOrCrit.join('+') + "]");
            var keyPaths = keys(indexOrCrit);
            if (keyPaths.length === 1)
                return this
                    .where(keyPaths[0])
                    .equals(indexOrCrit[keyPaths[0]]);
            var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function (ix) {
                return ix.compound &&
                    keyPaths.every(function (keyPath) { return ix.keyPath.indexOf(keyPath) >= 0; }) &&
                    ix.keyPath.every(function (keyPath) { return keyPaths.indexOf(keyPath) >= 0; });
            })[0];
            if (compoundIndex && this.db._maxKey !== maxString)
                return this
                    .where(compoundIndex.name)
                    .equals(compoundIndex.keyPath.map(function (kp) { return indexOrCrit[kp]; }));
            if (!compoundIndex && debug)
                console.warn("The query " + JSON.stringify(indexOrCrit) + " on " + this.name + " would benefit of a " +
                    ("compound index [" + keyPaths.join('+') + "]"));
            var idxByName = this.schema.idxByName;
            var idb = this.db._deps.indexedDB;
            function equals(a, b) {
                try {
                    return idb.cmp(a, b) === 0;
                }
                catch (e) {
                    return false;
                }
            }
            var _a = keyPaths.reduce(function (_a, keyPath) {
                var prevIndex = _a[0], prevFilterFn = _a[1];
                var index = idxByName[keyPath];
                var value = indexOrCrit[keyPath];
                return [
                    prevIndex || index,
                    prevIndex || !index ?
                        combine(prevFilterFn, index && index.multi ?
                            function (x) {
                                var prop = getByKeyPath(x, keyPath);
                                return isArray(prop) && prop.some(function (item) { return equals(value, item); });
                            } : function (x) { return equals(value, getByKeyPath(x, keyPath)); })
                        : prevFilterFn
                ];
            }, [null, null]), idx = _a[0], filterFunction = _a[1];
            return idx ?
                this.where(idx.name).equals(indexOrCrit[idx.keyPath])
                    .filter(filterFunction) :
                compoundIndex ?
                    this.filter(filterFunction) :
                    this.where(keyPaths).equals('');
        };
        Table.prototype.filter = function (filterFunction) {
            return this.toCollection().and(filterFunction);
        };
        Table.prototype.count = function (thenShortcut) {
            return this.toCollection().count(thenShortcut);
        };
        Table.prototype.offset = function (offset) {
            return this.toCollection().offset(offset);
        };
        Table.prototype.limit = function (numRows) {
            return this.toCollection().limit(numRows);
        };
        Table.prototype.each = function (callback) {
            return this.toCollection().each(callback);
        };
        Table.prototype.toArray = function (thenShortcut) {
            return this.toCollection().toArray(thenShortcut);
        };
        Table.prototype.toCollection = function () {
            return new this.db.Collection(new this.db.WhereClause(this));
        };
        Table.prototype.orderBy = function (index) {
            return new this.db.Collection(new this.db.WhereClause(this, isArray(index) ?
                "[" + index.join('+') + "]" :
                index));
        };
        Table.prototype.reverse = function () {
            return this.toCollection().reverse();
        };
        Table.prototype.mapToClass = function (constructor) {
            this.schema.mappedClass = constructor;
            var readHook = function (obj) {
                if (!obj)
                    return obj;
                var res = Object.create(constructor.prototype);
                for (var m in obj)
                    if (hasOwn(obj, m))
                        try {
                            res[m] = obj[m];
                        }
                        catch (_) { }
                return res;
            };
            if (this.schema.readHook) {
                this.hook.reading.unsubscribe(this.schema.readHook);
            }
            this.schema.readHook = readHook;
            this.hook("reading", readHook);
            return constructor;
        };
        Table.prototype.defineClass = function () {
            function Class(content) {
                extend(this, content);
            }
            
            return this.mapToClass(Class);
        };
        Table.prototype.add = function (obj, key) {
            var _this = this;
            var _a = this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
            var objToAdd = obj;
            if (keyPath && auto) {
                objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
            }
            return this._trans('readwrite', function (trans) {
                return _this.core.mutate({ trans: trans, type: 'add', keys: key != null ? [key] : null, values: [objToAdd] });
            }).then(function (res) { return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult; })
                .then(function (lastResult) {
                if (keyPath) {
                    try {
                        setByKeyPath(obj, keyPath, lastResult);
                    }
                    catch (_) { }
                    
                }
                return lastResult;
            });
        };
        Table.prototype.update = function (keyOrObject, modifications) {
            if (typeof modifications !== 'object' || isArray(modifications))
                throw new exceptions.InvalidArgument("Modifications must be an object.");
            if (typeof keyOrObject === 'object' && !isArray(keyOrObject)) {
                keys(modifications).forEach(function (keyPath) {
                    setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
                });
                var key = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
                if (key === undefined)
                    return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
                return this.where(":id").equals(key).modify(modifications);
            }
            else {
                return this.where(":id").equals(keyOrObject).modify(modifications);
            }
        };
        Table.prototype.put = function (obj, key) {
            var _this = this;
            var _a = this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
            var objToAdd = obj;
            if (keyPath && auto) {
                objToAdd = workaroundForUndefinedPrimKey(keyPath)(obj);
            }
            return this._trans('readwrite', function (trans) { return _this.core.mutate({ trans: trans, type: 'put', values: [objToAdd], keys: key != null ? [key] : null }); })
                .then(function (res) { return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult; })
                .then(function (lastResult) {
                if (keyPath) {
                    try {
                        setByKeyPath(obj, keyPath, lastResult);
                    }
                    catch (_) { }
                    
                }
                return lastResult;
            });
        };
        Table.prototype.delete = function (key) {
            var _this = this;
            return this._trans('readwrite', function (trans) { return _this.core.mutate({ trans: trans, type: 'delete', keys: [key] }); })
                .then(function (res) { return res.numFailures ? DexiePromise.reject(res.failures[0]) : undefined; });
        };
        Table.prototype.clear = function () {
            var _this = this;
            return this._trans('readwrite', function (trans) { return _this.core.mutate({ trans: trans, type: 'deleteRange', range: AnyRange }); })
                .then(function (res) { return res.numFailures ? DexiePromise.reject(res.failures[0]) : undefined; });
        };
        Table.prototype.bulkGet = function (keys$$1) {
            var _this = this;
            return this._trans('readonly', function (trans) {
                return _this.core.getMany({
                    keys: keys$$1,
                    trans: trans
                }).then(function (result) { return result.map(function (res) { return _this.hook.reading.fire(res); }); });
            });
        };
        Table.prototype.bulkAdd = function (objects, keysOrOptions, options) {
            var _this = this;
            var keys$$1 = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
            options = options || (keys$$1 ? undefined : keysOrOptions);
            var wantResults = options ? options.allKeys : undefined;
            return this._trans('readwrite', function (trans) {
                var _a = _this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
                if (keyPath && keys$$1)
                    throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
                if (keys$$1 && keys$$1.length !== objects.length)
                    throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                var numObjects = objects.length;
                var objectsToAdd = keyPath && auto ?
                    objects.map(workaroundForUndefinedPrimKey(keyPath)) :
                    objects;
                return _this.core.mutate({ trans: trans, type: 'add', keys: keys$$1, values: objectsToAdd, wantResults: wantResults })
                    .then(function (_a) {
                    var numFailures = _a.numFailures, results = _a.results, lastResult = _a.lastResult, failures = _a.failures;
                    var result = wantResults ? results : lastResult;
                    if (numFailures === 0)
                        return result;
                    throw new BulkError(_this.name + ".bulkAdd(): " + numFailures + " of " + numObjects + " operations failed", Object.keys(failures).map(function (pos) { return failures[pos]; }));
                });
            });
        };
        Table.prototype.bulkPut = function (objects, keysOrOptions, options) {
            var _this = this;
            var keys$$1 = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
            options = options || (keys$$1 ? undefined : keysOrOptions);
            var wantResults = options ? options.allKeys : undefined;
            return this._trans('readwrite', function (trans) {
                var _a = _this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
                if (keyPath && keys$$1)
                    throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
                if (keys$$1 && keys$$1.length !== objects.length)
                    throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
                var numObjects = objects.length;
                var objectsToPut = keyPath && auto ?
                    objects.map(workaroundForUndefinedPrimKey(keyPath)) :
                    objects;
                return _this.core.mutate({ trans: trans, type: 'put', keys: keys$$1, values: objectsToPut, wantResults: wantResults })
                    .then(function (_a) {
                    var numFailures = _a.numFailures, results = _a.results, lastResult = _a.lastResult, failures = _a.failures;
                    var result = wantResults ? results : lastResult;
                    if (numFailures === 0)
                        return result;
                    throw new BulkError(_this.name + ".bulkPut(): " + numFailures + " of " + numObjects + " operations failed", Object.keys(failures).map(function (pos) { return failures[pos]; }));
                });
            });
        };
        Table.prototype.bulkDelete = function (keys$$1) {
            var _this = this;
            var numKeys = keys$$1.length;
            return this._trans('readwrite', function (trans) {
                return _this.core.mutate({ trans: trans, type: 'delete', keys: keys$$1 });
            }).then(function (_a) {
                var numFailures = _a.numFailures, lastResult = _a.lastResult, failures = _a.failures;
                if (numFailures === 0)
                    return lastResult;
                throw new BulkError(_this.name + ".bulkDelete(): " + numFailures + " of " + numKeys + " operations failed", failures);
            });
        };
        return Table;
    }());

    function Events(ctx) {
        var evs = {};
        var rv = function (eventName, subscriber) {
            if (subscriber) {
                var i = arguments.length, args = new Array(i - 1);
                while (--i)
                    args[i - 1] = arguments[i];
                evs[eventName].subscribe.apply(null, args);
                return ctx;
            }
            else if (typeof (eventName) === 'string') {
                return evs[eventName];
            }
        };
        rv.addEventType = add;
        for (var i = 1, l = arguments.length; i < l; ++i) {
            add(arguments[i]);
        }
        return rv;
        function add(eventName, chainFunction, defaultFunction) {
            if (typeof eventName === 'object')
                return addConfiguredEvents(eventName);
            if (!chainFunction)
                chainFunction = reverseStoppableEventChain;
            if (!defaultFunction)
                defaultFunction = nop;
            var context = {
                subscribers: [],
                fire: defaultFunction,
                subscribe: function (cb) {
                    if (context.subscribers.indexOf(cb) === -1) {
                        context.subscribers.push(cb);
                        context.fire = chainFunction(context.fire, cb);
                    }
                },
                unsubscribe: function (cb) {
                    context.subscribers = context.subscribers.filter(function (fn) { return fn !== cb; });
                    context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
                }
            };
            evs[eventName] = rv[eventName] = context;
            return context;
        }
        function addConfiguredEvents(cfg) {
            keys(cfg).forEach(function (eventName) {
                var args = cfg[eventName];
                if (isArray(args)) {
                    add(eventName, cfg[eventName][0], cfg[eventName][1]);
                }
                else if (args === 'asap') {
                    var context = add(eventName, mirror, function fire() {
                        var i = arguments.length, args = new Array(i);
                        while (i--)
                            args[i] = arguments[i];
                        context.subscribers.forEach(function (fn) {
                            asap(function fireEvent() {
                                fn.apply(null, args);
                            });
                        });
                    });
                }
                else
                    throw new exceptions.InvalidArgument("Invalid event config");
            });
        }
    }

    function makeClassConstructor(prototype, constructor) {
        derive(constructor).from({ prototype: prototype });
        return constructor;
    }

    function createTableConstructor(db) {
        return makeClassConstructor(Table.prototype, function Table$$1(name, tableSchema, trans) {
            this.db = db;
            this._tx = trans;
            this.name = name;
            this.schema = tableSchema;
            this.hook = db._allTables[name] ? db._allTables[name].hook : Events(null, {
                "creating": [hookCreatingChain, nop],
                "reading": [pureFunctionChain, mirror],
                "updating": [hookUpdatingChain, nop],
                "deleting": [hookDeletingChain, nop]
            });
        });
    }

    function isPlainKeyRange(ctx, ignoreLimitFilter) {
        return !(ctx.filter || ctx.algorithm || ctx.or) &&
            (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
    }
    function addFilter(ctx, fn) {
        ctx.filter = combine(ctx.filter, fn);
    }
    function addReplayFilter(ctx, factory, isLimitFilter) {
        var curr = ctx.replayFilter;
        ctx.replayFilter = curr ? function () { return combine(curr(), factory()); } : factory;
        ctx.justLimit = isLimitFilter && !curr;
    }
    function addMatchFilter(ctx, fn) {
        ctx.isMatch = combine(ctx.isMatch, fn);
    }
    function getIndexOrStore(ctx, coreSchema) {
        if (ctx.isPrimKey)
            return coreSchema.primaryKey;
        var index = coreSchema.getIndexByKeyPath(ctx.index);
        if (!index)
            throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + coreSchema.name + " is not indexed");
        return index;
    }
    function openCursor(ctx, coreTable, trans) {
        var index = getIndexOrStore(ctx, coreTable.schema);
        return coreTable.openCursor({
            trans: trans,
            values: !ctx.keysOnly,
            reverse: ctx.dir === 'prev',
            unique: !!ctx.unique,
            query: {
                index: index,
                range: ctx.range
            }
        });
    }
    function iter(ctx, fn, coreTrans, coreTable) {
        var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
        if (!ctx.or) {
            return iterate(openCursor(ctx, coreTable, coreTrans), combine(ctx.algorithm, filter), fn, !ctx.keysOnly && ctx.valueMapper);
        }
        else {
            var set_1 = {};
            var union = function (item, cursor, advance) {
                if (!filter || filter(cursor, advance, function (result) { return cursor.stop(result); }, function (err) { return cursor.fail(err); })) {
                    var primaryKey = cursor.primaryKey;
                    var key = '' + primaryKey;
                    if (key === '[object ArrayBuffer]')
                        key = '' + new Uint8Array(primaryKey);
                    if (!hasOwn(set_1, key)) {
                        set_1[key] = true;
                        fn(item, cursor, advance);
                    }
                }
            };
            return Promise.all([
                ctx.or._iterate(union, coreTrans),
                iterate(openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)
            ]);
        }
    }
    function iterate(cursorPromise, filter, fn, valueMapper) {
        var mappedFn = valueMapper ? function (x, c, a) { return fn(valueMapper(x), c, a); } : fn;
        var wrappedFn = wrap(mappedFn);
        return cursorPromise.then(function (cursor) {
            if (cursor) {
                return cursor.start(function () {
                    var c = function () { return cursor.continue(); };
                    if (!filter || filter(cursor, function (advancer) { return c = advancer; }, function (val) { cursor.stop(val); c = nop; }, function (e) { cursor.fail(e); c = nop; }))
                        wrappedFn(cursor.value, cursor, function (advancer) { return c = advancer; });
                    c();
                });
            }
        });
    }

    var Collection =               (function () {
        function Collection() {
        }
        Collection.prototype._read = function (fn, cb) {
            var ctx = this._ctx;
            return ctx.error ?
                ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                ctx.table._trans('readonly', fn).then(cb);
        };
        Collection.prototype._write = function (fn) {
            var ctx = this._ctx;
            return ctx.error ?
                ctx.table._trans(null, rejection.bind(null, ctx.error)) :
                ctx.table._trans('readwrite', fn, "locked");
        };
        Collection.prototype._addAlgorithm = function (fn) {
            var ctx = this._ctx;
            ctx.algorithm = combine(ctx.algorithm, fn);
        };
        Collection.prototype._iterate = function (fn, coreTrans) {
            return iter(this._ctx, fn, coreTrans, this._ctx.table.core);
        };
        Collection.prototype.clone = function (props$$1) {
            var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
            if (props$$1)
                extend(ctx, props$$1);
            rv._ctx = ctx;
            return rv;
        };
        Collection.prototype.raw = function () {
            this._ctx.valueMapper = null;
            return this;
        };
        Collection.prototype.each = function (fn) {
            var ctx = this._ctx;
            return this._read(function (trans) { return iter(ctx, fn, trans, ctx.table.core); });
        };
        Collection.prototype.count = function (cb) {
            var _this = this;
            return this._read(function (trans) {
                var ctx = _this._ctx;
                var coreTable = ctx.table.core;
                if (isPlainKeyRange(ctx, true)) {
                    return coreTable.count({
                        trans: trans,
                        query: {
                            index: getIndexOrStore(ctx, coreTable.schema),
                            range: ctx.range
                        }
                    }).then(function (count) { return Math.min(count, ctx.limit); });
                }
                else {
                    var count = 0;
                    return iter(ctx, function () { ++count; return false; }, trans, coreTable)
                        .then(function () { return count; });
                }
            }).then(cb);
        };
        Collection.prototype.sortBy = function (keyPath, cb) {
            var parts = keyPath.split('.').reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
            function getval(obj, i) {
                if (i)
                    return getval(obj[parts[i]], i - 1);
                return obj[lastPart];
            }
            var order = this._ctx.dir === "next" ? 1 : -1;
            function sorter(a, b) {
                var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
                return aVal < bVal ? -order : aVal > bVal ? order : 0;
            }
            return this.toArray(function (a) {
                return a.sort(sorter);
            }).then(cb);
        };
        Collection.prototype.toArray = function (cb) {
            var _this = this;
            return this._read(function (trans) {
                var ctx = _this._ctx;
                if (ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                    var valueMapper_1 = ctx.valueMapper;
                    var index = getIndexOrStore(ctx, ctx.table.core.schema);
                    return ctx.table.core.query({
                        trans: trans,
                        limit: ctx.limit,
                        values: true,
                        query: {
                            index: index,
                            range: ctx.range
                        }
                    }).then(function (_a) {
                        var result = _a.result;
                        return valueMapper_1 ? result.map(valueMapper_1) : result;
                    });
                }
                else {
                    var a_1 = [];
                    return iter(ctx, function (item) { return a_1.push(item); }, trans, ctx.table.core).then(function () { return a_1; });
                }
            }, cb);
        };
        Collection.prototype.offset = function (offset) {
            var ctx = this._ctx;
            if (offset <= 0)
                return this;
            ctx.offset += offset;
            if (isPlainKeyRange(ctx)) {
                addReplayFilter(ctx, function () {
                    var offsetLeft = offset;
                    return function (cursor, advance) {
                        if (offsetLeft === 0)
                            return true;
                        if (offsetLeft === 1) {
                            --offsetLeft;
                            return false;
                        }
                        advance(function () {
                            cursor.advance(offsetLeft);
                            offsetLeft = 0;
                        });
                        return false;
                    };
                });
            }
            else {
                addReplayFilter(ctx, function () {
                    var offsetLeft = offset;
                    return function () { return (--offsetLeft < 0); };
                });
            }
            return this;
        };
        Collection.prototype.limit = function (numRows) {
            this._ctx.limit = Math.min(this._ctx.limit, numRows);
            addReplayFilter(this._ctx, function () {
                var rowsLeft = numRows;
                return function (cursor, advance, resolve) {
                    if (--rowsLeft <= 0)
                        advance(resolve);
                    return rowsLeft >= 0;
                };
            }, true);
            return this;
        };
        Collection.prototype.until = function (filterFunction, bIncludeStopEntry) {
            addFilter(this._ctx, function (cursor, advance, resolve) {
                if (filterFunction(cursor.value)) {
                    advance(resolve);
                    return bIncludeStopEntry;
                }
                else {
                    return true;
                }
            });
            return this;
        };
        Collection.prototype.first = function (cb) {
            return this.limit(1).toArray(function (a) { return a[0]; }).then(cb);
        };
        Collection.prototype.last = function (cb) {
            return this.reverse().first(cb);
        };
        Collection.prototype.filter = function (filterFunction) {
            addFilter(this._ctx, function (cursor) {
                return filterFunction(cursor.value);
            });
            addMatchFilter(this._ctx, filterFunction);
            return this;
        };
        Collection.prototype.and = function (filter) {
            return this.filter(filter);
        };
        Collection.prototype.or = function (indexName) {
            return new this.db.WhereClause(this._ctx.table, indexName, this);
        };
        Collection.prototype.reverse = function () {
            this._ctx.dir = (this._ctx.dir === "prev" ? "next" : "prev");
            if (this._ondirectionchange)
                this._ondirectionchange(this._ctx.dir);
            return this;
        };
        Collection.prototype.desc = function () {
            return this.reverse();
        };
        Collection.prototype.eachKey = function (cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            return this.each(function (val, cursor) { cb(cursor.key, cursor); });
        };
        Collection.prototype.eachUniqueKey = function (cb) {
            this._ctx.unique = "unique";
            return this.eachKey(cb);
        };
        Collection.prototype.eachPrimaryKey = function (cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            return this.each(function (val, cursor) { cb(cursor.primaryKey, cursor); });
        };
        Collection.prototype.keys = function (cb) {
            var ctx = this._ctx;
            ctx.keysOnly = !ctx.isMatch;
            var a = [];
            return this.each(function (item, cursor) {
                a.push(cursor.key);
            }).then(function () {
                return a;
            }).then(cb);
        };
        Collection.prototype.primaryKeys = function (cb) {
            var ctx = this._ctx;
            if (ctx.dir === 'next' && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                return this._read(function (trans) {
                    var index = getIndexOrStore(ctx, ctx.table.core.schema);
                    return ctx.table.core.query({
                        trans: trans,
                        values: false,
                        limit: ctx.limit,
                        query: {
                            index: index,
                            range: ctx.range
                        }
                    });
                }).then(function (_a) {
                    var result = _a.result;
                    return result;
                }).then(cb);
            }
            ctx.keysOnly = !ctx.isMatch;
            var a = [];
            return this.each(function (item, cursor) {
                a.push(cursor.primaryKey);
            }).then(function () {
                return a;
            }).then(cb);
        };
        Collection.prototype.uniqueKeys = function (cb) {
            this._ctx.unique = "unique";
            return this.keys(cb);
        };
        Collection.prototype.firstKey = function (cb) {
            return this.limit(1).keys(function (a) { return a[0]; }).then(cb);
        };
        Collection.prototype.lastKey = function (cb) {
            return this.reverse().firstKey(cb);
        };
        Collection.prototype.distinct = function () {
            var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
            if (!idx || !idx.multi)
                return this;
            var set = {};
            addFilter(this._ctx, function (cursor) {
                var strKey = cursor.primaryKey.toString();
                var found = hasOwn(set, strKey);
                set[strKey] = true;
                return !found;
            });
            return this;
        };
        Collection.prototype.modify = function (changes) {
            var _this = this;
            var ctx = this._ctx;
            return this._write(function (trans) {
                var modifyer;
                if (typeof changes === 'function') {
                    modifyer = changes;
                }
                else {
                    var keyPaths = keys(changes);
                    var numKeys = keyPaths.length;
                    modifyer = function (item) {
                        var anythingModified = false;
                        for (var i = 0; i < numKeys; ++i) {
                            var keyPath = keyPaths[i], val = changes[keyPath];
                            if (getByKeyPath(item, keyPath) !== val) {
                                setByKeyPath(item, keyPath, val);
                                anythingModified = true;
                            }
                        }
                        return anythingModified;
                    };
                }
                var coreTable = ctx.table.core;
                var _a = coreTable.schema.primaryKey, outbound = _a.outbound, extractKey = _a.extractKey;
                var limit = 'testmode' in Dexie ? 1 : 2000;
                var cmp = _this.db.core.cmp;
                var totalFailures = [];
                var successCount = 0;
                var failedKeys = [];
                var applyMutateResult = function (expectedCount, res) {
                    var failures = res.failures, numFailures = res.numFailures;
                    successCount += expectedCount - numFailures;
                    for (var _i = 0, _a = keys(failures); _i < _a.length; _i++) {
                        var pos = _a[_i];
                        totalFailures.push(failures[pos]);
                    }
                };
                return _this.clone().primaryKeys().then(function (keys$$1) {
                    var nextChunk = function (offset) {
                        var count = Math.min(limit, keys$$1.length - offset);
                        return coreTable.getMany({ trans: trans, keys: keys$$1.slice(offset, offset + count) }).then(function (values) {
                            var addValues = [];
                            var putValues = [];
                            var putKeys = outbound ? [] : null;
                            var deleteKeys = [];
                            for (var i = 0; i < count; ++i) {
                                var origValue = values[i];
                                var ctx_1 = {
                                    value: deepClone(origValue),
                                    primKey: keys$$1[offset + i]
                                };
                                if (modifyer.call(ctx_1, ctx_1.value, ctx_1) !== false) {
                                    if (ctx_1.value == null) {
                                        deleteKeys.push(keys$$1[offset + i]);
                                    }
                                    else if (!outbound && cmp(extractKey(origValue), extractKey(ctx_1.value)) !== 0) {
                                        deleteKeys.push(keys$$1[offset + i]);
                                        addValues.push(ctx_1.value);
                                    }
                                    else {
                                        putValues.push(ctx_1.value);
                                        if (outbound)
                                            putKeys.push(keys$$1[offset + i]);
                                    }
                                }
                            }
                            return Promise.resolve(addValues.length > 0 &&
                                coreTable.mutate({ trans: trans, type: 'add', values: addValues })
                                    .then(function (res) {
                                    for (var pos in res.failures) {
                                        deleteKeys.splice(parseInt(pos), 1);
                                    }
                                    applyMutateResult(addValues.length, res);
                                })).then(function (res) { return putValues.length > 0 &&
                                coreTable.mutate({ trans: trans, type: 'put', keys: putKeys, values: putValues })
                                    .then(function (res) { return applyMutateResult(putValues.length, res); }); }).then(function () { return deleteKeys.length > 0 &&
                                coreTable.mutate({ trans: trans, type: 'delete', keys: deleteKeys })
                                    .then(function (res) { return applyMutateResult(deleteKeys.length, res); }); }).then(function () {
                                return keys$$1.length > offset + count && nextChunk(offset + limit);
                            });
                        });
                    };
                    return nextChunk(0).then(function () {
                        if (totalFailures.length > 0)
                            throw new ModifyError("Error modifying one or more objects", totalFailures, successCount, failedKeys);
                        return keys$$1.length;
                    });
                });
            });
        };
        Collection.prototype.delete = function () {
            var ctx = this._ctx, range = ctx.range;
            if (isPlainKeyRange(ctx) &&
                ((ctx.isPrimKey && !hangsOnDeleteLargeKeyRange) || range.type === 3          ))
             {
                return this._write(function (trans) {
                    var primaryKey = ctx.table.core.schema.primaryKey;
                    var coreRange = range;
                    return ctx.table.core.count({ trans: trans, query: { index: primaryKey, range: coreRange } }).then(function (count) {
                        return ctx.table.core.mutate({ trans: trans, type: 'deleteRange', range: coreRange })
                            .then(function (_a) {
                            var failures = _a.failures; _a.lastResult; _a.results; var numFailures = _a.numFailures;
                            if (numFailures)
                                throw new ModifyError("Could not delete some values", Object.keys(failures).map(function (pos) { return failures[pos]; }), count - numFailures);
                            return count - numFailures;
                        });
                    });
                });
            }
            return this.modify(function (value, ctx) { return ctx.value = null; });
        };
        return Collection;
    }());

    function createCollectionConstructor(db) {
        return makeClassConstructor(Collection.prototype, function Collection$$1(whereClause, keyRangeGenerator) {
            this.db = db;
            var keyRange = AnyRange, error = null;
            if (keyRangeGenerator)
                try {
                    keyRange = keyRangeGenerator();
                }
                catch (ex) {
                    error = ex;
                }
            var whereCtx = whereClause._ctx;
            var table = whereCtx.table;
            var readingHook = table.hook.reading.fire;
            this._ctx = {
                table: table,
                index: whereCtx.index,
                isPrimKey: (!whereCtx.index || (table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name)),
                range: keyRange,
                keysOnly: false,
                dir: "next",
                unique: "",
                algorithm: null,
                filter: null,
                replayFilter: null,
                justLimit: true,
                isMatch: null,
                offset: 0,
                limit: Infinity,
                error: error,
                or: whereCtx.or,
                valueMapper: readingHook !== mirror ? readingHook : null
            };
        });
    }

    function simpleCompare(a, b) {
        return a < b ? -1 : a === b ? 0 : 1;
    }
    function simpleCompareReverse(a, b) {
        return a > b ? -1 : a === b ? 0 : 1;
    }

    function fail(collectionOrWhereClause, err, T) {
        var collection = collectionOrWhereClause instanceof WhereClause ?
            new collectionOrWhereClause.Collection(collectionOrWhereClause) :
            collectionOrWhereClause;
        collection._ctx.error = T ? new T(err) : new TypeError(err);
        return collection;
    }
    function emptyCollection(whereClause) {
        return new whereClause.Collection(whereClause, function () { return rangeEqual(""); }).limit(0);
    }
    function upperFactory(dir) {
        return dir === "next" ?
            function (s) { return s.toUpperCase(); } :
            function (s) { return s.toLowerCase(); };
    }
    function lowerFactory(dir) {
        return dir === "next" ?
            function (s) { return s.toLowerCase(); } :
            function (s) { return s.toUpperCase(); };
    }
    function nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
        var length = Math.min(key.length, lowerNeedle.length);
        var llp = -1;
        for (var i = 0; i < length; ++i) {
            var lwrKeyChar = lowerKey[i];
            if (lwrKeyChar !== lowerNeedle[i]) {
                if (cmp(key[i], upperNeedle[i]) < 0)
                    return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
                if (cmp(key[i], lowerNeedle[i]) < 0)
                    return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
                if (llp >= 0)
                    return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
                return null;
            }
            if (cmp(key[i], lwrKeyChar) < 0)
                llp = i;
        }
        if (length < lowerNeedle.length && dir === "next")
            return key + upperNeedle.substr(key.length);
        if (length < key.length && dir === "prev")
            return key.substr(0, upperNeedle.length);
        return (llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1));
    }
    function addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
        var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
        if (!needles.every(function (s) { return typeof s === 'string'; })) {
            return fail(whereClause, STRING_EXPECTED);
        }
        function initDirection(dir) {
            upper = upperFactory(dir);
            lower = lowerFactory(dir);
            compare = (dir === "next" ? simpleCompare : simpleCompareReverse);
            var needleBounds = needles.map(function (needle) {
                return { lower: lower(needle), upper: upper(needle) };
            }).sort(function (a, b) {
                return compare(a.lower, b.lower);
            });
            upperNeedles = needleBounds.map(function (nb) { return nb.upper; });
            lowerNeedles = needleBounds.map(function (nb) { return nb.lower; });
            direction = dir;
            nextKeySuffix = (dir === "next" ? "" : suffix);
        }
        initDirection("next");
        var c = new whereClause.Collection(whereClause, function () { return createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix); });
        c._ondirectionchange = function (direction) {
            initDirection(direction);
        };
        var firstPossibleNeedle = 0;
        c._addAlgorithm(function (cursor, advance, resolve) {
            var key = cursor.key;
            if (typeof key !== 'string')
                return false;
            var lowerKey = lower(key);
            if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) {
                return true;
            }
            else {
                var lowestPossibleCasing = null;
                for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
                    var casing = nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
                    if (casing === null && lowestPossibleCasing === null)
                        firstPossibleNeedle = i + 1;
                    else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
                        lowestPossibleCasing = casing;
                    }
                }
                if (lowestPossibleCasing !== null) {
                    advance(function () { cursor.continue(lowestPossibleCasing + nextKeySuffix); });
                }
                else {
                    advance(resolve);
                }
                return false;
            }
        });
        return c;
    }
    function createRange(lower, upper, lowerOpen, upperOpen) {
        return {
            type: 2            ,
            lower: lower,
            upper: upper,
            lowerOpen: lowerOpen,
            upperOpen: upperOpen
        };
    }
    function rangeEqual(value) {
        return {
            type: 1            ,
            lower: value,
            upper: value
        };
    }

    var WhereClause =               (function () {
        function WhereClause() {
        }
        Object.defineProperty(WhereClause.prototype, "Collection", {
            get: function () {
                return this._ctx.table.db.Collection;
            },
            enumerable: true,
            configurable: true
        });
        WhereClause.prototype.between = function (lower, upper, includeLower, includeUpper) {
            includeLower = includeLower !== false;
            includeUpper = includeUpper === true;
            try {
                if ((this._cmp(lower, upper) > 0) ||
                    (this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)))
                    return emptyCollection(this);
                return new this.Collection(this, function () { return createRange(lower, upper, !includeLower, !includeUpper); });
            }
            catch (e) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
        };
        WhereClause.prototype.equals = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return rangeEqual(value); });
        };
        WhereClause.prototype.above = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return createRange(value, undefined, true); });
        };
        WhereClause.prototype.aboveOrEqual = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return createRange(value, undefined, false); });
        };
        WhereClause.prototype.below = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return createRange(undefined, value, false, true); });
        };
        WhereClause.prototype.belowOrEqual = function (value) {
            if (value == null)
                return fail(this, INVALID_KEY_ARGUMENT);
            return new this.Collection(this, function () { return createRange(undefined, value); });
        };
        WhereClause.prototype.startsWith = function (str) {
            if (typeof str !== 'string')
                return fail(this, STRING_EXPECTED);
            return this.between(str, str + maxString, true, true);
        };
        WhereClause.prototype.startsWithIgnoreCase = function (str) {
            if (str === "")
                return this.startsWith(str);
            return addIgnoreCaseAlgorithm(this, function (x, a) { return x.indexOf(a[0]) === 0; }, [str], maxString);
        };
        WhereClause.prototype.equalsIgnoreCase = function (str) {
            return addIgnoreCaseAlgorithm(this, function (x, a) { return x === a[0]; }, [str], "");
        };
        WhereClause.prototype.anyOfIgnoreCase = function () {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
                return emptyCollection(this);
            return addIgnoreCaseAlgorithm(this, function (x, a) { return a.indexOf(x) !== -1; }, set, "");
        };
        WhereClause.prototype.startsWithAnyOfIgnoreCase = function () {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
                return emptyCollection(this);
            return addIgnoreCaseAlgorithm(this, function (x, a) { return a.some(function (n) { return x.indexOf(n) === 0; }); }, set, maxString);
        };
        WhereClause.prototype.anyOf = function () {
            var _this = this;
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            var compare = this._cmp;
            try {
                set.sort(compare);
            }
            catch (e) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
            if (set.length === 0)
                return emptyCollection(this);
            var c = new this.Collection(this, function () { return createRange(set[0], set[set.length - 1]); });
            c._ondirectionchange = function (direction) {
                compare = (direction === "next" ?
                    _this._ascending :
                    _this._descending);
                set.sort(compare);
            };
            var i = 0;
            c._addAlgorithm(function (cursor, advance, resolve) {
                var key = cursor.key;
                while (compare(key, set[i]) > 0) {
                    ++i;
                    if (i === set.length) {
                        advance(resolve);
                        return false;
                    }
                }
                if (compare(key, set[i]) === 0) {
                    return true;
                }
                else {
                    advance(function () { cursor.continue(set[i]); });
                    return false;
                }
            });
            return c;
        };
        WhereClause.prototype.notEqual = function (value) {
            return this.inAnyRange([[minKey, value], [value, this.db._maxKey]], { includeLowers: false, includeUppers: false });
        };
        WhereClause.prototype.noneOf = function () {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (set.length === 0)
                return new this.Collection(this);
            try {
                set.sort(this._ascending);
            }
            catch (e) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
            var ranges = set.reduce(function (res, val) { return res ?
                res.concat([[res[res.length - 1][1], val]]) :
                [[minKey, val]]; }, null);
            ranges.push([set[set.length - 1], this.db._maxKey]);
            return this.inAnyRange(ranges, { includeLowers: false, includeUppers: false });
        };
        WhereClause.prototype.inAnyRange = function (ranges, options) {
            var _this = this;
            var cmp = this._cmp, ascending = this._ascending, descending = this._descending, min = this._min, max = this._max;
            if (ranges.length === 0)
                return emptyCollection(this);
            if (!ranges.every(function (range) {
                return range[0] !== undefined &&
                    range[1] !== undefined &&
                    ascending(range[0], range[1]) <= 0;
            })) {
                return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
            }
            var includeLowers = !options || options.includeLowers !== false;
            var includeUppers = options && options.includeUppers === true;
            function addRange(ranges, newRange) {
                var i = 0, l = ranges.length;
                for (; i < l; ++i) {
                    var range = ranges[i];
                    if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                        range[0] = min(range[0], newRange[0]);
                        range[1] = max(range[1], newRange[1]);
                        break;
                    }
                }
                if (i === l)
                    ranges.push(newRange);
                return ranges;
            }
            var sortDirection = ascending;
            function rangeSorter(a, b) { return sortDirection(a[0], b[0]); }
            var set;
            try {
                set = ranges.reduce(addRange, []);
                set.sort(rangeSorter);
            }
            catch (ex) {
                return fail(this, INVALID_KEY_ARGUMENT);
            }
            var rangePos = 0;
            var keyIsBeyondCurrentEntry = includeUppers ?
                function (key) { return ascending(key, set[rangePos][1]) > 0; } :
                function (key) { return ascending(key, set[rangePos][1]) >= 0; };
            var keyIsBeforeCurrentEntry = includeLowers ?
                function (key) { return descending(key, set[rangePos][0]) > 0; } :
                function (key) { return descending(key, set[rangePos][0]) >= 0; };
            function keyWithinCurrentRange(key) {
                return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
            }
            var checkKey = keyIsBeyondCurrentEntry;
            var c = new this.Collection(this, function () { return createRange(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers); });
            c._ondirectionchange = function (direction) {
                if (direction === "next") {
                    checkKey = keyIsBeyondCurrentEntry;
                    sortDirection = ascending;
                }
                else {
                    checkKey = keyIsBeforeCurrentEntry;
                    sortDirection = descending;
                }
                set.sort(rangeSorter);
            };
            c._addAlgorithm(function (cursor, advance, resolve) {
                var key = cursor.key;
                while (checkKey(key)) {
                    ++rangePos;
                    if (rangePos === set.length) {
                        advance(resolve);
                        return false;
                    }
                }
                if (keyWithinCurrentRange(key)) {
                    return true;
                }
                else if (_this._cmp(key, set[rangePos][1]) === 0 || _this._cmp(key, set[rangePos][0]) === 0) {
                    return false;
                }
                else {
                    advance(function () {
                        if (sortDirection === ascending)
                            cursor.continue(set[rangePos][0]);
                        else
                            cursor.continue(set[rangePos][1]);
                    });
                    return false;
                }
            });
            return c;
        };
        WhereClause.prototype.startsWithAnyOf = function () {
            var set = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
            if (!set.every(function (s) { return typeof s === 'string'; })) {
                return fail(this, "startsWithAnyOf() only works with strings");
            }
            if (set.length === 0)
                return emptyCollection(this);
            return this.inAnyRange(set.map(function (str) { return [str, str + maxString]; }));
        };
        return WhereClause;
    }());

    function createWhereClauseConstructor(db) {
        return makeClassConstructor(WhereClause.prototype, function WhereClause$$1(table, index, orCollection) {
            this.db = db;
            this._ctx = {
                table: table,
                index: index === ":id" ? null : index,
                or: orCollection
            };
            var indexedDB = db._deps.indexedDB;
            if (!indexedDB)
                throw new exceptions.MissingAPI("indexedDB API missing");
            this._cmp = this._ascending = indexedDB.cmp.bind(indexedDB);
            this._descending = function (a, b) { return indexedDB.cmp(b, a); };
            this._max = function (a, b) { return indexedDB.cmp(a, b) > 0 ? a : b; };
            this._min = function (a, b) { return indexedDB.cmp(a, b) < 0 ? a : b; };
            this._IDBKeyRange = db._deps.IDBKeyRange;
        });
    }

    function safariMultiStoreFix(storeNames) {
        return storeNames.length === 1 ? storeNames[0] : storeNames;
    }

    function getMaxKey(IdbKeyRange) {
        try {
            IdbKeyRange.only([[]]);
            return [[]];
        }
        catch (e) {
            return maxString;
        }
    }

    function eventRejectHandler(reject) {
        return wrap(function (event) {
            preventDefault(event);
            reject(event.target.error);
            return false;
        });
    }



    function preventDefault(event) {
        if (event.stopPropagation)
            event.stopPropagation();
        if (event.preventDefault)
            event.preventDefault();
    }

    var Transaction =               (function () {
        function Transaction() {
        }
        Transaction.prototype._lock = function () {
            assert(!PSD.global);
            ++this._reculock;
            if (this._reculock === 1 && !PSD.global)
                PSD.lockOwnerFor = this;
            return this;
        };
        Transaction.prototype._unlock = function () {
            assert(!PSD.global);
            if (--this._reculock === 0) {
                if (!PSD.global)
                    PSD.lockOwnerFor = null;
                while (this._blockedFuncs.length > 0 && !this._locked()) {
                    var fnAndPSD = this._blockedFuncs.shift();
                    try {
                        usePSD(fnAndPSD[1], fnAndPSD[0]);
                    }
                    catch (e) { }
                }
            }
            return this;
        };
        Transaction.prototype._locked = function () {
            return this._reculock && PSD.lockOwnerFor !== this;
        };
        Transaction.prototype.create = function (idbtrans) {
            var _this = this;
            if (!this.mode)
                return this;
            var idbdb = this.db.idbdb;
            var dbOpenError = this.db._state.dbOpenError;
            assert(!this.idbtrans);
            if (!idbtrans && !idbdb) {
                switch (dbOpenError && dbOpenError.name) {
                    case "DatabaseClosedError":
                        throw new exceptions.DatabaseClosed(dbOpenError);
                    case "MissingAPIError":
                        throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
                    default:
                        throw new exceptions.OpenFailed(dbOpenError);
                }
            }
            if (!this.active)
                throw new exceptions.TransactionInactive();
            assert(this._completion._state === null);
            idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);
            idbtrans.onerror = wrap(function (ev) {
                preventDefault(ev);
                _this._reject(idbtrans.error);
            });
            idbtrans.onabort = wrap(function (ev) {
                preventDefault(ev);
                _this.active && _this._reject(new exceptions.Abort(idbtrans.error));
                _this.active = false;
                _this.on("abort").fire(ev);
            });
            idbtrans.oncomplete = wrap(function () {
                _this.active = false;
                _this._resolve();
            });
            return this;
        };
        Transaction.prototype._promise = function (mode, fn, bWriteLock) {
            var _this = this;
            if (mode === 'readwrite' && this.mode !== 'readwrite')
                return rejection(new exceptions.ReadOnly("Transaction is readonly"));
            if (!this.active)
                return rejection(new exceptions.TransactionInactive());
            if (this._locked()) {
                return new DexiePromise(function (resolve, reject) {
                    _this._blockedFuncs.push([function () {
                            _this._promise(mode, fn, bWriteLock).then(resolve, reject);
                        }, PSD]);
                });
            }
            else if (bWriteLock) {
                return newScope(function () {
                    var p = new DexiePromise(function (resolve, reject) {
                        _this._lock();
                        var rv = fn(resolve, reject, _this);
                        if (rv && rv.then)
                            rv.then(resolve, reject);
                    });
                    p.finally(function () { return _this._unlock(); });
                    p._lib = true;
                    return p;
                });
            }
            else {
                var p = new DexiePromise(function (resolve, reject) {
                    var rv = fn(resolve, reject, _this);
                    if (rv && rv.then)
                        rv.then(resolve, reject);
                });
                p._lib = true;
                return p;
            }
        };
        Transaction.prototype._root = function () {
            return this.parent ? this.parent._root() : this;
        };
        Transaction.prototype.waitFor = function (promiseLike) {
            var root = this._root();
            var promise = DexiePromise.resolve(promiseLike);
            if (root._waitingFor) {
                root._waitingFor = root._waitingFor.then(function () { return promise; });
            }
            else {
                root._waitingFor = promise;
                root._waitingQueue = [];
                var store = root.idbtrans.objectStore(root.storeNames[0]);
                (function spin() {
                    ++root._spinCount;
                    while (root._waitingQueue.length)
                        (root._waitingQueue.shift())();
                    if (root._waitingFor)
                        store.get(-Infinity).onsuccess = spin;
                }());
            }
            var currentWaitPromise = root._waitingFor;
            return new DexiePromise(function (resolve, reject) {
                promise.then(function (res) { return root._waitingQueue.push(wrap(resolve.bind(null, res))); }, function (err) { return root._waitingQueue.push(wrap(reject.bind(null, err))); }).finally(function () {
                    if (root._waitingFor === currentWaitPromise) {
                        root._waitingFor = null;
                    }
                });
            });
        };
        Transaction.prototype.abort = function () {
            this.active && this._reject(new exceptions.Abort());
            this.active = false;
        };
        Transaction.prototype.table = function (tableName) {
            var memoizedTables = (this._memoizedTables || (this._memoizedTables = {}));
            if (hasOwn(memoizedTables, tableName))
                return memoizedTables[tableName];
            var tableSchema = this.schema[tableName];
            if (!tableSchema) {
                throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
            }
            var transactionBoundTable = new this.db.Table(tableName, tableSchema, this);
            transactionBoundTable.core = this.db.core.table(tableName);
            memoizedTables[tableName] = transactionBoundTable;
            return transactionBoundTable;
        };
        return Transaction;
    }());

    function createTransactionConstructor(db) {
        return makeClassConstructor(Transaction.prototype, function Transaction$$1(mode, storeNames, dbschema, parent) {
            var _this = this;
            this.db = db;
            this.mode = mode;
            this.storeNames = storeNames;
            this.schema = dbschema;
            this.idbtrans = null;
            this.on = Events(this, "complete", "error", "abort");
            this.parent = parent || null;
            this.active = true;
            this._reculock = 0;
            this._blockedFuncs = [];
            this._resolve = null;
            this._reject = null;
            this._waitingFor = null;
            this._waitingQueue = null;
            this._spinCount = 0;
            this._completion = new DexiePromise(function (resolve, reject) {
                _this._resolve = resolve;
                _this._reject = reject;
            });
            this._completion.then(function () {
                _this.active = false;
                _this.on.complete.fire();
            }, function (e) {
                var wasActive = _this.active;
                _this.active = false;
                _this.on.error.fire(e);
                _this.parent ?
                    _this.parent._reject(e) :
                    wasActive && _this.idbtrans && _this.idbtrans.abort();
                return rejection(e);
            });
        });
    }

    function createIndexSpec(name, keyPath, unique, multi, auto, compound, isPrimKey) {
        return {
            name: name,
            keyPath: keyPath,
            unique: unique,
            multi: multi,
            auto: auto,
            compound: compound,
            src: (unique && !isPrimKey ? '&' : '') + (multi ? '*' : '') + (auto ? "++" : "") + nameFromKeyPath(keyPath)
        };
    }
    function nameFromKeyPath(keyPath) {
        return typeof keyPath === 'string' ?
            keyPath :
            keyPath ? ('[' + [].join.call(keyPath, '+') + ']') : "";
    }

    function createTableSchema(name, primKey, indexes) {
        return {
            name: name,
            primKey: primKey,
            indexes: indexes,
            mappedClass: null,
            idxByName: arrayToObject(indexes, function (index) { return [index.name, index]; })
        };
    }

    function getKeyExtractor(keyPath) {
        if (keyPath == null) {
            return function () { return undefined; };
        }
        else if (typeof keyPath === 'string') {
            return getSinglePathKeyExtractor(keyPath);
        }
        else {
            return function (obj) { return getByKeyPath(obj, keyPath); };
        }
    }
    function getSinglePathKeyExtractor(keyPath) {
        var split = keyPath.split('.');
        if (split.length === 1) {
            return function (obj) { return obj[keyPath]; };
        }
        else {
            return function (obj) { return getByKeyPath(obj, keyPath); };
        }
    }

    function getEffectiveKeys(primaryKey, req) {
        if (req.type === 'delete')
            return req.keys;
        return req.keys || req.values.map(primaryKey.extractKey);
    }
    function getExistingValues(table, req, effectiveKeys) {
        return req.type === 'add' ? Promise.resolve(new Array(req.values.length)) :
            table.getMany({ trans: req.trans, keys: effectiveKeys });
    }

    function arrayify(arrayLike) {
        return [].slice.call(arrayLike);
    }

    var _id_counter = 0;
    function getKeyPathAlias(keyPath) {
        return keyPath == null ?
            ":id" :
            typeof keyPath === 'string' ?
                keyPath :
                "[" + keyPath.join('+') + "]";
    }
    function createDBCore(db, indexedDB, IdbKeyRange, tmpTrans) {
        var cmp = indexedDB.cmp.bind(indexedDB);
        function extractSchema(db, trans) {
            var tables = arrayify(db.objectStoreNames);
            return {
                schema: {
                    name: db.name,
                    tables: tables.map(function (table) { return trans.objectStore(table); }).map(function (store) {
                        var keyPath = store.keyPath, autoIncrement = store.autoIncrement;
                        var compound = isArray(keyPath);
                        var outbound = keyPath == null;
                        var indexByKeyPath = {};
                        var result = {
                            name: store.name,
                            primaryKey: {
                                name: null,
                                isPrimaryKey: true,
                                outbound: outbound,
                                compound: compound,
                                keyPath: keyPath,
                                autoIncrement: autoIncrement,
                                unique: true,
                                extractKey: getKeyExtractor(keyPath)
                            },
                            indexes: arrayify(store.indexNames).map(function (indexName) { return store.index(indexName); })
                                .map(function (index) {
                                var name = index.name, unique = index.unique, multiEntry = index.multiEntry, keyPath = index.keyPath;
                                var compound = isArray(keyPath);
                                var result = {
                                    name: name,
                                    compound: compound,
                                    keyPath: keyPath,
                                    unique: unique,
                                    multiEntry: multiEntry,
                                    extractKey: getKeyExtractor(keyPath)
                                };
                                indexByKeyPath[getKeyPathAlias(keyPath)] = result;
                                return result;
                            }),
                            getIndexByKeyPath: function (keyPath) { return indexByKeyPath[getKeyPathAlias(keyPath)]; }
                        };
                        indexByKeyPath[":id"] = result.primaryKey;
                        if (keyPath != null) {
                            indexByKeyPath[getKeyPathAlias(keyPath)] = result.primaryKey;
                        }
                        return result;
                    })
                },
                hasGetAll: tables.length > 0 && ('getAll' in trans.objectStore(tables[0])) &&
                    !(typeof navigator !== 'undefined' && /Safari/.test(navigator.userAgent) &&
                        !/(Chrome\/|Edge\/)/.test(navigator.userAgent) &&
                        [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
            };
        }
        function makeIDBKeyRange(range) {
            if (range.type === 3          )
                return null;
            if (range.type === 4            )
                throw new Error("Cannot convert never type to IDBKeyRange");
            var lower = range.lower, upper = range.upper, lowerOpen = range.lowerOpen, upperOpen = range.upperOpen;
            var idbRange = lower === undefined ?
                upper === undefined ?
                    null :
                    IdbKeyRange.upperBound(upper, !!upperOpen) :
                upper === undefined ?
                    IdbKeyRange.lowerBound(lower, !!lowerOpen) :
                    IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);
            return idbRange;
        }
        function createDbCoreTable(tableSchema) {
            var tableName = tableSchema.name;
            function mutate(_a) {
                var trans = _a.trans, type = _a.type, keys$$1 = _a.keys, values = _a.values, range = _a.range, wantResults = _a.wantResults;
                return new Promise(function (resolve, reject) {
                    resolve = wrap(resolve);
                    var store = trans.objectStore(tableName);
                    var outbound = store.keyPath == null;
                    var isAddOrPut = type === "put" || type === "add";
                    if (!isAddOrPut && type !== 'delete' && type !== 'deleteRange')
                        throw new Error("Invalid operation type: " + type);
                    var length = (keys$$1 || values || { length: 1 }).length;
                    if (keys$$1 && values && keys$$1.length !== values.length) {
                        throw new Error("Given keys array must have same length as given values array.");
                    }
                    if (length === 0)
                        return resolve({ numFailures: 0, failures: {}, results: [], lastResult: undefined });
                    var results = wantResults && __spreadArrays((keys$$1 ?
                        keys$$1 :
                        getEffectiveKeys(tableSchema.primaryKey, { type: type, keys: keys$$1, values: values })));
                    var req;
                    var failures = [];
                    var numFailures = 0;
                    var errorHandler = function (event) {
                        ++numFailures;
                        preventDefault(event);
                        if (results)
                            results[event.target._reqno] = undefined;
                        failures[event.target._reqno] = event.target.error;
                    };
                    var setResult = function (_a) {
                        var target = _a.target;
                        results[target._reqno] = target.result;
                    };
                    if (type === 'deleteRange') {
                        if (range.type === 4            )
                            return resolve({ numFailures: numFailures, failures: failures, results: results, lastResult: undefined });
                        if (range.type === 3          )
                            req = store.clear();
                        else
                            req = store.delete(makeIDBKeyRange(range));
                    }
                    else {
                        var _a = isAddOrPut ?
                            outbound ?
                                [values, keys$$1] :
                                [values, null] :
                            [keys$$1, null], args1 = _a[0], args2 = _a[1];
                        if (isAddOrPut) {
                            for (var i = 0; i < length; ++i) {
                                req = (args2 && args2[i] !== undefined ?
                                    store[type](args1[i], args2[i]) :
                                    store[type](args1[i]));
                                req._reqno = i;
                                if (results && results[i] === undefined) {
                                    req.onsuccess = setResult;
                                }
                                req.onerror = errorHandler;
                            }
                        }
                        else {
                            for (var i = 0; i < length; ++i) {
                                req = store[type](args1[i]);
                                req._reqno = i;
                                req.onerror = errorHandler;
                            }
                        }
                    }
                    var done = function (event) {
                        var lastResult = event.target.result;
                        if (results)
                            results[length - 1] = lastResult;
                        resolve({
                            numFailures: numFailures,
                            failures: failures,
                            results: results,
                            lastResult: lastResult
                        });
                    };
                    req.onerror = function (event) {
                        errorHandler(event);
                        done(event);
                    };
                    req.onsuccess = done;
                });
            }
            function openCursor(_a) {
                var trans = _a.trans, values = _a.values, query = _a.query, reverse = _a.reverse, unique = _a.unique;
                return new Promise(function (resolve, reject) {
                    resolve = wrap(resolve);
                    var index = query.index, range = query.range;
                    var store = trans.objectStore(tableName);
                    var source = index.isPrimaryKey ?
                        store :
                        store.index(index.name);
                    var direction = reverse ?
                        unique ?
                            "prevunique" :
                            "prev" :
                        unique ?
                            "nextunique" :
                            "next";
                    var req = values || !('openKeyCursor' in source) ?
                        source.openCursor(makeIDBKeyRange(range), direction) :
                        source.openKeyCursor(makeIDBKeyRange(range), direction);
                    req.onerror = eventRejectHandler(reject);
                    req.onsuccess = wrap(function (ev) {
                        var cursor = req.result;
                        if (!cursor) {
                            resolve(null);
                            return;
                        }
                        cursor.___id = ++_id_counter;
                        cursor.done = false;
                        var _cursorContinue = cursor.continue.bind(cursor);
                        var _cursorContinuePrimaryKey = cursor.continuePrimaryKey;
                        if (_cursorContinuePrimaryKey)
                            _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor);
                        var _cursorAdvance = cursor.advance.bind(cursor);
                        var doThrowCursorIsNotStarted = function () { throw new Error("Cursor not started"); };
                        var doThrowCursorIsStopped = function () { throw new Error("Cursor not stopped"); };
                        cursor.trans = trans;
                        cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsNotStarted;
                        cursor.fail = wrap(reject);
                        cursor.next = function () {
                            var _this = this;
                            var gotOne = 1;
                            return this.start(function () { return gotOne-- ? _this.continue() : _this.stop(); }).then(function () { return _this; });
                        };
                        cursor.start = function (callback) {
                            var iterationPromise = new Promise(function (resolveIteration, rejectIteration) {
                                resolveIteration = wrap(resolveIteration);
                                req.onerror = eventRejectHandler(rejectIteration);
                                cursor.fail = rejectIteration;
                                cursor.stop = function (value) {
                                    cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsStopped;
                                    resolveIteration(value);
                                };
                            });
                            var guardedCallback = function () {
                                if (req.result) {
                                    try {
                                        callback();
                                    }
                                    catch (err) {
                                        cursor.fail(err);
                                    }
                                }
                                else {
                                    cursor.done = true;
                                    cursor.start = function () { throw new Error("Cursor behind last entry"); };
                                    cursor.stop();
                                }
                            };
                            req.onsuccess = wrap(function (ev) {
                                req.onsuccess = guardedCallback;
                                guardedCallback();
                            });
                            cursor.continue = _cursorContinue;
                            cursor.continuePrimaryKey = _cursorContinuePrimaryKey;
                            cursor.advance = _cursorAdvance;
                            guardedCallback();
                            return iterationPromise;
                        };
                        resolve(cursor);
                    }, reject);
                });
            }
            function query(hasGetAll) {
                return function (request) {
                    return new Promise(function (resolve, reject) {
                        resolve = wrap(resolve);
                        var trans = request.trans, values = request.values, limit = request.limit, query = request.query;
                        var nonInfinitLimit = limit === Infinity ? undefined : limit;
                        var index = query.index, range = query.range;
                        var store = trans.objectStore(tableName);
                        var source = index.isPrimaryKey ? store : store.index(index.name);
                        var idbKeyRange = makeIDBKeyRange(range);
                        if (limit === 0)
                            return resolve({ result: [] });
                        if (hasGetAll) {
                            var req = values ?
                                source.getAll(idbKeyRange, nonInfinitLimit) :
                                source.getAllKeys(idbKeyRange, nonInfinitLimit);
                            req.onsuccess = function (event) { return resolve({ result: event.target.result }); };
                            req.onerror = eventRejectHandler(reject);
                        }
                        else {
                            var count_1 = 0;
                            var req_1 = values || !('openKeyCursor' in source) ?
                                source.openCursor(idbKeyRange) :
                                source.openKeyCursor(idbKeyRange);
                            var result_1 = [];
                            req_1.onsuccess = function (event) {
                                var cursor = req_1.result;
                                if (!cursor)
                                    return resolve({ result: result_1 });
                                result_1.push(values ? cursor.value : cursor.primaryKey);
                                if (++count_1 === limit)
                                    return resolve({ result: result_1 });
                                cursor.continue();
                            };
                            req_1.onerror = eventRejectHandler(reject);
                        }
                    });
                };
            }
            return {
                name: tableName,
                schema: tableSchema,
                mutate: mutate,
                getMany: function (_a) {
                    var trans = _a.trans, keys$$1 = _a.keys;
                    return new Promise(function (resolve, reject) {
                        resolve = wrap(resolve);
                        var store = trans.objectStore(tableName);
                        var length = keys$$1.length;
                        var result = new Array(length);
                        var keyCount = 0;
                        var callbackCount = 0;
                        var req;
                        var successHandler = function (event) {
                            var req = event.target;
                            if ((result[req._pos] = req.result) != null)
                                ;
                            if (++callbackCount === keyCount)
                                resolve(result);
                        };
                        var errorHandler = eventRejectHandler(reject);
                        for (var i = 0; i < length; ++i) {
                            var key = keys$$1[i];
                            if (key != null) {
                                req = store.get(keys$$1[i]);
                                req._pos = i;
                                req.onsuccess = successHandler;
                                req.onerror = errorHandler;
                                ++keyCount;
                            }
                        }
                        if (keyCount === 0)
                            resolve(result);
                    });
                },
                get: function (_a) {
                    var trans = _a.trans, key = _a.key;
                    return new Promise(function (resolve, reject) {
                        resolve = wrap(resolve);
                        var store = trans.objectStore(tableName);
                        var req = store.get(key);
                        req.onsuccess = function (event) { return resolve(event.target.result); };
                        req.onerror = eventRejectHandler(reject);
                    });
                },
                query: query(hasGetAll),
                openCursor: openCursor,
                count: function (_a) {
                    var query = _a.query, trans = _a.trans;
                    var index = query.index, range = query.range;
                    return new Promise(function (resolve, reject) {
                        var store = trans.objectStore(tableName);
                        var source = index.isPrimaryKey ? store : store.index(index.name);
                        var idbKeyRange = makeIDBKeyRange(range);
                        var req = idbKeyRange ? source.count(idbKeyRange) : source.count();
                        req.onsuccess = wrap(function (ev) { return resolve(ev.target.result); });
                        req.onerror = eventRejectHandler(reject);
                    });
                }
            };
        }
        var _a = extractSchema(db, tmpTrans), schema = _a.schema, hasGetAll = _a.hasGetAll;
        var tables = schema.tables.map(function (tableSchema) { return createDbCoreTable(tableSchema); });
        var tableMap = {};
        tables.forEach(function (table) { return tableMap[table.name] = table; });
        return {
            stack: "dbcore",
            transaction: db.transaction.bind(db),
            table: function (name) {
                var result = tableMap[name];
                if (!result)
                    throw new Error("Table '" + name + "' not found");
                return tableMap[name];
            },
            cmp: cmp,
            MIN_KEY: -Infinity,
            MAX_KEY: getMaxKey(IdbKeyRange),
            schema: schema
        };
    }

    function createMiddlewareStack(stackImpl, middlewares) {
        return middlewares.reduce(function (down, _a) {
            var create = _a.create;
            return (__assign(__assign({}, down), create(down)));
        }, stackImpl);
    }
    function createMiddlewareStacks(middlewares, idbdb, _a, tmpTrans) {
        var IDBKeyRange = _a.IDBKeyRange, indexedDB = _a.indexedDB;
        var dbcore = createMiddlewareStack(createDBCore(idbdb, indexedDB, IDBKeyRange, tmpTrans), middlewares.dbcore);
        return {
            dbcore: dbcore
        };
    }
    function generateMiddlewareStacks(db, tmpTrans) {
        var idbdb = tmpTrans.db;
        var stacks = createMiddlewareStacks(db._middlewares, idbdb, db._deps, tmpTrans);
        db.core = stacks.dbcore;
        db.tables.forEach(function (table) {
            var tableName = table.name;
            if (db.core.schema.tables.some(function (tbl) { return tbl.name === tableName; })) {
                table.core = db.core.table(tableName);
                if (db[tableName] instanceof db.Table) {
                    db[tableName].core = table.core;
                }
            }
        });
    }

    function setApiOnPlace(db, objs, tableNames, dbschema) {
        tableNames.forEach(function (tableName) {
            var schema = dbschema[tableName];
            objs.forEach(function (obj) {
                var propDesc = getPropertyDescriptor(obj, tableName);
                if (!propDesc || ("value" in propDesc && propDesc.value === undefined)) {
                    if (obj === db.Transaction.prototype || obj instanceof db.Transaction) {
                        setProp(obj, tableName, {
                            get: function () { return this.table(tableName); },
                            set: function (value) {
                                defineProperty(this, tableName, { value: value, writable: true, configurable: true, enumerable: true });
                            }
                        });
                    }
                    else {
                        obj[tableName] = new db.Table(tableName, schema);
                    }
                }
            });
        });
    }
    function removeTablesApi(db, objs) {
        objs.forEach(function (obj) {
            for (var key in obj) {
                if (obj[key] instanceof db.Table)
                    delete obj[key];
            }
        });
    }
    function lowerVersionFirst(a, b) {
        return a._cfg.version - b._cfg.version;
    }
    function runUpgraders(db, oldVersion, idbUpgradeTrans, reject) {
        var globalSchema = db._dbSchema;
        var trans = db._createTransaction('readwrite', db._storeNames, globalSchema);
        trans.create(idbUpgradeTrans);
        trans._completion.catch(reject);
        var rejectTransaction = trans._reject.bind(trans);
        var transless = PSD.transless || PSD;
        newScope(function () {
            PSD.trans = trans;
            PSD.transless = transless;
            if (oldVersion === 0) {
                keys(globalSchema).forEach(function (tableName) {
                    createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
                });
                generateMiddlewareStacks(db, idbUpgradeTrans);
                DexiePromise.follow(function () { return db.on.populate.fire(trans); }).catch(rejectTransaction);
            }
            else
                updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans).catch(rejectTransaction);
        });
    }
    function updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans) {
        var queue = [];
        var versions = db._versions;
        var globalSchema = db._dbSchema = buildGlobalSchema(db, db.idbdb, idbUpgradeTrans);
        var anyContentUpgraderHasRun = false;
        var versToRun = versions.filter(function (v) { return v._cfg.version >= oldVersion; });
        versToRun.forEach(function (version) {
            queue.push(function () {
                var oldSchema = globalSchema;
                var newSchema = version._cfg.dbschema;
                adjustToExistingIndexNames(db, oldSchema, idbUpgradeTrans);
                adjustToExistingIndexNames(db, newSchema, idbUpgradeTrans);
                globalSchema = db._dbSchema = newSchema;
                var diff = getSchemaDiff(oldSchema, newSchema);
                diff.add.forEach(function (tuple) {
                    createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
                });
                diff.change.forEach(function (change) {
                    if (change.recreate) {
                        throw new exceptions.Upgrade("Not yet support for changing primary key");
                    }
                    else {
                        var store_1 = idbUpgradeTrans.objectStore(change.name);
                        change.add.forEach(function (idx) { return addIndex(store_1, idx); });
                        change.change.forEach(function (idx) {
                            store_1.deleteIndex(idx.name);
                            addIndex(store_1, idx);
                        });
                        change.del.forEach(function (idxName) { return store_1.deleteIndex(idxName); });
                    }
                });
                var contentUpgrade = version._cfg.contentUpgrade;
                if (contentUpgrade && version._cfg.version > oldVersion) {
                    generateMiddlewareStacks(db, idbUpgradeTrans);
                    trans._memoizedTables = {};
                    anyContentUpgraderHasRun = true;
                    var upgradeSchema_1 = shallowClone(newSchema);
                    diff.del.forEach(function (table) {
                        upgradeSchema_1[table] = oldSchema[table];
                    });
                    removeTablesApi(db, [db.Transaction.prototype]);
                    setApiOnPlace(db, [db.Transaction.prototype], keys(upgradeSchema_1), upgradeSchema_1);
                    trans.schema = upgradeSchema_1;
                    var contentUpgradeIsAsync_1 = isAsyncFunction(contentUpgrade);
                    if (contentUpgradeIsAsync_1) {
                        incrementExpectedAwaits();
                    }
                    var returnValue_1;
                    var promiseFollowed = DexiePromise.follow(function () {
                        returnValue_1 = contentUpgrade(trans);
                        if (returnValue_1) {
                            if (contentUpgradeIsAsync_1) {
                                var decrementor = decrementExpectedAwaits.bind(null, null);
                                returnValue_1.then(decrementor, decrementor);
                            }
                        }
                    });
                    return (returnValue_1 && typeof returnValue_1.then === 'function' ?
                        DexiePromise.resolve(returnValue_1) : promiseFollowed.then(function () { return returnValue_1; }));
                }
            });
            queue.push(function (idbtrans) {
                if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
                    var newSchema = version._cfg.dbschema;
                    deleteRemovedTables(newSchema, idbtrans);
                }
                removeTablesApi(db, [db.Transaction.prototype]);
                setApiOnPlace(db, [db.Transaction.prototype], db._storeNames, db._dbSchema);
                trans.schema = db._dbSchema;
            });
        });
        function runQueue() {
            return queue.length ? DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) :
                DexiePromise.resolve();
        }
        return runQueue().then(function () {
            createMissingTables(globalSchema, idbUpgradeTrans);
        });
    }
    function getSchemaDiff(oldSchema, newSchema) {
        var diff = {
            del: [],
            add: [],
            change: []
        };
        var table;
        for (table in oldSchema) {
            if (!newSchema[table])
                diff.del.push(table);
        }
        for (table in newSchema) {
            var oldDef = oldSchema[table], newDef = newSchema[table];
            if (!oldDef) {
                diff.add.push([table, newDef]);
            }
            else {
                var change = {
                    name: table,
                    def: newDef,
                    recreate: false,
                    del: [],
                    add: [],
                    change: []
                };
                if ((
                '' + (oldDef.primKey.keyPath || '')) !== ('' + (newDef.primKey.keyPath || '')) ||
                    (oldDef.primKey.auto !== newDef.primKey.auto && !isIEOrEdge))
                 {
                    change.recreate = true;
                    diff.change.push(change);
                }
                else {
                    var oldIndexes = oldDef.idxByName;
                    var newIndexes = newDef.idxByName;
                    var idxName = void 0;
                    for (idxName in oldIndexes) {
                        if (!newIndexes[idxName])
                            change.del.push(idxName);
                    }
                    for (idxName in newIndexes) {
                        var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
                        if (!oldIdx)
                            change.add.push(newIdx);
                        else if (oldIdx.src !== newIdx.src)
                            change.change.push(newIdx);
                    }
                    if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
                        diff.change.push(change);
                    }
                }
            }
        }
        return diff;
    }
    function createTable(idbtrans, tableName, primKey, indexes) {
        var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ?
            { keyPath: primKey.keyPath, autoIncrement: primKey.auto } :
            { autoIncrement: primKey.auto });
        indexes.forEach(function (idx) { return addIndex(store, idx); });
        return store;
    }
    function createMissingTables(newSchema, idbtrans) {
        keys(newSchema).forEach(function (tableName) {
            if (!idbtrans.db.objectStoreNames.contains(tableName)) {
                createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
            }
        });
    }
    function deleteRemovedTables(newSchema, idbtrans) {
        for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {
            var storeName = idbtrans.db.objectStoreNames[i];
            if (newSchema[storeName] == null) {
                idbtrans.db.deleteObjectStore(storeName);
            }
        }
    }
    function addIndex(store, idx) {
        store.createIndex(idx.name, idx.keyPath, { unique: idx.unique, multiEntry: idx.multi });
    }
    function buildGlobalSchema(db, idbdb, tmpTrans) {
        var globalSchema = {};
        var dbStoreNames = slice(idbdb.objectStoreNames, 0);
        dbStoreNames.forEach(function (storeName) {
            var store = tmpTrans.objectStore(storeName);
            var keyPath = store.keyPath;
            var primKey = createIndexSpec(nameFromKeyPath(keyPath), keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== "string", true);
            var indexes = [];
            for (var j = 0; j < store.indexNames.length; ++j) {
                var idbindex = store.index(store.indexNames[j]);
                keyPath = idbindex.keyPath;
                var index = createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== "string", false);
                indexes.push(index);
            }
            globalSchema[storeName] = createTableSchema(storeName, primKey, indexes);
        });
        return globalSchema;
    }
    function readGlobalSchema(db, idbdb, tmpTrans) {
        db.verno = idbdb.version / 10;
        var globalSchema = db._dbSchema = buildGlobalSchema(db, idbdb, tmpTrans);
        db._storeNames = slice(idbdb.objectStoreNames, 0);
        setApiOnPlace(db, [db._allTables], keys(globalSchema), globalSchema);
    }
    function verifyInstalledSchema(db, tmpTrans) {
        var installedSchema = buildGlobalSchema(db, db.idbdb, tmpTrans);
        var diff = getSchemaDiff(installedSchema, db._dbSchema);
        return !(diff.add.length || diff.change.some(function (ch) { return ch.add.length || ch.change.length; }));
    }
    function adjustToExistingIndexNames(db, schema, idbtrans) {
        var storeNames = idbtrans.db.objectStoreNames;
        for (var i = 0; i < storeNames.length; ++i) {
            var storeName = storeNames[i];
            var store = idbtrans.objectStore(storeName);
            db._hasGetAll = 'getAll' in store;
            for (var j = 0; j < store.indexNames.length; ++j) {
                var indexName = store.indexNames[j];
                var keyPath = store.index(indexName).keyPath;
                var dexieName = typeof keyPath === 'string' ? keyPath : "[" + slice(keyPath).join('+') + "]";
                if (schema[storeName]) {
                    var indexSpec = schema[storeName].idxByName[dexieName];
                    if (indexSpec) {
                        indexSpec.name = indexName;
                        delete schema[storeName].idxByName[dexieName];
                        schema[storeName].idxByName[indexName] = indexSpec;
                    }
                }
            }
        }
        if (typeof navigator !== 'undefined' && /Safari/.test(navigator.userAgent) &&
            !/(Chrome\/|Edge\/)/.test(navigator.userAgent) &&
            _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope &&
            [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
            db._hasGetAll = false;
        }
    }
    function parseIndexSyntax(primKeyAndIndexes) {
        return primKeyAndIndexes.split(',').map(function (index, indexNum) {
            index = index.trim();
            var name = index.replace(/([&*]|\+\+)/g, "");
            var keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split('+') : name;
            return createIndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), isArray(keyPath), indexNum === 0);
        });
    }

    var Version =               (function () {
        function Version() {
        }
        Version.prototype._parseStoresSpec = function (stores, outSchema) {
            keys(stores).forEach(function (tableName) {
                if (stores[tableName] !== null) {
                    var indexes = parseIndexSyntax(stores[tableName]);
                    var primKey = indexes.shift();
                    if (primKey.multi)
                        throw new exceptions.Schema("Primary key cannot be multi-valued");
                    indexes.forEach(function (idx) {
                        if (idx.auto)
                            throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                        if (!idx.keyPath)
                            throw new exceptions.Schema("Index must have a name and cannot be an empty string");
                    });
                    outSchema[tableName] = createTableSchema(tableName, primKey, indexes);
                }
            });
        };
        Version.prototype.stores = function (stores) {
            var db = this.db;
            this._cfg.storesSource = this._cfg.storesSource ?
                extend(this._cfg.storesSource, stores) :
                stores;
            var versions = db._versions;
            var storesSpec = {};
            var dbschema = {};
            versions.forEach(function (version) {
                extend(storesSpec, version._cfg.storesSource);
                dbschema = (version._cfg.dbschema = {});
                version._parseStoresSpec(storesSpec, dbschema);
            });
            db._dbSchema = dbschema;
            removeTablesApi(db, [db._allTables, db, db.Transaction.prototype]);
            setApiOnPlace(db, [db._allTables, db, db.Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
            db._storeNames = keys(dbschema);
            return this;
        };
        Version.prototype.upgrade = function (upgradeFunction) {
            this._cfg.contentUpgrade = upgradeFunction;
            return this;
        };
        return Version;
    }());

    function createVersionConstructor(db) {
        return makeClassConstructor(Version.prototype, function Version$$1(versionNumber) {
            this.db = db;
            this._cfg = {
                version: versionNumber,
                storesSource: null,
                dbschema: {},
                tables: {},
                contentUpgrade: null
            };
        });
    }

    var databaseEnumerator;
    function DatabaseEnumerator(indexedDB) {
        var hasDatabasesNative = indexedDB && typeof indexedDB.databases === 'function';
        var dbNamesTable;
        if (!hasDatabasesNative) {
            var db = new Dexie(DBNAMES_DB, { addons: [] });
            db.version(1).stores({ dbnames: 'name' });
            dbNamesTable = db.table('dbnames');
        }
        return {
            getDatabaseNames: function () {
                return hasDatabasesNative
                    ?
                        DexiePromise.resolve(indexedDB.databases()).then(function (infos) { return infos
                            .map(function (info) { return info.name; })
                            .filter(function (name) { return name !== DBNAMES_DB; }); })
                    :
                        dbNamesTable.toCollection().primaryKeys();
            },
            add: function (name) {
                return !hasDatabasesNative && name !== DBNAMES_DB && dbNamesTable.put({ name: name }).catch(nop);
            },
            remove: function (name) {
                return !hasDatabasesNative && name !== DBNAMES_DB && dbNamesTable.delete(name).catch(nop);
            }
        };
    }
    function initDatabaseEnumerator(indexedDB) {
        try {
            databaseEnumerator = DatabaseEnumerator(indexedDB);
        }
        catch (e) { }
    }

    function vip(fn) {
        return newScope(function () {
            PSD.letThrough = true;
            return fn();
        });
    }

    function dexieOpen(db) {
        var state = db._state;
        var indexedDB = db._deps.indexedDB;
        if (state.isBeingOpened || db.idbdb)
            return state.dbReadyPromise.then(function () { return state.dbOpenError ?
                rejection(state.dbOpenError) :
                db; });
        debug && (state.openCanceller._stackHolder = getErrorWithStack());
        state.isBeingOpened = true;
        state.dbOpenError = null;
        state.openComplete = false;
        var resolveDbReady = state.dbReadyResolve,
        upgradeTransaction = null;
        return DexiePromise.race([state.openCanceller, new DexiePromise(function (resolve, reject) {
                if (!indexedDB)
                    throw new exceptions.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL " +
                        "(not locally). If using old Safari versions, make sure to include indexedDB polyfill.");
                var dbName = db.name;
                var req = state.autoSchema ?
                    indexedDB.open(dbName) :
                    indexedDB.open(dbName, Math.round(db.verno * 10));
                if (!req)
                    throw new exceptions.MissingAPI("IndexedDB API not available");
                req.onerror = eventRejectHandler(reject);
                req.onblocked = wrap(db._fireOnBlocked);
                req.onupgradeneeded = wrap(function (e) {
                    upgradeTransaction = req.transaction;
                    if (state.autoSchema && !db._options.allowEmptyDB) {
                        req.onerror = preventDefault;
                        upgradeTransaction.abort();
                        req.result.close();
                        var delreq = indexedDB.deleteDatabase(dbName);
                        delreq.onsuccess = delreq.onerror = wrap(function () {
                            reject(new exceptions.NoSuchDatabase("Database " + dbName + " doesnt exist"));
                        });
                    }
                    else {
                        upgradeTransaction.onerror = eventRejectHandler(reject);
                        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
                        db.idbdb = req.result;
                        runUpgraders(db, oldVer / 10, upgradeTransaction, reject);
                    }
                }, reject);
                req.onsuccess = wrap(function () {
                    upgradeTransaction = null;
                    var idbdb = db.idbdb = req.result;
                    var objectStoreNames = slice(idbdb.objectStoreNames);
                    if (objectStoreNames.length > 0)
                        try {
                            var tmpTrans = idbdb.transaction(safariMultiStoreFix(objectStoreNames), 'readonly');
                            if (state.autoSchema)
                                readGlobalSchema(db, idbdb, tmpTrans);
                            else {
                                adjustToExistingIndexNames(db, db._dbSchema, tmpTrans);
                                if (!verifyInstalledSchema(db, tmpTrans)) {
                                    console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.");
                                }
                            }
                            generateMiddlewareStacks(db, tmpTrans);
                        }
                        catch (e) {
                        }
                    connections.push(db);
                    idbdb.onversionchange = wrap(function (ev) {
                        state.vcFired = true;
                        db.on("versionchange").fire(ev);
                    });
                    databaseEnumerator.add(dbName);
                    resolve();
                }, reject);
            })]).then(function () {
            state.onReadyBeingFired = [];
            return DexiePromise.resolve(vip(db.on.ready.fire)).then(function fireRemainders() {
                if (state.onReadyBeingFired.length > 0) {
                    var remainders = state.onReadyBeingFired.reduce(promisableChain, nop);
                    state.onReadyBeingFired = [];
                    return DexiePromise.resolve(vip(remainders)).then(fireRemainders);
                }
            });
        }).finally(function () {
            state.onReadyBeingFired = null;
        }).then(function () {
            state.isBeingOpened = false;
            return db;
        }).catch(function (err) {
            try {
                upgradeTransaction && upgradeTransaction.abort();
            }
            catch (e) { }
            state.isBeingOpened = false;
            db.close();
            state.dbOpenError = err;
            return rejection(state.dbOpenError);
        }).finally(function () {
            state.openComplete = true;
            resolveDbReady();
        });
    }

    function awaitIterator(iterator) {
        var callNext = function (result) { return iterator.next(result); }, doThrow = function (error) { return iterator.throw(error); }, onSuccess = step(callNext), onError = step(doThrow);
        function step(getNext) {
            return function (val) {
                var next = getNext(val), value = next.value;
                return next.done ? value :
                    (!value || typeof value.then !== 'function' ?
                        isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) :
                        value.then(onSuccess, onError));
            };
        }
        return step(callNext)();
    }

    function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
        var i = arguments.length;
        if (i < 2)
            throw new exceptions.InvalidArgument("Too few arguments");
        var args = new Array(i - 1);
        while (--i)
            args[i - 1] = arguments[i];
        scopeFunc = args.pop();
        var tables = flatten(args);
        return [mode, tables, scopeFunc];
    }
    function enterTransactionScope(db, mode, storeNames, parentTransaction, scopeFunc) {
        return DexiePromise.resolve().then(function () {
            var transless = PSD.transless || PSD;
            var trans = db._createTransaction(mode, storeNames, db._dbSchema, parentTransaction);
            var zoneProps = {
                trans: trans,
                transless: transless
            };
            if (parentTransaction) {
                trans.idbtrans = parentTransaction.idbtrans;
            }
            else {
                trans.create();
            }
            var scopeFuncIsAsync = isAsyncFunction(scopeFunc);
            if (scopeFuncIsAsync) {
                incrementExpectedAwaits();
            }
            var returnValue;
            var promiseFollowed = DexiePromise.follow(function () {
                returnValue = scopeFunc.call(trans, trans);
                if (returnValue) {
                    if (scopeFuncIsAsync) {
                        var decrementor = decrementExpectedAwaits.bind(null, null);
                        returnValue.then(decrementor, decrementor);
                    }
                    else if (typeof returnValue.next === 'function' && typeof returnValue.throw === 'function') {
                        returnValue = awaitIterator(returnValue);
                    }
                }
            }, zoneProps);
            return (returnValue && typeof returnValue.then === 'function' ?
                DexiePromise.resolve(returnValue).then(function (x) { return trans.active ?
                    x
                    : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")); })
                : promiseFollowed.then(function () { return returnValue; })).then(function (x) {
                if (parentTransaction)
                    trans._resolve();
                return trans._completion.then(function () { return x; });
            }).catch(function (e) {
                trans._reject(e);
                return rejection(e);
            });
        });
    }

    function pad(a, value, count) {
        var result = isArray(a) ? a.slice() : [a];
        for (var i = 0; i < count; ++i)
            result.push(value);
        return result;
    }
    function createVirtualIndexMiddleware(down) {
        return __assign(__assign({}, down), { table: function (tableName) {
                var table = down.table(tableName);
                var schema = table.schema;
                var indexLookup = {};
                var allVirtualIndexes = [];
                function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {
                    var keyPathAlias = getKeyPathAlias(keyPath);
                    var indexList = (indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || []);
                    var keyLength = keyPath == null ? 0 : typeof keyPath === 'string' ? 1 : keyPath.length;
                    var isVirtual = keyTail > 0;
                    var virtualIndex = __assign(__assign({}, lowLevelIndex), { isVirtual: isVirtual, isPrimaryKey: !isVirtual && lowLevelIndex.isPrimaryKey, keyTail: keyTail,
                        keyLength: keyLength, extractKey: getKeyExtractor(keyPath), unique: !isVirtual && lowLevelIndex.unique });
                    indexList.push(virtualIndex);
                    if (!virtualIndex.isPrimaryKey) {
                        allVirtualIndexes.push(virtualIndex);
                    }
                    if (keyLength > 1) {
                        var virtualKeyPath = keyLength === 2 ?
                            keyPath[0] :
                            keyPath.slice(0, keyLength - 1);
                        addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);
                    }
                    indexList.sort(function (a, b) { return a.keyTail - b.keyTail; });
                    return virtualIndex;
                }
                var primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);
                indexLookup[":id"] = [primaryKey];
                for (var _i = 0, _a = schema.indexes; _i < _a.length; _i++) {
                    var index = _a[_i];
                    addVirtualIndexes(index.keyPath, 0, index);
                }
                function findBestIndex(keyPath) {
                    var result = indexLookup[getKeyPathAlias(keyPath)];
                    return result && result[0];
                }
                function translateRange(range, keyTail) {
                    return {
                        type: range.type === 1             ?
                            2             :
                            range.type,
                        lower: pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),
                        lowerOpen: true,
                        upper: pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),
                        upperOpen: true
                    };
                }
                function translateRequest(req) {
                    var index = req.query.index;
                    return index.isVirtual ? __assign(__assign({}, req), { query: {
                            index: index,
                            range: translateRange(req.query.range, index.keyTail)
                        } }) : req;
                }
                var result = __assign(__assign({}, table), { schema: __assign(__assign({}, schema), { primaryKey: primaryKey, indexes: allVirtualIndexes, getIndexByKeyPath: findBestIndex }), count: function (req) {
                        return table.count(translateRequest(req));
                    },
                    query: function (req) {
                        return table.query(translateRequest(req));
                    },
                    openCursor: function (req) {
                        var _a = req.query.index, keyTail = _a.keyTail, isVirtual = _a.isVirtual, keyLength = _a.keyLength;
                        if (!isVirtual)
                            return table.openCursor(req);
                        function createVirtualCursor(cursor) {
                            function _continue(key) {
                                key != null ?
                                    cursor.continue(pad(key, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) :
                                    req.unique ?
                                        cursor.continue(pad(cursor.key, req.reverse ? down.MIN_KEY : down.MAX_KEY, keyTail)) :
                                        cursor.continue();
                            }
                            var virtualCursor = Object.create(cursor, {
                                continue: { value: _continue },
                                continuePrimaryKey: {
                                    value: function (key, primaryKey) {
                                        cursor.continuePrimaryKey(pad(key, down.MAX_KEY, keyTail), primaryKey);
                                    }
                                },
                                key: {
                                    get: function () {
                                        var key = cursor.key;
                                        return keyLength === 1 ?
                                            key[0] :
                                            key.slice(0, keyLength);
                                    }
                                },
                                value: {
                                    get: function () {
                                        return cursor.value;
                                    }
                                }
                            });
                            return virtualCursor;
                        }
                        return table.openCursor(translateRequest(req))
                            .then(function (cursor) { return cursor && createVirtualCursor(cursor); });
                    } });
                return result;
            } });
    }
    var virtualIndexMiddleware = {
        stack: "dbcore",
        name: "VirtualIndexMiddleware",
        level: 1,
        create: createVirtualIndexMiddleware
    };

    var hooksMiddleware = {
        stack: "dbcore",
        name: "HooksMiddleware",
        level: 2,
        create: function (downCore) { return (__assign(__assign({}, downCore), { table: function (tableName) {
                var downTable = downCore.table(tableName);
                var primaryKey = downTable.schema.primaryKey;
                var tableMiddleware = __assign(__assign({}, downTable), { mutate: function (req) {
                        var dxTrans = PSD.trans;
                        var _a = dxTrans.table(tableName).hook, deleting = _a.deleting, creating = _a.creating, updating = _a.updating;
                        switch (req.type) {
                            case 'add':
                                if (creating.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', function () { return addPutOrDelete(req); }, true);
                            case 'put':
                                if (creating.fire === nop && updating.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', function () { return addPutOrDelete(req); }, true);
                            case 'delete':
                                if (deleting.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', function () { return addPutOrDelete(req); }, true);
                            case 'deleteRange':
                                if (deleting.fire === nop)
                                    break;
                                return dxTrans._promise('readwrite', function () { return deleteRange(req); }, true);
                        }
                        return downTable.mutate(req);
                        function addPutOrDelete(req) {
                            var dxTrans = PSD.trans;
                            var keys$$1 = req.keys || getEffectiveKeys(primaryKey, req);
                            if (!keys$$1)
                                throw new Error("Keys missing");
                            req = req.type === 'add' || req.type === 'put' ? __assign(__assign({}, req), { keys: keys$$1, wantResults: true }) :
                             __assign({}, req);
                            if (req.type !== 'delete')
                                req.values = __spreadArrays(req.values);
                            if (req.keys)
                                req.keys = __spreadArrays(req.keys);
                            return getExistingValues(downTable, req, keys$$1).then(function (existingValues) {
                                var contexts = keys$$1.map(function (key, i) {
                                    var existingValue = existingValues[i];
                                    var ctx = { onerror: null, onsuccess: null };
                                    if (req.type === 'delete') {
                                        deleting.fire.call(ctx, key, existingValue, dxTrans);
                                    }
                                    else if (req.type === 'add' || existingValue === undefined) {
                                        var generatedPrimaryKey = creating.fire.call(ctx, key, req.values[i], dxTrans);
                                        if (key == null && generatedPrimaryKey != null) {
                                            key = generatedPrimaryKey;
                                            req.keys[i] = key;
                                            if (!primaryKey.outbound) {
                                                setByKeyPath(req.values[i], primaryKey.keyPath, key);
                                            }
                                        }
                                    }
                                    else {
                                        var objectDiff = getObjectDiff(existingValue, req.values[i]);
                                        var additionalChanges_1 = updating.fire.call(ctx, objectDiff, key, existingValue, dxTrans);
                                        if (additionalChanges_1) {
                                            var requestedValue_1 = req.values[i];
                                            Object.keys(additionalChanges_1).forEach(function (keyPath) {
                                                if (hasOwn(requestedValue_1, keyPath)) {
                                                    requestedValue_1[keyPath] = additionalChanges_1[keyPath];
                                                }
                                                else {
                                                    setByKeyPath(requestedValue_1, keyPath, additionalChanges_1[keyPath]);
                                                }
                                            });
                                        }
                                    }
                                    return ctx;
                                });
                                return downTable.mutate(req).then(function (_a) {
                                    var failures = _a.failures, results = _a.results, numFailures = _a.numFailures, lastResult = _a.lastResult;
                                    for (var i = 0; i < keys$$1.length; ++i) {
                                        var primKey = results ? results[i] : keys$$1[i];
                                        var ctx = contexts[i];
                                        if (primKey == null) {
                                            ctx.onerror && ctx.onerror(failures[i]);
                                        }
                                        else {
                                            ctx.onsuccess && ctx.onsuccess(req.type === 'put' && existingValues[i] ?
                                                req.values[i] :
                                                primKey
                                            );
                                        }
                                    }
                                    return { failures: failures, results: results, numFailures: numFailures, lastResult: lastResult };
                                }).catch(function (error) {
                                    contexts.forEach(function (ctx) { return ctx.onerror && ctx.onerror(error); });
                                    return Promise.reject(error);
                                });
                            });
                        }
                        function deleteRange(req) {
                            return deleteNextChunk(req.trans, req.range, 10000);
                        }
                        function deleteNextChunk(trans, range, limit) {
                            return downTable.query({ trans: trans, values: false, query: { index: primaryKey, range: range }, limit: limit })
                                .then(function (_a) {
                                var result = _a.result;
                                return addPutOrDelete({ type: 'delete', keys: result, trans: trans }).then(function (res) {
                                    if (res.numFailures > 0)
                                        return Promise.reject(res.failures[0]);
                                    if (result.length < limit) {
                                        return { failures: [], numFailures: 0, lastResult: undefined };
                                    }
                                    else {
                                        return deleteNextChunk(trans, __assign(__assign({}, range), { lower: result[result.length - 1], lowerOpen: true }), limit);
                                    }
                                });
                            });
                        }
                    } });
                return tableMiddleware;
            } })); }
    };

    var Dexie =               (function () {
        function Dexie(name, options) {
            var _this = this;
            this._middlewares = {};
            this.verno = 0;
            var deps = Dexie.dependencies;
            this._options = options = __assign({
                addons: Dexie.addons, autoOpen: true,
                indexedDB: deps.indexedDB, IDBKeyRange: deps.IDBKeyRange }, options);
            this._deps = {
                indexedDB: options.indexedDB,
                IDBKeyRange: options.IDBKeyRange
            };
            var addons = options.addons;
            this._dbSchema = {};
            this._versions = [];
            this._storeNames = [];
            this._allTables = {};
            this.idbdb = null;
            var state = {
                dbOpenError: null,
                isBeingOpened: false,
                onReadyBeingFired: null,
                openComplete: false,
                dbReadyResolve: nop,
                dbReadyPromise: null,
                cancelOpen: nop,
                openCanceller: null,
                autoSchema: true
            };
            state.dbReadyPromise = new DexiePromise(function (resolve) {
                state.dbReadyResolve = resolve;
            });
            state.openCanceller = new DexiePromise(function (_, reject) {
                state.cancelOpen = reject;
            });
            this._state = state;
            this.name = name;
            this.on = Events(this, "populate", "blocked", "versionchange", { ready: [promisableChain, nop] });
            this.on.ready.subscribe = override(this.on.ready.subscribe, function (subscribe) {
                return function (subscriber, bSticky) {
                    Dexie.vip(function () {
                        var state = _this._state;
                        if (state.openComplete) {
                            if (!state.dbOpenError)
                                DexiePromise.resolve().then(subscriber);
                            if (bSticky)
                                subscribe(subscriber);
                        }
                        else if (state.onReadyBeingFired) {
                            state.onReadyBeingFired.push(subscriber);
                            if (bSticky)
                                subscribe(subscriber);
                        }
                        else {
                            subscribe(subscriber);
                            var db_1 = _this;
                            if (!bSticky)
                                subscribe(function unsubscribe() {
                                    db_1.on.ready.unsubscribe(subscriber);
                                    db_1.on.ready.unsubscribe(unsubscribe);
                                });
                        }
                    });
                };
            });
            this.Collection = createCollectionConstructor(this);
            this.Table = createTableConstructor(this);
            this.Transaction = createTransactionConstructor(this);
            this.Version = createVersionConstructor(this);
            this.WhereClause = createWhereClauseConstructor(this);
            this.on("versionchange", function (ev) {
                if (ev.newVersion > 0)
                    console.warn("Another connection wants to upgrade database '" + _this.name + "'. Closing db now to resume the upgrade.");
                else
                    console.warn("Another connection wants to delete database '" + _this.name + "'. Closing db now to resume the delete request.");
                _this.close();
            });
            this.on("blocked", function (ev) {
                if (!ev.newVersion || ev.newVersion < ev.oldVersion)
                    console.warn("Dexie.delete('" + _this.name + "') was blocked");
                else
                    console.warn("Upgrade '" + _this.name + "' blocked by other connection holding version " + ev.oldVersion / 10);
            });
            this._maxKey = getMaxKey(options.IDBKeyRange);
            this._createTransaction = function (mode, storeNames, dbschema, parentTransaction) { return new _this.Transaction(mode, storeNames, dbschema, parentTransaction); };
            this._fireOnBlocked = function (ev) {
                _this.on("blocked").fire(ev);
                connections
                    .filter(function (c) { return c.name === _this.name && c !== _this && !c._state.vcFired; })
                    .map(function (c) { return c.on("versionchange").fire(ev); });
            };
            this.use(virtualIndexMiddleware);
            this.use(hooksMiddleware);
            addons.forEach(function (addon) { return addon(_this); });
        }
        Dexie.prototype.version = function (versionNumber) {
            if (isNaN(versionNumber) || versionNumber < 0.1)
                throw new exceptions.Type("Given version is not a positive number");
            versionNumber = Math.round(versionNumber * 10) / 10;
            if (this.idbdb || this._state.isBeingOpened)
                throw new exceptions.Schema("Cannot add version when database is open");
            this.verno = Math.max(this.verno, versionNumber);
            var versions = this._versions;
            var versionInstance = versions.filter(function (v) { return v._cfg.version === versionNumber; })[0];
            if (versionInstance)
                return versionInstance;
            versionInstance = new this.Version(versionNumber);
            versions.push(versionInstance);
            versions.sort(lowerVersionFirst);
            versionInstance.stores({});
            this._state.autoSchema = false;
            return versionInstance;
        };
        Dexie.prototype._whenReady = function (fn) {
            var _this = this;
            return this._state.openComplete || PSD.letThrough ? fn() : new DexiePromise(function (resolve, reject) {
                if (!_this._state.isBeingOpened) {
                    if (!_this._options.autoOpen) {
                        reject(new exceptions.DatabaseClosed());
                        return;
                    }
                    _this.open().catch(nop);
                }
                _this._state.dbReadyPromise.then(resolve, reject);
            }).then(fn);
        };
        Dexie.prototype.use = function (_a) {
            var stack = _a.stack, create = _a.create, level = _a.level, name = _a.name;
            if (name)
                this.unuse({ stack: stack, name: name });
            var middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);
            middlewares.push({ stack: stack, create: create, level: level == null ? 10 : level, name: name });
            middlewares.sort(function (a, b) { return a.level - b.level; });
            return this;
        };
        Dexie.prototype.unuse = function (_a) {
            var stack = _a.stack, name = _a.name, create = _a.create;
            if (stack && this._middlewares[stack]) {
                this._middlewares[stack] = this._middlewares[stack].filter(function (mw) {
                    return create ? mw.create !== create :
                        name ? mw.name !== name :
                            false;
                });
            }
            return this;
        };
        Dexie.prototype.open = function () {
            return dexieOpen(this);
        };
        Dexie.prototype.close = function () {
            var idx = connections.indexOf(this), state = this._state;
            if (idx >= 0)
                connections.splice(idx, 1);
            if (this.idbdb) {
                try {
                    this.idbdb.close();
                }
                catch (e) { }
                this.idbdb = null;
            }
            this._options.autoOpen = false;
            state.dbOpenError = new exceptions.DatabaseClosed();
            if (state.isBeingOpened)
                state.cancelOpen(state.dbOpenError);
            state.dbReadyPromise = new DexiePromise(function (resolve) {
                state.dbReadyResolve = resolve;
            });
            state.openCanceller = new DexiePromise(function (_, reject) {
                state.cancelOpen = reject;
            });
        };
        Dexie.prototype.delete = function () {
            var _this = this;
            var hasArguments = arguments.length > 0;
            var state = this._state;
            return new DexiePromise(function (resolve, reject) {
                var doDelete = function () {
                    _this.close();
                    var req = _this._deps.indexedDB.deleteDatabase(_this.name);
                    req.onsuccess = wrap(function () {
                        databaseEnumerator.remove(_this.name);
                        resolve();
                    });
                    req.onerror = eventRejectHandler(reject);
                    req.onblocked = _this._fireOnBlocked;
                };
                if (hasArguments)
                    throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
                if (state.isBeingOpened) {
                    state.dbReadyPromise.then(doDelete);
                }
                else {
                    doDelete();
                }
            });
        };
        Dexie.prototype.backendDB = function () {
            return this.idbdb;
        };
        Dexie.prototype.isOpen = function () {
            return this.idbdb !== null;
        };
        Dexie.prototype.hasBeenClosed = function () {
            var dbOpenError = this._state.dbOpenError;
            return dbOpenError && (dbOpenError.name === 'DatabaseClosed');
        };
        Dexie.prototype.hasFailed = function () {
            return this._state.dbOpenError !== null;
        };
        Dexie.prototype.dynamicallyOpened = function () {
            return this._state.autoSchema;
        };
        Object.defineProperty(Dexie.prototype, "tables", {
            get: function () {
                var _this = this;
                return keys(this._allTables).map(function (name) { return _this._allTables[name]; });
            },
            enumerable: true,
            configurable: true
        });
        Dexie.prototype.transaction = function () {
            var args = extractTransactionArgs.apply(this, arguments);
            return this._transaction.apply(this, args);
        };
        Dexie.prototype._transaction = function (mode, tables, scopeFunc) {
            var _this = this;
            var parentTransaction = PSD.trans;
            if (!parentTransaction || parentTransaction.db !== this || mode.indexOf('!') !== -1)
                parentTransaction = null;
            var onlyIfCompatible = mode.indexOf('?') !== -1;
            mode = mode.replace('!', '').replace('?', '');
            var idbMode, storeNames;
            try {
                storeNames = tables.map(function (table) {
                    var storeName = table instanceof _this.Table ? table.name : table;
                    if (typeof storeName !== 'string')
                        throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                    return storeName;
                });
                if (mode == "r" || mode === READONLY)
                    idbMode = READONLY;
                else if (mode == "rw" || mode == READWRITE)
                    idbMode = READWRITE;
                else
                    throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
                if (parentTransaction) {
                    if (parentTransaction.mode === READONLY && idbMode === READWRITE) {
                        if (onlyIfCompatible) {
                            parentTransaction = null;
                        }
                        else
                            throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                    }
                    if (parentTransaction) {
                        storeNames.forEach(function (storeName) {
                            if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                                if (onlyIfCompatible) {
                                    parentTransaction = null;
                                }
                                else
                                    throw new exceptions.SubTransaction("Table " + storeName +
                                        " not included in parent transaction.");
                            }
                        });
                    }
                    if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
                        parentTransaction = null;
                    }
                }
            }
            catch (e) {
                return parentTransaction ?
                    parentTransaction._promise(null, function (_, reject) { reject(e); }) :
                    rejection(e);
            }
            var enterTransaction = enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);
            return (parentTransaction ?
                parentTransaction._promise(idbMode, enterTransaction, "lock") :
                PSD.trans ?
                    usePSD(PSD.transless, function () { return _this._whenReady(enterTransaction); }) :
                    this._whenReady(enterTransaction));
        };
        Dexie.prototype.table = function (tableName) {
            if (!hasOwn(this._allTables, tableName)) {
                throw new exceptions.InvalidTable("Table " + tableName + " does not exist");
            }
            return this._allTables[tableName];
        };
        return Dexie;
    }());

    var Dexie$1 = Dexie;
    props(Dexie$1, __assign(__assign({}, fullNameExceptions), {
        delete: function (databaseName) {
            var db = new Dexie$1(databaseName);
            return db.delete();
        },
        exists: function (name) {
            return new Dexie$1(name, { addons: [] }).open().then(function (db) {
                db.close();
                return true;
            }).catch('NoSuchDatabaseError', function () { return false; });
        },
        getDatabaseNames: function (cb) {
            return databaseEnumerator ?
                databaseEnumerator.getDatabaseNames().then(cb) :
                DexiePromise.resolve([]);
        },
        defineClass: function () {
            function Class(content) {
                extend(this, content);
            }
            return Class;
        },
        ignoreTransaction: function (scopeFunc) {
            return PSD.trans ?
                usePSD(PSD.transless, scopeFunc) :
                scopeFunc();
        },
        vip: vip, async: function (generatorFn) {
            return function () {
                try {
                    var rv = awaitIterator(generatorFn.apply(this, arguments));
                    if (!rv || typeof rv.then !== 'function')
                        return DexiePromise.resolve(rv);
                    return rv;
                }
                catch (e) {
                    return rejection(e);
                }
            };
        }, spawn: function (generatorFn, args, thiz) {
            try {
                var rv = awaitIterator(generatorFn.apply(thiz, args || []));
                if (!rv || typeof rv.then !== 'function')
                    return DexiePromise.resolve(rv);
                return rv;
            }
            catch (e) {
                return rejection(e);
            }
        },
        currentTransaction: {
            get: function () { return PSD.trans || null; }
        }, waitFor: function (promiseOrFunction, optionalTimeout) {
            var promise = DexiePromise.resolve(typeof promiseOrFunction === 'function' ?
                Dexie$1.ignoreTransaction(promiseOrFunction) :
                promiseOrFunction)
                .timeout(optionalTimeout || 60000);
            return PSD.trans ?
                PSD.trans.waitFor(promise) :
                promise;
        },
        Promise: DexiePromise,
        debug: {
            get: function () { return debug; },
            set: function (value) {
                setDebug(value, value === 'dexie' ? function () { return true; } : dexieStackFrameFilter);
            }
        },
        derive: derive, extend: extend, props: props, override: override,
        Events: Events,
        getByKeyPath: getByKeyPath, setByKeyPath: setByKeyPath, delByKeyPath: delByKeyPath, shallowClone: shallowClone, deepClone: deepClone, getObjectDiff: getObjectDiff, asap: asap,
        minKey: minKey,
        addons: [],
        connections: connections,
        errnames: errnames,
        dependencies: (function () {
            try {
                return {
                    indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
                    IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
                };
            }
            catch (e) {
                return { indexedDB: null, IDBKeyRange: null };
            }
        })(),
        semVer: DEXIE_VERSION, version: DEXIE_VERSION.split('.')
            .map(function (n) { return parseInt(n); })
            .reduce(function (p, c, i) { return p + (c / Math.pow(10, i * 2)); }),
        default: Dexie$1,
        Dexie: Dexie$1 }));
    Dexie$1.maxKey = getMaxKey(Dexie$1.dependencies.IDBKeyRange);

    initDatabaseEnumerator(Dexie.dependencies.indexedDB);
    DexiePromise.rejectionMapper = mapError;
    setDebug(debug, dexieStackFrameFilter);

    var strictUriEncode = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);

    var token = '%[a-f0-9]{2}';
    var singleMatcher = new RegExp(token, 'gi');
    var multiMatcher = new RegExp('(' + token + ')+', 'gi');

    function decodeComponents(components, split) {
    	try {
    		// Try to decode the entire string first
    		return decodeURIComponent(components.join(''));
    	} catch (err) {
    		// Do nothing
    	}

    	if (components.length === 1) {
    		return components;
    	}

    	split = split || 1;

    	// Split the array in 2 parts
    	var left = components.slice(0, split);
    	var right = components.slice(split);

    	return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
    }

    function decode$1(input) {
    	try {
    		return decodeURIComponent(input);
    	} catch (err) {
    		var tokens = input.match(singleMatcher);

    		for (var i = 1; i < tokens.length; i++) {
    			input = decodeComponents(tokens, i).join('');

    			tokens = input.match(singleMatcher);
    		}

    		return input;
    	}
    }

    function customDecodeURIComponent(input) {
    	// Keep track of all the replacements and prefill the map with the `BOM`
    	var replaceMap = {
    		'%FE%FF': '\uFFFD\uFFFD',
    		'%FF%FE': '\uFFFD\uFFFD'
    	};

    	var match = multiMatcher.exec(input);
    	while (match) {
    		try {
    			// Decode as big chunks as possible
    			replaceMap[match[0]] = decodeURIComponent(match[0]);
    		} catch (err) {
    			var result = decode$1(match[0]);

    			if (result !== match[0]) {
    				replaceMap[match[0]] = result;
    			}
    		}

    		match = multiMatcher.exec(input);
    	}

    	// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else
    	replaceMap['%C2'] = '\uFFFD';

    	var entries = Object.keys(replaceMap);

    	for (var i = 0; i < entries.length; i++) {
    		// Replace all decoded components
    		var key = entries[i];
    		input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
    	}

    	return input;
    }

    var decodeUriComponent = function (encodedURI) {
    	if (typeof encodedURI !== 'string') {
    		throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
    	}

    	try {
    		encodedURI = encodedURI.replace(/\+/g, ' ');

    		// Try the built in decoder first
    		return decodeURIComponent(encodedURI);
    	} catch (err) {
    		// Fallback to a more advanced decoder
    		return customDecodeURIComponent(encodedURI);
    	}
    };

    var splitOnFirst = (string, separator) => {
    	if (!(typeof string === 'string' && typeof separator === 'string')) {
    		throw new TypeError('Expected the arguments to be of type `string`');
    	}

    	if (separator === '') {
    		return [string];
    	}

    	const separatorIndex = string.indexOf(separator);

    	if (separatorIndex === -1) {
    		return [string];
    	}

    	return [
    		string.slice(0, separatorIndex),
    		string.slice(separatorIndex + separator.length)
    	];
    };

    var filterObj = function (obj, predicate) {
    	var ret = {};
    	var keys = Object.keys(obj);
    	var isArr = Array.isArray(predicate);

    	for (var i = 0; i < keys.length; i++) {
    		var key = keys[i];
    		var val = obj[key];

    		if (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {
    			ret[key] = val;
    		}
    	}

    	return ret;
    };

    var queryString = createCommonjsModule(function (module, exports) {





    const isNullOrUndefined = value => value === null || value === undefined;

    const encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');

    function encoderForArrayFormat(options) {
    	switch (options.arrayFormat) {
    		case 'index':
    			return key => (result, value) => {
    				const index = result.length;

    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, [encode(key, options), '[', index, ']'].join('')];
    				}

    				return [
    					...result,
    					[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')
    				];
    			};

    		case 'bracket':
    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, [encode(key, options), '[]'].join('')];
    				}

    				return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];
    			};

    		case 'comma':
    		case 'separator':
    		case 'bracket-separator': {
    			const keyValueSep = options.arrayFormat === 'bracket-separator' ?
    				'[]=' :
    				'=';

    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				// Translate null to an empty string so that it doesn't serialize as 'null'
    				value = value === null ? '' : value;

    				if (result.length === 0) {
    					return [[encode(key, options), keyValueSep, encode(value, options)].join('')];
    				}

    				return [[result, encode(value, options)].join(options.arrayFormatSeparator)];
    			};
    		}

    		default:
    			return key => (result, value) => {
    				if (
    					value === undefined ||
    					(options.skipNull && value === null) ||
    					(options.skipEmptyString && value === '')
    				) {
    					return result;
    				}

    				if (value === null) {
    					return [...result, encode(key, options)];
    				}

    				return [...result, [encode(key, options), '=', encode(value, options)].join('')];
    			};
    	}
    }

    function parserForArrayFormat(options) {
    	let result;

    	switch (options.arrayFormat) {
    		case 'index':
    			return (key, value, accumulator) => {
    				result = /\[(\d*)\]$/.exec(key);

    				key = key.replace(/\[\d*\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = {};
    				}

    				accumulator[key][result[1]] = value;
    			};

    		case 'bracket':
    			return (key, value, accumulator) => {
    				result = /(\[\])$/.exec(key);
    				key = key.replace(/\[\]$/, '');

    				if (!result) {
    					accumulator[key] = value;
    					return;
    				}

    				if (accumulator[key] === undefined) {
    					accumulator[key] = [value];
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};

    		case 'comma':
    		case 'separator':
    			return (key, value, accumulator) => {
    				const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);
    				const isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));
    				value = isEncodedArray ? decode(value, options) : value;
    				const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);
    				accumulator[key] = newValue;
    			};

    		case 'bracket-separator':
    			return (key, value, accumulator) => {
    				const isArray = /(\[\])$/.test(key);
    				key = key.replace(/\[\]$/, '');

    				if (!isArray) {
    					accumulator[key] = value ? decode(value, options) : value;
    					return;
    				}

    				const arrayValue = value === null ?
    					[] :
    					value.split(options.arrayFormatSeparator).map(item => decode(item, options));

    				if (accumulator[key] === undefined) {
    					accumulator[key] = arrayValue;
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], arrayValue);
    			};

    		default:
    			return (key, value, accumulator) => {
    				if (accumulator[key] === undefined) {
    					accumulator[key] = value;
    					return;
    				}

    				accumulator[key] = [].concat(accumulator[key], value);
    			};
    	}
    }

    function validateArrayFormatSeparator(value) {
    	if (typeof value !== 'string' || value.length !== 1) {
    		throw new TypeError('arrayFormatSeparator must be single character string');
    	}
    }

    function encode(value, options) {
    	if (options.encode) {
    		return options.strict ? strictUriEncode(value) : encodeURIComponent(value);
    	}

    	return value;
    }

    function decode(value, options) {
    	if (options.decode) {
    		return decodeUriComponent(value);
    	}

    	return value;
    }

    function keysSorter(input) {
    	if (Array.isArray(input)) {
    		return input.sort();
    	}

    	if (typeof input === 'object') {
    		return keysSorter(Object.keys(input))
    			.sort((a, b) => Number(a) - Number(b))
    			.map(key => input[key]);
    	}

    	return input;
    }

    function removeHash(input) {
    	const hashStart = input.indexOf('#');
    	if (hashStart !== -1) {
    		input = input.slice(0, hashStart);
    	}

    	return input;
    }

    function getHash(url) {
    	let hash = '';
    	const hashStart = url.indexOf('#');
    	if (hashStart !== -1) {
    		hash = url.slice(hashStart);
    	}

    	return hash;
    }

    function extract(input) {
    	input = removeHash(input);
    	const queryStart = input.indexOf('?');
    	if (queryStart === -1) {
    		return '';
    	}

    	return input.slice(queryStart + 1);
    }

    function parseValue(value, options) {
    	if (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {
    		value = Number(value);
    	} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
    		value = value.toLowerCase() === 'true';
    	}

    	return value;
    }

    function parse(query, options) {
    	options = Object.assign({
    		decode: true,
    		sort: true,
    		arrayFormat: 'none',
    		arrayFormatSeparator: ',',
    		parseNumbers: false,
    		parseBooleans: false
    	}, options);

    	validateArrayFormatSeparator(options.arrayFormatSeparator);

    	const formatter = parserForArrayFormat(options);

    	// Create an object with no prototype
    	const ret = Object.create(null);

    	if (typeof query !== 'string') {
    		return ret;
    	}

    	query = query.trim().replace(/^[?#&]/, '');

    	if (!query) {
    		return ret;
    	}

    	for (const param of query.split('&')) {
    		if (param === '') {
    			continue;
    		}

    		let [key, value] = splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '=');

    		// Missing `=` should be `null`:
    		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
    		value = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);
    		formatter(decode(key, options), value, ret);
    	}

    	for (const key of Object.keys(ret)) {
    		const value = ret[key];
    		if (typeof value === 'object' && value !== null) {
    			for (const k of Object.keys(value)) {
    				value[k] = parseValue(value[k], options);
    			}
    		} else {
    			ret[key] = parseValue(value, options);
    		}
    	}

    	if (options.sort === false) {
    		return ret;
    	}

    	return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
    		const value = ret[key];
    		if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
    			// Sort object keys, not values
    			result[key] = keysSorter(value);
    		} else {
    			result[key] = value;
    		}

    		return result;
    	}, Object.create(null));
    }

    exports.extract = extract;
    exports.parse = parse;

    exports.stringify = (object, options) => {
    	if (!object) {
    		return '';
    	}

    	options = Object.assign({
    		encode: true,
    		strict: true,
    		arrayFormat: 'none',
    		arrayFormatSeparator: ','
    	}, options);

    	validateArrayFormatSeparator(options.arrayFormatSeparator);

    	const shouldFilter = key => (
    		(options.skipNull && isNullOrUndefined(object[key])) ||
    		(options.skipEmptyString && object[key] === '')
    	);

    	const formatter = encoderForArrayFormat(options);

    	const objectCopy = {};

    	for (const key of Object.keys(object)) {
    		if (!shouldFilter(key)) {
    			objectCopy[key] = object[key];
    		}
    	}

    	const keys = Object.keys(objectCopy);

    	if (options.sort !== false) {
    		keys.sort(options.sort);
    	}

    	return keys.map(key => {
    		const value = object[key];

    		if (value === undefined) {
    			return '';
    		}

    		if (value === null) {
    			return encode(key, options);
    		}

    		if (Array.isArray(value)) {
    			if (value.length === 0 && options.arrayFormat === 'bracket-separator') {
    				return encode(key, options) + '[]';
    			}

    			return value
    				.reduce(formatter(key), [])
    				.join('&');
    		}

    		return encode(key, options) + '=' + encode(value, options);
    	}).filter(x => x.length > 0).join('&');
    };

    exports.parseUrl = (url, options) => {
    	options = Object.assign({
    		decode: true
    	}, options);

    	const [url_, hash] = splitOnFirst(url, '#');

    	return Object.assign(
    		{
    			url: url_.split('?')[0] || '',
    			query: parse(extract(url), options)
    		},
    		options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}
    	);
    };

    exports.stringifyUrl = (object, options) => {
    	options = Object.assign({
    		encode: true,
    		strict: true,
    		[encodeFragmentIdentifier]: true
    	}, options);

    	const url = removeHash(object.url).split('?')[0] || '';
    	const queryFromUrl = exports.extract(object.url);
    	const parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});

    	const query = Object.assign(parsedQueryFromUrl, object.query);
    	let queryString = exports.stringify(query, options);
    	if (queryString) {
    		queryString = `?${queryString}`;
    	}

    	let hash = getHash(object.url);
    	if (object.fragmentIdentifier) {
    		hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;
    	}

    	return `${url}${queryString}${hash}`;
    };

    exports.pick = (input, filter, options) => {
    	options = Object.assign({
    		parseFragmentIdentifier: true,
    		[encodeFragmentIdentifier]: false
    	}, options);

    	const {url, query, fragmentIdentifier} = exports.parseUrl(input, options);
    	return exports.stringifyUrl({
    		url,
    		query: filterObj(query, filter),
    		fragmentIdentifier
    	}, options);
    };

    exports.exclude = (input, filter, options) => {
    	const exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);

    	return exports.pick(input, exclusionFilter, options);
    };
    });

    const debounced = (millis, defaultValue = null)  => {
      let timer;
    	let value = defaultValue;
      const { subscribe, set, update } = writable(defaultValue); 

      const flush = () => {
        clearTimeout(timer);
        set(value);
        return value
      };

    	return {
    		subscribe,
        flush,

        get: flush,

        set: (newValue) => {
          value = newValue;
          flush();
        },

        lazySet: (newValue) => {
          value = newValue;
          clearTimeout(timer);
          timer = setTimeout(() => {
            set(value);
          }, millis);
        },
    	};
    };

    const isLoaded = writable(false);


    const newBook = debounced(100, '');

    const sanitizeKey = key => key.replace(/[^a-z0-9]/gi,'');


    const decode = (file) => {
      let result = {
        properties: {},
        chapters: new Map(),
        linksToChapter: new Map(),
        groups: new Set(),
      };

      let key = '';
      let chapter;

      let lastLineHadContent = false;
      let lastContentLinePlusOne = 1;

      const lines = file.split('\n');
      lines.forEach( (oLine, zeroIndexlineNumber) => { 
        const i = zeroIndexlineNumber;  // We keep zero indexed as reference
        const line = oLine.trim();

        if(lastLineHadContent) lastContentLinePlusOne = i; 
        lastLineHadContent = (line !== '');
      
        // Parsing dell'header
        if(key === '' && !line.startsWith('### ')) {
          if(line.startsWith('# ')) {
            result.properties['title'] = line.replace(/\#/g, '').trim();
            return
          }
          const semicolon = line.indexOf(':');
          if(semicolon !== -1){
            result.properties[line.substr(0, semicolon)] = line.substr(semicolon + 1);
          }
          return
        }
      
        // Parsing del testo
        if(line.startsWith('### ')){
          if(key !== ''){
            chapter.contentEnd = lastContentLinePlusOne - 1;
            chapter.end = i - 1;
            result.chapters.set(key, chapter);
          }
          // crea nuova entità
          key = line.substr(4).trim();
          let title = '';
          const index = key.indexOf('{#');
          if(index != -1){
            title = key.substr(0, index - 1).trim();
            key = key.substr(index + 2,  key.lastIndexOf('}') - 2 - index).trim();
          }
          chapter = {
            title,
            group: '',
            start: lastContentLinePlusOne,
            contentStart: i,
            contentEnd: i,
            end: i,
            flags: [],
            links: new Set(),
          };
          return
        }
      
        if(line.includes('![flag-')){
    ['final', 'fixed', 'death'].forEach( (flag) => {
            if(line.includes(`![flag-${flag}]`)) chapter.flags.push(flag);
          });
          return
        }
        const groupIndex = line.indexOf('[group]:<> ("');
        if(groupIndex != -1){
          chapter.group = line.substr(groupIndex + 13, line.lastIndexOf('")') - groupIndex - 13);
          result.groups.add(chapter.group);
          return
        }


        let myRegexp = new RegExp(`\\[([^\\[]*)\\]\\(\\s*\\#([^\\)]+)\\s*\\)`, "g");

        let match = myRegexp.exec(oLine);
        while (match != null) {
          const linkTarget = match[2].trim();
          chapter.links.add(linkTarget);
          if(!result.linksToChapter.has(linkTarget)) result.linksToChapter.set(linkTarget, new Set());
          result.linksToChapter.get(linkTarget).add(key);
          match = myRegexp.exec(oLine);
        }

      });

      if(key !== ''){
        chapter.contentEnd = lastContentLinePlusOne - 1;
        chapter.end = lines.length - 1;
        result.chapters.set(key, chapter);
      }

      return result
    };

    const $bookIndex = {};

    const bookIndex = derived(
    	newBook,
    	$book => (Object.assign($bookIndex, decode($book)), $bookIndex)
    );

    const editorComponentID = 'main-editor';


    let editor$2 = null;


    const showSidemenu = writable(false);


    function absorbEvent_(event) {
      var e = event || window.event;
      e.stopPropagation && e.stopPropagation();
      e.cancelBubble = true;
    }

    function preventClickPropagation(node) {
        node.ontouchstart = absorbEvent_;
        node.ontouchmove = absorbEvent_;
        node.ontouchend = absorbEvent_;
        node.ontouchcancel = absorbEvent_;
    }


    const cursorPosition = debounced(10, {row: 0, column: 0});

    const currentChapterKey = derived(
      [cursorPosition, bookIndex],
      ([$cursorPosition, $bookIndex]) => {
        let cursorRow = $cursorPosition.row;
        let lastWorkingKey = '';
        for(const [key, chapter] of $bookIndex.chapters.entries()) {
          if(chapter.contentStart <= cursorRow){
            lastWorkingKey = key;
          } else {
            return lastWorkingKey
          }
        }
        return lastWorkingKey
      } 
    );

    const currentChapterFullTitle = derived(
      [currentChapterKey, bookIndex],
      ([$currentChapterKey, $bookIndex]) => {
        if($currentChapterKey == '') return ' '
        const chapter = $bookIndex.chapters.get($currentChapterKey);
        return $currentChapterKey + (chapter.title ? ' - ' + chapter.title : '')
      }
    );

    const setupAce = () => {
      editor$2 = ace.edit(editorComponentID);
      window.editor = editor$2;
      editor$2.setTheme("ace/theme/chrome");
      editor$2.session.setMode("ace/mode/markdown");
      editor$2.session.setUseWorker(false);
      
      editor$2.setOptions({
        showPrintMargin: false,
        wrap: true,
        fontSize: 16,
        showGutter: window.innerWidth > 430,
        scrollPastEnd: 0.7,
      });
      
      editor$2.session.selection.on('changeCursor', () => cursorPosition.lazySet(editor$2.selection.getCursor()));
      
      editor$2.container.style.lineHeight = 1.4;
     
      const findF = editor$2.commands.commands.find.exec;

      editor$2.commands.addCommand({
        bindKey: {win: 'Ctrl-F', mac: 'Command-F'},
        description: "Find",
        exec: (...e) => {
          findF(...e);
          setTimeout(() => preventClickPropagation(document.querySelector('.ace_search')), 400);
        },
        name: "find",
        readOnly: true
      });

      delete editor$2.keyBinding.$defaultHandler.commandKeyBinding['ctrl-k'];
      delete editor$2.keyBinding.$defaultHandler.commandKeyBinding['ctrl-l'];
      
      editor$2.renderer.updateFontSize();
      editor$2.session.on('change', function() {
        newBook.lazySet(editor$2.getValue());
      });

    };


    const initEditorLocal = (data) => {
      setupAce();

      editor$2.getSession().setValue(data.book);
      editor$2.moveCursorTo(data.cursor.row,data.cursor.column);

      isLoaded.set(true);
    };


    const initEditorFirebase = (config) => {
      setupAce();


      const app = firebase.initializeApp(config);

      // Get a reference to the database service
      const database = firebase.database(app);

      window.db = database;



      //// Create Firepad.
      window.Firepad.fromACE(database.ref(config.book), editor$2, {
        defaultText: get_store_value(ee)('books.fire').replace('%1', config.book)
      });

      isLoaded.set(true);

    };



    const getEditor = () => editor$2;

    const parsedHash = queryString.parse(location.hash);



    // Database: declare tables, IDs and indexes
    const db = new Dexie('magebook2');
    db.version(1).stores({
      sessions: '&id, time, preview',
      fireSessions: '&id, time, preview'
    });

    const isFirebase = writable(false);

    // Session previews
    const previews = async() => (await db.sessions.orderBy('preview').keys()).reverse().map( key => ({
          time: new Date(Number(key.substr(0, 30))),
          id: key.substr(31, 20),
          name: key.substr(52, 30)
        }));


    // Session class
    const session = new (function(){
      // Generate unique identifier for this session
      let data;
      const IDLength = 20; 
      const lock = randomString(IDLength);

      // Session hash preview
      const preview = (sessionData)  => {
        const name = (sessionData.data.title || 'no title').padEnd(30, '').substr(0, 30);
        return `${String(sessionData.time).padStart(30, '0')}-${sessionData.id}-${name}`
      };

      // Session cleaner
      const maxSessions = 50;
      const cleanOldSessions = async() => {
        const key = 'time';
        const times = (await db.sessions.orderBy(key).keys()).reverse();
        if(times.length > maxSessions){
          const lastTime = times[maxSessions];
          await db.sessions.where("time").below(lastTime).modify(function() {
              delete this.value;
          });
        }
      };

      // Session loader
      let sessionName;
      const load = async() => {

        if(parsedHash.fsession){

          window.addEventListener('hashchange', () => {
            window.location.reload();
          }, false);
      

          isFirebase.set(true);

          initEditorFirebase(JSON.parse(atob(decodeURIComponent(parsedHash.fsession))));

          return
        }


        if(sessionName){
          console.error("Session loaded twice!");
          return
        }
        // Trova il nome della sessione o creane una nuova
        const lastSession = localStorage.getItem('mage-session-last');

        sessionName = await (async() => {
          const prefix = 'msession=';
          if(!lastSession) return randomString(IDLength)

          if(window.location.hash && window.location.hash.includes(prefix)){
            const pos = window.location.hash.indexOf(prefix) + prefix.length;
            if(!((pos + IDLength) > window.location.hash.length)){
              const candidate = window.location.hash.substr(pos, IDLength);
              if(candidate == lastSession) return candidate
              try {
                if(await db.sessions.get(candidate)){
                  return candidate
                }
              }catch(e){}
            }
          }
          return lastSession ||  randomString(IDLength)
        })();
        location.replace(`#msession=${sessionName}`); // Set dell'url
        
        // Listen url change
        window.addEventListener('hashchange', () => {
          if(!window.location.hash.includes(`#msession=${sessionName}`)){
            window.location.reload();
          }
        }, false);

        // Acquire lock
        localStorage.setItem('mage-session-last', sessionName);
        localStorage.setItem(`mage-lock-${sessionName}`, lock);

        // Load book in session
        let info;
        if(lastSession == sessionName){
          info = JSON.parse(localStorage.getItem('mage-session-last-data'));
        }else {
          try{
            info =  (await db.sessions.get(sessionName)); 
          }catch(e){}
        }
        info = info || {
          data:{book: get_store_value(ee)('books.local'), cursor: {row: 0, column: 0}} 
        };
         
        initEditorLocal(info.data);

        data = derived(
          [newBook, cursorPosition, bookIndex],
          ([$newBook, $cursorPosition, $bookIndex]) => ({
            book: $newBook,
            cursor: $cursorPosition,
            title: $bookIndex.properties.title
          })
        );

        // Save book on changes
        data.subscribe( async(bookData) => {
          if(localStorage.getItem(`mage-lock-${sessionName}`) != lock ){
            lockStore.set( {
              lock: true,
              session: this,
            });
            return 
          }

          localStorage.setItem('mage-session-last', sessionName);
          const sessionData = {
            id: sessionName,
            data: bookData,
            time: new Date().getTime(),
          };
          localStorage.setItem('mage-session-last-data', JSON.stringify(sessionData));

          try{
          await db.sessions.put({
            preview: preview(sessionData),
            ...sessionData
          });
          }catch(e){console.log(e);}
        });
        
        window.onbeforeunload = (e) => {
          newBook.flush();
          delete e['returnValue'];

        };
        setInterval( () => newBook.flush(), 10000);

        cleanOldSessions();
      };

      const open = async(params) => {
        window.onbeforeunload = () => {};

        const id = randomString(IDLength);
        localStorage.setItem('mage-session-last', id);

        const sessionData = {
          id,
          file:{name: "New"},
          time: new Date().getTime(),
          ...params,
        };
        localStorage.setItem('mage-session-last-data', JSON.stringify(sessionData));
        try {
          await db.sessions.put(sessionData);
        }catch(e){}
        location.assign(`#msession=${sessionData.id}`);
      };

      this.duplicate = async(params) => {
        
        open({
          data: get_store_value(data),
          ...params,
        });
      };

      this.lock = () => {
        localStorage.setItem(`mage-lock-${sessionName}`, lock);
        lockStore.set({ lock: false });
        book.refresh();
      };


      // Session exports
      Object.assign(this, {sessionName, load, open});
    })();

    const formats = {
      'md': md,
      'xlgc': xlgc,
      'fodt': fodt,
      'docx': docx,
    };


    // Read file from fileinput
    const open$1 = (elem) => {
      // Crea una copia delle info del file
      const file = elem.files[0];
      const name = file.name;

      // Usa un fileReader per leggere il file come testo
      const reader = new FileReader();
      reader.onload = async() => {
        const extension = name.substr(name.lastIndexOf('.') + 1);
        if(!['md', 'xlgc'].includes(extension)){
          console.error("Unsupported format");
          return
        }

        const book = reader.result;
        const decodedMd = formats[extension].decode(book);
        const encodedBook = (extension === 'md') 
          ? book
          : await Promise.resolve(formats['md'].encode(decodedMd));


        
        session.open({
          data: {
            book: encodedBook,
            cursor: {row: 0, column: 0},
            title: decodedMd.title,
          }
        });

        elem.value = '';
      };
      reader.readAsText(file);
    };


    // Download file
    const download = async(formatKey, book) => {

      const format = formats[formatKey];
      const decodedMd = md.decode(book);

      const encodedBook = (formatKey === 'md') 
        ? book
        : await Promise.resolve(format.encode(decodedMd));

      if(!encodedBook) return

      const element = document.createElement('a');
      element.setAttribute(
        'href',
        `data:${format.mimetype};charset=utf-8,${encodeURIComponent(encodedBook)}`
      );
      element.setAttribute('download', (decodedMd.properties.title || 'magebook') + '.' + formatKey);

      element.style.display = 'none';
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    };

    var name = "magebook";
    var version = "0.2.0";
    var author = "Luca Fabbian";
    var email = "luca.fabbian.1999@gmail.com";
    var description = "Interactive fiction editor";
    var license = "MIT";
    var homepage = "https://librogamesland.github.io/magebook";
    var repository = {
    	type: "git",
    	url: "https://github.com/librogamesland/magebook.git"
    };
    var keywords = [
    	"lgl",
    	"librogamesland",
    	"librogame",
    	"gamebook",
    	"editor",
    	"rollup-plugin",
    	"vite-plugin"
    ];
    var main = "index.js";
    var scripts = {
    	build: "rollup -c",
    	clean: "rm -rf ./dist/build; rm -rf ./alpha2",
    	release: "npm run clean; npm run build; cp -r ./editor ./alpha2",
    	dev: "rollup -c -w",
    	"api-build": "rollup -c 'rollup-api.config.js'",
    	"api-dev": "rollup -c 'rollup-api.config.js' -w"
    };
    var devDependencies = {
    	"@babel/core": "^7.13.8",
    	"@babel/plugin-transform-runtime": "^7.13.10",
    	"@babel/preset-env": "^7.13.9",
    	"@babel/runtime": "^7.13.9",
    	"@codemirror/basic-setup": "^0.17.1",
    	"@codemirror/lang-markdown": "^0.17.3",
    	"@codemirror/stream-parser": "^0.17.1",
    	"@fbraem/rollup-plugin-toml": "0.0.1",
    	"@rollup/plugin-babel": "^5.3.0",
    	"@rollup/plugin-commonjs": "^17.1.0",
    	"@rollup/plugin-json": "^4.1.0",
    	"@rollup/plugin-node-resolve": "^11.2.0",
    	"@rollup/pluginutils": "^4.1.0",
    	"babel-preset-env": "^1.7.0",
    	dexie: "^3.0.3",
    	docx: "^5.5.0",
    	"file-saver": "^2.0.5",
    	marked: "^2.0.1",
    	pkg: "^4.4.9",
    	rollup: "^2.40.0",
    	"rollup-plugin-css-only": "^3.1.0",
    	"rollup-plugin-external-globals": "^0.6.1",
    	"rollup-plugin-serve": "^1.1.0",
    	"rollup-plugin-svelte": "^7.1.0",
    	"rollup-plugin-terser": "^7.0.2",
    	"rollup-plugin-toml": "^1.0.0",
    	"smooth-scroll-into-view-if-needed": "^1.1.32",
    	svelte: "^3.35.0",
    	"svelte-i18n": "^3.3.6"
    };
    var dependencies = {
    	firebase: "^9.5.0",
    	jsdom: "^16.5.1",
    	"query-string": "^7.0.1"
    };
    var manifest = {
    	name: name,
    	version: version,
    	author: author,
    	email: email,
    	description: description,
    	license: license,
    	homepage: homepage,
    	repository: repository,
    	keywords: keywords,
    	main: main,
    	scripts: scripts,
    	devDependencies: devDependencies,
    	dependencies: dependencies
    };

    /* src/components/dialogs/About.svelte generated by Svelte v3.35.0 */
    const file$c = "src/components/dialogs/About.svelte";

    function create_fragment$d(ctx) {
    	let div;
    	let h3;
    	let t2;
    	let img;
    	let img_src_value;
    	let t3;
    	let br;
    	let t4;
    	let p0;
    	let raw_value = /*$_*/ ctx[1]("about.text") + "";
    	let t5;
    	let p1;
    	let t6_value = /*$_*/ ctx[1]("about.contact") + "";
    	let t6;
    	let t7;
    	let a;
    	let t9;
    	let button;
    	let t10_value = /*$_*/ ctx[1]("dialogs.ok") + "";
    	let t10;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = `Magebook - v. ${manifest.version}`;
    			t2 = space();
    			img = element("img");
    			t3 = space();
    			br = element("br");
    			t4 = space();
    			p0 = element("p");
    			t5 = space();
    			p1 = element("p");
    			t6 = text(t6_value);
    			t7 = text(": ");
    			a = element("a");
    			a.textContent = "luc.fabbian@gmail.com";
    			t9 = space();
    			button = element("button");
    			t10 = text(t10_value);
    			add_location(h3, file$c, 11, 2, 184);
    			if (img.src !== (img_src_value = "./static/img/logo.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Magebook logo");
    			attr_dev(img, "class", "svelte-1qabtlc");
    			add_location(img, file$c, 12, 2, 228);
    			add_location(br, file$c, 13, 2, 284);
    			attr_dev(p0, "class", "svelte-1qabtlc");
    			add_location(p0, file$c, 14, 2, 291);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "rel", "noopener");
    			attr_dev(a, "href", "mailto:luca.fabbian.1999@gmail.com?subject=Magebook%20-%20Segnalazione");
    			add_location(a, file$c, 15, 28, 351);
    			attr_dev(p1, "class", "svelte-1qabtlc");
    			add_location(p1, file$c, 15, 2, 325);
    			attr_dev(button, "class", "ok svelte-1qabtlc");
    			add_location(button, file$c, 16, 2, 495);
    			attr_dev(div, "class", "dialog svelte-1qabtlc");
    			add_location(div, file$c, 10, 0, 161);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(div, t2);
    			append_dev(div, img);
    			append_dev(div, t3);
    			append_dev(div, br);
    			append_dev(div, t4);
    			append_dev(div, p0);
    			p0.innerHTML = raw_value;
    			append_dev(div, t5);
    			append_dev(div, p1);
    			append_dev(p1, t6);
    			append_dev(p1, t7);
    			append_dev(p1, a);
    			append_dev(div, t9);
    			append_dev(div, button);
    			append_dev(button, t10);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 2 && raw_value !== (raw_value = /*$_*/ ctx[1]("about.text") + "")) p0.innerHTML = raw_value;			if (dirty & /*$_*/ 2 && t6_value !== (t6_value = /*$_*/ ctx[1]("about.contact") + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*$_*/ 2 && t10_value !== (t10_value = /*$_*/ ctx[1]("dialogs.ok") + "")) set_data_dev(t10, t10_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(1, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("About", slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;

    	const writable_props = ["params", "callback"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => callback(true);

    	$$self.$$set = $$props => {
    		if ("params" in $$props) $$invalidate(2, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({ _: ee, manifest, params, callback, $_ });

    	$$self.$inject_state = $$props => {
    		if ("params" in $$props) $$invalidate(2, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [callback, $_, params, click_handler];
    }

    class About extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, { params: 2, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[2] === undefined && !("params" in props)) {
    			console.warn("<About> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !("callback" in props)) {
    			console.warn("<About> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<About>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<About>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/Img.svelte generated by Svelte v3.35.0 */

    const { console: console_1$1 } = globals;
    const file$b = "src/components/dialogs/Img.svelte";

    // (47:18) 
    function create_if_block_1(ctx) {
    	let div1;
    	let p;
    	let t0_value = /*$_*/ ctx[4]("dialogs.graph.loading") + "";
    	let t0;
    	let t1;
    	let div0;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			p = element("p");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			add_location(p, file$b, 48, 2, 1224);
    			attr_dev(div0, "class", "spinner-1 svelte-1doq9qj");
    			add_location(div0, file$b, 49, 2, 1263);
    			attr_dev(div1, "class", "dialog");
    			set_style(div1, "text-align", "center");
    			add_location(div1, file$b, 47, 0, 1174);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, p);
    			append_dev(p, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$_*/ 16 && t0_value !== (t0_value = /*$_*/ ctx[4]("dialogs.graph.loading") + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(47:18) ",
    		ctx
    	});

    	return block;
    }

    // (26:0) {#if loaded}
    function create_if_block(ctx) {
    	let div1;
    	let div0;
    	let raw_value = /*src*/ ctx[3].replace(/width=\"([^"]*)\"/, "width=\"100%\"").replace(/height=\"([^"]*)\"/, "") + "";
    	let t0;
    	let button;
    	let t1_value = /*$_*/ ctx[4]("dialogs.graph.open") + "";
    	let t1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			button = element("button");
    			t1 = text(t1_value);
    			add_location(div0, file$b, 32, 2, 604);
    			attr_dev(button, "class", "ok");
    			add_location(button, file$b, 36, 2, 783);
    			attr_dev(div1, "class", "imgbox svelte-1doq9qj");
    			add_location(div1, file$b, 26, 0, 507);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			div0.innerHTML = raw_value;
    			append_dev(div1, t0);
    			append_dev(div1, button);
    			append_dev(button, t1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", stop_propagation(/*click_handler*/ ctx[6]), false, false, true),
    					listen_dev(button, "click", /*click_handler_1*/ ctx[7], false, false, false),
    					listen_dev(div1, "click", /*click_handler_2*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*src*/ 8 && raw_value !== (raw_value = /*src*/ ctx[3].replace(/width=\"([^"]*)\"/, "width=\"100%\"").replace(/height=\"([^"]*)\"/, "") + "")) div0.innerHTML = raw_value;			if (dirty & /*$_*/ 16 && t1_value !== (t1_value = /*$_*/ ctx[4]("dialogs.graph.open") + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(26:0) {#if loaded}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*loaded*/ ctx[1]) return create_if_block;
    		if (/*waiting*/ ctx[2]) return create_if_block_1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) {
    				if_block.d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(4, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Img", slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;
    	let loaded = false;
    	let waiting = false;
    	let src;

    	const unsubscribe = params.subscribe(async values => {
    		$$invalidate(1, loaded = false);
    		$$invalidate(2, waiting = true);
    		await tick();

    		setTimeout(
    			async () => {
    				$$invalidate(3, src = await Promise.resolve(values[0]()));
    				$$invalidate(1, loaded = true);
    			},
    			100
    		);
    	});

    	onDestroy(unsubscribe);

    	const writable_props = ["params", "callback"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<Img> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => console.log("clickOnImg");

    	const click_handler_1 = () => {
    		const blob = new Blob([src], { type: "image/svg+xml" });

    		// create an URI pointing to that blob
    		const url = URL.createObjectURL(blob);

    		const win = window.open(url);

    		// so the Garbage Collector can collect the blob
    		win.onload = () => URL.revokeObjectURL(url);
    	};

    	const click_handler_2 = async () => {
    		$$invalidate(3, src = "");
    		await tick();
    		callback(false);
    	};

    	$$self.$$set = $$props => {
    		if ("params" in $$props) $$invalidate(5, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: ee,
    		onDestroy,
    		tick,
    		params,
    		callback,
    		loaded,
    		waiting,
    		src,
    		unsubscribe,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ("params" in $$props) $$invalidate(5, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    		if ("loaded" in $$props) $$invalidate(1, loaded = $$props.loaded);
    		if ("waiting" in $$props) $$invalidate(2, waiting = $$props.waiting);
    		if ("src" in $$props) $$invalidate(3, src = $$props.src);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		callback,
    		loaded,
    		waiting,
    		src,
    		$_,
    		params,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Img extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { params: 5, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Img",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[5] === undefined && !("params" in props)) {
    			console_1$1.warn("<Img> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !("callback" in props)) {
    			console_1$1.warn("<Img> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Img>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Img>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Img>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Img>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/Shuffle.svelte generated by Svelte v3.35.0 */

    const { Object: Object_1$1 } = globals;
    const file$a = "src/components/dialogs/Shuffle.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (56:8) {#each groups as group}
    function create_each_block_1$1(ctx) {
    	let option;
    	let t_value = /*group*/ ctx[17] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*group*/ ctx[17];
    			option.value = option.__value;
    			add_location(option, file$a, 56, 10, 1601);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*groups*/ 16 && t_value !== (t_value = /*group*/ ctx[17] + "")) set_data_dev(t, t_value);

    			if (dirty & /*groups*/ 16 && option_value_value !== (option_value_value = /*group*/ ctx[17])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(56:8) {#each groups as group}",
    		ctx
    	});

    	return block;
    }

    // (64:4) {#each ["final", "fixed", "death"] as flag}
    function create_each_block$3(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[11](/*flag*/ ctx[14]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			attr_dev(img, "alt", /*flag*/ ctx[14]);
    			if (img.src !== (img_src_value = `./static/img/flags/${/*flag*/ ctx[14]}.png`)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "svelte-1ergg8");
    			add_location(img, file$a, 68, 8, 1925);
    			attr_dev(div, "class", "svelte-1ergg8");
    			toggle_class(div, "selected", /*flags*/ ctx[3][/*flag*/ ctx[14]]);
    			add_location(div, file$a, 64, 6, 1813);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*flags*/ 8) {
    				toggle_class(div, "selected", /*flags*/ ctx[3][/*flag*/ ctx[14]]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(64:4) {#each [\\\"final\\\", \\\"fixed\\\", \\\"death\\\"] as flag}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div2;
    	let h3;
    	let t0_value = /*$_*/ ctx[5]("dialogs.shuffle.title") + "";
    	let t0;
    	let t1;
    	let p;
    	let t2_value = /*$_*/ ctx[5]("dialogs.shuffle.hint") + "";
    	let t2;
    	let t3;
    	let h40;
    	let t4_value = /*$_*/ ctx[5]("dialogs.shuffle.group") + "";
    	let t4;
    	let t5;
    	let t6;
    	let div0;
    	let input;
    	let t7;
    	let span;
    	let select;
    	let option;
    	let t8_value = /*$_*/ ctx[5]("sidemenu.allgroup") + "";
    	let t8;
    	let t9;
    	let h41;
    	let t10_value = /*$_*/ ctx[5]("dialogs.shuffle.flags") + "";
    	let t10;
    	let t11;
    	let t12;
    	let div1;
    	let t13;
    	let button0;
    	let t14_value = /*$_*/ ctx[5]("dialogs.ok") + "";
    	let t14;
    	let t15;
    	let button1;
    	let t16_value = /*$_*/ ctx[5]("dialogs.cancel") + "";
    	let t16;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*groups*/ ctx[4];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let each_value = ["final", "fixed", "death"];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < 3; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			p = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			h40 = element("h4");
    			t4 = text(t4_value);
    			t5 = text(":");
    			t6 = space();
    			div0 = element("div");
    			input = element("input");
    			t7 = space();
    			span = element("span");
    			select = element("select");
    			option = element("option");
    			t8 = text(t8_value);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t9 = space();
    			h41 = element("h4");
    			t10 = text(t10_value);
    			t11 = text(":");
    			t12 = space();
    			div1 = element("div");

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].c();
    			}

    			t13 = space();
    			button0 = element("button");
    			t14 = text(t14_value);
    			t15 = space();
    			button1 = element("button");
    			t16 = text(t16_value);
    			add_location(h3, file$a, 47, 2, 1191);
    			add_location(p, file$a, 48, 2, 1232);
    			attr_dev(h40, "class", "svelte-1ergg8");
    			add_location(h40, file$a, 49, 2, 1272);
    			attr_dev(input, "type", "text");
    			attr_dev(input, "class", "svelte-1ergg8");
    			add_location(input, file$a, 51, 4, 1338);
    			option.__value = "allgroupidtag";
    			option.value = option.__value;
    			add_location(option, file$a, 54, 8, 1494);
    			if (/*selectedGroup*/ ctx[1] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[10].call(select));
    			add_location(select, file$a, 53, 6, 1450);
    			attr_dev(span, "class", "select-dropdown svelte-1ergg8");
    			set_style(span, "margin-left", "5px");
    			add_location(span, file$a, 52, 4, 1389);
    			attr_dev(div0, "class", "input svelte-1ergg8");
    			add_location(div0, file$a, 50, 2, 1314);
    			attr_dev(h41, "class", "svelte-1ergg8");
    			add_location(h41, file$a, 61, 2, 1697);
    			attr_dev(div1, "class", "flags svelte-1ergg8");
    			add_location(div1, file$a, 62, 2, 1739);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$a, 72, 2, 2019);
    			attr_dev(button1, "class", "cancel");
    			add_location(button1, file$a, 78, 2, 2106);
    			attr_dev(div2, "class", "dialog svelte-1ergg8");
    			add_location(div2, file$a, 46, 0, 1168);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h3);
    			append_dev(h3, t0);
    			append_dev(div2, t1);
    			append_dev(div2, p);
    			append_dev(p, t2);
    			append_dev(div2, t3);
    			append_dev(div2, h40);
    			append_dev(h40, t4);
    			append_dev(h40, t5);
    			append_dev(div2, t6);
    			append_dev(div2, div0);
    			append_dev(div0, input);
    			set_input_value(input, /*groupFilter*/ ctx[2]);
    			append_dev(div0, t7);
    			append_dev(div0, span);
    			append_dev(span, select);
    			append_dev(select, option);
    			append_dev(option, t8);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select, null);
    			}

    			select_option(select, /*selectedGroup*/ ctx[1]);
    			append_dev(div2, t9);
    			append_dev(div2, h41);
    			append_dev(h41, t10);
    			append_dev(h41, t11);
    			append_dev(div2, t12);
    			append_dev(div2, div1);

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div2, t13);
    			append_dev(div2, button0);
    			append_dev(button0, t14);
    			append_dev(div2, t15);
    			append_dev(div2, button1);
    			append_dev(button1, t16);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[9]),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[10]),
    					listen_dev(button0, "click", /*shuffle*/ ctx[6], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[12], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 32 && t0_value !== (t0_value = /*$_*/ ctx[5]("dialogs.shuffle.title") + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$_*/ 32 && t2_value !== (t2_value = /*$_*/ ctx[5]("dialogs.shuffle.hint") + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*$_*/ 32 && t4_value !== (t4_value = /*$_*/ ctx[5]("dialogs.shuffle.group") + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*groupFilter*/ 4 && input.value !== /*groupFilter*/ ctx[2]) {
    				set_input_value(input, /*groupFilter*/ ctx[2]);
    			}

    			if (dirty & /*$_*/ 32 && t8_value !== (t8_value = /*$_*/ ctx[5]("sidemenu.allgroup") + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*groups*/ 16) {
    				each_value_1 = /*groups*/ ctx[4];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*selectedGroup, groups*/ 18) {
    				select_option(select, /*selectedGroup*/ ctx[1]);
    			}

    			if (dirty & /*$_*/ 32 && t10_value !== (t10_value = /*$_*/ ctx[5]("dialogs.shuffle.flags") + "")) set_data_dev(t10, t10_value);

    			if (dirty & /*flags*/ 8) {
    				each_value = ["final", "fixed", "death"];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < 3; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < 3; i += 1) {
    					each_blocks[i].d(1);
    				}
    			}

    			if (dirty & /*$_*/ 32 && t14_value !== (t14_value = /*$_*/ ctx[5]("dialogs.ok") + "")) set_data_dev(t14, t14_value);
    			if (dirty & /*$_*/ 32 && t16_value !== (t16_value = /*$_*/ ctx[5]("dialogs.cancel") + "")) set_data_dev(t16, t16_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let groups;
    	let $bookIndex;
    	let $newBook;
    	let $_;
    	validate_store(bookIndex, "bookIndex");
    	component_subscribe($$self, bookIndex, $$value => $$invalidate(8, $bookIndex = $$value));
    	validate_store(newBook, "newBook");
    	component_subscribe($$self, newBook, $$value => $$invalidate(13, $newBook = $$value));
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(5, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Shuffle", slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;

    	// Entity input bindings
    	let groupFilter = "";

    	let flags = { final: false, fixed: false, death: false };
    	let selectedGroup = "allgroupidtag";

    	const shuffle = () => {
    		const selectedFlags = Object.keys(flags).filter(key => flags[key]);
    		const filter = groupFilter.split(",").map(s => s.trim()).filter(s => s);
    		const book = new Book(md.decode($newBook));

    		session.open({
    			data: {
    				book: md.encode(book.shuffle(selectedFlags, filter, true)),
    				cursor: { row: 0, column: 0 },
    				title: $bookIndex.properties.title
    			}
    		});
    	};

    	const writable_props = ["params", "callback"];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Shuffle> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		groupFilter = this.value;
    		($$invalidate(2, groupFilter), $$invalidate(1, selectedGroup));
    	}

    	function select_change_handler() {
    		selectedGroup = select_value(this);
    		($$invalidate(1, selectedGroup), $$invalidate(2, groupFilter));
    		($$invalidate(4, groups), $$invalidate(8, $bookIndex));
    	}

    	const click_handler = flag => $$invalidate(3, flags[flag] = !flags[flag], flags);
    	const click_handler_1 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ("params" in $$props) $$invalidate(7, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: ee,
    		tick,
    		Book,
    		md,
    		newBook,
    		bookIndex,
    		session,
    		params,
    		callback,
    		groupFilter,
    		flags,
    		selectedGroup,
    		shuffle,
    		groups,
    		$bookIndex,
    		$newBook,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ("params" in $$props) $$invalidate(7, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    		if ("groupFilter" in $$props) $$invalidate(2, groupFilter = $$props.groupFilter);
    		if ("flags" in $$props) $$invalidate(3, flags = $$props.flags);
    		if ("selectedGroup" in $$props) $$invalidate(1, selectedGroup = $$props.selectedGroup);
    		if ("groups" in $$props) $$invalidate(4, groups = $$props.groups);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$bookIndex*/ 256) {
    			$$invalidate(4, groups = [...$bookIndex.groups]);
    		}

    		if ($$self.$$.dirty & /*selectedGroup, groupFilter*/ 6) {
    			{
    				if (selectedGroup != "allgroupidtag") {
    					$$invalidate(2, groupFilter += selectedGroup + ", ");

    					tick().then(() => {
    						$$invalidate(1, selectedGroup = "allgroupidtag");
    					});
    				}
    			}
    		}
    	};

    	return [
    		callback,
    		selectedGroup,
    		groupFilter,
    		flags,
    		groups,
    		$_,
    		shuffle,
    		params,
    		$bookIndex,
    		input_input_handler,
    		select_change_handler,
    		click_handler,
    		click_handler_1
    	];
    }

    class Shuffle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { params: 7, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Shuffle",
    			options,
    			id: create_fragment$b.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[7] === undefined && !("params" in props)) {
    			console.warn("<Shuffle> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !("callback" in props)) {
    			console.warn("<Shuffle> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Shuffle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Shuffle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Shuffle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Shuffle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/NewBook.svelte generated by Svelte v3.35.0 */
    const file$9 = "src/components/dialogs/NewBook.svelte";

    function create_fragment$a(ctx) {
    	let div;
    	let h3;
    	let t0_value = /*$_*/ ctx[1]("dialogs.newbook.new") + "";
    	let t0;
    	let t1;
    	let p;
    	let raw_value = /*$_*/ ctx[1]("dialogs.newbook.hint") + "";
    	let t2;
    	let button0;
    	let t3_value = /*$_*/ ctx[1]("dialogs.ok") + "";
    	let t3;
    	let t4;
    	let button1;
    	let t5_value = /*$_*/ ctx[1]("dialogs.cancel") + "";
    	let t5;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			p = element("p");
    			t2 = space();
    			button0 = element("button");
    			t3 = text(t3_value);
    			t4 = space();
    			button1 = element("button");
    			t5 = text(t5_value);
    			add_location(h3, file$9, 15, 2, 315);
    			set_style(p, "margin", "1rem 0");
    			add_location(p, file$9, 16, 2, 354);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$9, 17, 2, 421);
    			attr_dev(button1, "class", "cancel");
    			add_location(button1, file$9, 22, 2, 513);
    			attr_dev(div, "class", "dialog");
    			add_location(div, file$9, 14, 0, 292);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			append_dev(div, p);
    			p.innerHTML = raw_value;
    			append_dev(div, t2);
    			append_dev(div, button0);
    			append_dev(button0, t3);
    			append_dev(div, t4);
    			append_dev(div, button1);
    			append_dev(button1, t5);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[4], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 2 && t0_value !== (t0_value = /*$_*/ ctx[1]("dialogs.newbook.new") + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$_*/ 2 && raw_value !== (raw_value = /*$_*/ ctx[1]("dialogs.newbook.hint") + "")) p.innerHTML = raw_value;			if (dirty & /*$_*/ 2 && t3_value !== (t3_value = /*$_*/ ctx[1]("dialogs.ok") + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*$_*/ 2 && t5_value !== (t5_value = /*$_*/ ctx[1]("dialogs.cancel") + "")) set_data_dev(t5, t5_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(1, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("NewBook", slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;

    	const newBook = () => session.open({
    		data: {
    			book: $_("books.local"),
    			cursor: { row: 0, column: 0 }
    		}
    	});

    	const writable_props = ["params", "callback"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<NewBook> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => newBook();
    	const click_handler_1 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ("params" in $$props) $$invalidate(3, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: ee,
    		session,
    		params,
    		callback,
    		newBook,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ("params" in $$props) $$invalidate(3, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [callback, $_, newBook, params, click_handler, click_handler_1];
    }

    class NewBook extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { params: 3, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NewBook",
    			options,
    			id: create_fragment$a.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[3] === undefined && !("params" in props)) {
    			console.warn("<NewBook> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !("callback" in props)) {
    			console.warn("<NewBook> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<NewBook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<NewBook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<NewBook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<NewBook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/NewFirebook.svelte generated by Svelte v3.35.0 */
    const file$8 = "src/components/dialogs/NewFirebook.svelte";

    function create_fragment$9(ctx) {
    	let div3;
    	let h3;
    	let t0_value = /*$_*/ ctx[4]("dialogs.newfirebook.new") + "";
    	let t0;
    	let t1;
    	let div0;
    	let span0;
    	let t3;
    	let input0;
    	let t4;
    	let div1;
    	let span1;
    	let t6;
    	let input1;
    	let t7;
    	let div2;
    	let span2;
    	let t8_value = /*$_*/ ctx[4]("dialogs.newfirebook.book") + "";
    	let t8;
    	let t9;
    	let t10;
    	let input2;
    	let t11;
    	let p;
    	let raw_value = /*$_*/ ctx[4]("dialogs.newfirebook.getStarted") + "";
    	let t12;
    	let button0;
    	let t13_value = /*$_*/ ctx[4]("dialogs.ok") + "";
    	let t13;
    	let t14;
    	let button1;
    	let t15_value = /*$_*/ ctx[4]("dialogs.cancel") + "";
    	let t15;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			span0 = element("span");
    			span0.textContent = "apiKey:";
    			t3 = space();
    			input0 = element("input");
    			t4 = space();
    			div1 = element("div");
    			span1 = element("span");
    			span1.textContent = "databaseURL:";
    			t6 = space();
    			input1 = element("input");
    			t7 = space();
    			div2 = element("div");
    			span2 = element("span");
    			t8 = text(t8_value);
    			t9 = text(":");
    			t10 = space();
    			input2 = element("input");
    			t11 = space();
    			p = element("p");
    			t12 = space();
    			button0 = element("button");
    			t13 = text(t13_value);
    			t14 = space();
    			button1 = element("button");
    			t15 = text(t15_value);
    			add_location(h3, file$8, 25, 2, 631);
    			attr_dev(span0, "class", "svelte-1c6ktlb");
    			add_location(span0, file$8, 28, 4, 699);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "class", "svelte-1c6ktlb");
    			add_location(input0, file$8, 29, 4, 724);
    			attr_dev(div0, "class", "input svelte-1c6ktlb");
    			add_location(div0, file$8, 27, 2, 675);
    			attr_dev(span1, "class", "svelte-1c6ktlb");
    			add_location(span1, file$8, 32, 4, 801);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "class", "svelte-1c6ktlb");
    			add_location(input1, file$8, 33, 4, 831);
    			attr_dev(div1, "class", "input svelte-1c6ktlb");
    			add_location(div1, file$8, 31, 2, 777);
    			attr_dev(span2, "class", "svelte-1c6ktlb");
    			add_location(span2, file$8, 36, 4, 913);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "class", "svelte-1c6ktlb");
    			add_location(input2, file$8, 37, 4, 964);
    			attr_dev(div2, "class", "input svelte-1c6ktlb");
    			add_location(div2, file$8, 35, 2, 889);
    			attr_dev(p, "class", "getstarted");
    			set_style(p, "margin", "1rem 0");
    			add_location(p, file$8, 39, 2, 1015);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$8, 41, 2, 1112);
    			attr_dev(button1, "class", "cancel");
    			add_location(button1, file$8, 46, 2, 1204);
    			attr_dev(div3, "class", "dialog svelte-1c6ktlb");
    			add_location(div3, file$8, 24, 0, 608);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, h3);
    			append_dev(h3, t0);
    			append_dev(div3, t1);
    			append_dev(div3, div0);
    			append_dev(div0, span0);
    			append_dev(div0, t3);
    			append_dev(div0, input0);
    			set_input_value(input0, /*apiKey*/ ctx[1]);
    			append_dev(div3, t4);
    			append_dev(div3, div1);
    			append_dev(div1, span1);
    			append_dev(div1, t6);
    			append_dev(div1, input1);
    			set_input_value(input1, /*databaseURL*/ ctx[2]);
    			append_dev(div3, t7);
    			append_dev(div3, div2);
    			append_dev(div2, span2);
    			append_dev(span2, t8);
    			append_dev(span2, t9);
    			append_dev(div2, t10);
    			append_dev(div2, input2);
    			set_input_value(input2, /*book*/ ctx[3]);
    			append_dev(div3, t11);
    			append_dev(div3, p);
    			p.innerHTML = raw_value;
    			append_dev(div3, t12);
    			append_dev(div3, button0);
    			append_dev(button0, t13);
    			append_dev(div3, t14);
    			append_dev(div3, button1);
    			append_dev(button1, t15);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[7]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[8]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[9]),
    					listen_dev(button0, "click", /*click_handler*/ ctx[10], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 16 && t0_value !== (t0_value = /*$_*/ ctx[4]("dialogs.newfirebook.new") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*apiKey*/ 2 && input0.value !== /*apiKey*/ ctx[1]) {
    				set_input_value(input0, /*apiKey*/ ctx[1]);
    			}

    			if (dirty & /*databaseURL*/ 4 && input1.value !== /*databaseURL*/ ctx[2]) {
    				set_input_value(input1, /*databaseURL*/ ctx[2]);
    			}

    			if (dirty & /*$_*/ 16 && t8_value !== (t8_value = /*$_*/ ctx[4]("dialogs.newfirebook.book") + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*book*/ 8 && input2.value !== /*book*/ ctx[3]) {
    				set_input_value(input2, /*book*/ ctx[3]);
    			}

    			if (dirty & /*$_*/ 16 && raw_value !== (raw_value = /*$_*/ ctx[4]("dialogs.newfirebook.getStarted") + "")) p.innerHTML = raw_value;			if (dirty & /*$_*/ 16 && t13_value !== (t13_value = /*$_*/ ctx[4]("dialogs.ok") + "")) set_data_dev(t13, t13_value);
    			if (dirty & /*$_*/ 16 && t15_value !== (t15_value = /*$_*/ ctx[4]("dialogs.cancel") + "")) set_data_dev(t15, t15_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(4, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("NewFirebook", slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;

    	// Entity input bindings
    	let apiKey, databaseURL, book;

    	const newBook = () => {
    		const config = encodeURIComponent(btoa(JSON.stringify({
    			apiKey: apiKey.replaceAll("\",", "").replaceAll("\"", "").replaceAll("apiKey:", "").trim(),
    			databaseURL: databaseURL.replaceAll("\",", "").replaceAll("\"", "").replaceAll("databaseURL:", "").trim(),
    			book
    		})));

    		location.assign(`#fsession=${config}`);
    		location.reload();
    	};

    	const writable_props = ["params", "callback"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<NewFirebook> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		apiKey = this.value;
    		$$invalidate(1, apiKey);
    	}

    	function input1_input_handler() {
    		databaseURL = this.value;
    		$$invalidate(2, databaseURL);
    	}

    	function input2_input_handler() {
    		book = this.value;
    		$$invalidate(3, book);
    	}

    	const click_handler = () => newBook();
    	const click_handler_1 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ("params" in $$props) $$invalidate(6, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: ee,
    		session,
    		params,
    		callback,
    		apiKey,
    		databaseURL,
    		book,
    		newBook,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ("params" in $$props) $$invalidate(6, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    		if ("apiKey" in $$props) $$invalidate(1, apiKey = $$props.apiKey);
    		if ("databaseURL" in $$props) $$invalidate(2, databaseURL = $$props.databaseURL);
    		if ("book" in $$props) $$invalidate(3, book = $$props.book);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		callback,
    		apiKey,
    		databaseURL,
    		book,
    		$_,
    		newBook,
    		params,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		click_handler,
    		click_handler_1
    	];
    }

    class NewFirebook extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { params: 6, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NewFirebook",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[6] === undefined && !("params" in props)) {
    			console.warn("<NewFirebook> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !("callback" in props)) {
    			console.warn("<NewFirebook> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<NewFirebook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<NewFirebook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<NewFirebook>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<NewFirebook>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/Recover.svelte generated by Svelte v3.35.0 */
    const file$7 = "src/components/dialogs/Recover.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	return child_ctx;
    }

    // (1:0) <script>   import { _ }
    function create_catch_block(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(1:0) <script>   import { _ }",
    		ctx
    	});

    	return block;
    }

    // (14:2) {:then sessions}
    function create_then_block(ctx) {
    	let ul;
    	let each_value = /*sessions*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-1yawr3v");
    			add_location(ul, file$7, 14, 2, 272);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*previews*/ 0) {
    				each_value = /*sessions*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(14:2) {:then sessions}",
    		ctx
    	});

    	return block;
    }

    // (16:4) {#each sessions as session}
    function create_each_block$2(ctx) {
    	let li;
    	let a;
    	let t0_value = /*session*/ ctx[5].name + "";
    	let t0;
    	let t1;
    	let span;
    	let t2_value = /*session*/ ctx[5].time.toLocaleDateString() + "";
    	let t2;
    	let t3;
    	let t4_value = /*session*/ ctx[5].time.toLocaleTimeString() + "";
    	let t4;

    	const block = {
    		c: function create() {
    			li = element("li");
    			a = element("a");
    			t0 = text(t0_value);
    			t1 = space();
    			span = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			t4 = text(t4_value);
    			attr_dev(span, "class", "svelte-1yawr3v");
    			add_location(span, file$7, 17, 8, 376);
    			attr_dev(a, "href", "#msession=" + /*session*/ ctx[5].id);
    			attr_dev(a, "class", "svelte-1yawr3v");
    			add_location(a, file$7, 16, 8, 317);
    			attr_dev(li, "class", "svelte-1yawr3v");
    			add_location(li, file$7, 16, 4, 313);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, a);
    			append_dev(a, t0);
    			append_dev(a, t1);
    			append_dev(a, span);
    			append_dev(span, t2);
    			append_dev(span, t3);
    			append_dev(span, t4);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(16:4) {#each sessions as session}",
    		ctx
    	});

    	return block;
    }

    // (12:21)      Loading...   {:then sessions}
    function create_pending_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Loading...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(12:21)      Loading...   {:then sessions}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div;
    	let h3;
    	let t0_value = /*$_*/ ctx[1]("navbar.file.recover") + "";
    	let t0;
    	let t1;
    	let t2;
    	let button;
    	let t3_value = /*$_*/ ctx[1]("dialogs.cancel") + "";
    	let t3;
    	let mounted;
    	let dispose;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 4
    	};

    	handle_promise(previews(), info);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			info.block.c();
    			t2 = space();
    			button = element("button");
    			t3 = text(t3_value);
    			add_location(h3, file$7, 10, 2, 177);
    			attr_dev(button, "class", "cancel");
    			add_location(button, file$7, 21, 2, 503);
    			attr_dev(div, "class", "dialog");
    			add_location(div, file$7, 9, 0, 154);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			info.block.m(div, info.anchor = null);
    			info.mount = () => div;
    			info.anchor = t2;
    			append_dev(div, t2);
    			append_dev(div, button);
    			append_dev(button, t3);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*$_*/ 2 && t0_value !== (t0_value = /*$_*/ ctx[1]("navbar.file.recover") + "")) set_data_dev(t0, t0_value);

    			{
    				const child_ctx = ctx.slice();
    				child_ctx[4] = info.resolved;
    				info.block.p(child_ctx, dirty);
    			}

    			if (dirty & /*$_*/ 2 && t3_value !== (t3_value = /*$_*/ ctx[1]("dialogs.cancel") + "")) set_data_dev(t3, t3_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			info.block.d();
    			info.token = null;
    			info = null;
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(1, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Recover", slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;
    	const writable_props = ["params", "callback"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Recover> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => callback(false);

    	$$self.$$set = $$props => {
    		if ("params" in $$props) $$invalidate(2, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({ _: ee, previews, params, callback, $_ });

    	$$self.$inject_state = $$props => {
    		if ("params" in $$props) $$invalidate(2, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [callback, $_, params, click_handler];
    }

    class Recover extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { params: 2, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Recover",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[2] === undefined && !("params" in props)) {
    			console.warn("<Recover> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !("callback" in props)) {
    			console.warn("<Recover> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Recover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Recover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Recover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Recover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Navbar.svelte generated by Svelte v3.35.0 */
    const file$6 = "src/components/Navbar.svelte";

    function create_fragment$7(ctx) {
    	let nav;
    	let div1;
    	let h10;
    	let t0_value = /*$_*/ ctx[0]("navbar.file.title") + "";
    	let t0;
    	let t1;
    	let div0;
    	let p0;
    	let t2_value = /*$_*/ ctx[0]("navbar.file.new") + "";
    	let t2;
    	let t3;
    	let hr0;
    	let t4;
    	let p1;
    	let t5_value = /*$_*/ ctx[0]("navbar.file.newFire") + "";
    	let t5;
    	let t6;
    	let hr1;
    	let t7;
    	let input;
    	let t8;
    	let label;
    	let t9_value = /*$_*/ ctx[0]("navbar.file.open") + "";
    	let t9;
    	let t10;
    	let p2;
    	let t11_value = /*$_*/ ctx[0]("navbar.file.save") + "";
    	let t11;
    	let t12;
    	let p3;
    	let t13_value = /*$_*/ ctx[0]("navbar.file.recover") + "";
    	let t13;
    	let t14;
    	let div3;
    	let h11;
    	let t15_value = /*$_*/ ctx[0]("navbar.book.title") + "";
    	let t15;
    	let t16;
    	let div2;
    	let p4;
    	let t17_value = /*$_*/ ctx[0]("navbar.book.graph") + "";
    	let t17;
    	let t18;
    	let p5;
    	let t19_value = /*$_*/ ctx[0]("navbar.book.shuffle") + "";
    	let t19;
    	let t20;
    	let div5;
    	let h12;
    	let t21_value = /*$_*/ ctx[0]("navbar.export.title") + "";
    	let t21;
    	let t22;
    	let div4;
    	let p6;
    	let t23_value = /*$_*/ ctx[0]("navbar.export.docx") + "";
    	let t23;
    	let t24;
    	let p7;
    	let t25_value = /*$_*/ ctx[0]("navbar.export.fodt") + "";
    	let t25;
    	let t26;
    	let p8;
    	let t27_value = /*$_*/ ctx[0]("navbar.export.xlgc") + "";
    	let t27;
    	let t28;
    	let div7;
    	let h13;
    	let t29_value = /*$_*/ ctx[0]("navbar.help.title") + "";
    	let t29;
    	let t30;
    	let div6;
    	let a0;
    	let t31_value = /*$_*/ ctx[0]("navbar.help.guide") + "";
    	let t31;
    	let a0_href_value;
    	let t32;
    	let a1;
    	let t33_value = /*$_*/ ctx[0]("navbar.help.forum") + "";
    	let t33;
    	let t34;
    	let p9;
    	let t35_value = /*$_*/ ctx[0]("navbar.help.about") + "";
    	let t35;
    	let t36;
    	let div8;
    	let span;
    	let span_aria_label_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div1 = element("div");
    			h10 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			p0 = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			hr0 = element("hr");
    			t4 = space();
    			p1 = element("p");
    			t5 = text(t5_value);
    			t6 = space();
    			hr1 = element("hr");
    			t7 = space();
    			input = element("input");
    			t8 = space();
    			label = element("label");
    			t9 = text(t9_value);
    			t10 = space();
    			p2 = element("p");
    			t11 = text(t11_value);
    			t12 = space();
    			p3 = element("p");
    			t13 = text(t13_value);
    			t14 = space();
    			div3 = element("div");
    			h11 = element("h1");
    			t15 = text(t15_value);
    			t16 = space();
    			div2 = element("div");
    			p4 = element("p");
    			t17 = text(t17_value);
    			t18 = space();
    			p5 = element("p");
    			t19 = text(t19_value);
    			t20 = space();
    			div5 = element("div");
    			h12 = element("h1");
    			t21 = text(t21_value);
    			t22 = space();
    			div4 = element("div");
    			p6 = element("p");
    			t23 = text(t23_value);
    			t24 = space();
    			p7 = element("p");
    			t25 = text(t25_value);
    			t26 = space();
    			p8 = element("p");
    			t27 = text(t27_value);
    			t28 = space();
    			div7 = element("div");
    			h13 = element("h1");
    			t29 = text(t29_value);
    			t30 = space();
    			div6 = element("div");
    			a0 = element("a");
    			t31 = text(t31_value);
    			t32 = space();
    			a1 = element("a");
    			t33 = text(t33_value);
    			t34 = space();
    			p9 = element("p");
    			t35 = text(t35_value);
    			t36 = space();
    			div8 = element("div");
    			span = element("span");
    			attr_dev(h10, "class", "svelte-1gtd7wj");
    			add_location(h10, file$6, 35, 4, 973);
    			attr_dev(p0, "class", "svelte-1gtd7wj");
    			add_location(p0, file$6, 37, 6, 1040);
    			attr_dev(hr0, "class", "svelte-1gtd7wj");
    			add_location(hr0, file$6, 38, 6, 1110);
    			attr_dev(p1, "class", "svelte-1gtd7wj");
    			add_location(p1, file$6, 39, 6, 1121);
    			attr_dev(hr1, "class", "svelte-1gtd7wj");
    			add_location(hr1, file$6, 40, 6, 1199);
    			attr_dev(input, "type", "file");
    			attr_dev(input, "name", "open");
    			attr_dev(input, "id", "open");
    			attr_dev(input, "accept", ".xlgc,.md");
    			attr_dev(input, "class", "svelte-1gtd7wj");
    			add_location(input, file$6, 41, 6, 1210);
    			attr_dev(label, "for", "open");
    			attr_dev(label, "class", "svelte-1gtd7wj");
    			add_location(label, file$6, 44, 6, 1328);
    			attr_dev(p2, "class", "svelte-1gtd7wj");
    			add_location(p2, file$6, 45, 6, 1386);
    			attr_dev(p3, "class", "svelte-1gtd7wj");
    			add_location(p3, file$6, 46, 6, 1473);
    			attr_dev(div0, "class", "content svelte-1gtd7wj");
    			add_location(div0, file$6, 36, 4, 1012);
    			attr_dev(div1, "class", "svelte-1gtd7wj");
    			add_location(div1, file$6, 34, 2, 963);
    			attr_dev(h11, "class", "svelte-1gtd7wj");
    			add_location(h11, file$6, 51, 4, 1574);
    			attr_dev(p4, "class", "svelte-1gtd7wj");
    			add_location(p4, file$6, 53, 6, 1641);
    			attr_dev(p5, "class", "svelte-1gtd7wj");
    			add_location(p5, file$6, 54, 6, 1744);
    			attr_dev(div2, "class", "content svelte-1gtd7wj");
    			add_location(div2, file$6, 52, 4, 1613);
    			attr_dev(div3, "class", "svelte-1gtd7wj");
    			add_location(div3, file$6, 50, 2, 1564);
    			attr_dev(h12, "class", "svelte-1gtd7wj");
    			add_location(h12, file$6, 59, 4, 1845);
    			attr_dev(p6, "class", "svelte-1gtd7wj");
    			add_location(p6, file$6, 61, 6, 1914);
    			attr_dev(p7, "class", "svelte-1gtd7wj");
    			add_location(p7, file$6, 62, 6, 2005);
    			attr_dev(p8, "class", "svelte-1gtd7wj");
    			add_location(p8, file$6, 63, 6, 2096);
    			attr_dev(div4, "class", "content svelte-1gtd7wj");
    			add_location(div4, file$6, 60, 4, 1886);
    			attr_dev(div5, "class", "svelte-1gtd7wj");
    			add_location(div5, file$6, 58, 2, 1835);
    			attr_dev(h13, "class", "svelte-1gtd7wj");
    			add_location(h13, file$6, 70, 4, 2280);
    			attr_dev(a0, "href", a0_href_value = /*$_*/ ctx[0]("navbar.help.guidefile"));
    			attr_dev(a0, "target", "_blank");
    			attr_dev(a0, "rel", "noopener");
    			attr_dev(a0, "class", "svelte-1gtd7wj");
    			add_location(a0, file$6, 72, 6, 2347);
    			attr_dev(a1, "href", "http://www.librogame.net/index.php/forum/topic?id=5182&p=1#p148583");
    			attr_dev(a1, "target", "_blank");
    			attr_dev(a1, "rel", "noopener");
    			attr_dev(a1, "class", "svelte-1gtd7wj");
    			add_location(a1, file$6, 75, 6, 2468);
    			attr_dev(p9, "class", "svelte-1gtd7wj");
    			add_location(p9, file$6, 78, 6, 2628);
    			attr_dev(div6, "class", "content svelte-1gtd7wj");
    			add_location(div6, file$6, 71, 4, 2319);
    			attr_dev(div7, "class", "svelte-1gtd7wj");
    			add_location(div7, file$6, 69, 2, 2270);
    			attr_dev(span, "aria-label", span_aria_label_value = /*$_*/ ctx[0]("sidemenu.toggle"));
    			attr_dev(span, "class", "dropbtn icon-menu svelte-1gtd7wj");
    			add_location(span, file$6, 83, 4, 2749);
    			attr_dev(div8, "class", "sidemenu-button svelte-1gtd7wj");
    			add_location(div8, file$6, 82, 2, 2715);
    			attr_dev(nav, "class", "svelte-1gtd7wj");
    			add_location(nav, file$6, 33, 0, 955);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div1);
    			append_dev(div1, h10);
    			append_dev(h10, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, p0);
    			append_dev(p0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, hr0);
    			append_dev(div0, t4);
    			append_dev(div0, p1);
    			append_dev(p1, t5);
    			append_dev(div0, t6);
    			append_dev(div0, hr1);
    			append_dev(div0, t7);
    			append_dev(div0, input);
    			append_dev(div0, t8);
    			append_dev(div0, label);
    			append_dev(label, t9);
    			append_dev(div0, t10);
    			append_dev(div0, p2);
    			append_dev(p2, t11);
    			append_dev(div0, t12);
    			append_dev(div0, p3);
    			append_dev(p3, t13);
    			append_dev(nav, t14);
    			append_dev(nav, div3);
    			append_dev(div3, h11);
    			append_dev(h11, t15);
    			append_dev(div3, t16);
    			append_dev(div3, div2);
    			append_dev(div2, p4);
    			append_dev(p4, t17);
    			append_dev(div2, t18);
    			append_dev(div2, p5);
    			append_dev(p5, t19);
    			append_dev(nav, t20);
    			append_dev(nav, div5);
    			append_dev(div5, h12);
    			append_dev(h12, t21);
    			append_dev(div5, t22);
    			append_dev(div5, div4);
    			append_dev(div4, p6);
    			append_dev(p6, t23);
    			append_dev(div4, t24);
    			append_dev(div4, p7);
    			append_dev(p7, t25);
    			append_dev(div4, t26);
    			append_dev(div4, p8);
    			append_dev(p8, t27);
    			append_dev(nav, t28);
    			append_dev(nav, div7);
    			append_dev(div7, h13);
    			append_dev(h13, t29);
    			append_dev(div7, t30);
    			append_dev(div7, div6);
    			append_dev(div6, a0);
    			append_dev(a0, t31);
    			append_dev(div6, t32);
    			append_dev(div6, a1);
    			append_dev(a1, t33);
    			append_dev(div6, t34);
    			append_dev(div6, p9);
    			append_dev(p9, t35);
    			append_dev(nav, t36);
    			append_dev(nav, div8);
    			append_dev(div8, span);

    			if (!mounted) {
    				dispose = [
    					listen_dev(p0, "click", /*click_handler*/ ctx[2], false, false, false),
    					listen_dev(p1, "click", /*click_handler_1*/ ctx[3], false, false, false),
    					listen_dev(input, "change", /*change_handler*/ ctx[4], false, false, false),
    					listen_dev(p2, "click", /*click_handler_2*/ ctx[5], false, false, false),
    					listen_dev(p3, "click", /*click_handler_3*/ ctx[6], false, false, false),
    					listen_dev(p4, "click", /*click_handler_4*/ ctx[7], false, false, false),
    					listen_dev(p5, "click", /*click_handler_5*/ ctx[8], false, false, false),
    					listen_dev(p6, "click", /*click_handler_6*/ ctx[9], false, false, false),
    					listen_dev(p7, "click", /*click_handler_7*/ ctx[10], false, false, false),
    					listen_dev(p8, "click", /*click_handler_8*/ ctx[11], false, false, false),
    					listen_dev(p9, "click", /*click_handler_9*/ ctx[12], false, false, false),
    					listen_dev(span, "click", /*click_handler_10*/ ctx[13], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 1 && t0_value !== (t0_value = /*$_*/ ctx[0]("navbar.file.title") + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$_*/ 1 && t2_value !== (t2_value = /*$_*/ ctx[0]("navbar.file.new") + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*$_*/ 1 && t5_value !== (t5_value = /*$_*/ ctx[0]("navbar.file.newFire") + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*$_*/ 1 && t9_value !== (t9_value = /*$_*/ ctx[0]("navbar.file.open") + "")) set_data_dev(t9, t9_value);
    			if (dirty & /*$_*/ 1 && t11_value !== (t11_value = /*$_*/ ctx[0]("navbar.file.save") + "")) set_data_dev(t11, t11_value);
    			if (dirty & /*$_*/ 1 && t13_value !== (t13_value = /*$_*/ ctx[0]("navbar.file.recover") + "")) set_data_dev(t13, t13_value);
    			if (dirty & /*$_*/ 1 && t15_value !== (t15_value = /*$_*/ ctx[0]("navbar.book.title") + "")) set_data_dev(t15, t15_value);
    			if (dirty & /*$_*/ 1 && t17_value !== (t17_value = /*$_*/ ctx[0]("navbar.book.graph") + "")) set_data_dev(t17, t17_value);
    			if (dirty & /*$_*/ 1 && t19_value !== (t19_value = /*$_*/ ctx[0]("navbar.book.shuffle") + "")) set_data_dev(t19, t19_value);
    			if (dirty & /*$_*/ 1 && t21_value !== (t21_value = /*$_*/ ctx[0]("navbar.export.title") + "")) set_data_dev(t21, t21_value);
    			if (dirty & /*$_*/ 1 && t23_value !== (t23_value = /*$_*/ ctx[0]("navbar.export.docx") + "")) set_data_dev(t23, t23_value);
    			if (dirty & /*$_*/ 1 && t25_value !== (t25_value = /*$_*/ ctx[0]("navbar.export.fodt") + "")) set_data_dev(t25, t25_value);
    			if (dirty & /*$_*/ 1 && t27_value !== (t27_value = /*$_*/ ctx[0]("navbar.export.xlgc") + "")) set_data_dev(t27, t27_value);
    			if (dirty & /*$_*/ 1 && t29_value !== (t29_value = /*$_*/ ctx[0]("navbar.help.title") + "")) set_data_dev(t29, t29_value);
    			if (dirty & /*$_*/ 1 && t31_value !== (t31_value = /*$_*/ ctx[0]("navbar.help.guide") + "")) set_data_dev(t31, t31_value);

    			if (dirty & /*$_*/ 1 && a0_href_value !== (a0_href_value = /*$_*/ ctx[0]("navbar.help.guidefile"))) {
    				attr_dev(a0, "href", a0_href_value);
    			}

    			if (dirty & /*$_*/ 1 && t33_value !== (t33_value = /*$_*/ ctx[0]("navbar.help.forum") + "")) set_data_dev(t33, t33_value);
    			if (dirty & /*$_*/ 1 && t35_value !== (t35_value = /*$_*/ ctx[0]("navbar.help.about") + "")) set_data_dev(t35, t35_value);

    			if (dirty & /*$_*/ 1 && span_aria_label_value !== (span_aria_label_value = /*$_*/ ctx[0]("sidemenu.toggle"))) {
    				attr_dev(span, "aria-label", span_aria_label_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $_;
    	let $showSidemenu;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(0, $_ = $$value));
    	validate_store(showSidemenu, "showSidemenu");
    	component_subscribe($$self, showSidemenu, $$value => $$invalidate(1, $showSidemenu = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Navbar", slots, []);

    	ctrlShortcuts({
    		"N": () => newClick(),
    		"S": () => download("md", newBook.flush()),
    		"O": () => document.getElementById("open").click()
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Navbar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => dialog(NewBook);
    	const click_handler_1 = () => dialog(NewFirebook);
    	const change_handler = e => open$1(e.target);
    	const click_handler_2 = () => download("md", newBook.flush());
    	const click_handler_3 = () => dialog(Recover);
    	const click_handler_4 = () => dialog(Img, () => graphToImg(newBook.flush()));
    	const click_handler_5 = () => dialog(Shuffle);
    	const click_handler_6 = () => download("docx", newBook.flush());
    	const click_handler_7 = () => download("fodt", newBook.flush());
    	const click_handler_8 = () => download("xlgc", newBook.flush());
    	const click_handler_9 = () => dialog(About);
    	const click_handler_10 = () => set_store_value(showSidemenu, $showSidemenu = !$showSidemenu, $showSidemenu);

    	$$self.$capture_state = () => ({
    		_: ee,
    		ctrlShortcuts,
    		graphToImg,
    		open: open$1,
    		download,
    		newBook,
    		showSidemenu,
    		isFirebase,
    		dialog,
    		About,
    		Img,
    		Shuffle,
    		NewBook,
    		NewFirebook,
    		Recover,
    		$_,
    		$showSidemenu
    	});

    	return [
    		$_,
    		$showSidemenu,
    		click_handler,
    		click_handler_1,
    		change_handler,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10
    	];
    }

    class Navbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navbar",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    const firstAvaiableKey = ()  => {
      const $bookIndex = get_store_value(bookIndex);
      for(let i = 1; i < 10000; i++){
        if(!$bookIndex.chapters.has(String(i))) return String(i)
      }

      return 10000
    };

    const generateChapterText = ({spacelines = 2, key, title = '', group = '', flags = [], content}) => {
      let r = '\n'.repeat(spacelines);
      r += (title) ? `### ${title} {#${key}}` : `### ${key}`;
      if(flags) flags.forEach( flag => r += `\n![flag-${flag}](https://librogamesland.github.io/lgcjs/release/static/flags/${flag}.png)`);
      if(group) r+= `\n[group]:<> ("${group}")`;
      if(content) r+= `\n${content}`;

      return r
    };


    const isNatNumber = (n) => (n > 0 || String(n) === "0") && Math.floor(n) === +n;

    const getRightOrderKey = (key) => {
      const $currentChapterKey = get_store_value(currentChapterKey);
      const $bookIndex = get_store_value(bookIndex);

      if(!isNatNumber(key)) return $bookIndex.chapters.get(String($currentChapterKey)).contentEnd

      const n =  Math.floor(key);
      for(let i = n; i >= 0; i--){
        console.log(i);
        if($bookIndex.chapters.has(String(i))) return $bookIndex.chapters.get(String(i)).contentEnd
      }

      for(let i = n; i < 10000; i++){
        if($bookIndex.chapters.has(String(i))) return $bookIndex.chapters.get(String(i)).start - 1
      }
      return $bookIndex.chapters.get(String($currentChapterKey))
    };


    const addChapter = (key, text) => {
      const index = getRightOrderKey(key);


      getEditor().session.replace(new ace.Range(index, Infinity, index, Infinity), '\n' + text);

      newBook.flush();
    };

    /* src/components/Editor.svelte generated by Svelte v3.35.0 */
    const file$5 = "src/components/Editor.svelte";

    function create_fragment$6(ctx) {
    	let main;
    	let div5;
    	let h1;
    	let t0;
    	let t1;
    	let div0;
    	let span0;
    	let div0_title_value;
    	let t2;
    	let div1;
    	let span1;
    	let div1_title_value;
    	let t3;
    	let div2;
    	let span2;
    	let div2_title_value;
    	let t4;
    	let div3;
    	let span4;
    	let t5;
    	let span3;
    	let div3_title_value;
    	let t6;
    	let div4;
    	let t7;
    	let div4_title_value;
    	let t8;
    	let div6;
    	let t9;
    	let div7;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			main = element("main");
    			div5 = element("div");
    			h1 = element("h1");
    			t0 = text(/*$currentChapterFullTitle*/ ctx[1]);
    			t1 = space();
    			div0 = element("div");
    			span0 = element("span");
    			t2 = space();
    			div1 = element("div");
    			span1 = element("span");
    			t3 = space();
    			div2 = element("div");
    			span2 = element("span");
    			t4 = space();
    			div3 = element("div");
    			span4 = element("span");
    			t5 = text("#");
    			span3 = element("span");
    			t6 = space();
    			div4 = element("div");
    			t7 = text("#L");
    			t8 = space();
    			div6 = element("div");
    			t9 = space();
    			div7 = element("div");
    			attr_dev(h1, "class", "svelte-tzh78j");
    			add_location(h1, file$5, 58, 4, 1311);
    			attr_dev(span0, "class", "icon-search");
    			add_location(span0, file$5, 64, 41, 1545);
    			attr_dev(div0, "class", "only-desktop svelte-tzh78j");
    			attr_dev(div0, "title", div0_title_value = /*$_*/ ctx[2]("editor.buttons.find"));
    			add_location(div0, file$5, 62, 4, 1417);
    			attr_dev(span1, "class", "icon-ccw");
    			add_location(span1, file$5, 68, 41, 1712);
    			attr_dev(div1, "class", "only-desktop svelte-tzh78j");
    			attr_dev(div1, "title", div1_title_value = /*$_*/ ctx[2]("editor.buttons.undo"));
    			add_location(div1, file$5, 66, 4, 1584);
    			attr_dev(span2, "class", "icon-cw");
    			add_location(span2, file$5, 72, 41, 1876);
    			attr_dev(div2, "class", "only-desktop svelte-tzh78j");
    			attr_dev(div2, "title", div2_title_value = /*$_*/ ctx[2]("editor.buttons.redo"));
    			add_location(div2, file$5, 70, 4, 1748);
    			attr_dev(span3, "class", "icon-flash svelte-tzh78j");
    			add_location(span3, file$5, 75, 26, 2010);
    			attr_dev(span4, "class", "link");
    			add_location(span4, file$5, 75, 6, 1990);
    			attr_dev(div3, "title", div3_title_value = /*$_*/ ctx[2]("editor.buttons.quicklink"));
    			attr_dev(div3, "class", "svelte-tzh78j");
    			add_location(div3, file$5, 74, 4, 1915);
    			attr_dev(div4, "title", div4_title_value = /*$_*/ ctx[2]("editor.buttons.link"));
    			attr_dev(div4, "class", "svelte-tzh78j");
    			add_location(div4, file$5, 78, 4, 2060);
    			attr_dev(div5, "class", "toolbar svelte-tzh78j");
    			add_location(div5, file$5, 57, 2, 1285);
    			attr_dev(div6, "class", "textarea svelte-tzh78j");
    			attr_dev(div6, "id", editorComponentID);
    			add_location(div6, file$5, 81, 2, 2141);
    			attr_dev(div7, "class", "margin svelte-tzh78j");
    			add_location(div7, file$5, 84, 2, 2203);
    			attr_dev(main, "class", "editor svelte-tzh78j");
    			add_location(main, file$5, 56, 0, 1261);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			append_dev(main, div5);
    			append_dev(div5, h1);
    			append_dev(h1, t0);
    			append_dev(div5, t1);
    			append_dev(div5, div0);
    			append_dev(div0, span0);
    			append_dev(div5, t2);
    			append_dev(div5, div1);
    			append_dev(div1, span1);
    			append_dev(div5, t3);
    			append_dev(div5, div2);
    			append_dev(div2, span2);
    			append_dev(div5, t4);
    			append_dev(div5, div3);
    			append_dev(div3, span4);
    			append_dev(span4, t5);
    			append_dev(span4, span3);
    			append_dev(div5, t6);
    			append_dev(div5, div4);
    			append_dev(div4, t7);
    			append_dev(main, t8);
    			append_dev(main, div6);
    			append_dev(main, t9);
    			append_dev(main, div7);

    			if (!mounted) {
    				dispose = [
    					listen_dev(h1, "click", /*click_handler*/ ctx[5], false, false, false),
    					listen_dev(div0, "click", /*click_handler_1*/ ctx[6], false, false, false),
    					listen_dev(div1, "click", /*click_handler_2*/ ctx[7], false, false, false),
    					listen_dev(div2, "click", /*click_handler_3*/ ctx[8], false, false, false),
    					listen_dev(div3, "click", /*addQuickLink*/ ctx[4], false, false, false),
    					listen_dev(div4, "click", /*addLink*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$currentChapterFullTitle*/ 2) set_data_dev(t0, /*$currentChapterFullTitle*/ ctx[1]);

    			if (dirty & /*$_*/ 4 && div0_title_value !== (div0_title_value = /*$_*/ ctx[2]("editor.buttons.find"))) {
    				attr_dev(div0, "title", div0_title_value);
    			}

    			if (dirty & /*$_*/ 4 && div1_title_value !== (div1_title_value = /*$_*/ ctx[2]("editor.buttons.undo"))) {
    				attr_dev(div1, "title", div1_title_value);
    			}

    			if (dirty & /*$_*/ 4 && div2_title_value !== (div2_title_value = /*$_*/ ctx[2]("editor.buttons.redo"))) {
    				attr_dev(div2, "title", div2_title_value);
    			}

    			if (dirty & /*$_*/ 4 && div3_title_value !== (div3_title_value = /*$_*/ ctx[2]("editor.buttons.quicklink"))) {
    				attr_dev(div3, "title", div3_title_value);
    			}

    			if (dirty & /*$_*/ 4 && div4_title_value !== (div4_title_value = /*$_*/ ctx[2]("editor.buttons.link"))) {
    				attr_dev(div4, "title", div4_title_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let $cursorPosition;
    	let $showSidemenu;
    	let $currentChapterFullTitle;
    	let $_;
    	validate_store(cursorPosition, "cursorPosition");
    	component_subscribe($$self, cursorPosition, $$value => $$invalidate(9, $cursorPosition = $$value));
    	validate_store(showSidemenu, "showSidemenu");
    	component_subscribe($$self, showSidemenu, $$value => $$invalidate(0, $showSidemenu = $$value));
    	validate_store(currentChapterFullTitle, "currentChapterFullTitle");
    	component_subscribe($$self, currentChapterFullTitle, $$value => $$invalidate(1, $currentChapterFullTitle = $$value));
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(2, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Editor", slots, []);

    	onMount(() => {
    		session.load();
    	});

    	const addLink = () => {
    		const { row, column } = $cursorPosition;
    		getEditor().session.replace(new ace.Range(row, column, row, column), "[](#)");
    		getEditor().clearSelection();
    		getEditor().moveCursorTo(row, column + 4);
    		getEditor().focus();
    	};

    	const addQuickLink = () => {
    		const { row, column } = $cursorPosition;
    		const key = firstAvaiableKey();
    		const link = `[](#${firstAvaiableKey()})`;
    		addChapter(key, `\n\n### ${key}`);
    		getEditor().session.replace(new ace.Range(row, column, row, column), link);
    		getEditor().clearSelection();
    		getEditor().moveCursorTo(row, column + link.length);
    		getEditor().focus();
    	};

    	ctrlShortcuts({
    		"K": () => addQuickLink(),
    		"L": () => addLink()
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Editor> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => set_store_value(showSidemenu, $showSidemenu = !$showSidemenu, $showSidemenu);

    	const click_handler_1 = async () => {
    		getEditor().execCommand("find");
    	};

    	const click_handler_2 = async () => {
    		getEditor().execCommand("undo");
    	};

    	const click_handler_3 = async () => {
    		getEditor().execCommand("redo");
    	};

    	$$self.$capture_state = () => ({
    		_: ee,
    		onMount,
    		tick,
    		session,
    		cursorPosition,
    		getEditor,
    		editorComponentID,
    		currentChapterFullTitle,
    		ctrlShortcuts,
    		showSidemenu,
    		firstAvaiableKey,
    		addChapter,
    		addLink,
    		addQuickLink,
    		$cursorPosition,
    		$showSidemenu,
    		$currentChapterFullTitle,
    		$_
    	});

    	return [
    		$showSidemenu,
    		$currentChapterFullTitle,
    		$_,
    		addLink,
    		addQuickLink,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3
    	];
    }

    class Editor extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Editor",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    const chapterHistory = [];
    const historyCanGoBack = writable(false); 

    const goToChapter = (key, updateHistory = true) => {
      const editor = getEditor();
      const $bookIndex = get_store_value(bookIndex);
      const $currentChapterKey = get_store_value(currentChapterKey);

      if(! $bookIndex.chapters.has(key)) {
        addChapter(key, generateChapterText({
          key,
          group: $currentChapterKey ? $bookIndex.chapters.get($currentChapterKey).group : ''
        }));
        newBook.flush();
      }
      if(updateHistory){
        chapterHistory.push($currentChapterKey);
        historyCanGoBack.set(true);
      }
      editor.gotoLine( $bookIndex.chapters.get(key).contentEnd, Infinity);
      showSidemenu.set(false);
      
      editor.focus();
      editor.scrollToLine($bookIndex.chapters.get(key).contentEnd + 5, true, true, function () {});

      editor.moveCursorTo( $bookIndex.chapters.get(key).contentEnd, Infinity);

    };

    const goBack = () => {
      if(chapterHistory.length == 0) return
      if(chapterHistory.length == 1) historyCanGoBack.set(false);

      console.log(chapterHistory.length);
      goToChapter(chapterHistory.pop(), false);
    };


    isLoaded.subscribe( value => {
      if(!value) return

      const onLinkClick = (e) => {
        if(!e.target.classList.contains('ace_underline')) return false
        const key = e.target.innerHTML.trim();
        if(!key.startsWith('#')) return false
        goToChapter(key.substring(1));

      };

      document.getElementById(editorComponentID).onclick = onLinkClick;
    });

    function t(t){return "object"==typeof t&&null!=t&&1===t.nodeType}function e(t,e){return (!e||"hidden"!==t)&&"visible"!==t&&"clip"!==t}function n(t,n){if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){var r=getComputedStyle(t,null);return e(r.overflowY,n)||e(r.overflowX,n)||function(t){var e=function(t){if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}}(t);return !!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)}(t)}return !1}function r(t,e,n,r,i,o,l,d){return o<t&&l>e||o>t&&l<e?0:o<=t&&d<=n||l>=e&&d>=n?o-t-r:l>e&&d<n||o<t&&d>n?l-e+i:0}function compute(e,i){var o=window,l=i.scrollMode,d=i.block,u=i.inline,h=i.boundary,a=i.skipOverflowHiddenElements,c="function"==typeof h?h:function(t){return t!==h};if(!t(e))throw new TypeError("Invalid target");for(var f=document.scrollingElement||document.documentElement,s=[],p=e;t(p)&&c(p);){if((p=p.parentElement)===f){s.push(p);break}null!=p&&p===document.body&&n(p)&&!n(document.documentElement)||null!=p&&n(p,a)&&s.push(p);}for(var m=o.visualViewport?o.visualViewport.width:innerWidth,g=o.visualViewport?o.visualViewport.height:innerHeight,w=window.scrollX||pageXOffset,v=window.scrollY||pageYOffset,W=e.getBoundingClientRect(),b=W.height,H=W.width,y=W.top,E=W.right,M=W.bottom,V=W.left,x="start"===d||"nearest"===d?y:"end"===d?M:y+b/2,I="center"===u?V+H/2:"end"===u?E:V,C=[],T=0;T<s.length;T++){var k=s[T],B=k.getBoundingClientRect(),D=B.height,O=B.width,R=B.top,X=B.right,Y=B.bottom,L=B.left;if("if-needed"===l&&y>=0&&V>=0&&M<=g&&E<=m&&y>=R&&M<=Y&&V>=L&&E<=X)return C;var S=getComputedStyle(k),j=parseInt(S.borderLeftWidth,10),q=parseInt(S.borderTopWidth,10),z=parseInt(S.borderRightWidth,10),A=parseInt(S.borderBottomWidth,10),F=0,G=0,J="offsetWidth"in k?k.offsetWidth-k.clientWidth-j-z:0,K="offsetHeight"in k?k.offsetHeight-k.clientHeight-q-A:0;if(f===k)F="start"===d?x:"end"===d?x-g:"nearest"===d?r(v,v+g,g,q,A,v+x,v+x+b,b):x-g/2,G="start"===u?I:"center"===u?I-m/2:"end"===u?I-m:r(w,w+m,m,j,z,w+I,w+I+H,H),F=Math.max(0,F+v),G=Math.max(0,G+w);else {F="start"===d?x-R-q:"end"===d?x-Y+A+K:"nearest"===d?r(R,Y,D,q,A+K,x,x+b,b):x-(R+D/2)+K/2,G="start"===u?I-L-j:"center"===u?I-(L+O/2)+J/2:"end"===u?I-X+z+J:r(L,X,O,j,z+J,I,I+H,H);var N=k.scrollLeft,P=k.scrollTop;x+=P-(F=Math.max(0,Math.min(P+F,k.scrollHeight-D+K))),I+=N-(G=Math.max(0,Math.min(N+G,k.scrollWidth-O+J)));}C.push({el:k,top:F,left:G});}return C}

    function isOptionsObject(options) {
      return options === Object(options) && Object.keys(options).length !== 0;
    }

    function defaultBehavior(actions, behavior) {
      if (behavior === void 0) {
        behavior = 'auto';
      }

      var canSmoothScroll = ('scrollBehavior' in document.body.style);
      actions.forEach(function (_ref) {
        var el = _ref.el,
            top = _ref.top,
            left = _ref.left;

        if (el.scroll && canSmoothScroll) {
          el.scroll({
            top: top,
            left: left,
            behavior: behavior
          });
        } else {
          el.scrollTop = top;
          el.scrollLeft = left;
        }
      });
    }

    function getOptions(options) {
      if (options === false) {
        return {
          block: 'end',
          inline: 'nearest'
        };
      }

      if (isOptionsObject(options)) {
        return options;
      }

      return {
        block: 'start',
        inline: 'nearest'
      };
    }

    function scrollIntoView(target, options) {
      var targetIsDetached = !target.ownerDocument.documentElement.contains(target);

      if (isOptionsObject(options) && typeof options.behavior === 'function') {
        return options.behavior(targetIsDetached ? [] : compute(target, options));
      }

      if (targetIsDetached) {
        return;
      }

      var computeOptions = getOptions(options);
      return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);
    }

    var memoizedNow;

    var now = function now() {
      if (!memoizedNow) {
        memoizedNow = 'performance' in window ? performance.now.bind(performance) : Date.now;
      }

      return memoizedNow();
    };

    function step(context) {
      var time = now();
      var elapsed = Math.min((time - context.startTime) / context.duration, 1);
      var value = context.ease(elapsed);
      var currentX = context.startX + (context.x - context.startX) * value;
      var currentY = context.startY + (context.y - context.startY) * value;
      context.method(currentX, currentY);

      if (currentX !== context.x || currentY !== context.y) {
        requestAnimationFrame(function () {
          return step(context);
        });
      } else {
        context.cb();
      }
    }

    function smoothScroll(el, x, y, duration, ease, cb) {
      if (duration === void 0) {
        duration = 600;
      }

      if (ease === void 0) {
        ease = function ease(t) {
          return 1 + --t * t * t * t * t;
        };
      }

      var scrollable;
      var startX;
      var startY;
      var method;
      scrollable = el;
      startX = el.scrollLeft;
      startY = el.scrollTop;

      method = function method(x, y) {
        el.scrollLeft = Math.ceil(x);
        el.scrollTop = Math.ceil(y);
      };

      step({
        scrollable: scrollable,
        method: method,
        startTime: now(),
        startX: startX,
        startY: startY,
        x: x,
        y: y,
        duration: duration,
        ease: ease,
        cb: cb
      });
    }

    var shouldSmoothScroll = function shouldSmoothScroll(options) {
      return options && !options.behavior || options.behavior === 'smooth';
    };

    function scroll(target, options) {
      var overrides = options || {};

      if (shouldSmoothScroll(overrides)) {
        return scrollIntoView(target, {
          block: overrides.block,
          inline: overrides.inline,
          scrollMode: overrides.scrollMode,
          boundary: overrides.boundary,
          behavior: function behavior(actions) {
            return Promise.all(actions.reduce(function (results, _ref) {
              var el = _ref.el,
                  left = _ref.left,
                  top = _ref.top;
              var startLeft = el.scrollLeft;
              var startTop = el.scrollTop;

              if (startLeft === left && startTop === top) {
                return results;
              }

              return [].concat(results, [new Promise(function (resolve) {
                return smoothScroll(el, left, top, overrides.duration, overrides.ease, function () {
                  return resolve({
                    el: el,
                    left: [startLeft, left],
                    top: [startTop, top]
                  });
                });
              })]);
            }, []));
          }
        });
      }

      return Promise.resolve(scrollIntoView(target, options));
    }

    var smoothScrollIntoView = scroll;

    /* src/components/dialogs/Chapter.svelte generated by Svelte v3.35.0 */

    const { Object: Object_1 } = globals;
    const file$4 = "src/components/dialogs/Chapter.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (39:4) {#each ['final', 'fixed', 'death'] as flag}
    function create_each_block$1(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let t;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[13](/*flag*/ ctx[17]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			attr_dev(img, "alt", /*flag*/ ctx[17]);
    			if (img.src !== (img_src_value = `./static/img/flags/${/*flag*/ ctx[17]}.png`)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "class", "svelte-1h6v3vg");
    			add_location(img, file$4, 42, 8, 1221);
    			attr_dev(div, "class", "svelte-1h6v3vg");
    			toggle_class(div, "selected", /*flags*/ ctx[5][/*flag*/ ctx[17]]);
    			add_location(div, file$4, 39, 6, 1116);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*flags*/ 32) {
    				toggle_class(div, "selected", /*flags*/ ctx[5][/*flag*/ ctx[17]]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(39:4) {#each ['final', 'fixed', 'death'] as flag}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let div4;
    	let h3;
    	let t0;
    	let t1;
    	let div0;
    	let span0;
    	let t2_value = /*$_*/ ctx[7]("dialogs.chapter.name") + "";
    	let t2;
    	let t3;
    	let input0;
    	let t4;
    	let div1;
    	let span1;
    	let t5_value = /*$_*/ ctx[7]("dialogs.chapter.title") + "";
    	let t5;
    	let t6;
    	let input1;
    	let t7;
    	let div2;
    	let span2;
    	let t8_value = /*$_*/ ctx[7]("dialogs.chapter.group") + "";
    	let t8;
    	let t9;
    	let input2;
    	let t10;
    	let div3;
    	let t11;
    	let p;
    	let t12_value = /*$_*/ ctx[7]("dialogs.chapter.hint") + "";
    	let t12;
    	let t13;
    	let button0;
    	let t14_value = /*$_*/ ctx[7]("dialogs.ok") + "";
    	let t14;
    	let t15;
    	let button1;
    	let t16_value = /*$_*/ ctx[7]("dialogs.cancel") + "";
    	let t16;
    	let mounted;
    	let dispose;
    	let each_value = ["final", "fixed", "death"];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < 3; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			h3 = element("h3");
    			t0 = text(/*dialogTitle*/ ctx[1]);
    			t1 = space();
    			div0 = element("div");
    			span0 = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			input0 = element("input");
    			t4 = space();
    			div1 = element("div");
    			span1 = element("span");
    			t5 = text(t5_value);
    			t6 = space();
    			input1 = element("input");
    			t7 = space();
    			div2 = element("div");
    			span2 = element("span");
    			t8 = text(t8_value);
    			t9 = space();
    			input2 = element("input");
    			t10 = space();
    			div3 = element("div");

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].c();
    			}

    			t11 = space();
    			p = element("p");
    			t12 = text(t12_value);
    			t13 = space();
    			button0 = element("button");
    			t14 = text(t14_value);
    			t15 = space();
    			button1 = element("button");
    			t16 = text(t16_value);
    			add_location(h3, file$4, 24, 2, 651);
    			attr_dev(span0, "class", "svelte-1h6v3vg");
    			add_location(span0, file$4, 26, 4, 700);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "class", "svelte-1h6v3vg");
    			add_location(input0, file$4, 27, 4, 746);
    			attr_dev(div0, "class", "input svelte-1h6v3vg");
    			add_location(div0, file$4, 25, 2, 676);
    			attr_dev(span1, "class", "svelte-1h6v3vg");
    			add_location(span1, file$4, 30, 4, 820);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "class", "svelte-1h6v3vg");
    			add_location(input1, file$4, 31, 4, 867);
    			attr_dev(div1, "class", "input svelte-1h6v3vg");
    			add_location(div1, file$4, 29, 2, 796);
    			attr_dev(span2, "class", "svelte-1h6v3vg");
    			add_location(span2, file$4, 34, 4, 943);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "class", "svelte-1h6v3vg");
    			add_location(input2, file$4, 35, 4, 990);
    			attr_dev(div2, "class", "input svelte-1h6v3vg");
    			add_location(div2, file$4, 33, 2, 919);
    			attr_dev(div3, "class", "flags svelte-1h6v3vg");
    			add_location(div3, file$4, 37, 2, 1042);
    			set_style(p, "font-size", "85%");
    			add_location(p, file$4, 46, 2, 1315);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$4, 47, 2, 1376);
    			attr_dev(button1, "class", "cancel");
    			add_location(button1, file$4, 55, 2, 1556);
    			attr_dev(div4, "class", "dialog");
    			add_location(div4, file$4, 23, 0, 628);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, h3);
    			append_dev(h3, t0);
    			append_dev(div4, t1);
    			append_dev(div4, div0);
    			append_dev(div0, span0);
    			append_dev(span0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, input0);
    			set_input_value(input0, /*key*/ ctx[2]);
    			append_dev(div4, t4);
    			append_dev(div4, div1);
    			append_dev(div1, span1);
    			append_dev(span1, t5);
    			append_dev(div1, t6);
    			append_dev(div1, input1);
    			set_input_value(input1, /*title*/ ctx[4]);
    			append_dev(div4, t7);
    			append_dev(div4, div2);
    			append_dev(div2, span2);
    			append_dev(span2, t8);
    			append_dev(div2, t9);
    			append_dev(div2, input2);
    			set_input_value(input2, /*group*/ ctx[6]);
    			append_dev(div4, t10);
    			append_dev(div4, div3);

    			for (let i = 0; i < 3; i += 1) {
    				each_blocks[i].m(div3, null);
    			}

    			append_dev(div4, t11);
    			append_dev(div4, p);
    			append_dev(p, t12);
    			append_dev(div4, t13);
    			append_dev(div4, button0);
    			append_dev(button0, t14);
    			append_dev(div4, t15);
    			append_dev(div4, button1);
    			append_dev(button1, t16);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[10]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[11]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[12]),
    					listen_dev(button0, "click", /*click_handler_1*/ ctx[14], false, false, false),
    					listen_dev(button1, "click", /*click_handler_2*/ ctx[15], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*dialogTitle*/ 2) set_data_dev(t0, /*dialogTitle*/ ctx[1]);
    			if (dirty & /*$_*/ 128 && t2_value !== (t2_value = /*$_*/ ctx[7]("dialogs.chapter.name") + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*key*/ 4 && input0.value !== /*key*/ ctx[2]) {
    				set_input_value(input0, /*key*/ ctx[2]);
    			}

    			if (dirty & /*$_*/ 128 && t5_value !== (t5_value = /*$_*/ ctx[7]("dialogs.chapter.title") + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*title*/ 16 && input1.value !== /*title*/ ctx[4]) {
    				set_input_value(input1, /*title*/ ctx[4]);
    			}

    			if (dirty & /*$_*/ 128 && t8_value !== (t8_value = /*$_*/ ctx[7]("dialogs.chapter.group") + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*group*/ 64 && input2.value !== /*group*/ ctx[6]) {
    				set_input_value(input2, /*group*/ ctx[6]);
    			}

    			if (dirty & /*flags*/ 32) {
    				each_value = ["final", "fixed", "death"];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < 3; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div3, null);
    					}
    				}

    				for (; i < 3; i += 1) {
    					each_blocks[i].d(1);
    				}
    			}

    			if (dirty & /*$_*/ 128 && t12_value !== (t12_value = /*$_*/ ctx[7]("dialogs.chapter.hint") + "")) set_data_dev(t12, t12_value);
    			if (dirty & /*$_*/ 128 && t14_value !== (t14_value = /*$_*/ ctx[7]("dialogs.ok") + "")) set_data_dev(t14, t14_value);
    			if (dirty & /*$_*/ 128 && t16_value !== (t16_value = /*$_*/ ctx[7]("dialogs.cancel") + "")) set_data_dev(t16, t16_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $_;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(7, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Chapter", slots, []);
    	let { params } = $$props;
    	let { callback } = $$props;

    	// Entity input bindings
    	let dialogTitle, key, value, title, flags, group;

    	const filterFlags = () => Object.keys(flags).filter(key => flags[key]);

    	const unsubscribe = params.subscribe(p => {
    		
    		$$invalidate(1, [dialogTitle, key, value] = p, dialogTitle, $$invalidate(2, key), $$invalidate(3, value));
    		$$invalidate(4, { title = "", group = "" } = value, title, $$invalidate(6, group));
    		const flagProps = value.flags || [];

    		$$invalidate(5, flags = {
    			final: flagProps.includes("final"),
    			fixed: flagProps.includes("fixed"),
    			death: flagProps.includes("death")
    		});
    	});

    	onDestroy(unsubscribe);
    	const writable_props = ["params", "callback"];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Chapter> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		key = this.value;
    		$$invalidate(2, key);
    	}

    	function input1_input_handler() {
    		title = this.value;
    		$$invalidate(4, title);
    	}

    	function input2_input_handler() {
    		group = this.value;
    		$$invalidate(6, group);
    	}

    	const click_handler = flag => $$invalidate(5, flags[flag] = !flags[flag], flags);

    	const click_handler_1 = () => callback({
    		key,
    		value: {
    			...value,
    			title,
    			group,
    			flags: filterFlags()
    		}
    	});

    	const click_handler_2 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ("params" in $$props) $$invalidate(9, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: ee,
    		onDestroy,
    		params,
    		callback,
    		dialogTitle,
    		key,
    		value,
    		title,
    		flags,
    		group,
    		filterFlags,
    		unsubscribe,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ("params" in $$props) $$invalidate(9, params = $$props.params);
    		if ("callback" in $$props) $$invalidate(0, callback = $$props.callback);
    		if ("dialogTitle" in $$props) $$invalidate(1, dialogTitle = $$props.dialogTitle);
    		if ("key" in $$props) $$invalidate(2, key = $$props.key);
    		if ("value" in $$props) $$invalidate(3, value = $$props.value);
    		if ("title" in $$props) $$invalidate(4, title = $$props.title);
    		if ("flags" in $$props) $$invalidate(5, flags = $$props.flags);
    		if ("group" in $$props) $$invalidate(6, group = $$props.group);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		callback,
    		dialogTitle,
    		key,
    		value,
    		title,
    		flags,
    		group,
    		$_,
    		filterFlags,
    		params,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Chapter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { params: 9, callback: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Chapter",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[9] === undefined && !("params" in props)) {
    			console.warn("<Chapter> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[0] === undefined && !("callback" in props)) {
    			console.warn("<Chapter> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Chapter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Chapter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Chapter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Chapter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/Confirm.svelte generated by Svelte v3.35.0 */
    const file$3 = "src/components/dialogs/Confirm.svelte";

    function create_fragment$4(ctx) {
    	let div;
    	let h3;
    	let t0;
    	let t1;
    	let p;
    	let t2;
    	let t3;
    	let button0;
    	let t4_value = /*$_*/ ctx[4]("dialogs.ok") + "";
    	let t4;
    	let t5;
    	let button1;
    	let t6_value = /*$_*/ ctx[4]("dialogs.cancel") + "";
    	let t6;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(/*title*/ ctx[2]);
    			t1 = space();
    			p = element("p");
    			t2 = text(/*text*/ ctx[3]);
    			t3 = space();
    			button0 = element("button");
    			t4 = text(t4_value);
    			t5 = space();
    			button1 = element("button");
    			t6 = text(t6_value);
    			add_location(h3, file$3, 11, 2, 166);
    			add_location(p, file$3, 12, 2, 185);
    			attr_dev(button0, "class", "ok");
    			add_location(button0, file$3, 13, 2, 201);
    			attr_dev(button1, "class", "cancel");
    			add_location(button1, file$3, 14, 2, 282);
    			attr_dev(div, "class", "dialog");
    			add_location(div, file$3, 10, 0, 143);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			append_dev(div, p);
    			append_dev(p, t2);
    			append_dev(div, t3);
    			append_dev(div, button0);
    			append_dev(button0, t4);
    			append_dev(div, t5);
    			append_dev(div, button1);
    			append_dev(button1, t6);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[6], false, false, false),
    					listen_dev(button1, "click", /*click_handler_1*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 4) set_data_dev(t0, /*title*/ ctx[2]);
    			if (dirty & /*text*/ 8) set_data_dev(t2, /*text*/ ctx[3]);
    			if (dirty & /*$_*/ 16 && t4_value !== (t4_value = /*$_*/ ctx[4]("dialogs.ok") + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*$_*/ 16 && t6_value !== (t6_value = /*$_*/ ctx[4]("dialogs.cancel") + "")) set_data_dev(t6, t6_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $params,
    		$$unsubscribe_params = noop,
    		$$subscribe_params = () => ($$unsubscribe_params(), $$unsubscribe_params = subscribe(params, $$value => $$invalidate(5, $params = $$value)), params);

    	let $_;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(4, $_ = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_params());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Confirm", slots, []);
    	let { params } = $$props;
    	validate_store(params, "params");
    	$$subscribe_params();
    	let { callback } = $$props;
    	let title, text;
    	const writable_props = ["params", "callback"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Confirm> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => callback(true);
    	const click_handler_1 = () => callback(false);

    	$$self.$$set = $$props => {
    		if ("params" in $$props) $$subscribe_params($$invalidate(0, params = $$props.params));
    		if ("callback" in $$props) $$invalidate(1, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: ee,
    		params,
    		callback,
    		title,
    		text,
    		$params,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ("params" in $$props) $$subscribe_params($$invalidate(0, params = $$props.params));
    		if ("callback" in $$props) $$invalidate(1, callback = $$props.callback);
    		if ("title" in $$props) $$invalidate(2, title = $$props.title);
    		if ("text" in $$props) $$invalidate(3, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$params*/ 32) {
    			$$invalidate(2, [title, text] = $params, title, ($$invalidate(3, text), $$invalidate(5, $params)));
    		}
    	};

    	return [params, callback, title, text, $_, $params, click_handler, click_handler_1];
    }

    class Confirm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { params: 0, callback: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Confirm",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[0] === undefined && !("params" in props)) {
    			console.warn("<Confirm> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[1] === undefined && !("callback" in props)) {
    			console.warn("<Confirm> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Confirm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Confirm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Confirm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Confirm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/dialogs/Alert.svelte generated by Svelte v3.35.0 */
    const file$2 = "src/components/dialogs/Alert.svelte";

    function create_fragment$3(ctx) {
    	let div;
    	let h3;
    	let t0;
    	let t1;
    	let p;
    	let t2;
    	let t3;
    	let button;
    	let t4_value = /*$_*/ ctx[4]("dialogs.ok") + "";
    	let t4;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(/*title*/ ctx[2]);
    			t1 = space();
    			p = element("p");
    			t2 = text(/*text*/ ctx[3]);
    			t3 = space();
    			button = element("button");
    			t4 = text(t4_value);
    			add_location(h3, file$2, 12, 2, 169);
    			add_location(p, file$2, 13, 2, 188);
    			attr_dev(button, "class", "ok");
    			add_location(button, file$2, 14, 2, 204);
    			attr_dev(div, "class", "dialog");
    			add_location(div, file$2, 11, 0, 146);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			append_dev(div, p);
    			append_dev(p, t2);
    			append_dev(div, t3);
    			append_dev(div, button);
    			append_dev(button, t4);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 4) set_data_dev(t0, /*title*/ ctx[2]);
    			if (dirty & /*text*/ 8) set_data_dev(t2, /*text*/ ctx[3]);
    			if (dirty & /*$_*/ 16 && t4_value !== (t4_value = /*$_*/ ctx[4]("dialogs.ok") + "")) set_data_dev(t4, t4_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $params,
    		$$unsubscribe_params = noop,
    		$$subscribe_params = () => ($$unsubscribe_params(), $$unsubscribe_params = subscribe(params, $$value => $$invalidate(5, $params = $$value)), params);

    	let $_;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(4, $_ = $$value));
    	$$self.$$.on_destroy.push(() => $$unsubscribe_params());
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Alert", slots, []);
    	let { params } = $$props;
    	validate_store(params, "params");
    	$$subscribe_params();
    	let { callback } = $$props;
    	let title, text;
    	const writable_props = ["params", "callback"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Alert> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => callback(true);

    	$$self.$$set = $$props => {
    		if ("params" in $$props) $$subscribe_params($$invalidate(0, params = $$props.params));
    		if ("callback" in $$props) $$invalidate(1, callback = $$props.callback);
    	};

    	$$self.$capture_state = () => ({
    		_: ee,
    		params,
    		callback,
    		title,
    		text,
    		$params,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ("params" in $$props) $$subscribe_params($$invalidate(0, params = $$props.params));
    		if ("callback" in $$props) $$invalidate(1, callback = $$props.callback);
    		if ("title" in $$props) $$invalidate(2, title = $$props.title);
    		if ("text" in $$props) $$invalidate(3, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$params*/ 32) {
    			$$invalidate(2, [title, text] = $params, title, ($$invalidate(3, text), $$invalidate(5, $params)));
    		}
    	};

    	return [params, callback, title, text, $_, $params, click_handler];
    }

    class Alert extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { params: 0, callback: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Alert",
    			options,
    			id: create_fragment$3.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*params*/ ctx[0] === undefined && !("params" in props)) {
    			console.warn("<Alert> was created without expected prop 'params'");
    		}

    		if (/*callback*/ ctx[1] === undefined && !("callback" in props)) {
    			console.warn("<Alert> was created without expected prop 'callback'");
    		}
    	}

    	get params() {
    		throw new Error("<Alert>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Alert>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get callback() {
    		throw new Error("<Alert>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set callback(value) {
    		throw new Error("<Alert>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ActionButtons.svelte generated by Svelte v3.35.0 */

    const { console: console_1 } = globals;
    const file$1 = "src/components/ActionButtons.svelte";

    function create_fragment$2(ctx) {
    	let div4;
    	let div0;
    	let div0_title_value;
    	let div0_disabled_value;
    	let t0;
    	let div1;
    	let div1_title_value;
    	let t1;
    	let div2;
    	let div2_title_value;
    	let div2_disabled_value;
    	let t2;
    	let div3;
    	let div3_title_value;
    	let div3_disabled_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div2 = element("div");
    			t2 = space();
    			div3 = element("div");
    			attr_dev(div0, "class", "icon-back svelte-1d3smbs");
    			attr_dev(div0, "title", div0_title_value = /*$_*/ ctx[0]("sidemenu.actions.add"));
    			attr_dev(div0, "disabled", div0_disabled_value = !/*$historyCanGoBack*/ ctx[2]);
    			add_location(div0, file$1, 96, 2, 2965);
    			attr_dev(div1, "class", "icon-plus svelte-1d3smbs");
    			attr_dev(div1, "title", div1_title_value = /*$_*/ ctx[0]("sidemenu.actions.add"));
    			add_location(div1, file$1, 97, 2, 3076);
    			attr_dev(div2, "class", "icon-pencil svelte-1d3smbs");
    			attr_dev(div2, "title", div2_title_value = /*$_*/ ctx[0]("sidemenu.actions.edit"));
    			attr_dev(div2, "disabled", div2_disabled_value = /*$currentChapterKey*/ ctx[1] == "");
    			add_location(div2, file$1, 98, 2, 3154);
    			attr_dev(div3, "class", "icon-trash svelte-1d3smbs");
    			attr_dev(div3, "title", div3_title_value = /*$_*/ ctx[0]("sidemenu.actions.delete"));
    			attr_dev(div3, "disabled", div3_disabled_value = /*$currentChapterKey*/ ctx[1] == "");
    			add_location(div3, file$1, 99, 2, 3273);
    			attr_dev(div4, "class", "buttons svelte-1d3smbs");
    			add_location(div4, file$1, 95, 0, 2941);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div4, t0);
    			append_dev(div4, div1);
    			append_dev(div4, t1);
    			append_dev(div4, div2);
    			append_dev(div4, t2);
    			append_dev(div4, div3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", goBack, false, false, false),
    					listen_dev(div1, "click", /*add*/ ctx[3], false, false, false),
    					listen_dev(div2, "click", /*edit*/ ctx[4], false, false, false),
    					listen_dev(div3, "click", /*del*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$_*/ 1 && div0_title_value !== (div0_title_value = /*$_*/ ctx[0]("sidemenu.actions.add"))) {
    				attr_dev(div0, "title", div0_title_value);
    			}

    			if (dirty & /*$historyCanGoBack*/ 4 && div0_disabled_value !== (div0_disabled_value = !/*$historyCanGoBack*/ ctx[2])) {
    				attr_dev(div0, "disabled", div0_disabled_value);
    			}

    			if (dirty & /*$_*/ 1 && div1_title_value !== (div1_title_value = /*$_*/ ctx[0]("sidemenu.actions.add"))) {
    				attr_dev(div1, "title", div1_title_value);
    			}

    			if (dirty & /*$_*/ 1 && div2_title_value !== (div2_title_value = /*$_*/ ctx[0]("sidemenu.actions.edit"))) {
    				attr_dev(div2, "title", div2_title_value);
    			}

    			if (dirty & /*$currentChapterKey*/ 2 && div2_disabled_value !== (div2_disabled_value = /*$currentChapterKey*/ ctx[1] == "")) {
    				attr_dev(div2, "disabled", div2_disabled_value);
    			}

    			if (dirty & /*$_*/ 1 && div3_title_value !== (div3_title_value = /*$_*/ ctx[0]("sidemenu.actions.delete"))) {
    				attr_dev(div3, "title", div3_title_value);
    			}

    			if (dirty & /*$currentChapterKey*/ 2 && div3_disabled_value !== (div3_disabled_value = /*$currentChapterKey*/ ctx[1] == "")) {
    				attr_dev(div3, "disabled", div3_disabled_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $_;
    	let $currentChapterKey;
    	let $bookIndex;
    	let $showSidemenu;
    	let $historyCanGoBack;
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(0, $_ = $$value));
    	validate_store(currentChapterKey, "currentChapterKey");
    	component_subscribe($$self, currentChapterKey, $$value => $$invalidate(1, $currentChapterKey = $$value));
    	validate_store(bookIndex, "bookIndex");
    	component_subscribe($$self, bookIndex, $$value => $$invalidate(6, $bookIndex = $$value));
    	validate_store(showSidemenu, "showSidemenu");
    	component_subscribe($$self, showSidemenu, $$value => $$invalidate(7, $showSidemenu = $$value));
    	validate_store(historyCanGoBack, "historyCanGoBack");
    	component_subscribe($$self, historyCanGoBack, $$value => $$invalidate(2, $historyCanGoBack = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("ActionButtons", slots, []);

    	const add = async () => {
    		const result = await dialog(Chapter, $_("dialogs.chapter.add"), firstAvaiableKey(), {
    			title: "",
    			group: $currentChapterKey == ""
    			? ""
    			: $bookIndex.chapters.get($currentChapterKey).group || "",
    			flags: [],
    			text: ""
    		});

    		if (!result) return;
    		let { key, value } = result;
    		key = sanitizeKey(key);
    		value.group = sanitizeKey(value.group || "");
    		if (!key) return;

    		addChapter(key, generateChapterText({
    			spacelines: 2,
    			key,
    			title: value.title || "",
    			group: value.group,
    			flags: value.flags || []
    		}));

    		set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);
    		newBook.flush();
    		goToChapter(key);
    	};

    	const edit = async () => {
    		const cKey = $currentChapterKey;
    		if (cKey == "") return;
    		const result = await dialog(Chapter, $_("dialogs.chapter.edit"), cKey, $bookIndex.chapters.get(cKey));
    		if (!result) return;
    		let { key, value } = result;
    		key = sanitizeKey(key);
    		value.group = sanitizeKey(value.group || "");
    		if (!key) return;
    		const chapter = $bookIndex.chapters.get(cKey);
    		const content = getEditor().session.doc.getTextRange(new ace.Range(chapter.contentStart + 1, 0, chapter.contentEnd + 1, 0)).split("\n").filter(line => !(line.includes("[group]:<>") || line.includes("![flag-"))).join("\n").trim();
    		getEditor().session.replace(new ace.Range(chapter.start, 0, chapter.contentEnd + 1, 0), "");
    		newBook.flush();

    		addChapter(key, generateChapterText({
    			spacelines: 2,
    			key,
    			title: value.title || "",
    			group: value.group,
    			flags: value.flags || [],
    			content
    		}));

    		newBook.flush();
    		goToChapter(key);
    		set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);
    	};

    	const del = async () => {
    		const key = $currentChapterKey;
    		if (key == "") return;

    		if (await dialog(Confirm, $_("dialogs.confirm"), $_(`dialogs.chapter.delete`).replace("%1", key))) {
    			const chapter = $bookIndex.chapters.get(key);
    			console.log("maigd", chapter);
    			getEditor().session.replace(new ace.Range(chapter.start, 0, chapter.contentEnd + 1, 0), "");
    			set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);
    		}
    	};

    	ctrlShortcuts({
    		"R": () => add(),
    		"E": () => edit(),
    		"D": () => del()
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<ActionButtons> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		_: ee,
    		sanitizeKey,
    		bookIndex,
    		newBook,
    		currentChapterKey,
    		getEditor,
    		showSidemenu,
    		firstAvaiableKey,
    		addChapter,
    		generateChapterText,
    		historyCanGoBack,
    		goBack,
    		goToChapter,
    		ctrlShortcuts,
    		dialog,
    		Chapter,
    		Confirm,
    		Alert,
    		add,
    		edit,
    		del,
    		$_,
    		$currentChapterKey,
    		$bookIndex,
    		$showSidemenu,
    		$historyCanGoBack
    	});

    	return [$_, $currentChapterKey, $historyCanGoBack, add, edit, del];
    }

    class ActionButtons extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ActionButtons",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/components/Sidebar.svelte generated by Svelte v3.35.0 */
    const file = "src/components/Sidebar.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i][0];
    	child_ctx[18] = list[i][1];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	return child_ctx;
    }

    // (72:8) {#each [...($bookIndex.groups)] as group}
    function create_each_block_4(ctx) {
    	let option;
    	let t_value = /*group*/ ctx[23] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*group*/ ctx[23];
    			option.value = option.__value;
    			add_location(option, file, 72, 10, 1963);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$bookIndex*/ 4 && t_value !== (t_value = /*group*/ ctx[23] + "")) set_data_dev(t, t_value);

    			if (dirty & /*$bookIndex*/ 4 && option_value_value !== (option_value_value = /*group*/ ctx[23])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(72:8) {#each [...($bookIndex.groups)] as group}",
    		ctx
    	});

    	return block;
    }

    // (86:6) {#each chapter.flags || [] as flag}
    function create_each_block_3(ctx) {
    	let img;
    	let img_src_value;
    	let img_alt_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (img.src !== (img_src_value = `./static/img/flags/${/*flag*/ ctx[15]}.png`)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*flag*/ ctx[15]);
    			add_location(img, file, 86, 8, 2351);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$bookIndex*/ 4 && img.src !== (img_src_value = `./static/img/flags/${/*flag*/ ctx[15]}.png`)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*$bookIndex*/ 4 && img_alt_value !== (img_alt_value = /*flag*/ ctx[15])) {
    				attr_dev(img, "alt", img_alt_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(86:6) {#each chapter.flags || [] as flag}",
    		ctx
    	});

    	return block;
    }

    // (80:4) {#each [...($bookIndex.chapters)] as [key, chapter]}
    function create_each_block_2(ctx) {
    	let li;
    	let t0_value = /*key*/ ctx[12] + "";
    	let t0;
    	let t1;
    	let b;
    	let t2_value = (/*chapter*/ ctx[18].title || "") + "";
    	let t2;
    	let t3;
    	let t4;
    	let mounted;
    	let dispose;
    	let each_value_3 = /*chapter*/ ctx[18].flags || [];
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[8](/*key*/ ctx[12]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space();
    			b = element("b");
    			t2 = text(t2_value);
    			t3 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			attr_dev(b, "class", "svelte-1wxtqjx");
    			add_location(b, file, 84, 6, 2272);
    			attr_dev(li, "class", "svelte-1wxtqjx");
    			toggle_class(li, "selected", /*key*/ ctx[12] === /*$currentChapterKey*/ ctx[1]);
    			add_location(li, file, 80, 4, 2159);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			append_dev(li, b);
    			append_dev(b, t2);
    			append_dev(li, t3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(li, null);
    			}

    			append_dev(li, t4);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler_1, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*$bookIndex*/ 4 && t0_value !== (t0_value = /*key*/ ctx[12] + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$bookIndex*/ 4 && t2_value !== (t2_value = (/*chapter*/ ctx[18].title || "") + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*$bookIndex*/ 4) {
    				each_value_3 = /*chapter*/ ctx[18].flags || [];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(li, t4);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}

    			if (dirty & /*$bookIndex, $currentChapterKey*/ 6) {
    				toggle_class(li, "selected", /*key*/ ctx[12] === /*$currentChapterKey*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(80:4) {#each [...($bookIndex.chapters)] as [key, chapter]}",
    		ctx
    	});

    	return block;
    }

    // (100:6) {#each $bookIndex.chapters.get(key).flags || [] as flag}
    function create_each_block_1(ctx) {
    	let img;
    	let img_src_value;
    	let img_alt_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (img.src !== (img_src_value = `./static/img/flags/${/*flag*/ ctx[15]}.png`)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*flag*/ ctx[15]);
    			add_location(img, file, 100, 8, 2805);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$bookIndex, linksHere*/ 20 && img.src !== (img_src_value = `./static/img/flags/${/*flag*/ ctx[15]}.png`)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*$bookIndex, linksHere*/ 20 && img_alt_value !== (img_alt_value = /*flag*/ ctx[15])) {
    				attr_dev(img, "alt", img_alt_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(100:6) {#each $bookIndex.chapters.get(key).flags || [] as flag}",
    		ctx
    	});

    	return block;
    }

    // (94:4) {#each linksHere as key}
    function create_each_block(ctx) {
    	let li;
    	let t0_value = /*key*/ ctx[12] + "";
    	let t0;
    	let t1;
    	let b;
    	let t2_value = (/*$bookIndex*/ ctx[2].chapters.get(/*key*/ ctx[12]).title || "") + "";
    	let t2;
    	let t3;
    	let t4;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*$bookIndex*/ ctx[2].chapters.get(/*key*/ ctx[12]).flags || [];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[9](/*key*/ ctx[12]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space();
    			b = element("b");
    			t2 = text(t2_value);
    			t3 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			attr_dev(b, "class", "svelte-1wxtqjx");
    			add_location(b, file, 98, 6, 2684);
    			attr_dev(li, "class", "svelte-1wxtqjx");
    			toggle_class(li, "selected", /*key*/ ctx[12] === /*$currentChapterKey*/ ctx[1]);
    			add_location(li, file, 94, 4, 2571);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t0);
    			append_dev(li, t1);
    			append_dev(li, b);
    			append_dev(b, t2);
    			append_dev(li, t3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(li, null);
    			}

    			append_dev(li, t4);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", click_handler_2, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*linksHere*/ 16 && t0_value !== (t0_value = /*key*/ ctx[12] + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$bookIndex, linksHere*/ 20 && t2_value !== (t2_value = (/*$bookIndex*/ ctx[2].chapters.get(/*key*/ ctx[12]).title || "") + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*$bookIndex, linksHere*/ 20) {
    				each_value_1 = /*$bookIndex*/ ctx[2].chapters.get(/*key*/ ctx[12]).flags || [];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(li, t4);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty & /*linksHere, $currentChapterKey*/ 18) {
    				toggle_class(li, "selected", /*key*/ ctx[12] === /*$currentChapterKey*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(94:4) {#each linksHere as key}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let div;
    	let div_class_value;
    	let t0;
    	let aside;
    	let h10;
    	let span;
    	let select;
    	let option;
    	let t1_value = /*$_*/ ctx[5]("sidemenu.allgroup") + "";
    	let t1;
    	let t2;
    	let actionbuttons;
    	let t3;
    	let ul0;
    	let t4;
    	let h11;
    	let t5_value = /*$_*/ ctx[5]("sidemenu.linkshere") + "";
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let ul1;
    	let aside_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_4 = [.../*$bookIndex*/ ctx[2].groups];
    	validate_each_argument(each_value_4);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks_2[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	actionbuttons = new ActionButtons({ $$inline: true });
    	let each_value_2 = [.../*$bookIndex*/ ctx[2].chapters];
    	validate_each_argument(each_value_2);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let each_value = /*linksHere*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = space();
    			aside = element("aside");
    			h10 = element("h1");
    			span = element("span");
    			select = element("select");
    			option = element("option");
    			t1 = text(t1_value);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t2 = space();
    			create_component(actionbuttons.$$.fragment);
    			t3 = space();
    			ul0 = element("ul");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t4 = space();
    			h11 = element("h1");
    			t5 = text(t5_value);
    			t6 = space();
    			t7 = text(/*$currentChapterKey*/ ctx[1]);
    			t8 = text(":");
    			t9 = space();
    			ul1 = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(`mask ${/*$showSidemenu*/ ctx[3] ? "foreground" : ""}`) + " svelte-1wxtqjx"));
    			add_location(div, file, 60, 0, 1591);
    			option.__value = "allgroupidtag";
    			option.value = option.__value;
    			add_location(option, file, 70, 8, 1838);
    			attr_dev(select, "class", "svelte-1wxtqjx");
    			if (/*selectedGroup*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[7].call(select));
    			add_location(select, file, 69, 6, 1794);
    			attr_dev(span, "class", "select-dropdown");
    			add_location(span, file, 68, 4, 1757);
    			attr_dev(h10, "class", "svelte-1wxtqjx");
    			add_location(h10, file, 67, 2, 1748);
    			attr_dev(ul0, "class", "chapters svelte-1wxtqjx");
    			add_location(ul0, file, 78, 2, 2076);
    			attr_dev(h11, "class", "svelte-1wxtqjx");
    			add_location(h11, file, 91, 2, 2454);
    			attr_dev(ul1, "class", "links-here svelte-1wxtqjx");
    			add_location(ul1, file, 92, 2, 2514);
    			attr_dev(aside, "class", aside_class_value = "" + (null_to_empty(/*$showSidemenu*/ ctx[3] ? "foreground" : "") + " svelte-1wxtqjx"));
    			add_location(aside, file, 66, 0, 1696);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, aside, anchor);
    			append_dev(aside, h10);
    			append_dev(h10, span);
    			append_dev(span, select);
    			append_dev(select, option);
    			append_dev(option, t1);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(select, null);
    			}

    			select_option(select, /*selectedGroup*/ ctx[0]);
    			append_dev(aside, t2);
    			mount_component(actionbuttons, aside, null);
    			append_dev(aside, t3);
    			append_dev(aside, ul0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(ul0, null);
    			}

    			append_dev(aside, t4);
    			append_dev(aside, h11);
    			append_dev(h11, t5);
    			append_dev(h11, t6);
    			append_dev(h11, t7);
    			append_dev(h11, t8);
    			append_dev(aside, t9);
    			append_dev(aside, ul1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", /*click_handler*/ ctx[6], false, false, false),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[7])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*$showSidemenu*/ 8 && div_class_value !== (div_class_value = "" + (null_to_empty(`mask ${/*$showSidemenu*/ ctx[3] ? "foreground" : ""}`) + " svelte-1wxtqjx"))) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if ((!current || dirty & /*$_*/ 32) && t1_value !== (t1_value = /*$_*/ ctx[5]("sidemenu.allgroup") + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*$bookIndex*/ 4) {
    				each_value_4 = [.../*$bookIndex*/ ctx[2].groups];
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_4(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_4.length;
    			}

    			if (dirty & /*selectedGroup, $bookIndex*/ 5) {
    				select_option(select, /*selectedGroup*/ ctx[0]);
    			}

    			if (dirty & /*$bookIndex, $currentChapterKey, goToChapter*/ 6) {
    				each_value_2 = [.../*$bookIndex*/ ctx[2].chapters];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(ul0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_2.length;
    			}

    			if ((!current || dirty & /*$_*/ 32) && t5_value !== (t5_value = /*$_*/ ctx[5]("sidemenu.linkshere") + "")) set_data_dev(t5, t5_value);
    			if (!current || dirty & /*$currentChapterKey*/ 2) set_data_dev(t7, /*$currentChapterKey*/ ctx[1]);

    			if (dirty & /*linksHere, $currentChapterKey, goToChapter, $bookIndex*/ 22) {
    				each_value = /*linksHere*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty & /*$showSidemenu*/ 8 && aside_class_value !== (aside_class_value = "" + (null_to_empty(/*$showSidemenu*/ ctx[3] ? "foreground" : "") + " svelte-1wxtqjx"))) {
    				attr_dev(aside, "class", aside_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(actionbuttons.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(actionbuttons.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(aside);
    			destroy_each(each_blocks_2, detaching);
    			destroy_component(actionbuttons);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let filterChapters;
    	let linksHere;
    	let $currentChapterKey;
    	let $bookIndex;
    	let $showSidemenu;
    	let $_;
    	validate_store(currentChapterKey, "currentChapterKey");
    	component_subscribe($$self, currentChapterKey, $$value => $$invalidate(1, $currentChapterKey = $$value));
    	validate_store(bookIndex, "bookIndex");
    	component_subscribe($$self, bookIndex, $$value => $$invalidate(2, $bookIndex = $$value));
    	validate_store(showSidemenu, "showSidemenu");
    	component_subscribe($$self, showSidemenu, $$value => $$invalidate(3, $showSidemenu = $$value));
    	validate_store(ee, "_");
    	component_subscribe($$self, ee, $$value => $$invalidate(5, $_ = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Sidebar", slots, []);
    	let selectedGroup = "allgroupidtag";

    	const setBookKey = key => {
    		book.update(() => ({ key }));
    		set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Sidebar> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => set_store_value(showSidemenu, $showSidemenu = false, $showSidemenu);

    	function select_change_handler() {
    		selectedGroup = select_value(this);
    		($$invalidate(0, selectedGroup), $$invalidate(2, $bookIndex));
    	}

    	const click_handler_1 = key => goToChapter(key);
    	const click_handler_2 = key => goToChapter(key);

    	$$self.$capture_state = () => ({
    		_: ee,
    		tick,
    		bookIndex,
    		currentChapterKey,
    		goToChapter,
    		scrollIntoView: smoothScrollIntoView,
    		showSidemenu,
    		ActionButtons,
    		selectedGroup,
    		setBookKey,
    		$currentChapterKey,
    		filterChapters,
    		$bookIndex,
    		$showSidemenu,
    		linksHere,
    		$_
    	});

    	$$self.$inject_state = $$props => {
    		if ("selectedGroup" in $$props) $$invalidate(0, selectedGroup = $$props.selectedGroup);
    		if ("filterChapters" in $$props) filterChapters = $$props.filterChapters;
    		if ("linksHere" in $$props) $$invalidate(4, linksHere = $$props.linksHere);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$currentChapterKey*/ 2) {
    			{
    				if ($currentChapterKey != "") {
    					(async () => {
    						await tick();

    						try {
    							smoothScrollIntoView(document.querySelector("aside ul.chapters li.selected"), {
    								behavior: "smooth",
    								scrollMode: "if-needed"
    							});
    						} catch(e) {
    							
    						}
    					})();
    				} else {
    					(async () => {
    						await tick();

    						try {
    							smoothScrollIntoView(document.querySelector("aside ul.chapters li"), {
    								behavior: "smooth",
    								scrollMode: "if-needed"
    							});
    						} catch(e) {
    							
    						}
    					})();
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*$bookIndex, selectedGroup*/ 5) {
    			{
    				if (![...$bookIndex.groups, "allgroupidtag"].includes(selectedGroup)) {
    					$$invalidate(0, selectedGroup = "allgroupidtag");
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*$bookIndex, selectedGroup*/ 5) {
    			filterChapters = [...$bookIndex.chapters].filter(([key, chapter]) => {
    				if (!selectedGroup || selectedGroup == "allgroupidtag") return true;
    				const group = chapter.group;
    				return group && group == selectedGroup;
    			});
    		}

    		if ($$self.$$.dirty & /*$bookIndex, $currentChapterKey*/ 6) {
    			// Regex per matchare i link in markdown
    			$$invalidate(4, linksHere = [...$bookIndex.linksToChapter.get($currentChapterKey) || new Set()]);
    		}
    	};

    	return [
    		selectedGroup,
    		$currentChapterKey,
    		$bookIndex,
    		$showSidemenu,
    		linksHere,
    		$_,
    		click_handler,
    		select_change_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class Sidebar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sidebar",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.35.0 */

    function create_fragment(ctx) {
    	let dialogs;
    	let t0;
    	let navbar;
    	let t1;
    	let sidebar;
    	let t2;
    	let editor;
    	let current;
    	let mounted;
    	let dispose;
    	dialogs = new Dialogs({ $$inline: true });
    	navbar = new Navbar({ $$inline: true });
    	sidebar = new Sidebar({ $$inline: true });
    	editor = new Editor({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(dialogs.$$.fragment);
    			t0 = space();
    			create_component(navbar.$$.fragment);
    			t1 = space();
    			create_component(sidebar.$$.fragment);
    			t2 = space();
    			create_component(editor.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(dialogs, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(navbar, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(sidebar, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(editor, target, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window, "keydown", handleShortcuts, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dialogs.$$.fragment, local);
    			transition_in(navbar.$$.fragment, local);
    			transition_in(sidebar.$$.fragment, local);
    			transition_in(editor.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dialogs.$$.fragment, local);
    			transition_out(navbar.$$.fragment, local);
    			transition_out(sidebar.$$.fragment, local);
    			transition_out(editor.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dialogs, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(navbar, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(sidebar, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(editor, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $bookIndex;
    	validate_store(bookIndex, "bookIndex");
    	component_subscribe($$self, bookIndex, $$value => $$invalidate(0, $bookIndex = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Dialogs,
    		Navbar,
    		Editor,
    		Sidebar,
    		bookIndex,
    		handleShortcuts,
    		$bookIndex
    	});

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$bookIndex*/ 1) {
    			{
    				if (!(/bot|google|baidu|bing|msn|duckduckbot|teoma|slurp|yandex/i).test(navigator.userAgent)) {
    					if ($bookIndex && $bookIndex.properties.title) {
    						document.title = $bookIndex.properties.title + " - Magebook";
    					}
    				}
    			}
    		}
    	};

    	return [$bookIndex];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const dialogs$1 = {
    	confirm: "Confirm?",
    	error: "Error",
    	ok: "Ok",
    	cancel: "Cancel",
    	chapter: {
    		add: "Add chapter",
    		edit: "Edit chapter",
    		"delete": "Chapter “%1” will be deleted",
    		exists: "Chapter already exists",
    		name: "Key*",
    		title: "Title",
    		group: "Group*",
    		hint: "*Key and Group should contain only alphanumeric characters (a-z,A-Z,0-9)"
    	},
    	newbook: {
    		"new": "Create a New Book",
    		title: "Title",
    		author: "Author",
    		hint: "<b>Warning:</b> current book will be overwritten if not saved."
    	},
    	newfirebook: {
    		"new": "Create or load a New Book",
    		book: "Book name",
    		getStarted: "Con questa funzione puoi collegare Magebook al tuo account Google, così da creare libri che si possono modificare in simultanea, proprio come i Documenti Google.<br>Prima di iniziare, dovrai collegare Magebook al tuo account <a href=\"../docs/it/index.html#/?id=progetti-collaborativi\">seguendo questa guida</a>."
    	},
    	shuffle: {
    		title: "Shuffle",
    		hint: "Shuffle chapters with numeric key. You may choose to shuffle only chapters belonging to some groups, or to exclude chapters based on their flags.",
    		group: "Group filter",
    		flags: "Exclude flags"
    	},
    	lock: {
    		title: "Warning",
    		text: "Another tab has written changes on this session. If you overwrite, those changes will be lost. You can open a new session instead, and recover the other session with the <b>File -> Recover session</b> tool.",
    		"new": "Open in new session",
    		overwrite: "Overwrite"
    	},
    	graph: {
    		loading: "Loading graph...",
    		open: "Open in new tab"
    	}
    };
    const navbar$1 = {
    	file: {
    		title: "File",
    		"new": "New",
    		newFire: "New collaborative",
    		share: "Share",
    		open: "Open...",
    		save: "Save",
    		recover: "Recover session"
    	},
    	book: {
    		title: "Book",
    		graph: "View graph",
    		shuffle: "Shuffle"
    	},
    	"export": {
    		title: "Export",
    		docx: "Word (.docx)",
    		fodt: "Libreoffice (.fodt)",
    		xlgc: "LibroGameCreator 3",
    		json: "Json",
    		vuejs: "Vue.js"
    	},
    	help: {
    		title: "Help",
    		guide: "Guide",
    		guidefile: "https://librogamesland.github.io/magebook",
    		forum: "Lgl forum",
    		about: "About"
    	}
    };
    const sidemenu$1 = {
    	toggle: "Toggle sidemenu",
    	chapters: "Chapters",
    	allgroup: "All chapters",
    	linkshere: "Links to",
    	actions: {
    		goback: "Go back",
    		add: "Add entity (ctrl+R)",
    		edit: "Edit entity (ctrl+E)",
    		"delete": "Delete entity (ctrl+D)"
    	}
    };
    const editor$1 = {
    	buttons: {
    		find: "Find (ctrl+F)",
    		undo: "Undo last change (ctrl+Z)",
    		redo: "Redo last change (ctrl+shift+Z)",
    		quicklink: "Link to the first avaiable chapter (ctrl+K)",
    		link: "Add link (ctrl+L)"
    	}
    };
    const about$1 = {
    	contact: "Contact me",
    	text: "Magebook is a gamebook web editor developed by <b>Luca Fabbian</b> with support of Lgl community,\ninspired by LibroGameCreator3 by <b>Matteo Poropat</b>."
    };
    const books$1 = {
    	local: "# Book title\nauthor: Name and Surname\n\n\n### 1\nChapter example. You may edit this chapter thanks to the buttons on the right sidemenu.\nThis is a link going to [](#2). Links are done with [Text](#chapter), where text may be blank (it will be filled automagically).\n\n\n### Chapter with a long title {#2}\nThis is the second chapter. Chapters may include *italic* or **bold** text.\n",
    	fire: "# %1\nauthor: Name and Surname\n\n\n### 1\nQuesto è un libro collaborativo memorizzato sul tuo account Google e che può essere modificato da più persone contemporaneamente. Salva questa pagina fra i segnalibri del tuo browser e inviala a chi vuoi, vedrai le modifiche sincronizzate in tempo reale.\n"
    };
    var en = {
    	dialogs: dialogs$1,
    	navbar: navbar$1,
    	sidemenu: sidemenu$1,
    	editor: editor$1,
    	about: about$1,
    	books: books$1
    };

    const dialogs = {
    	confirm: "Confermi?",
    	error: "Errore",
    	ok: "Ok",
    	cancel: "Annulla",
    	chapter: {
    		add: "Aggiungi paragrafo",
    		edit: "Modifica paragrafo",
    		"delete": "Il paragrafo “%1” verrà eliminato",
    		exist: "Questo paragrafo esiste già",
    		name: "Key*",
    		title: "Titolo",
    		group: "Gruppo*",
    		hint: "*Key e Gruppo dovrebbero contenere solo caratteri alfanumerici (a-z, A-Z, 0-9)"
    	},
    	newbook: {
    		"new": "Crea un nuovo Libro",
    		title: "Titolo",
    		author: "Autore",
    		hint: "<b>Attenzione:</b> il libro attuale verrà sovrascritto se non salvato."
    	},
    	newfirebook: {
    		"new": "Crea o accedi a un Libro Collaborativo",
    		book: "Nome libro",
    		getStarted: "Con questa funzione puoi collegare Magebook al tuo account Google, così da creare libri che si possono modificare in simultanea, proprio come i Documenti Google.<br>Prima di iniziare, dovrai collegare Magebook al tuo account <a target=\"_blank\" href=\"../docs/it/index.html#/?id=progetti-collaborativi\">seguendo questa guida</a>."
    	},
    	shuffle: {
    		title: "Rimescola",
    		hint: "Rimescola i paragrafi con chiave numerica. Puoi scegliere di mescolare solo i paragrafi che fanno parte di alcuni gruppi, o di escludere i paragrafi con determinati simboli.",
    		group: "Filtro gruppi",
    		flags: "Escludi simboli"
    	},
    	lock: {
    		title: "Attenzione",
    		text: "Un'altra tab ha modificato i dati di questa sessione. Se sovrascrivi, quei cambiamenti verranno persi. Se vuoi mantenere entrambe le versioni, puoi creare una nuova sessione e recuperare quella vecchia con <b>File -> Recupera sessione</b>.",
    		"new": "Apri nuova sessione",
    		overwrite: "Sovrascrivi"
    	},
    	graph: {
    		loading: "Caricamento grafo...",
    		open: "Apri un una nuova pagina"
    	}
    };
    const navbar = {
    	file: {
    		title: "File",
    		"new": "Nuovo",
    		newFire: "Nuovo collaborativo",
    		share: "Condividi",
    		open: "Apri...",
    		save: "Salva",
    		recover: "Recupera sessione"
    	},
    	book: {
    		title: "Libro",
    		graph: "Visualizza grafico",
    		shuffle: "Rimescola"
    	},
    	"export": {
    		title: "Esporta",
    		docx: "Word (.docx)",
    		fodt: "Libreoffice (.fodt)",
    		xlgc: "LibroGameCreator 3",
    		json: "Json",
    		vuejs: "Vue.js"
    	},
    	help: {
    		title: "Aiuto",
    		guide: "Guida",
    		guidefile: "https://librogamesland.github.io/magebook",
    		forum: "Forum Lgl",
    		about: "Info"
    	}
    };
    const sidemenu = {
    	toggle: "Apri menu laterale",
    	chapters: "Paragrafi",
    	allgroup: "Tutti i paragrafi",
    	linkshere: "Link al par.",
    	actions: {
    		goback: "Vai indietro",
    		add: "Aggiungi entità (ctrl+R)",
    		edit: "Modifica entità (ctrl+E)",
    		"delete": "Elimina entità (ctrl+D)"
    	}
    };
    const editor = {
    	buttons: {
    		find: "Cerca (ctrl+F)",
    		undo: "Annulla ultimo cambiamento (ctrl+Z)",
    		redo: "Ripristina ultimo cambiamento (ctrl+shift+Z)",
    		quicklink: "Link al primo paragrafo disponibile (ctrl+K)",
    		link: "Aggiungi link (ctrl+L)"
    	}
    };
    const about = {
    	contact: "Contattami",
    	text: "Magebook è un editor di librogame sviluppato da <b>Luca Fabbian</b> con il supporto della community di Lgl,\nispirato a LibroGameCreator3 di <b>Matteo Poropat</b>."
    };
    const books = {
    	local: "# Titolo\nauthor: Nome e Cognome\n\n\n### 1\nEsempio di paragrafo. Puoi modificarlo sfruttando i tasti a destra.\nQuesto è un link verso il paragrafo [](#2). I link sono nel formato [Testo](#paragrafo), dove Testo è opzionale.\n\n\n### Paragrafo con titolo {#2}\nQuesto è il secondo paragrafo. I paragrafi possono contenere anche testo in *corsivo* o **grassetto**.\n",
    	fire: "# %1\nauthor: Nome e Cognome\n\n\n### 1\nQuesto è un libro collaborativo memorizzato sul tuo account Google e che può essere modificato da più persone contemporaneamente. Salva questa pagina fra i segnalibri del tuo browser e inviala a chi vuoi, vedrai le modifiche sincronizzate in tempo reale.\n"
    };
    var it = {
    	dialogs,
    	navbar,
    	sidemenu,
    	editor,
    	about,
    	books
    };

    /* Punto d'ingresso dell'applicazione
     Importa App.svelte, aggiunge supporto multilingua e offline
     @Luca Fabbian - v1.0 */

    const locale = z().split('-')[0];
    m('en', en);
    m('it', it);
    k({ fallbackLocale: 'en', initialLocale: locale });  



    // Offline support
    if ('serviceWorker' in navigator) {
      // Use the window load event to keep the page load performant
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('./sw.js');
      });
    }

    new App({
      target: document.body,
    });

}());
//# sourceMappingURL=bundle.js.map
